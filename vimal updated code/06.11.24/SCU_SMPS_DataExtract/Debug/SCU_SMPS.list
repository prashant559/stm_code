
SCU_SMPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000121d4  08000250  08000250  00001250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  08012428  08012428  00013428  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080128f8  080128f8  00014200  2**0
                  CONTENTS
  4 .ARM          00000008  080128f8  080128f8  000138f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012900  08012900  00014200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012900  08012900  00013900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012904  08012904  00013904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08012908  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005c1c  20000200  08012b08  00014200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005e1c  08012b08  00014e1c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00014200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b494  00000000  00000000  00014236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003430  00000000  00000000  0002f6ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  00032b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d91  00000000  00000000  00033c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00034afd  00000000  00000000  000349e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b5b4  00000000  00000000  000694de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001419cb  00000000  00000000  00084a92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c645d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005960  00000000  00000000  001c64a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  001cbe00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000200 	.word	0x20000200
 800026c:	00000000 	.word	0x00000000
 8000270:	0801240c 	.word	0x0801240c

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000204 	.word	0x20000204
 800028c:	0801240c 	.word	0x0801240c

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b97e 	b.w	8000f7c <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c9c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000c9e:	460c      	mov	r4, r1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d14d      	bne.n	8000d40 <__udivmoddi4+0xa8>
 8000ca4:	428a      	cmp	r2, r1
 8000ca6:	460f      	mov	r7, r1
 8000ca8:	4684      	mov	ip, r0
 8000caa:	4696      	mov	lr, r2
 8000cac:	fab2 f382 	clz	r3, r2
 8000cb0:	d960      	bls.n	8000d74 <__udivmoddi4+0xdc>
 8000cb2:	b14b      	cbz	r3, 8000cc8 <__udivmoddi4+0x30>
 8000cb4:	fa02 fe03 	lsl.w	lr, r2, r3
 8000cb8:	f1c3 0220 	rsb	r2, r3, #32
 8000cbc:	409f      	lsls	r7, r3
 8000cbe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000cc2:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc6:	4317      	orrs	r7, r2
 8000cc8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000ccc:	fa1f f48e 	uxth.w	r4, lr
 8000cd0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000cd4:	fbb7 f1f6 	udiv	r1, r7, r6
 8000cd8:	fb06 7711 	mls	r7, r6, r1, r7
 8000cdc:	fb01 f004 	mul.w	r0, r1, r4
 8000ce0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ce4:	4290      	cmp	r0, r2
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce8:	eb1e 0202 	adds.w	r2, lr, r2
 8000cec:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cf0:	d202      	bcs.n	8000cf8 <__udivmoddi4+0x60>
 8000cf2:	4290      	cmp	r0, r2
 8000cf4:	f200 812d 	bhi.w	8000f52 <__udivmoddi4+0x2ba>
 8000cf8:	4639      	mov	r1, r7
 8000cfa:	1a12      	subs	r2, r2, r0
 8000cfc:	fa1f fc8c 	uxth.w	ip, ip
 8000d00:	fbb2 f0f6 	udiv	r0, r2, r6
 8000d04:	fb06 2210 	mls	r2, r6, r0, r2
 8000d08:	fb00 f404 	mul.w	r4, r0, r4
 8000d0c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000d10:	4564      	cmp	r4, ip
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x8e>
 8000d14:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x8c>
 8000d1e:	4564      	cmp	r4, ip
 8000d20:	f200 811a 	bhi.w	8000f58 <__udivmoddi4+0x2c0>
 8000d24:	4610      	mov	r0, r2
 8000d26:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2a:	ebac 0c04 	sub.w	ip, ip, r4
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b125      	cbz	r5, 8000d3c <__udivmoddi4+0xa4>
 8000d32:	fa2c f303 	lsr.w	r3, ip, r3
 8000d36:	2200      	movs	r2, #0
 8000d38:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d40:	428b      	cmp	r3, r1
 8000d42:	d905      	bls.n	8000d50 <__udivmoddi4+0xb8>
 8000d44:	b10d      	cbz	r5, 8000d4a <__udivmoddi4+0xb2>
 8000d46:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e7f5      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000d50:	fab3 f183 	clz	r1, r3
 8000d54:	2900      	cmp	r1, #0
 8000d56:	d14d      	bne.n	8000df4 <__udivmoddi4+0x15c>
 8000d58:	42a3      	cmp	r3, r4
 8000d5a:	f0c0 80f2 	bcc.w	8000f42 <__udivmoddi4+0x2aa>
 8000d5e:	4290      	cmp	r0, r2
 8000d60:	f080 80ef 	bcs.w	8000f42 <__udivmoddi4+0x2aa>
 8000d64:	4606      	mov	r6, r0
 8000d66:	4623      	mov	r3, r4
 8000d68:	4608      	mov	r0, r1
 8000d6a:	2d00      	cmp	r5, #0
 8000d6c:	d0e6      	beq.n	8000d3c <__udivmoddi4+0xa4>
 8000d6e:	e9c5 6300 	strd	r6, r3, [r5]
 8000d72:	e7e3      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	f040 80a2 	bne.w	8000ebe <__udivmoddi4+0x226>
 8000d7a:	1a8a      	subs	r2, r1, r2
 8000d7c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000d80:	fa1f f68e 	uxth.w	r6, lr
 8000d84:	2101      	movs	r1, #1
 8000d86:	fbb2 f4f7 	udiv	r4, r2, r7
 8000d8a:	fb07 2014 	mls	r0, r7, r4, r2
 8000d8e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d96:	fb06 f004 	mul.w	r0, r6, r4
 8000d9a:	4290      	cmp	r0, r2
 8000d9c:	d90f      	bls.n	8000dbe <__udivmoddi4+0x126>
 8000d9e:	eb1e 0202 	adds.w	r2, lr, r2
 8000da2:	f104 38ff 	add.w	r8, r4, #4294967295
 8000da6:	bf2c      	ite	cs
 8000da8:	f04f 0901 	movcs.w	r9, #1
 8000dac:	f04f 0900 	movcc.w	r9, #0
 8000db0:	4290      	cmp	r0, r2
 8000db2:	d903      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000db4:	f1b9 0f00 	cmp.w	r9, #0
 8000db8:	f000 80c8 	beq.w	8000f4c <__udivmoddi4+0x2b4>
 8000dbc:	4644      	mov	r4, r8
 8000dbe:	1a12      	subs	r2, r2, r0
 8000dc0:	fa1f fc8c 	uxth.w	ip, ip
 8000dc4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dc8:	fb07 2210 	mls	r2, r7, r0, r2
 8000dcc:	fb00 f606 	mul.w	r6, r0, r6
 8000dd0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000dd4:	4566      	cmp	r6, ip
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x152>
 8000dd8:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000ddc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de0:	d202      	bcs.n	8000de8 <__udivmoddi4+0x150>
 8000de2:	4566      	cmp	r6, ip
 8000de4:	f200 80bb 	bhi.w	8000f5e <__udivmoddi4+0x2c6>
 8000de8:	4610      	mov	r0, r2
 8000dea:	ebac 0c06 	sub.w	ip, ip, r6
 8000dee:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000df2:	e79d      	b.n	8000d30 <__udivmoddi4+0x98>
 8000df4:	f1c1 0620 	rsb	r6, r1, #32
 8000df8:	408b      	lsls	r3, r1
 8000dfa:	fa04 fe01 	lsl.w	lr, r4, r1
 8000dfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000e02:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e06:	40f4      	lsrs	r4, r6
 8000e08:	408a      	lsls	r2, r1
 8000e0a:	431f      	orrs	r7, r3
 8000e0c:	ea4e 030c 	orr.w	r3, lr, ip
 8000e10:	fa00 fe01 	lsl.w	lr, r0, r1
 8000e14:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e18:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e1c:	fa1f fc87 	uxth.w	ip, r7
 8000e20:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e24:	fb08 4410 	mls	r4, r8, r0, r4
 8000e28:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e2c:	fb00 f90c 	mul.w	r9, r0, ip
 8000e30:	45a1      	cmp	r9, r4
 8000e32:	d90e      	bls.n	8000e52 <__udivmoddi4+0x1ba>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e3a:	bf2c      	ite	cs
 8000e3c:	f04f 0b01 	movcs.w	fp, #1
 8000e40:	f04f 0b00 	movcc.w	fp, #0
 8000e44:	45a1      	cmp	r9, r4
 8000e46:	d903      	bls.n	8000e50 <__udivmoddi4+0x1b8>
 8000e48:	f1bb 0f00 	cmp.w	fp, #0
 8000e4c:	f000 8093 	beq.w	8000f76 <__udivmoddi4+0x2de>
 8000e50:	4650      	mov	r0, sl
 8000e52:	eba4 0409 	sub.w	r4, r4, r9
 8000e56:	fa1f f983 	uxth.w	r9, r3
 8000e5a:	fbb4 f3f8 	udiv	r3, r4, r8
 8000e5e:	fb08 4413 	mls	r4, r8, r3, r4
 8000e62:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e66:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e6a:	45a4      	cmp	ip, r4
 8000e6c:	d906      	bls.n	8000e7c <__udivmoddi4+0x1e4>
 8000e6e:	193c      	adds	r4, r7, r4
 8000e70:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e74:	d201      	bcs.n	8000e7a <__udivmoddi4+0x1e2>
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d87a      	bhi.n	8000f70 <__udivmoddi4+0x2d8>
 8000e7a:	4643      	mov	r3, r8
 8000e7c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e80:	eba4 040c 	sub.w	r4, r4, ip
 8000e84:	fba0 9802 	umull	r9, r8, r0, r2
 8000e88:	4544      	cmp	r4, r8
 8000e8a:	46cc      	mov	ip, r9
 8000e8c:	4643      	mov	r3, r8
 8000e8e:	d302      	bcc.n	8000e96 <__udivmoddi4+0x1fe>
 8000e90:	d106      	bne.n	8000ea0 <__udivmoddi4+0x208>
 8000e92:	45ce      	cmp	lr, r9
 8000e94:	d204      	bcs.n	8000ea0 <__udivmoddi4+0x208>
 8000e96:	3801      	subs	r0, #1
 8000e98:	ebb9 0c02 	subs.w	ip, r9, r2
 8000e9c:	eb68 0307 	sbc.w	r3, r8, r7
 8000ea0:	b15d      	cbz	r5, 8000eba <__udivmoddi4+0x222>
 8000ea2:	ebbe 020c 	subs.w	r2, lr, ip
 8000ea6:	eb64 0403 	sbc.w	r4, r4, r3
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	fa22 f301 	lsr.w	r3, r2, r1
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	431e      	orrs	r6, r3
 8000eb6:	e9c5 6400 	strd	r6, r4, [r5]
 8000eba:	2100      	movs	r1, #0
 8000ebc:	e73e      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000ebe:	fa02 fe03 	lsl.w	lr, r2, r3
 8000ec2:	f1c3 0120 	rsb	r1, r3, #32
 8000ec6:	fa04 f203 	lsl.w	r2, r4, r3
 8000eca:	fa00 fc03 	lsl.w	ip, r0, r3
 8000ece:	40cc      	lsrs	r4, r1
 8000ed0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000ed4:	fa20 f101 	lsr.w	r1, r0, r1
 8000ed8:	fa1f f68e 	uxth.w	r6, lr
 8000edc:	fbb4 f0f7 	udiv	r0, r4, r7
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	fb07 4410 	mls	r4, r7, r0, r4
 8000ee6:	0c11      	lsrs	r1, r2, #16
 8000ee8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000eec:	fb00 f406 	mul.w	r4, r0, r6
 8000ef0:	428c      	cmp	r4, r1
 8000ef2:	d90e      	bls.n	8000f12 <__udivmoddi4+0x27a>
 8000ef4:	eb1e 0101 	adds.w	r1, lr, r1
 8000ef8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000efc:	bf2c      	ite	cs
 8000efe:	f04f 0901 	movcs.w	r9, #1
 8000f02:	f04f 0900 	movcc.w	r9, #0
 8000f06:	428c      	cmp	r4, r1
 8000f08:	d902      	bls.n	8000f10 <__udivmoddi4+0x278>
 8000f0a:	f1b9 0f00 	cmp.w	r9, #0
 8000f0e:	d02c      	beq.n	8000f6a <__udivmoddi4+0x2d2>
 8000f10:	4640      	mov	r0, r8
 8000f12:	1b09      	subs	r1, r1, r4
 8000f14:	b292      	uxth	r2, r2
 8000f16:	fbb1 f4f7 	udiv	r4, r1, r7
 8000f1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000f1e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f22:	fb04 f106 	mul.w	r1, r4, r6
 8000f26:	4291      	cmp	r1, r2
 8000f28:	d907      	bls.n	8000f3a <__udivmoddi4+0x2a2>
 8000f2a:	eb1e 0202 	adds.w	r2, lr, r2
 8000f2e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000f32:	d201      	bcs.n	8000f38 <__udivmoddi4+0x2a0>
 8000f34:	4291      	cmp	r1, r2
 8000f36:	d815      	bhi.n	8000f64 <__udivmoddi4+0x2cc>
 8000f38:	4644      	mov	r4, r8
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000f40:	e721      	b.n	8000d86 <__udivmoddi4+0xee>
 8000f42:	1a86      	subs	r6, r0, r2
 8000f44:	eb64 0303 	sbc.w	r3, r4, r3
 8000f48:	2001      	movs	r0, #1
 8000f4a:	e70e      	b.n	8000d6a <__udivmoddi4+0xd2>
 8000f4c:	3c02      	subs	r4, #2
 8000f4e:	4472      	add	r2, lr
 8000f50:	e735      	b.n	8000dbe <__udivmoddi4+0x126>
 8000f52:	3902      	subs	r1, #2
 8000f54:	4472      	add	r2, lr
 8000f56:	e6d0      	b.n	8000cfa <__udivmoddi4+0x62>
 8000f58:	44f4      	add	ip, lr
 8000f5a:	3802      	subs	r0, #2
 8000f5c:	e6e3      	b.n	8000d26 <__udivmoddi4+0x8e>
 8000f5e:	44f4      	add	ip, lr
 8000f60:	3802      	subs	r0, #2
 8000f62:	e742      	b.n	8000dea <__udivmoddi4+0x152>
 8000f64:	3c02      	subs	r4, #2
 8000f66:	4472      	add	r2, lr
 8000f68:	e7e7      	b.n	8000f3a <__udivmoddi4+0x2a2>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4471      	add	r1, lr
 8000f6e:	e7d0      	b.n	8000f12 <__udivmoddi4+0x27a>
 8000f70:	3b02      	subs	r3, #2
 8000f72:	443c      	add	r4, r7
 8000f74:	e782      	b.n	8000e7c <__udivmoddi4+0x1e4>
 8000f76:	3802      	subs	r0, #2
 8000f78:	443c      	add	r4, r7
 8000f7a:	e76a      	b.n	8000e52 <__udivmoddi4+0x1ba>

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <ADC_operation>:
uint16_t update_sensor_table = 7000;
uint8_t check_channel = 0 ;


// Function to handle ADC operations
uint8_t ADC_operation() {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
	float sensor_value;

	// Loop through each ADC and channel
	for (uint8_t i = 0; i < 3; i++) {
 8000f86:	2300      	movs	r3, #0
 8000f88:	71fb      	strb	r3, [r7, #7]
 8000f8a:	e033      	b.n	8000ff4 <ADC_operation+0x74>
		for (uint8_t j = 0; j < 4; j++) {
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	71bb      	strb	r3, [r7, #6]
 8000f90:	e02a      	b.n	8000fe8 <ADC_operation+0x68>
			sensor_value = ADC_READ(i, j);  // Read ADC value
 8000f92:	79ba      	ldrb	r2, [r7, #6]
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	4611      	mov	r1, r2
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 faa5 	bl	80014e8 <ADC_READ>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	ee07 3a90 	vmov	s15, r3
 8000fa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fa8:	edc7 7a00 	vstr	s15, [r7]
			if (sensor_value > 1500 || sensor_value < -1000) {  // Check for out-of-range values
 8000fac:	edd7 7a00 	vldr	s15, [r7]
 8000fb0:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001004 <ADC_operation+0x84>
 8000fb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fbc:	dc08      	bgt.n	8000fd0 <ADC_operation+0x50>
 8000fbe:	edd7 7a00 	vldr	s15, [r7]
 8000fc2:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001008 <ADC_operation+0x88>
 8000fc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fce:	d505      	bpl.n	8000fdc <ADC_operation+0x5c>
				sprintf(buffer, "S%derrorE", j);  // Store error message in buffer
 8000fd0:	79bb      	ldrb	r3, [r7, #6]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	490d      	ldr	r1, [pc, #52]	@ (800100c <ADC_operation+0x8c>)
 8000fd6:	480e      	ldr	r0, [pc, #56]	@ (8001010 <ADC_operation+0x90>)
 8000fd8:	f00e ffca 	bl	800ff70 <siprintf>
			}
			HAL_Delay(1);  // Delay between readings
 8000fdc:	2001      	movs	r0, #1
 8000fde:	f003 fd47 	bl	8004a70 <HAL_Delay>
		for (uint8_t j = 0; j < 4; j++) {
 8000fe2:	79bb      	ldrb	r3, [r7, #6]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	71bb      	strb	r3, [r7, #6]
 8000fe8:	79bb      	ldrb	r3, [r7, #6]
 8000fea:	2b03      	cmp	r3, #3
 8000fec:	d9d1      	bls.n	8000f92 <ADC_operation+0x12>
	for (uint8_t i = 0; i < 3; i++) {
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	71fb      	strb	r3, [r7, #7]
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d9c8      	bls.n	8000f8c <ADC_operation+0xc>
		}


	}
	//HAL_GPIO_TogglePin(GPIOE, LED1_Pin);  // Toggle status LED
}
 8000ffa:	bf00      	nop
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	44bb8000 	.word	0x44bb8000
 8001008:	c47a0000 	.word	0xc47a0000
 800100c:	08012428 	.word	0x08012428
 8001010:	2000023c 	.word	0x2000023c

08001014 <ADC_config>:

uint8_t ADC_config(uint8_t ADC_num)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
	uint8_t result=0;
 800101e:	2300      	movs	r3, #0
 8001020:	73fb      	strb	r3, [r7, #15]
	txd_buf_1[0] = 0x40;
 8001022:	4b9c      	ldr	r3, [pc, #624]	@ (8001294 <ADC_config+0x280>)
 8001024:	2240      	movs	r2, #64	@ 0x40
 8001026:	701a      	strb	r2, [r3, #0]
	txd_buf_1[1] = 0x11;
 8001028:	4b9a      	ldr	r3, [pc, #616]	@ (8001294 <ADC_config+0x280>)
 800102a:	2211      	movs	r2, #17
 800102c:	705a      	strb	r2, [r3, #1]
	txd_buf_1[2] = 0x0c; // WREG write AIN10-AINCOM,(1010 1100) binary,MUXP and MUXN selection
 800102e:	4b99      	ldr	r3, [pc, #612]	@ (8001294 <ADC_config+0x280>)
 8001030:	220c      	movs	r2, #12
 8001032:	709a      	strb	r2, [r3, #2]
	txd_buf_1[3] = 0x80; // gain =1
 8001034:	4b97      	ldr	r3, [pc, #604]	@ (8001294 <ADC_config+0x280>)
 8001036:	2280      	movs	r2, #128	@ 0x80
 8001038:	70da      	strb	r2, [r3, #3]
	txd_buf_1[4] = 0x76; // DATA RATE 20 SPS
 800103a:	4b96      	ldr	r3, [pc, #600]	@ (8001294 <ADC_config+0x280>)
 800103c:	2276      	movs	r2, #118	@ 0x76
 800103e:	711a      	strb	r2, [r3, #4]
	txd_buf_1[5] = 0xEA; //REF on (0001 10-ref 01)
 8001040:	4b94      	ldr	r3, [pc, #592]	@ (8001294 <ADC_config+0x280>)
 8001042:	22ea      	movs	r2, #234	@ 0xea
 8001044:	715a      	strb	r2, [r3, #5]
	txd_buf_1[6] = 0x1E; // IDAC MAG
 8001046:	4b93      	ldr	r3, [pc, #588]	@ (8001294 <ADC_config+0x280>)
 8001048:	221e      	movs	r2, #30
 800104a:	719a      	strb	r2, [r3, #6]
	txd_buf_1[7] = 0x02; // IDAC MUX
 800104c:	4b91      	ldr	r3, [pc, #580]	@ (8001294 <ADC_config+0x280>)
 800104e:	2202      	movs	r2, #2
 8001050:	71da      	strb	r2, [r3, #7]
	txd_buf_1[8] = 0x07; // Vbias
 8001052:	4b90      	ldr	r3, [pc, #576]	@ (8001294 <ADC_config+0x280>)
 8001054:	2207      	movs	r2, #7
 8001056:	721a      	strb	r2, [r3, #8]
	txd_buf_1[9] = 0xfb; // Timeout bit second =1 ,default is 10h
 8001058:	4b8e      	ldr	r3, [pc, #568]	@ (8001294 <ADC_config+0x280>)
 800105a:	22fb      	movs	r2, #251	@ 0xfb
 800105c:	725a      	strb	r2, [r3, #9]
	txd_buf_1[10] = 0x00;  //
 800105e:	4b8d      	ldr	r3, [pc, #564]	@ (8001294 <ADC_config+0x280>)
 8001060:	2200      	movs	r2, #0
 8001062:	729a      	strb	r2, [r3, #10]
	txd_buf_1[11] = 0x18;  //
 8001064:	4b8b      	ldr	r3, [pc, #556]	@ (8001294 <ADC_config+0x280>)
 8001066:	2218      	movs	r2, #24
 8001068:	72da      	strb	r2, [r3, #11]
	txd_buf_1[12] = 0x0;  //
 800106a:	4b8a      	ldr	r3, [pc, #552]	@ (8001294 <ADC_config+0x280>)
 800106c:	2200      	movs	r2, #0
 800106e:	731a      	strb	r2, [r3, #12]
	txd_buf_1[13] = 0x0;  //
 8001070:	4b88      	ldr	r3, [pc, #544]	@ (8001294 <ADC_config+0x280>)
 8001072:	2200      	movs	r2, #0
 8001074:	735a      	strb	r2, [r3, #13]
	txd_buf_1[14] = 0x0;  //
 8001076:	4b87      	ldr	r3, [pc, #540]	@ (8001294 <ADC_config+0x280>)
 8001078:	2200      	movs	r2, #0
 800107a:	739a      	strb	r2, [r3, #14]
	txd_buf_1[15] = 0x0;  //
 800107c:	4b85      	ldr	r3, [pc, #532]	@ (8001294 <ADC_config+0x280>)
 800107e:	2200      	movs	r2, #0
 8001080:	73da      	strb	r2, [r3, #15]
	txd_buf_1[16] = 0x0;  //
 8001082:	4b84      	ldr	r3, [pc, #528]	@ (8001294 <ADC_config+0x280>)
 8001084:	2200      	movs	r2, #0
 8001086:	741a      	strb	r2, [r3, #16]
	txd_buf_1[17] = 0x40;  //
 8001088:	4b82      	ldr	r3, [pc, #520]	@ (8001294 <ADC_config+0x280>)
 800108a:	2240      	movs	r2, #64	@ 0x40
 800108c:	745a      	strb	r2, [r3, #17]
	txd_buf_1[18] = 0x00;  //
 800108e:	4b81      	ldr	r3, [pc, #516]	@ (8001294 <ADC_config+0x280>)
 8001090:	2200      	movs	r2, #0
 8001092:	749a      	strb	r2, [r3, #18]
	txd_buf_1[19] = 0x00;  //
 8001094:	4b7f      	ldr	r3, [pc, #508]	@ (8001294 <ADC_config+0x280>)
 8001096:	2200      	movs	r2, #0
 8001098:	74da      	strb	r2, [r3, #19]
	txd_buf_1[20] = 0x00;  //
 800109a:	4b7e      	ldr	r3, [pc, #504]	@ (8001294 <ADC_config+0x280>)
 800109c:	2200      	movs	r2, #0
 800109e:	751a      	strb	r2, [r3, #20]
	txd_buf_1[18] = 0x00;  //
 80010a0:	4b7c      	ldr	r3, [pc, #496]	@ (8001294 <ADC_config+0x280>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	749a      	strb	r2, [r3, #18]



	txd_buf_2[0] = 0x40;
 80010a6:	4b7c      	ldr	r3, [pc, #496]	@ (8001298 <ADC_config+0x284>)
 80010a8:	2240      	movs	r2, #64	@ 0x40
 80010aa:	701a      	strb	r2, [r3, #0]
	txd_buf_2[1] = 0x11;
 80010ac:	4b7a      	ldr	r3, [pc, #488]	@ (8001298 <ADC_config+0x284>)
 80010ae:	2211      	movs	r2, #17
 80010b0:	705a      	strb	r2, [r3, #1]
	txd_buf_2[2] = 0x0c; // WREG write AIN10-AINCOM,(1010 1100) binary,MUXP and MUXN selection
 80010b2:	4b79      	ldr	r3, [pc, #484]	@ (8001298 <ADC_config+0x284>)
 80010b4:	220c      	movs	r2, #12
 80010b6:	709a      	strb	r2, [r3, #2]
	txd_buf_2[3] = 0x80; // gain =1
 80010b8:	4b77      	ldr	r3, [pc, #476]	@ (8001298 <ADC_config+0x284>)
 80010ba:	2280      	movs	r2, #128	@ 0x80
 80010bc:	70da      	strb	r2, [r3, #3]
	txd_buf_2[4] = 0x76; // DATA RATE 20 SPS
 80010be:	4b76      	ldr	r3, [pc, #472]	@ (8001298 <ADC_config+0x284>)
 80010c0:	2276      	movs	r2, #118	@ 0x76
 80010c2:	711a      	strb	r2, [r3, #4]
	txd_buf_2[5] = 0xEA; //REF on (0001 10-ref 01)
 80010c4:	4b74      	ldr	r3, [pc, #464]	@ (8001298 <ADC_config+0x284>)
 80010c6:	22ea      	movs	r2, #234	@ 0xea
 80010c8:	715a      	strb	r2, [r3, #5]
	txd_buf_2[6] = 0x1E; // IDAC MAG
 80010ca:	4b73      	ldr	r3, [pc, #460]	@ (8001298 <ADC_config+0x284>)
 80010cc:	221e      	movs	r2, #30
 80010ce:	719a      	strb	r2, [r3, #6]
	txd_buf_2[7] = 0x02; // IDAC MUX
 80010d0:	4b71      	ldr	r3, [pc, #452]	@ (8001298 <ADC_config+0x284>)
 80010d2:	2202      	movs	r2, #2
 80010d4:	71da      	strb	r2, [r3, #7]
	txd_buf_2[8] = 0x07; // Vbias
 80010d6:	4b70      	ldr	r3, [pc, #448]	@ (8001298 <ADC_config+0x284>)
 80010d8:	2207      	movs	r2, #7
 80010da:	721a      	strb	r2, [r3, #8]
	txd_buf_2[9] = 0xfb; // Timeout bit second =1 ,default is 10h
 80010dc:	4b6e      	ldr	r3, [pc, #440]	@ (8001298 <ADC_config+0x284>)
 80010de:	22fb      	movs	r2, #251	@ 0xfb
 80010e0:	725a      	strb	r2, [r3, #9]
	txd_buf_2[10] = 0x00;  //
 80010e2:	4b6d      	ldr	r3, [pc, #436]	@ (8001298 <ADC_config+0x284>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	729a      	strb	r2, [r3, #10]
	txd_buf_2[11] = 0x18;  //
 80010e8:	4b6b      	ldr	r3, [pc, #428]	@ (8001298 <ADC_config+0x284>)
 80010ea:	2218      	movs	r2, #24
 80010ec:	72da      	strb	r2, [r3, #11]
	txd_buf_2[12] = 0x0;  //
 80010ee:	4b6a      	ldr	r3, [pc, #424]	@ (8001298 <ADC_config+0x284>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	731a      	strb	r2, [r3, #12]
	txd_buf_2[13] = 0x0;  //
 80010f4:	4b68      	ldr	r3, [pc, #416]	@ (8001298 <ADC_config+0x284>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	735a      	strb	r2, [r3, #13]
	txd_buf_2[14] = 0x0;  //
 80010fa:	4b67      	ldr	r3, [pc, #412]	@ (8001298 <ADC_config+0x284>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	739a      	strb	r2, [r3, #14]
	txd_buf_2[15] = 0x0;  //
 8001100:	4b65      	ldr	r3, [pc, #404]	@ (8001298 <ADC_config+0x284>)
 8001102:	2200      	movs	r2, #0
 8001104:	73da      	strb	r2, [r3, #15]
	txd_buf_2[16] = 0x0;  //
 8001106:	4b64      	ldr	r3, [pc, #400]	@ (8001298 <ADC_config+0x284>)
 8001108:	2200      	movs	r2, #0
 800110a:	741a      	strb	r2, [r3, #16]
	txd_buf_2[17] = 0x40;  //
 800110c:	4b62      	ldr	r3, [pc, #392]	@ (8001298 <ADC_config+0x284>)
 800110e:	2240      	movs	r2, #64	@ 0x40
 8001110:	745a      	strb	r2, [r3, #17]
	txd_buf_2[18] = 0x00;  //
 8001112:	4b61      	ldr	r3, [pc, #388]	@ (8001298 <ADC_config+0x284>)
 8001114:	2200      	movs	r2, #0
 8001116:	749a      	strb	r2, [r3, #18]
	txd_buf_2[19] = 0x00;  //
 8001118:	4b5f      	ldr	r3, [pc, #380]	@ (8001298 <ADC_config+0x284>)
 800111a:	2200      	movs	r2, #0
 800111c:	74da      	strb	r2, [r3, #19]
	txd_buf_2[20] = 0x00;  //
 800111e:	4b5e      	ldr	r3, [pc, #376]	@ (8001298 <ADC_config+0x284>)
 8001120:	2200      	movs	r2, #0
 8001122:	751a      	strb	r2, [r3, #20]
	txd_buf_2[18] = 0x00;  //
 8001124:	4b5c      	ldr	r3, [pc, #368]	@ (8001298 <ADC_config+0x284>)
 8001126:	2200      	movs	r2, #0
 8001128:	749a      	strb	r2, [r3, #18]



	txd_buf_3[0] = 0x40;
 800112a:	4b5c      	ldr	r3, [pc, #368]	@ (800129c <ADC_config+0x288>)
 800112c:	2240      	movs	r2, #64	@ 0x40
 800112e:	701a      	strb	r2, [r3, #0]
	txd_buf_3[1] = 0x11;
 8001130:	4b5a      	ldr	r3, [pc, #360]	@ (800129c <ADC_config+0x288>)
 8001132:	2211      	movs	r2, #17
 8001134:	705a      	strb	r2, [r3, #1]
	txd_buf_3[2] = 0x0c; // WREG write AIN10-AINCOM,(1010 1100) binary,MUXP and MUXN selection
 8001136:	4b59      	ldr	r3, [pc, #356]	@ (800129c <ADC_config+0x288>)
 8001138:	220c      	movs	r2, #12
 800113a:	709a      	strb	r2, [r3, #2]
	txd_buf_3[3] = 0x80; // gain =1
 800113c:	4b57      	ldr	r3, [pc, #348]	@ (800129c <ADC_config+0x288>)
 800113e:	2280      	movs	r2, #128	@ 0x80
 8001140:	70da      	strb	r2, [r3, #3]
	txd_buf_3[4] = 0x76; // DATA RATE 20 SPS
 8001142:	4b56      	ldr	r3, [pc, #344]	@ (800129c <ADC_config+0x288>)
 8001144:	2276      	movs	r2, #118	@ 0x76
 8001146:	711a      	strb	r2, [r3, #4]
	txd_buf_3[5] = 0xEA; //REF on (0001 10-ref 01)
 8001148:	4b54      	ldr	r3, [pc, #336]	@ (800129c <ADC_config+0x288>)
 800114a:	22ea      	movs	r2, #234	@ 0xea
 800114c:	715a      	strb	r2, [r3, #5]
	txd_buf_3[6] = 0x1E; // IDAC MAG
 800114e:	4b53      	ldr	r3, [pc, #332]	@ (800129c <ADC_config+0x288>)
 8001150:	221e      	movs	r2, #30
 8001152:	719a      	strb	r2, [r3, #6]
	txd_buf_3[7] = 0x02; // IDAC MUX
 8001154:	4b51      	ldr	r3, [pc, #324]	@ (800129c <ADC_config+0x288>)
 8001156:	2202      	movs	r2, #2
 8001158:	71da      	strb	r2, [r3, #7]
	txd_buf_3[8] = 0x07; // Vbias
 800115a:	4b50      	ldr	r3, [pc, #320]	@ (800129c <ADC_config+0x288>)
 800115c:	2207      	movs	r2, #7
 800115e:	721a      	strb	r2, [r3, #8]
	txd_buf_3[9] = 0xfb; // Timeout bit second =1 ,default is 10h
 8001160:	4b4e      	ldr	r3, [pc, #312]	@ (800129c <ADC_config+0x288>)
 8001162:	22fb      	movs	r2, #251	@ 0xfb
 8001164:	725a      	strb	r2, [r3, #9]
	txd_buf_3[10] = 0x00;  //
 8001166:	4b4d      	ldr	r3, [pc, #308]	@ (800129c <ADC_config+0x288>)
 8001168:	2200      	movs	r2, #0
 800116a:	729a      	strb	r2, [r3, #10]
	txd_buf_3[11] = 0x18;  //
 800116c:	4b4b      	ldr	r3, [pc, #300]	@ (800129c <ADC_config+0x288>)
 800116e:	2218      	movs	r2, #24
 8001170:	72da      	strb	r2, [r3, #11]
	txd_buf_3[12] = 0x0;  //
 8001172:	4b4a      	ldr	r3, [pc, #296]	@ (800129c <ADC_config+0x288>)
 8001174:	2200      	movs	r2, #0
 8001176:	731a      	strb	r2, [r3, #12]
	txd_buf_3[13] = 0x0;  //
 8001178:	4b48      	ldr	r3, [pc, #288]	@ (800129c <ADC_config+0x288>)
 800117a:	2200      	movs	r2, #0
 800117c:	735a      	strb	r2, [r3, #13]
	txd_buf_3[14] = 0x0;  //
 800117e:	4b47      	ldr	r3, [pc, #284]	@ (800129c <ADC_config+0x288>)
 8001180:	2200      	movs	r2, #0
 8001182:	739a      	strb	r2, [r3, #14]
	txd_buf_3[15] = 0x0;  //
 8001184:	4b45      	ldr	r3, [pc, #276]	@ (800129c <ADC_config+0x288>)
 8001186:	2200      	movs	r2, #0
 8001188:	73da      	strb	r2, [r3, #15]
	txd_buf_3[16] = 0x0;  //
 800118a:	4b44      	ldr	r3, [pc, #272]	@ (800129c <ADC_config+0x288>)
 800118c:	2200      	movs	r2, #0
 800118e:	741a      	strb	r2, [r3, #16]
	txd_buf_3[17] = 0x40;  //
 8001190:	4b42      	ldr	r3, [pc, #264]	@ (800129c <ADC_config+0x288>)
 8001192:	2240      	movs	r2, #64	@ 0x40
 8001194:	745a      	strb	r2, [r3, #17]
	txd_buf_3[18] = 0x00;  //
 8001196:	4b41      	ldr	r3, [pc, #260]	@ (800129c <ADC_config+0x288>)
 8001198:	2200      	movs	r2, #0
 800119a:	749a      	strb	r2, [r3, #18]
	txd_buf_3[19] = 0x00;  //
 800119c:	4b3f      	ldr	r3, [pc, #252]	@ (800129c <ADC_config+0x288>)
 800119e:	2200      	movs	r2, #0
 80011a0:	74da      	strb	r2, [r3, #19]
	txd_buf_3[20] = 0x00;  //
 80011a2:	4b3e      	ldr	r3, [pc, #248]	@ (800129c <ADC_config+0x288>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	751a      	strb	r2, [r3, #20]
	txd_buf_3[18] = 0x00;  //
 80011a8:	4b3c      	ldr	r3, [pc, #240]	@ (800129c <ADC_config+0x288>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	749a      	strb	r2, [r3, #18]

	switch( ADC_num)
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	2b03      	cmp	r3, #3
 80011b2:	f000 80ff 	beq.w	80013b4 <ADC_config+0x3a0>
 80011b6:	2b03      	cmp	r3, #3
 80011b8:	f300 817b 	bgt.w	80014b2 <ADC_config+0x49e>
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d002      	beq.n	80011c6 <ADC_config+0x1b2>
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d075      	beq.n	80012b0 <ADC_config+0x29c>
 80011c4:	e175      	b.n	80014b2 <ADC_config+0x49e>
	{
	case 1:
		HAL_GPIO_WritePin(GPIOC, RESET_1_Pin, 1);
 80011c6:	2201      	movs	r2, #1
 80011c8:	2104      	movs	r1, #4
 80011ca:	4835      	ldr	r0, [pc, #212]	@ (80012a0 <ADC_config+0x28c>)
 80011cc:	f003 fffc 	bl	80051c8 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80011d0:	2001      	movs	r0, #1
 80011d2:	f003 fc4d 	bl	8004a70 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, RESET_1_Pin, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2104      	movs	r1, #4
 80011da:	4831      	ldr	r0, [pc, #196]	@ (80012a0 <ADC_config+0x28c>)
 80011dc:	f003 fff4 	bl	80051c8 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80011e0:	2001      	movs	r0, #1
 80011e2:	f003 fc45 	bl	8004a70 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, RESET_1_Pin, 1);
 80011e6:	2201      	movs	r2, #1
 80011e8:	2104      	movs	r1, #4
 80011ea:	482d      	ldr	r0, [pc, #180]	@ (80012a0 <ADC_config+0x28c>)
 80011ec:	f003 ffec 	bl	80051c8 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80011f0:	2001      	movs	r0, #1
 80011f2:	f003 fc3d 	bl	8004a70 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOF, START_1_Pin, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011fc:	4829      	ldr	r0, [pc, #164]	@ (80012a4 <ADC_config+0x290>)
 80011fe:	f003 ffe3 	bl	80051c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2140      	movs	r1, #64	@ 0x40
 8001206:	4827      	ldr	r0, [pc, #156]	@ (80012a4 <ADC_config+0x290>)
 8001208:	f003 ffde 	bl	80051c8 <HAL_GPIO_WritePin>


		HAL_SPI_Transmit(&hspi5, (uint8_t*) &txd_buf_1,0x13,  0xFFFFFFFF);
 800120c:	f04f 33ff 	mov.w	r3, #4294967295
 8001210:	2213      	movs	r2, #19
 8001212:	4920      	ldr	r1, [pc, #128]	@ (8001294 <ADC_config+0x280>)
 8001214:	4824      	ldr	r0, [pc, #144]	@ (80012a8 <ADC_config+0x294>)
 8001216:	f00b f87b 	bl	800c310 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 1);
 800121a:	2201      	movs	r2, #1
 800121c:	2140      	movs	r1, #64	@ 0x40
 800121e:	4821      	ldr	r0, [pc, #132]	@ (80012a4 <ADC_config+0x290>)
 8001220:	f003 ffd2 	bl	80051c8 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 8001224:	2200      	movs	r2, #0
 8001226:	2140      	movs	r1, #64	@ 0x40
 8001228:	481e      	ldr	r0, [pc, #120]	@ (80012a4 <ADC_config+0x290>)
 800122a:	f003 ffcd 	bl	80051c8 <HAL_GPIO_WritePin>
		txd_buf_1[0] = 0x20;
 800122e:	4b19      	ldr	r3, [pc, #100]	@ (8001294 <ADC_config+0x280>)
 8001230:	2220      	movs	r2, #32
 8001232:	701a      	strb	r2, [r3, #0]
		txd_buf_1[1] = 0x11;
 8001234:	4b17      	ldr	r3, [pc, #92]	@ (8001294 <ADC_config+0x280>)
 8001236:	2211      	movs	r2, #17
 8001238:	705a      	strb	r2, [r3, #1]

		if(HAL_SPI_Transmit(&hspi5, (uint8_t*) &txd_buf_1, 2,  0xFFFFFFFF) != HAL_OK)
 800123a:	f04f 33ff 	mov.w	r3, #4294967295
 800123e:	2202      	movs	r2, #2
 8001240:	4914      	ldr	r1, [pc, #80]	@ (8001294 <ADC_config+0x280>)
 8001242:	4819      	ldr	r0, [pc, #100]	@ (80012a8 <ADC_config+0x294>)
 8001244:	f00b f864 	bl	800c310 <HAL_SPI_Transmit>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d002      	beq.n	8001254 <ADC_config+0x240>
		{
			HAL_Delay(1);// Handle transmission error
 800124e:	2001      	movs	r0, #1
 8001250:	f003 fc0e 	bl	8004a70 <HAL_Delay>
		}
		HAL_Delay(1);
 8001254:	2001      	movs	r0, #1
 8001256:	f003 fc0b 	bl	8004a70 <HAL_Delay>
		if(HAL_SPI_Receive(&hspi5, (uint8_t*) &rxd_buf_1, 0x11,  0xFFFFFFFF) != HAL_OK)
 800125a:	f04f 33ff 	mov.w	r3, #4294967295
 800125e:	2211      	movs	r2, #17
 8001260:	4912      	ldr	r1, [pc, #72]	@ (80012ac <ADC_config+0x298>)
 8001262:	4811      	ldr	r0, [pc, #68]	@ (80012a8 <ADC_config+0x294>)
 8001264:	f00b fa6a 	bl	800c73c <HAL_SPI_Receive>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d002      	beq.n	8001274 <ADC_config+0x260>
		{
			HAL_Delay(1);// Handle transmission error
 800126e:	2001      	movs	r0, #1
 8001270:	f003 fbfe 	bl	8004a70 <HAL_Delay>
		}


		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 1);
 8001274:	2201      	movs	r2, #1
 8001276:	2140      	movs	r1, #64	@ 0x40
 8001278:	480a      	ldr	r0, [pc, #40]	@ (80012a4 <ADC_config+0x290>)
 800127a:	f003 ffa5 	bl	80051c8 <HAL_GPIO_WritePin>

		if(rxd_buf_1[7]==txd_buf_1[9] )
 800127e:	4b0b      	ldr	r3, [pc, #44]	@ (80012ac <ADC_config+0x298>)
 8001280:	79da      	ldrb	r2, [r3, #7]
 8001282:	4b04      	ldr	r3, [pc, #16]	@ (8001294 <ADC_config+0x280>)
 8001284:	7a5b      	ldrb	r3, [r3, #9]
 8001286:	429a      	cmp	r2, r3
 8001288:	f040 810e 	bne.w	80014a8 <ADC_config+0x494>
		{
			result = 1;
 800128c:	2301      	movs	r3, #1
 800128e:	73fb      	strb	r3, [r7, #15]

		}

		break;
 8001290:	e10a      	b.n	80014a8 <ADC_config+0x494>
 8001292:	bf00      	nop
 8001294:	20000368 	.word	0x20000368
 8001298:	20000388 	.word	0x20000388
 800129c:	200003a8 	.word	0x200003a8
 80012a0:	42020800 	.word	0x42020800
 80012a4:	42021400 	.word	0x42021400
 80012a8:	2000591c 	.word	0x2000591c
 80012ac:	200003c8 	.word	0x200003c8
	case 2:
		HAL_GPIO_WritePin(GPIOG, RESET_2_Pin, 1);
 80012b0:	2201      	movs	r2, #1
 80012b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012b6:	4881      	ldr	r0, [pc, #516]	@ (80014bc <ADC_config+0x4a8>)
 80012b8:	f003 ff86 	bl	80051c8 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80012bc:	2001      	movs	r0, #1
 80012be:	f003 fbd7 	bl	8004a70 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOG, RESET_2_Pin, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012c8:	487c      	ldr	r0, [pc, #496]	@ (80014bc <ADC_config+0x4a8>)
 80012ca:	f003 ff7d 	bl	80051c8 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80012ce:	2001      	movs	r0, #1
 80012d0:	f003 fbce 	bl	8004a70 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOG, RESET_2_Pin, 1);
 80012d4:	2201      	movs	r2, #1
 80012d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012da:	4878      	ldr	r0, [pc, #480]	@ (80014bc <ADC_config+0x4a8>)
 80012dc:	f003 ff74 	bl	80051c8 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80012e0:	2001      	movs	r0, #1
 80012e2:	f003 fbc5 	bl	8004a70 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOG, START_2_Pin, 0);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2140      	movs	r1, #64	@ 0x40
 80012ea:	4874      	ldr	r0, [pc, #464]	@ (80014bc <ADC_config+0x4a8>)
 80012ec:	f003 ff6c 	bl	80051c8 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80012f0:	2001      	movs	r0, #1
 80012f2:	f003 fbbd 	bl	8004a70 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012fc:	4870      	ldr	r0, [pc, #448]	@ (80014c0 <ADC_config+0x4ac>)
 80012fe:	f003 ff63 	bl	80051c8 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001302:	2001      	movs	r0, #1
 8001304:	f003 fbb4 	bl	8004a70 <HAL_Delay>

		HAL_SPI_Transmit(&hspi2, (uint8_t*) &txd_buf_2,0x13,  0xFFFFFFFF);
 8001308:	f04f 33ff 	mov.w	r3, #4294967295
 800130c:	2213      	movs	r2, #19
 800130e:	496d      	ldr	r1, [pc, #436]	@ (80014c4 <ADC_config+0x4b0>)
 8001310:	486d      	ldr	r0, [pc, #436]	@ (80014c8 <ADC_config+0x4b4>)
 8001312:	f00a fffd 	bl	800c310 <HAL_SPI_Transmit>
		HAL_Delay(1);
 8001316:	2001      	movs	r0, #1
 8001318:	f003 fbaa 	bl	8004a70 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 1);
 800131c:	2201      	movs	r2, #1
 800131e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001322:	4867      	ldr	r0, [pc, #412]	@ (80014c0 <ADC_config+0x4ac>)
 8001324:	f003 ff50 	bl	80051c8 <HAL_GPIO_WritePin>

		txd_buf_2[0] = 0x20;
 8001328:	4b66      	ldr	r3, [pc, #408]	@ (80014c4 <ADC_config+0x4b0>)
 800132a:	2220      	movs	r2, #32
 800132c:	701a      	strb	r2, [r3, #0]
		txd_buf_2[1] = 0x11;
 800132e:	4b65      	ldr	r3, [pc, #404]	@ (80014c4 <ADC_config+0x4b0>)
 8001330:	2211      	movs	r2, #17
 8001332:	705a      	strb	r2, [r3, #1]



		HAL_Delay(1);
 8001334:	2001      	movs	r0, #1
 8001336:	f003 fb9b 	bl	8004a70 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 800133a:	2200      	movs	r2, #0
 800133c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001340:	485f      	ldr	r0, [pc, #380]	@ (80014c0 <ADC_config+0x4ac>)
 8001342:	f003 ff41 	bl	80051c8 <HAL_GPIO_WritePin>
		if(HAL_SPI_Transmit(&hspi2, (uint8_t*) &txd_buf_2, 2,  0xFFFFFFFF) != HAL_OK) {
 8001346:	f04f 33ff 	mov.w	r3, #4294967295
 800134a:	2202      	movs	r2, #2
 800134c:	495d      	ldr	r1, [pc, #372]	@ (80014c4 <ADC_config+0x4b0>)
 800134e:	485e      	ldr	r0, [pc, #376]	@ (80014c8 <ADC_config+0x4b4>)
 8001350:	f00a ffde 	bl	800c310 <HAL_SPI_Transmit>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d002      	beq.n	8001360 <ADC_config+0x34c>
			HAL_Delay(1);// Handle transmission error
 800135a:	2001      	movs	r0, #1
 800135c:	f003 fb88 	bl	8004a70 <HAL_Delay>
		}
		HAL_Delay(1);
 8001360:	2001      	movs	r0, #1
 8001362:	f003 fb85 	bl	8004a70 <HAL_Delay>
		if(HAL_SPI_Receive(&hspi2, (uint8_t*) &rxd_buf_2, 0x11,  0xFFFFFFFF) != HAL_OK) {
 8001366:	f04f 33ff 	mov.w	r3, #4294967295
 800136a:	2211      	movs	r2, #17
 800136c:	4957      	ldr	r1, [pc, #348]	@ (80014cc <ADC_config+0x4b8>)
 800136e:	4856      	ldr	r0, [pc, #344]	@ (80014c8 <ADC_config+0x4b4>)
 8001370:	f00b f9e4 	bl	800c73c <HAL_SPI_Receive>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d002      	beq.n	8001380 <ADC_config+0x36c>
			HAL_Delay(1);// Handle transmission error
 800137a:	2001      	movs	r0, #1
 800137c:	f003 fb78 	bl	8004a70 <HAL_Delay>
		}
		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 1);
 8001380:	2201      	movs	r2, #1
 8001382:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001386:	484e      	ldr	r0, [pc, #312]	@ (80014c0 <ADC_config+0x4ac>)
 8001388:	f003 ff1e 	bl	80051c8 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800138c:	2001      	movs	r0, #1
 800138e:	f003 fb6f 	bl	8004a70 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOG, START_2_Pin, 1);
 8001392:	2201      	movs	r2, #1
 8001394:	2140      	movs	r1, #64	@ 0x40
 8001396:	4849      	ldr	r0, [pc, #292]	@ (80014bc <ADC_config+0x4a8>)
 8001398:	f003 ff16 	bl	80051c8 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800139c:	2001      	movs	r0, #1
 800139e:	f003 fb67 	bl	8004a70 <HAL_Delay>
		if(rxd_buf_2[7]==txd_buf_2[9] )
 80013a2:	4b4a      	ldr	r3, [pc, #296]	@ (80014cc <ADC_config+0x4b8>)
 80013a4:	79da      	ldrb	r2, [r3, #7]
 80013a6:	4b47      	ldr	r3, [pc, #284]	@ (80014c4 <ADC_config+0x4b0>)
 80013a8:	7a5b      	ldrb	r3, [r3, #9]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d17e      	bne.n	80014ac <ADC_config+0x498>
		{
			result = 1;
 80013ae:	2301      	movs	r3, #1
 80013b0:	73fb      	strb	r3, [r7, #15]

		}

		break;
 80013b2:	e07b      	b.n	80014ac <ADC_config+0x498>
	case 3:

		HAL_GPIO_WritePin(GPIOA, RESET_3_Pin, 1);
 80013b4:	2201      	movs	r2, #1
 80013b6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013ba:	4845      	ldr	r0, [pc, #276]	@ (80014d0 <ADC_config+0x4bc>)
 80013bc:	f003 ff04 	bl	80051c8 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80013c0:	2001      	movs	r0, #1
 80013c2:	f003 fb55 	bl	8004a70 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, RESET_3_Pin, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013cc:	4840      	ldr	r0, [pc, #256]	@ (80014d0 <ADC_config+0x4bc>)
 80013ce:	f003 fefb 	bl	80051c8 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80013d2:	2001      	movs	r0, #1
 80013d4:	f003 fb4c 	bl	8004a70 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, RESET_3_Pin, 1);
 80013d8:	2201      	movs	r2, #1
 80013da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013de:	483c      	ldr	r0, [pc, #240]	@ (80014d0 <ADC_config+0x4bc>)
 80013e0:	f003 fef2 	bl	80051c8 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 80013e4:	200a      	movs	r0, #10
 80013e6:	f003 fb43 	bl	8004a70 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, START_3_Pin, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013f0:	4837      	ldr	r0, [pc, #220]	@ (80014d0 <ADC_config+0x4bc>)
 80013f2:	f003 fee9 	bl	80051c8 <HAL_GPIO_WritePin>

		HAL_Delay(1);
 80013f6:	2001      	movs	r0, #1
 80013f8:	f003 fb3a 	bl	8004a70 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 80013fc:	2200      	movs	r2, #0
 80013fe:	2110      	movs	r1, #16
 8001400:	4834      	ldr	r0, [pc, #208]	@ (80014d4 <ADC_config+0x4c0>)
 8001402:	f003 fee1 	bl	80051c8 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001406:	2001      	movs	r0, #1
 8001408:	f003 fb32 	bl	8004a70 <HAL_Delay>

		HAL_SPI_Transmit(&hspi3, (uint8_t*) &txd_buf_3,0x13, 0xFFFFFFFF);
 800140c:	f04f 33ff 	mov.w	r3, #4294967295
 8001410:	2213      	movs	r2, #19
 8001412:	4931      	ldr	r1, [pc, #196]	@ (80014d8 <ADC_config+0x4c4>)
 8001414:	4831      	ldr	r0, [pc, #196]	@ (80014dc <ADC_config+0x4c8>)
 8001416:	f00a ff7b 	bl	800c310 <HAL_SPI_Transmit>
		HAL_Delay(1);
 800141a:	2001      	movs	r0, #1
 800141c:	f003 fb28 	bl	8004a70 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 1);
 8001420:	2201      	movs	r2, #1
 8001422:	2110      	movs	r1, #16
 8001424:	482b      	ldr	r0, [pc, #172]	@ (80014d4 <ADC_config+0x4c0>)
 8001426:	f003 fecf 	bl	80051c8 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800142a:	2001      	movs	r0, #1
 800142c:	f003 fb20 	bl	8004a70 <HAL_Delay>

		txd_buf_3[0] = 0x20;
 8001430:	4b29      	ldr	r3, [pc, #164]	@ (80014d8 <ADC_config+0x4c4>)
 8001432:	2220      	movs	r2, #32
 8001434:	701a      	strb	r2, [r3, #0]
		txd_buf_3[1] = 0x11;
 8001436:	4b28      	ldr	r3, [pc, #160]	@ (80014d8 <ADC_config+0x4c4>)
 8001438:	2211      	movs	r2, #17
 800143a:	705a      	strb	r2, [r3, #1]

		HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 800143c:	2200      	movs	r2, #0
 800143e:	2110      	movs	r1, #16
 8001440:	4824      	ldr	r0, [pc, #144]	@ (80014d4 <ADC_config+0x4c0>)
 8001442:	f003 fec1 	bl	80051c8 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001446:	2001      	movs	r0, #1
 8001448:	f003 fb12 	bl	8004a70 <HAL_Delay>
		HAL_SPI_Transmit(&hspi3, (uint8_t*) &txd_buf_3, 2,  0xFFFFFFFF);
 800144c:	f04f 33ff 	mov.w	r3, #4294967295
 8001450:	2202      	movs	r2, #2
 8001452:	4921      	ldr	r1, [pc, #132]	@ (80014d8 <ADC_config+0x4c4>)
 8001454:	4821      	ldr	r0, [pc, #132]	@ (80014dc <ADC_config+0x4c8>)
 8001456:	f00a ff5b 	bl	800c310 <HAL_SPI_Transmit>
		HAL_Delay(1);
 800145a:	2001      	movs	r0, #1
 800145c:	f003 fb08 	bl	8004a70 <HAL_Delay>
		HAL_SPI_Receive(&hspi3, (uint8_t*) &rxd_buf_3, 0x11,  0xFFFFFFFF);
 8001460:	f04f 33ff 	mov.w	r3, #4294967295
 8001464:	2211      	movs	r2, #17
 8001466:	491e      	ldr	r1, [pc, #120]	@ (80014e0 <ADC_config+0x4cc>)
 8001468:	481c      	ldr	r0, [pc, #112]	@ (80014dc <ADC_config+0x4c8>)
 800146a:	f00b f967 	bl	800c73c <HAL_SPI_Receive>
		HAL_Delay(1);
 800146e:	2001      	movs	r0, #1
 8001470:	f003 fafe 	bl	8004a70 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 1);
 8001474:	2201      	movs	r2, #1
 8001476:	2110      	movs	r1, #16
 8001478:	4816      	ldr	r0, [pc, #88]	@ (80014d4 <ADC_config+0x4c0>)
 800147a:	f003 fea5 	bl	80051c8 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800147e:	2001      	movs	r0, #1
 8001480:	f003 faf6 	bl	8004a70 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, START_3_Pin, 1);
 8001484:	2201      	movs	r2, #1
 8001486:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800148a:	4811      	ldr	r0, [pc, #68]	@ (80014d0 <ADC_config+0x4bc>)
 800148c:	f003 fe9c 	bl	80051c8 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001490:	2001      	movs	r0, #1
 8001492:	f003 faed 	bl	8004a70 <HAL_Delay>

		if(rxd_buf_3[7]==txd_buf_3[9] )
 8001496:	4b12      	ldr	r3, [pc, #72]	@ (80014e0 <ADC_config+0x4cc>)
 8001498:	79da      	ldrb	r2, [r3, #7]
 800149a:	4b0f      	ldr	r3, [pc, #60]	@ (80014d8 <ADC_config+0x4c4>)
 800149c:	7a5b      	ldrb	r3, [r3, #9]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d106      	bne.n	80014b0 <ADC_config+0x49c>
		{
			result = 1;
 80014a2:	2301      	movs	r3, #1
 80014a4:	73fb      	strb	r3, [r7, #15]

		}
		break;
 80014a6:	e003      	b.n	80014b0 <ADC_config+0x49c>
		break;
 80014a8:	bf00      	nop
 80014aa:	e002      	b.n	80014b2 <ADC_config+0x49e>
		break;
 80014ac:	bf00      	nop
 80014ae:	e000      	b.n	80014b2 <ADC_config+0x49e>
		break;
 80014b0:	bf00      	nop
	}

	return result;
 80014b2:	7bfb      	ldrb	r3, [r7, #15]


}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3710      	adds	r7, #16
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	42021800 	.word	0x42021800
 80014c0:	42020400 	.word	0x42020400
 80014c4:	20000388 	.word	0x20000388
 80014c8:	200057fc 	.word	0x200057fc
 80014cc:	200003e8 	.word	0x200003e8
 80014d0:	42020000 	.word	0x42020000
 80014d4:	42020c00 	.word	0x42020c00
 80014d8:	200003a8 	.word	0x200003a8
 80014dc:	2000588c 	.word	0x2000588c
 80014e0:	20000408 	.word	0x20000408
 80014e4:	00000000 	.word	0x00000000

080014e8 <ADC_READ>:

#if 1

uint16_t ADC_READ(uint8_t adc_num,uint8_t channel)
{
 80014e8:	b5b0      	push	{r4, r5, r7, lr}
 80014ea:	b094      	sub	sp, #80	@ 0x50
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	460a      	mov	r2, r1
 80014f2:	71fb      	strb	r3, [r7, #7]
 80014f4:	4613      	mov	r3, r2
 80014f6:	71bb      	strb	r3, [r7, #6]
	//	uint8_t txd_buf[30]={0};
	uint8_t rxd_buf[30]={0};
 80014f8:	2300      	movs	r3, #0
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
 800150c:	615a      	str	r2, [r3, #20]
 800150e:	831a      	strh	r2, [r3, #24]
	uint8_t status;
	uint8_t wirestatus=0;
 8001510:	2300      	movs	r3, #0
 8001512:	73fb      	strb	r3, [r7, #15]

	uint16_t sensor_value = 0x7FFF;
 8001514:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8001518:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	float resistance = 0;
 800151c:	f04f 0300 	mov.w	r3, #0
 8001520:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t sum = 0;           // Sum for averaging
 8001522:	2300      	movs	r3, #0
 8001524:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint16_t adchex=0;
 8001526:	2300      	movs	r3, #0
 8001528:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	float average = 0.0;        // Average value
 800152c:	f04f 0300 	mov.w	r3, #0
 8001530:	633b      	str	r3, [r7, #48]	@ 0x30


	txd_buf[0] = 0x40; // To write data from 0 register
 8001532:	4bc7      	ldr	r3, [pc, #796]	@ (8001850 <ADC_READ+0x368>)
 8001534:	2240      	movs	r2, #64	@ 0x40
 8001536:	701a      	strb	r2, [r3, #0]
	txd_buf[1] = 0x11;	//	Number of register to write
 8001538:	4bc5      	ldr	r3, [pc, #788]	@ (8001850 <ADC_READ+0x368>)
 800153a:	2211      	movs	r2, #17
 800153c:	705a      	strb	r2, [r3, #1]
	txd_buf[2] = 0x0C; // Device ID
 800153e:	4bc4      	ldr	r3, [pc, #784]	@ (8001850 <ADC_READ+0x368>)
 8001540:	220c      	movs	r2, #12
 8001542:	709a      	strb	r2, [r3, #2]
	txd_buf[3] = 0x00; // Status of Device it is read only
 8001544:	4bc2      	ldr	r3, [pc, #776]	@ (8001850 <ADC_READ+0x368>)
 8001546:	2200      	movs	r2, #0
 8001548:	70da      	strb	r2, [r3, #3]
	txd_buf[4] = 0x76; // Input MUX for RTD legs selection (MUX configuration)
 800154a:	4bc1      	ldr	r3, [pc, #772]	@ (8001850 <ADC_READ+0x368>)
 800154c:	2276      	movs	r2, #118	@ 0x76
 800154e:	711a      	strb	r2, [r3, #4]
	txd_buf[5] = 0xEA; //PGA Gain = 1
 8001550:	4bbf      	ldr	r3, [pc, #764]	@ (8001850 <ADC_READ+0x368>)
 8001552:	22ea      	movs	r2, #234	@ 0xea
 8001554:	715a      	strb	r2, [r3, #5]
	txd_buf[6] = 0x1E; // Data rate = 4000 SPS
 8001556:	4bbe      	ldr	r3, [pc, #760]	@ (8001850 <ADC_READ+0x368>)
 8001558:	221e      	movs	r2, #30
 800155a:	719a      	strb	r2, [r3, #6]
	txd_buf[7] = 0x82; // Reference configuration 02  change this
 800155c:	4bbc      	ldr	r3, [pc, #752]	@ (8001850 <ADC_READ+0x368>)
 800155e:	2282      	movs	r2, #130	@ 0x82
 8001560:	71da      	strb	r2, [r3, #7]
	txd_buf[8] = 0x87; // IDAC magnitude
 8001562:	4bbb      	ldr	r3, [pc, #748]	@ (8001850 <ADC_READ+0x368>)
 8001564:	2287      	movs	r2, #135	@ 0x87
 8001566:	721a      	strb	r2, [r3, #8]
	txd_buf[9] = 0xfb; // IDAC MUX
 8001568:	4bb9      	ldr	r3, [pc, #740]	@ (8001850 <ADC_READ+0x368>)
 800156a:	22fb      	movs	r2, #251	@ 0xfb
 800156c:	725a      	strb	r2, [r3, #9]
	txd_buf[10] = 0x00; // Vbias
 800156e:	4bb8      	ldr	r3, [pc, #736]	@ (8001850 <ADC_READ+0x368>)
 8001570:	2200      	movs	r2, #0
 8001572:	729a      	strb	r2, [r3, #10]
	txd_buf[11] = 0x10; // Timeout configuration
 8001574:	4bb6      	ldr	r3, [pc, #728]	@ (8001850 <ADC_READ+0x368>)
 8001576:	2210      	movs	r2, #16
 8001578:	72da      	strb	r2, [r3, #11]
	txd_buf[12] = 0x0;  //
 800157a:	4bb5      	ldr	r3, [pc, #724]	@ (8001850 <ADC_READ+0x368>)
 800157c:	2200      	movs	r2, #0
 800157e:	731a      	strb	r2, [r3, #12]
	txd_buf[13] = 0x0;  //
 8001580:	4bb3      	ldr	r3, [pc, #716]	@ (8001850 <ADC_READ+0x368>)
 8001582:	2200      	movs	r2, #0
 8001584:	735a      	strb	r2, [r3, #13]
	txd_buf[14] = 0x0;  //
 8001586:	4bb2      	ldr	r3, [pc, #712]	@ (8001850 <ADC_READ+0x368>)
 8001588:	2200      	movs	r2, #0
 800158a:	739a      	strb	r2, [r3, #14]
	txd_buf[15] = 0x0;  //
 800158c:	4bb0      	ldr	r3, [pc, #704]	@ (8001850 <ADC_READ+0x368>)
 800158e:	2200      	movs	r2, #0
 8001590:	73da      	strb	r2, [r3, #15]
	txd_buf[16] = 0x0;  //
 8001592:	4baf      	ldr	r3, [pc, #700]	@ (8001850 <ADC_READ+0x368>)
 8001594:	2200      	movs	r2, #0
 8001596:	741a      	strb	r2, [r3, #16]
	txd_buf[17] = 0x40;  //
 8001598:	4bad      	ldr	r3, [pc, #692]	@ (8001850 <ADC_READ+0x368>)
 800159a:	2240      	movs	r2, #64	@ 0x40
 800159c:	745a      	strb	r2, [r3, #17]
	txd_buf[18] = 0x00;  //
 800159e:	4bac      	ldr	r3, [pc, #688]	@ (8001850 <ADC_READ+0x368>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	749a      	strb	r2, [r3, #18]
	txd_buf[19] = 0x00;  //
 80015a4:	4baa      	ldr	r3, [pc, #680]	@ (8001850 <ADC_READ+0x368>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	74da      	strb	r2, [r3, #19]
	txd_buf[20] = 0x00;  //
 80015aa:	4ba9      	ldr	r3, [pc, #676]	@ (8001850 <ADC_READ+0x368>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	751a      	strb	r2, [r3, #20]
	txd_buf[18] = 0x00;  //
 80015b0:	4ba7      	ldr	r3, [pc, #668]	@ (8001850 <ADC_READ+0x368>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	749a      	strb	r2, [r3, #18]
	//	txd_buf[18] = 0x00;




	switch(channel)
 80015b6:	79bb      	ldrb	r3, [r7, #6]
 80015b8:	2b03      	cmp	r3, #3
 80015ba:	d827      	bhi.n	800160c <ADC_READ+0x124>
 80015bc:	a201      	add	r2, pc, #4	@ (adr r2, 80015c4 <ADC_READ+0xdc>)
 80015be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c2:	bf00      	nop
 80015c4:	080015d5 	.word	0x080015d5
 80015c8:	080015e3 	.word	0x080015e3
 80015cc:	080015f1 	.word	0x080015f1
 80015d0:	080015ff 	.word	0x080015ff
	{
	case 0:
		txd_buf[4] = 0x43;// Input MUX for RTD legs selection (MUX configuration)
 80015d4:	4b9e      	ldr	r3, [pc, #632]	@ (8001850 <ADC_READ+0x368>)
 80015d6:	2243      	movs	r2, #67	@ 0x43
 80015d8:	711a      	strb	r2, [r3, #4]
		txd_buf[9] = 0xf5; // IDAC MUX
 80015da:	4b9d      	ldr	r3, [pc, #628]	@ (8001850 <ADC_READ+0x368>)
 80015dc:	22f5      	movs	r2, #245	@ 0xf5
 80015de:	725a      	strb	r2, [r3, #9]
		break;
 80015e0:	e014      	b.n	800160c <ADC_READ+0x124>

	case 1:
		txd_buf[4] = 0x10; // Input MUX for RTD legs selection (MUX configuration)
 80015e2:	4b9b      	ldr	r3, [pc, #620]	@ (8001850 <ADC_READ+0x368>)
 80015e4:	2210      	movs	r2, #16
 80015e6:	711a      	strb	r2, [r3, #4]
		txd_buf[9] = 0xf2; // IDAC MUX
 80015e8:	4b99      	ldr	r3, [pc, #612]	@ (8001850 <ADC_READ+0x368>)
 80015ea:	22f2      	movs	r2, #242	@ 0xf2
 80015ec:	725a      	strb	r2, [r3, #9]
		break;
 80015ee:	e00d      	b.n	800160c <ADC_READ+0x124>

	case 2:
		txd_buf[4] = 0x9A; // Input MUX for RTD legs selection (MUX configuration)
 80015f0:	4b97      	ldr	r3, [pc, #604]	@ (8001850 <ADC_READ+0x368>)
 80015f2:	229a      	movs	r2, #154	@ 0x9a
 80015f4:	711a      	strb	r2, [r3, #4]
		txd_buf[9] = 0xf8; // IDAC MUX
 80015f6:	4b96      	ldr	r3, [pc, #600]	@ (8001850 <ADC_READ+0x368>)
 80015f8:	22f8      	movs	r2, #248	@ 0xf8
 80015fa:	725a      	strb	r2, [r3, #9]
		break;
 80015fc:	e006      	b.n	800160c <ADC_READ+0x124>
	case 3:
		txd_buf[4] = 0x76; // Input MUX for RTD legs selection (MUX configuration)
 80015fe:	4b94      	ldr	r3, [pc, #592]	@ (8001850 <ADC_READ+0x368>)
 8001600:	2276      	movs	r2, #118	@ 0x76
 8001602:	711a      	strb	r2, [r3, #4]
		txd_buf[9] = 0xfb;// IDAC MUX
 8001604:	4b92      	ldr	r3, [pc, #584]	@ (8001850 <ADC_READ+0x368>)
 8001606:	22fb      	movs	r2, #251	@ 0xfb
 8001608:	725a      	strb	r2, [r3, #9]
		break;
 800160a:	bf00      	nop
	}

	switch(adc_num)
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	2b02      	cmp	r3, #2
 8001610:	f000 83e8 	beq.w	8001de4 <ADC_READ+0x8fc>
 8001614:	2b02      	cmp	r3, #2
 8001616:	f300 85b0 	bgt.w	800217a <ADC_READ+0xc92>
 800161a:	2b00      	cmp	r3, #0
 800161c:	d004      	beq.n	8001628 <ADC_READ+0x140>
 800161e:	2b01      	cmp	r3, #1
 8001620:	f000 81d0 	beq.w	80019c4 <ADC_READ+0x4dc>
 8001624:	f000 bda9 	b.w	800217a <ADC_READ+0xc92>
	{
	case ADC_1:
		//		if(sensor_table[adc_num][channel] == 1 || check_channel)
		//		{
		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 8001628:	2200      	movs	r2, #0
 800162a:	2140      	movs	r1, #64	@ 0x40
 800162c:	4889      	ldr	r0, [pc, #548]	@ (8001854 <ADC_READ+0x36c>)
 800162e:	f003 fdcb 	bl	80051c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, START_1_Pin, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001638:	4886      	ldr	r0, [pc, #536]	@ (8001854 <ADC_READ+0x36c>)
 800163a:	f003 fdc5 	bl	80051c8 <HAL_GPIO_WritePin>

		//HAL_Delay(100);
		HAL_GPIO_WritePin(GPIOC, RESET_1_Pin, 0);
 800163e:	2200      	movs	r2, #0
 8001640:	2104      	movs	r1, #4
 8001642:	4885      	ldr	r0, [pc, #532]	@ (8001858 <ADC_READ+0x370>)
 8001644:	f003 fdc0 	bl	80051c8 <HAL_GPIO_WritePin>
		//HAL_Delay(100);
		HAL_GPIO_WritePin(GPIOC, RESET_1_Pin, 1);
 8001648:	2201      	movs	r2, #1
 800164a:	2104      	movs	r1, #4
 800164c:	4882      	ldr	r0, [pc, #520]	@ (8001858 <ADC_READ+0x370>)
 800164e:	f003 fdbb 	bl	80051c8 <HAL_GPIO_WritePin>
		//HAL_Delay(100);



		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2140      	movs	r1, #64	@ 0x40
 8001656:	487f      	ldr	r0, [pc, #508]	@ (8001854 <ADC_READ+0x36c>)
 8001658:	f003 fdb6 	bl	80051c8 <HAL_GPIO_WritePin>


		HAL_SPI_Transmit(&hspi5, (uint8_t*) &txd_buf,0x13, 0xFF);
 800165c:	23ff      	movs	r3, #255	@ 0xff
 800165e:	2213      	movs	r2, #19
 8001660:	497b      	ldr	r1, [pc, #492]	@ (8001850 <ADC_READ+0x368>)
 8001662:	487e      	ldr	r0, [pc, #504]	@ (800185c <ADC_READ+0x374>)
 8001664:	f00a fe54 	bl	800c310 <HAL_SPI_Transmit>
		HAL_Delay(2);
 8001668:	2002      	movs	r0, #2
 800166a:	f003 fa01 	bl	8004a70 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 1);
 800166e:	2201      	movs	r2, #1
 8001670:	2140      	movs	r1, #64	@ 0x40
 8001672:	4878      	ldr	r0, [pc, #480]	@ (8001854 <ADC_READ+0x36c>)
 8001674:	f003 fda8 	bl	80051c8 <HAL_GPIO_WritePin>


		HAL_Delay(2);
 8001678:	2002      	movs	r0, #2
 800167a:	f003 f9f9 	bl	8004a70 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOF, START_1_Pin, 1);
 800167e:	2201      	movs	r2, #1
 8001680:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001684:	4873      	ldr	r0, [pc, #460]	@ (8001854 <ADC_READ+0x36c>)
 8001686:	f003 fd9f 	bl	80051c8 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800168a:	2002      	movs	r0, #2
 800168c:	f003 f9f0 	bl	8004a70 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 8001690:	2200      	movs	r2, #0
 8001692:	2140      	movs	r1, #64	@ 0x40
 8001694:	486f      	ldr	r0, [pc, #444]	@ (8001854 <ADC_READ+0x36c>)
 8001696:	f003 fd97 	bl	80051c8 <HAL_GPIO_WritePin>
		txd_buf[0] = 0x19;
 800169a:	4b6d      	ldr	r3, [pc, #436]	@ (8001850 <ADC_READ+0x368>)
 800169c:	2219      	movs	r2, #25
 800169e:	701a      	strb	r2, [r3, #0]
		HAL_Delay(2);
 80016a0:	2002      	movs	r0, #2
 80016a2:	f003 f9e5 	bl	8004a70 <HAL_Delay>
		HAL_SPI_Transmit(&hspi5, (uint8_t*) &txd_buf, 1, 0xFF);
 80016a6:	23ff      	movs	r3, #255	@ 0xff
 80016a8:	2201      	movs	r2, #1
 80016aa:	4969      	ldr	r1, [pc, #420]	@ (8001850 <ADC_READ+0x368>)
 80016ac:	486b      	ldr	r0, [pc, #428]	@ (800185c <ADC_READ+0x374>)
 80016ae:	f00a fe2f 	bl	800c310 <HAL_SPI_Transmit>
		HAL_Delay(2);
 80016b2:	2002      	movs	r0, #2
 80016b4:	f003 f9dc 	bl	8004a70 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 1);
 80016b8:	2201      	movs	r2, #1
 80016ba:	2140      	movs	r1, #64	@ 0x40
 80016bc:	4865      	ldr	r0, [pc, #404]	@ (8001854 <ADC_READ+0x36c>)
 80016be:	f003 fd83 	bl	80051c8 <HAL_GPIO_WritePin>

		HAL_Delay(wait_time);
 80016c2:	4b67      	ldr	r3, [pc, #412]	@ (8001860 <ADC_READ+0x378>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f003 f9d2 	bl	8004a70 <HAL_Delay>


		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2140      	movs	r1, #64	@ 0x40
 80016d0:	4860      	ldr	r0, [pc, #384]	@ (8001854 <ADC_READ+0x36c>)
 80016d2:	f003 fd79 	bl	80051c8 <HAL_GPIO_WritePin>
		txd_buf[0] = 0x13;
 80016d6:	4b5e      	ldr	r3, [pc, #376]	@ (8001850 <ADC_READ+0x368>)
 80016d8:	2213      	movs	r2, #19
 80016da:	701a      	strb	r2, [r3, #0]
		//HAL_Delay(2);
		for (int i = 0; i < 10; i++)
 80016dc:	2300      	movs	r3, #0
 80016de:	643b      	str	r3, [r7, #64]	@ 0x40
 80016e0:	e02d      	b.n	800173e <ADC_READ+0x256>
		{

			HAL_SPI_Transmit(&hspi5, (uint8_t*) &txd_buf, 1, 0xFF);
 80016e2:	23ff      	movs	r3, #255	@ 0xff
 80016e4:	2201      	movs	r2, #1
 80016e6:	495a      	ldr	r1, [pc, #360]	@ (8001850 <ADC_READ+0x368>)
 80016e8:	485c      	ldr	r0, [pc, #368]	@ (800185c <ADC_READ+0x374>)
 80016ea:	f00a fe11 	bl	800c310 <HAL_SPI_Transmit>
			//HAL_Delay(2);
			HAL_SPI_Receive(&hspi5, (uint8_t*) &reg_data_ADC_1[i], 0x2, 0xFF);
 80016ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	4a5c      	ldr	r2, [pc, #368]	@ (8001864 <ADC_READ+0x37c>)
 80016f4:	1899      	adds	r1, r3, r2
 80016f6:	23ff      	movs	r3, #255	@ 0xff
 80016f8:	2202      	movs	r2, #2
 80016fa:	4858      	ldr	r0, [pc, #352]	@ (800185c <ADC_READ+0x374>)
 80016fc:	f00b f81e 	bl	800c73c <HAL_SPI_Receive>


			// Byte-wise flip
			reg_data_ADC_1[i] = (reg_data_ADC_1[i] >> 8) | (reg_data_ADC_1[i] << 8);
 8001700:	4a58      	ldr	r2, [pc, #352]	@ (8001864 <ADC_READ+0x37c>)
 8001702:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001704:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001708:	0a1b      	lsrs	r3, r3, #8
 800170a:	b29b      	uxth	r3, r3
 800170c:	b21a      	sxth	r2, r3
 800170e:	4955      	ldr	r1, [pc, #340]	@ (8001864 <ADC_READ+0x37c>)
 8001710:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001712:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001716:	021b      	lsls	r3, r3, #8
 8001718:	b21b      	sxth	r3, r3
 800171a:	4313      	orrs	r3, r2
 800171c:	b21b      	sxth	r3, r3
 800171e:	b299      	uxth	r1, r3
 8001720:	4a50      	ldr	r2, [pc, #320]	@ (8001864 <ADC_READ+0x37c>)
 8001722:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001724:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			sum += reg_data_ADC_1[i];  // Add to sum for averaging
 8001728:	4a4e      	ldr	r2, [pc, #312]	@ (8001864 <ADC_READ+0x37c>)
 800172a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800172c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001730:	461a      	mov	r2, r3
 8001732:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001734:	4413      	add	r3, r2
 8001736:	64bb      	str	r3, [r7, #72]	@ 0x48
		for (int i = 0; i < 10; i++)
 8001738:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800173a:	3301      	adds	r3, #1
 800173c:	643b      	str	r3, [r7, #64]	@ 0x40
 800173e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001740:	2b09      	cmp	r3, #9
 8001742:	ddce      	ble.n	80016e2 <ADC_READ+0x1fa>

		}

		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 1);
 8001744:	2201      	movs	r2, #1
 8001746:	2140      	movs	r1, #64	@ 0x40
 8001748:	4842      	ldr	r0, [pc, #264]	@ (8001854 <ADC_READ+0x36c>)
 800174a:	f003 fd3d 	bl	80051c8 <HAL_GPIO_WritePin>

		average = sum / 10.0;
 800174e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001750:	f7fe fee8 	bl	8000524 <__aeabi_ui2d>
 8001754:	f04f 0200 	mov.w	r2, #0
 8001758:	4b43      	ldr	r3, [pc, #268]	@ (8001868 <ADC_READ+0x380>)
 800175a:	f7ff f887 	bl	800086c <__aeabi_ddiv>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4610      	mov	r0, r2
 8001764:	4619      	mov	r1, r3
 8001766:	f7ff fa2f 	bl	8000bc8 <__aeabi_d2f>
 800176a:	4603      	mov	r3, r0
 800176c:	633b      	str	r3, [r7, #48]	@ 0x30
		adchex  = sum / 10;
 800176e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001770:	4a3e      	ldr	r2, [pc, #248]	@ (800186c <ADC_READ+0x384>)
 8001772:	fba2 2303 	umull	r2, r3, r2, r3
 8001776:	08db      	lsrs	r3, r3, #3
 8001778:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		resistance = ((2*1000*(float)average)/4) / 0xFFFF;
 800177c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001780:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001870 <ADC_READ+0x388>
 8001784:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001788:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800178c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001790:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8001874 <ADC_READ+0x38c>
 8001794:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001798:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		//Callendar-Van Dusen Equation
		if (resistance >= R0) {  // Above 0°C
 800179c:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8001884 <ADC_READ+0x39c>
 80017a0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80017a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ac:	db6c      	blt.n	8001888 <ADC_READ+0x3a0>
			temperature = (-A + sqrt(A * A - 4 * B * (1 - (resistance / R0)))) / (2 * B);
 80017ae:	eddf 7a32 	vldr	s15, [pc, #200]	@ 8001878 <ADC_READ+0x390>
 80017b2:	eef1 7a67 	vneg.f32	s15, s15
 80017b6:	ee17 3a90 	vmov	r3, s15
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7fe fed4 	bl	8000568 <__aeabi_f2d>
 80017c0:	4604      	mov	r4, r0
 80017c2:	460d      	mov	r5, r1
 80017c4:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8001878 <ADC_READ+0x390>
 80017c8:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 8001878 <ADC_READ+0x390>
 80017cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017d0:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800187c <ADC_READ+0x394>
 80017d4:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 80017d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017dc:	eddf 5a29 	vldr	s11, [pc, #164]	@ 8001884 <ADC_READ+0x39c>
 80017e0:	ed97 6a0d 	vldr	s12, [r7, #52]	@ 0x34
 80017e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80017e8:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80017ec:	ee76 7a67 	vsub.f32	s15, s12, s15
 80017f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017f8:	ee17 0a90 	vmov	r0, s15
 80017fc:	f7fe feb4 	bl	8000568 <__aeabi_f2d>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	ec43 2b10 	vmov	d0, r2, r3
 8001808:	f010 fcf6 	bl	80121f8 <sqrt>
 800180c:	ec53 2b10 	vmov	r2, r3, d0
 8001810:	4620      	mov	r0, r4
 8001812:	4629      	mov	r1, r5
 8001814:	f7fe fd4a 	bl	80002ac <__adddf3>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4614      	mov	r4, r2
 800181e:	461d      	mov	r5, r3
 8001820:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800187c <ADC_READ+0x394>
 8001824:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001828:	ee17 0a90 	vmov	r0, s15
 800182c:	f7fe fe9c 	bl	8000568 <__aeabi_f2d>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4620      	mov	r0, r4
 8001836:	4629      	mov	r1, r5
 8001838:	f7ff f818 	bl	800086c <__aeabi_ddiv>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4610      	mov	r0, r2
 8001842:	4619      	mov	r1, r3
 8001844:	f7ff f9c0 	bl	8000bc8 <__aeabi_d2f>
 8001848:	4603      	mov	r3, r0
 800184a:	4a0d      	ldr	r2, [pc, #52]	@ (8001880 <ADC_READ+0x398>)
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	e033      	b.n	80018b8 <ADC_READ+0x3d0>
 8001850:	2000021c 	.word	0x2000021c
 8001854:	42021400 	.word	0x42021400
 8001858:	42020800 	.word	0x42020800
 800185c:	2000591c 	.word	0x2000591c
 8001860:	20000000 	.word	0x20000000
 8001864:	2000042c 	.word	0x2000042c
 8001868:	40240000 	.word	0x40240000
 800186c:	cccccccd 	.word	0xcccccccd
 8001870:	44fa0000 	.word	0x44fa0000
 8001874:	477fff00 	.word	0x477fff00
 8001878:	3b801132 	.word	0x3b801132
 800187c:	b51b057f 	.word	0xb51b057f
 8001880:	20000428 	.word	0x20000428
 8001884:	42c80000 	.word	0x42c80000
		}
		else
		{  // Below 0°C, use simpler approximation
			temperature = (resistance - R0) / 0.385;
 8001888:	ed1f 7a02 	vldr	s14, [pc, #-8]	@ 8001884 <ADC_READ+0x39c>
 800188c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001890:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001894:	ee17 0a90 	vmov	r0, s15
 8001898:	f7fe fe66 	bl	8000568 <__aeabi_f2d>
 800189c:	a38d      	add	r3, pc, #564	@ (adr r3, 8001ad4 <ADC_READ+0x5ec>)
 800189e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a2:	f7fe ffe3 	bl	800086c <__aeabi_ddiv>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4610      	mov	r0, r2
 80018ac:	4619      	mov	r1, r3
 80018ae:	f7ff f98b 	bl	8000bc8 <__aeabi_d2f>
 80018b2:	4603      	mov	r3, r0
 80018b4:	4a7a      	ldr	r2, [pc, #488]	@ (8001aa0 <ADC_READ+0x5b8>)
 80018b6:	6013      	str	r3, [r2, #0]
		}

		if(rxd_buf[7]==txd_buf[9])
 80018b8:	7dfa      	ldrb	r2, [r7, #23]
 80018ba:	4b7a      	ldr	r3, [pc, #488]	@ (8001aa4 <ADC_READ+0x5bc>)
 80018bc:	7a5b      	ldrb	r3, [r3, #9]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d10e      	bne.n	80018e0 <ADC_READ+0x3f8>
		{
			HAL_GPIO_WritePin(GPIOE, LED1_Pin, 1); // Toggle LED for visual feedback
 80018c2:	2201      	movs	r2, #1
 80018c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018c8:	4877      	ldr	r0, [pc, #476]	@ (8001aa8 <ADC_READ+0x5c0>)
 80018ca:	f003 fc7d 	bl	80051c8 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 80018ce:	2001      	movs	r0, #1
 80018d0:	f003 f8ce 	bl	8004a70 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOE, LED1_Pin, 0);
 80018d4:	2200      	movs	r2, #0
 80018d6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018da:	4873      	ldr	r0, [pc, #460]	@ (8001aa8 <ADC_READ+0x5c0>)
 80018dc:	f003 fc74 	bl	80051c8 <HAL_GPIO_WritePin>

		}
		//}
#if 1

		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 80018e0:	2200      	movs	r2, #0
 80018e2:	2140      	movs	r1, #64	@ 0x40
 80018e4:	4871      	ldr	r0, [pc, #452]	@ (8001aac <ADC_READ+0x5c4>)
 80018e6:	f003 fc6f 	bl	80051c8 <HAL_GPIO_WritePin>
		txd_buf[0] = 0x21;
 80018ea:	4b6e      	ldr	r3, [pc, #440]	@ (8001aa4 <ADC_READ+0x5bc>)
 80018ec:	2221      	movs	r2, #33	@ 0x21
 80018ee:	701a      	strb	r2, [r3, #0]
		txd_buf[1] = 0x00;
 80018f0:	4b6c      	ldr	r3, [pc, #432]	@ (8001aa4 <ADC_READ+0x5bc>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	705a      	strb	r2, [r3, #1]
		HAL_Delay(2);
 80018f6:	2002      	movs	r0, #2
 80018f8:	f003 f8ba 	bl	8004a70 <HAL_Delay>
		HAL_SPI_Transmit(&hspi5, (uint8_t*) &txd_buf, 2, 0xFF);
 80018fc:	23ff      	movs	r3, #255	@ 0xff
 80018fe:	2202      	movs	r2, #2
 8001900:	4968      	ldr	r1, [pc, #416]	@ (8001aa4 <ADC_READ+0x5bc>)
 8001902:	486b      	ldr	r0, [pc, #428]	@ (8001ab0 <ADC_READ+0x5c8>)
 8001904:	f00a fd04 	bl	800c310 <HAL_SPI_Transmit>
		HAL_Delay(2);
 8001908:	2002      	movs	r0, #2
 800190a:	f003 f8b1 	bl	8004a70 <HAL_Delay>
		HAL_SPI_Receive(&hspi5, (uint8_t*) &wirestatus, 0x01, 0xFF);
 800190e:	f107 010f 	add.w	r1, r7, #15
 8001912:	23ff      	movs	r3, #255	@ 0xff
 8001914:	2201      	movs	r2, #1
 8001916:	4866      	ldr	r0, [pc, #408]	@ (8001ab0 <ADC_READ+0x5c8>)
 8001918:	f00a ff10 	bl	800c73c <HAL_SPI_Receive>
		HAL_Delay(2);
 800191c:	2002      	movs	r0, #2
 800191e:	f003 f8a7 	bl	8004a70 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 1);
 8001922:	2201      	movs	r2, #1
 8001924:	2140      	movs	r1, #64	@ 0x40
 8001926:	4861      	ldr	r0, [pc, #388]	@ (8001aac <ADC_READ+0x5c4>)
 8001928:	f003 fc4e 	bl	80051c8 <HAL_GPIO_WritePin>

		//		status = wire_break(wirestatus);

		if (wire_break(wirestatus))
 800192c:	7bfb      	ldrb	r3, [r7, #15]
 800192e:	4618      	mov	r0, r3
 8001930:	f000 fc4e 	bl	80021d0 <wire_break>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d011      	beq.n	800195e <ADC_READ+0x476>
		{
			status=0;
 800193a:	2300      	movs	r3, #0
 800193c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			wirestatus=0;
 8001940:	2300      	movs	r3, #0
 8001942:	73fb      	strb	r3, [r7, #15]
			temperature = 0;
 8001944:	4b56      	ldr	r3, [pc, #344]	@ (8001aa0 <ADC_READ+0x5b8>)
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
			adchex =0;
 800194c:	2300      	movs	r3, #0
 800194e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
			memset(&reg_data_ADC_1,0,sizeof(reg_data_ADC_1));
 8001952:	2214      	movs	r2, #20
 8001954:	2100      	movs	r1, #0
 8001956:	4857      	ldr	r0, [pc, #348]	@ (8001ab4 <ADC_READ+0x5cc>)
 8001958:	f00e fb6d 	bl	8010036 <memset>
 800195c:	e015      	b.n	800198a <ADC_READ+0x4a2>
		}
		else if(check_sensor_validity(adchex))
 800195e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001962:	4618      	mov	r0, r3
 8001964:	f000 fc1a 	bl	800219c <check_sensor_validity>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00d      	beq.n	800198a <ADC_READ+0x4a2>
		{
			wirestatus=0;
 800196e:	2300      	movs	r3, #0
 8001970:	73fb      	strb	r3, [r7, #15]
			temperature = 0;
 8001972:	4b4b      	ldr	r3, [pc, #300]	@ (8001aa0 <ADC_READ+0x5b8>)
 8001974:	f04f 0200 	mov.w	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
			adchex =0;
 800197a:	2300      	movs	r3, #0
 800197c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
			memset(&reg_data_ADC_1,0,sizeof(reg_data_ADC_1));
 8001980:	2214      	movs	r2, #20
 8001982:	2100      	movs	r1, #0
 8001984:	484b      	ldr	r0, [pc, #300]	@ (8001ab4 <ADC_READ+0x5cc>)
 8001986:	f00e fb56 	bl	8010036 <memset>
		}
		wirestatus=0;
 800198a:	2300      	movs	r3, #0
 800198c:	73fb      	strb	r3, [r7, #15]
#endif
		temp_sensor[adc_num][channel] = temperature ;
 800198e:	79f9      	ldrb	r1, [r7, #7]
 8001990:	79bb      	ldrb	r3, [r7, #6]
 8001992:	4a43      	ldr	r2, [pc, #268]	@ (8001aa0 <ADC_READ+0x5b8>)
 8001994:	6812      	ldr	r2, [r2, #0]
 8001996:	4848      	ldr	r0, [pc, #288]	@ (8001ab8 <ADC_READ+0x5d0>)
 8001998:	0089      	lsls	r1, r1, #2
 800199a:	440b      	add	r3, r1
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4403      	add	r3, r0
 80019a0:	601a      	str	r2, [r3, #0]
		sensor_hex[adc_num][channel] = 	adchex ;
 80019a2:	79fa      	ldrb	r2, [r7, #7]
 80019a4:	79bb      	ldrb	r3, [r7, #6]
 80019a6:	4945      	ldr	r1, [pc, #276]	@ (8001abc <ADC_READ+0x5d4>)
 80019a8:	0092      	lsls	r2, r2, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80019b0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

		sensor_value =	sum / 10;
 80019b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019b6:	4a42      	ldr	r2, [pc, #264]	@ (8001ac0 <ADC_READ+0x5d8>)
 80019b8:	fba2 2303 	umull	r2, r3, r2, r3
 80019bc:	08db      	lsrs	r3, r3, #3
 80019be:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

		break;
 80019c2:	e3da      	b.n	800217a <ADC_READ+0xc92>

	case ADC_2:
		//		if(sensor_table[adc_num][channel] == 1 || check_channel)
		//		{
		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 80019c4:	2200      	movs	r2, #0
 80019c6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80019ca:	483e      	ldr	r0, [pc, #248]	@ (8001ac4 <ADC_READ+0x5dc>)
 80019cc:	f003 fbfc 	bl	80051c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, START_2_Pin, 0);
 80019d0:	2200      	movs	r2, #0
 80019d2:	2140      	movs	r1, #64	@ 0x40
 80019d4:	483c      	ldr	r0, [pc, #240]	@ (8001ac8 <ADC_READ+0x5e0>)
 80019d6:	f003 fbf7 	bl	80051c8 <HAL_GPIO_WritePin>
		//HAL_Delay(100);
		HAL_GPIO_WritePin(GPIOG, RESET_2_Pin, 0);
 80019da:	2200      	movs	r2, #0
 80019dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019e0:	4839      	ldr	r0, [pc, #228]	@ (8001ac8 <ADC_READ+0x5e0>)
 80019e2:	f003 fbf1 	bl	80051c8 <HAL_GPIO_WritePin>
		//HAL_Delay(100);
		HAL_GPIO_WritePin(GPIOG, RESET_2_Pin, 1);
 80019e6:	2201      	movs	r2, #1
 80019e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019ec:	4836      	ldr	r0, [pc, #216]	@ (8001ac8 <ADC_READ+0x5e0>)
 80019ee:	f003 fbeb 	bl	80051c8 <HAL_GPIO_WritePin>
		//HAL_Delay(100);



		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80019f8:	4832      	ldr	r0, [pc, #200]	@ (8001ac4 <ADC_READ+0x5dc>)
 80019fa:	f003 fbe5 	bl	80051c8 <HAL_GPIO_WritePin>

		HAL_Delay(2);
 80019fe:	2002      	movs	r0, #2
 8001a00:	f003 f836 	bl	8004a70 <HAL_Delay>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &txd_buf,0x13, 0xFF);
 8001a04:	23ff      	movs	r3, #255	@ 0xff
 8001a06:	2213      	movs	r2, #19
 8001a08:	4926      	ldr	r1, [pc, #152]	@ (8001aa4 <ADC_READ+0x5bc>)
 8001a0a:	4830      	ldr	r0, [pc, #192]	@ (8001acc <ADC_READ+0x5e4>)
 8001a0c:	f00a fc80 	bl	800c310 <HAL_SPI_Transmit>
		HAL_Delay(2);
 8001a10:	2002      	movs	r0, #2
 8001a12:	f003 f82d 	bl	8004a70 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 1);
 8001a16:	2201      	movs	r2, #1
 8001a18:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a1c:	4829      	ldr	r0, [pc, #164]	@ (8001ac4 <ADC_READ+0x5dc>)
 8001a1e:	f003 fbd3 	bl	80051c8 <HAL_GPIO_WritePin>


		//HAL_Delay(200);

		HAL_Delay(2);
 8001a22:	2002      	movs	r0, #2
 8001a24:	f003 f824 	bl	8004a70 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOG, START_2_Pin, 1);
 8001a28:	2201      	movs	r2, #1
 8001a2a:	2140      	movs	r1, #64	@ 0x40
 8001a2c:	4826      	ldr	r0, [pc, #152]	@ (8001ac8 <ADC_READ+0x5e0>)
 8001a2e:	f003 fbcb 	bl	80051c8 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001a32:	2002      	movs	r0, #2
 8001a34:	f003 f81c 	bl	8004a70 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a3e:	4821      	ldr	r0, [pc, #132]	@ (8001ac4 <ADC_READ+0x5dc>)
 8001a40:	f003 fbc2 	bl	80051c8 <HAL_GPIO_WritePin>
		txd_buf[0] = 0x19;
 8001a44:	4b17      	ldr	r3, [pc, #92]	@ (8001aa4 <ADC_READ+0x5bc>)
 8001a46:	2219      	movs	r2, #25
 8001a48:	701a      	strb	r2, [r3, #0]
		HAL_Delay(2);
 8001a4a:	2002      	movs	r0, #2
 8001a4c:	f003 f810 	bl	8004a70 <HAL_Delay>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &txd_buf, 1, 0xFF);
 8001a50:	23ff      	movs	r3, #255	@ 0xff
 8001a52:	2201      	movs	r2, #1
 8001a54:	4913      	ldr	r1, [pc, #76]	@ (8001aa4 <ADC_READ+0x5bc>)
 8001a56:	481d      	ldr	r0, [pc, #116]	@ (8001acc <ADC_READ+0x5e4>)
 8001a58:	f00a fc5a 	bl	800c310 <HAL_SPI_Transmit>
		HAL_Delay(2);
 8001a5c:	2002      	movs	r0, #2
 8001a5e:	f003 f807 	bl	8004a70 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 1);
 8001a62:	2201      	movs	r2, #1
 8001a64:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a68:	4816      	ldr	r0, [pc, #88]	@ (8001ac4 <ADC_READ+0x5dc>)
 8001a6a:	f003 fbad 	bl	80051c8 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001a6e:	2002      	movs	r0, #2
 8001a70:	f002 fffe 	bl	8004a70 <HAL_Delay>
		HAL_Delay(wait_time);
 8001a74:	4b16      	ldr	r3, [pc, #88]	@ (8001ad0 <ADC_READ+0x5e8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f002 fff9 	bl	8004a70 <HAL_Delay>



		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a84:	480f      	ldr	r0, [pc, #60]	@ (8001ac4 <ADC_READ+0x5dc>)
 8001a86:	f003 fb9f 	bl	80051c8 <HAL_GPIO_WritePin>
		txd_buf[0] = 0x13;
 8001a8a:	4b06      	ldr	r3, [pc, #24]	@ (8001aa4 <ADC_READ+0x5bc>)
 8001a8c:	2213      	movs	r2, #19
 8001a8e:	701a      	strb	r2, [r3, #0]
		HAL_Delay(2);
 8001a90:	2002      	movs	r0, #2
 8001a92:	f002 ffed 	bl	8004a70 <HAL_Delay>
		for (int i = 0; i < 10; i++)
 8001a96:	2300      	movs	r3, #0
 8001a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a9a:	e050      	b.n	8001b3e <ADC_READ+0x656>
 8001a9c:	f3af 8000 	nop.w
 8001aa0:	20000428 	.word	0x20000428
 8001aa4:	2000021c 	.word	0x2000021c
 8001aa8:	42021000 	.word	0x42021000
 8001aac:	42021400 	.word	0x42021400
 8001ab0:	2000591c 	.word	0x2000591c
 8001ab4:	2000042c 	.word	0x2000042c
 8001ab8:	20000468 	.word	0x20000468
 8001abc:	20000498 	.word	0x20000498
 8001ac0:	cccccccd 	.word	0xcccccccd
 8001ac4:	42020400 	.word	0x42020400
 8001ac8:	42021800 	.word	0x42021800
 8001acc:	200057fc 	.word	0x200057fc
 8001ad0:	20000000 	.word	0x20000000
 8001ad4:	0a3d70a4 	.word	0x0a3d70a4
 8001ad8:	3fd8a3d7 	.word	0x3fd8a3d7
		{

			HAL_SPI_Transmit(&hspi2, (uint8_t*) &txd_buf, 1, 0xFF);
 8001adc:	23ff      	movs	r3, #255	@ 0xff
 8001ade:	2201      	movs	r2, #1
 8001ae0:	49b1      	ldr	r1, [pc, #708]	@ (8001da8 <ADC_READ+0x8c0>)
 8001ae2:	48b2      	ldr	r0, [pc, #712]	@ (8001dac <ADC_READ+0x8c4>)
 8001ae4:	f00a fc14 	bl	800c310 <HAL_SPI_Transmit>
			HAL_Delay(2);
 8001ae8:	2002      	movs	r0, #2
 8001aea:	f002 ffc1 	bl	8004a70 <HAL_Delay>
			HAL_SPI_Receive(&hspi2, (uint8_t*) &reg_data_ADC_2[i], 0x2, 0xFF);
 8001aee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	4aaf      	ldr	r2, [pc, #700]	@ (8001db0 <ADC_READ+0x8c8>)
 8001af4:	1899      	adds	r1, r3, r2
 8001af6:	23ff      	movs	r3, #255	@ 0xff
 8001af8:	2202      	movs	r2, #2
 8001afa:	48ac      	ldr	r0, [pc, #688]	@ (8001dac <ADC_READ+0x8c4>)
 8001afc:	f00a fe1e 	bl	800c73c <HAL_SPI_Receive>

			// Byte-wise flip
			reg_data_ADC_2[i] = (reg_data_ADC_2[i] >> 8) | (reg_data_ADC_2[i] << 8);
 8001b00:	4aab      	ldr	r2, [pc, #684]	@ (8001db0 <ADC_READ+0x8c8>)
 8001b02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b08:	0a1b      	lsrs	r3, r3, #8
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	b21a      	sxth	r2, r3
 8001b0e:	49a8      	ldr	r1, [pc, #672]	@ (8001db0 <ADC_READ+0x8c8>)
 8001b10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b12:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001b16:	021b      	lsls	r3, r3, #8
 8001b18:	b21b      	sxth	r3, r3
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	b21b      	sxth	r3, r3
 8001b1e:	b299      	uxth	r1, r3
 8001b20:	4aa3      	ldr	r2, [pc, #652]	@ (8001db0 <ADC_READ+0x8c8>)
 8001b22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b24:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			sum += reg_data_ADC_2[i];  // Add to sum for averaging
 8001b28:	4aa1      	ldr	r2, [pc, #644]	@ (8001db0 <ADC_READ+0x8c8>)
 8001b2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b30:	461a      	mov	r2, r3
 8001b32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b34:	4413      	add	r3, r2
 8001b36:	64bb      	str	r3, [r7, #72]	@ 0x48
		for (int i = 0; i < 10; i++)
 8001b38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b40:	2b09      	cmp	r3, #9
 8001b42:	ddcb      	ble.n	8001adc <ADC_READ+0x5f4>
			//				temp_sensor[adc_num][channel] = 0 ;
			//				sensor_hex[adc_num][channel] = 0 ;
			//				return 0x7FFF;
			//			}
		}
		adchex =  sum / 10;
 8001b44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b46:	4a9b      	ldr	r2, [pc, #620]	@ (8001db4 <ADC_READ+0x8cc>)
 8001b48:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4c:	08db      	lsrs	r3, r3, #3
 8001b4e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		average = sum / 10.0;
 8001b52:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001b54:	f7fe fce6 	bl	8000524 <__aeabi_ui2d>
 8001b58:	f04f 0200 	mov.w	r2, #0
 8001b5c:	4b96      	ldr	r3, [pc, #600]	@ (8001db8 <ADC_READ+0x8d0>)
 8001b5e:	f7fe fe85 	bl	800086c <__aeabi_ddiv>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	4610      	mov	r0, r2
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f7ff f82d 	bl	8000bc8 <__aeabi_d2f>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	633b      	str	r3, [r7, #48]	@ 0x30
		HAL_Delay(2);
 8001b72:	2002      	movs	r0, #2
 8001b74:	f002 ff7c 	bl	8004a70 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 1);
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b7e:	488f      	ldr	r0, [pc, #572]	@ (8001dbc <ADC_READ+0x8d4>)
 8001b80:	f003 fb22 	bl	80051c8 <HAL_GPIO_WritePin>
		resistance = ((2*1000*(float)average)/4) / 0xFFFF;
 8001b84:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001b88:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 8001dc0 <ADC_READ+0x8d8>
 8001b8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b90:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001b94:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b98:	eddf 6a8a 	vldr	s13, [pc, #552]	@ 8001dc4 <ADC_READ+0x8dc>
 8001b9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ba0:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		//Callendar-Van Dusen Equation
		if (resistance >= R0) {  // Above 0°C
 8001ba4:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8001dc8 <ADC_READ+0x8e0>
 8001ba8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001bac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb4:	db50      	blt.n	8001c58 <ADC_READ+0x770>
			temperature = (-A + sqrt(A * A - 4 * B * (1 - (resistance / R0)))) / (2 * B);
 8001bb6:	eddf 7a85 	vldr	s15, [pc, #532]	@ 8001dcc <ADC_READ+0x8e4>
 8001bba:	eef1 7a67 	vneg.f32	s15, s15
 8001bbe:	ee17 3a90 	vmov	r3, s15
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7fe fcd0 	bl	8000568 <__aeabi_f2d>
 8001bc8:	4604      	mov	r4, r0
 8001bca:	460d      	mov	r5, r1
 8001bcc:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 8001dcc <ADC_READ+0x8e4>
 8001bd0:	eddf 7a7e 	vldr	s15, [pc, #504]	@ 8001dcc <ADC_READ+0x8e4>
 8001bd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bd8:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 8001dd0 <ADC_READ+0x8e8>
 8001bdc:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 8001be0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001be4:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8001dc8 <ADC_READ+0x8e0>
 8001be8:	ed97 6a0d 	vldr	s12, [r7, #52]	@ 0x34
 8001bec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001bf0:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8001bf4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001bf8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c00:	ee17 0a90 	vmov	r0, s15
 8001c04:	f7fe fcb0 	bl	8000568 <__aeabi_f2d>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	ec43 2b10 	vmov	d0, r2, r3
 8001c10:	f010 faf2 	bl	80121f8 <sqrt>
 8001c14:	ec53 2b10 	vmov	r2, r3, d0
 8001c18:	4620      	mov	r0, r4
 8001c1a:	4629      	mov	r1, r5
 8001c1c:	f7fe fb46 	bl	80002ac <__adddf3>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	4614      	mov	r4, r2
 8001c26:	461d      	mov	r5, r3
 8001c28:	eddf 7a69 	vldr	s15, [pc, #420]	@ 8001dd0 <ADC_READ+0x8e8>
 8001c2c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c30:	ee17 0a90 	vmov	r0, s15
 8001c34:	f7fe fc98 	bl	8000568 <__aeabi_f2d>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4620      	mov	r0, r4
 8001c3e:	4629      	mov	r1, r5
 8001c40:	f7fe fe14 	bl	800086c <__aeabi_ddiv>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f7fe ffbc 	bl	8000bc8 <__aeabi_d2f>
 8001c50:	4603      	mov	r3, r0
 8001c52:	4a60      	ldr	r2, [pc, #384]	@ (8001dd4 <ADC_READ+0x8ec>)
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	e017      	b.n	8001c88 <ADC_READ+0x7a0>
		}
		else
		{  // Below 0°C, use simpler approximation
			temperature = (resistance - R0) / 0.385;
 8001c58:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8001dc8 <ADC_READ+0x8e0>
 8001c5c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001c60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c64:	ee17 0a90 	vmov	r0, s15
 8001c68:	f7fe fc7e 	bl	8000568 <__aeabi_f2d>
 8001c6c:	a34c      	add	r3, pc, #304	@ (adr r3, 8001da0 <ADC_READ+0x8b8>)
 8001c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c72:	f7fe fdfb 	bl	800086c <__aeabi_ddiv>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	f7fe ffa3 	bl	8000bc8 <__aeabi_d2f>
 8001c82:	4603      	mov	r3, r0
 8001c84:	4a53      	ldr	r2, [pc, #332]	@ (8001dd4 <ADC_READ+0x8ec>)
 8001c86:	6013      	str	r3, [r2, #0]
		}
		if(rxd_buf[7]==txd_buf[9] )
 8001c88:	7dfa      	ldrb	r2, [r7, #23]
 8001c8a:	4b47      	ldr	r3, [pc, #284]	@ (8001da8 <ADC_READ+0x8c0>)
 8001c8c:	7a5b      	ldrb	r3, [r3, #9]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d111      	bne.n	8001cb6 <ADC_READ+0x7ce>
		{
			HAL_GPIO_WritePin(GPIOE, LED2_Pin, 1); // Toggle LED for visual feedback
 8001c92:	2201      	movs	r2, #1
 8001c94:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c98:	484f      	ldr	r0, [pc, #316]	@ (8001dd8 <ADC_READ+0x8f0>)
 8001c9a:	f003 fa95 	bl	80051c8 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8001c9e:	2001      	movs	r0, #1
 8001ca0:	f002 fee6 	bl	8004a70 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOE, LED2_Pin, 0);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001caa:	484b      	ldr	r0, [pc, #300]	@ (8001dd8 <ADC_READ+0x8f0>)
 8001cac:	f003 fa8c 	bl	80051c8 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	f002 fedd 	bl	8004a70 <HAL_Delay>
#endif

		}

#if 1
		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001cbc:	483f      	ldr	r0, [pc, #252]	@ (8001dbc <ADC_READ+0x8d4>)
 8001cbe:	f003 fa83 	bl	80051c8 <HAL_GPIO_WritePin>
		txd_buf[0] = 0x21;
 8001cc2:	4b39      	ldr	r3, [pc, #228]	@ (8001da8 <ADC_READ+0x8c0>)
 8001cc4:	2221      	movs	r2, #33	@ 0x21
 8001cc6:	701a      	strb	r2, [r3, #0]
		txd_buf[1] = 0x00;
 8001cc8:	4b37      	ldr	r3, [pc, #220]	@ (8001da8 <ADC_READ+0x8c0>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	705a      	strb	r2, [r3, #1]
		HAL_Delay(2);
 8001cce:	2002      	movs	r0, #2
 8001cd0:	f002 fece 	bl	8004a70 <HAL_Delay>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &txd_buf, 2, 0xFF);
 8001cd4:	23ff      	movs	r3, #255	@ 0xff
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	4933      	ldr	r1, [pc, #204]	@ (8001da8 <ADC_READ+0x8c0>)
 8001cda:	4834      	ldr	r0, [pc, #208]	@ (8001dac <ADC_READ+0x8c4>)
 8001cdc:	f00a fb18 	bl	800c310 <HAL_SPI_Transmit>
		HAL_Delay(2);
 8001ce0:	2002      	movs	r0, #2
 8001ce2:	f002 fec5 	bl	8004a70 <HAL_Delay>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &wirestatus, 0x01, 0xFF);
 8001ce6:	f107 010f 	add.w	r1, r7, #15
 8001cea:	23ff      	movs	r3, #255	@ 0xff
 8001cec:	2201      	movs	r2, #1
 8001cee:	482f      	ldr	r0, [pc, #188]	@ (8001dac <ADC_READ+0x8c4>)
 8001cf0:	f00a fd24 	bl	800c73c <HAL_SPI_Receive>
		HAL_Delay(2);
 8001cf4:	2002      	movs	r0, #2
 8001cf6:	f002 febb 	bl	8004a70 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 1);
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d00:	482e      	ldr	r0, [pc, #184]	@ (8001dbc <ADC_READ+0x8d4>)
 8001d02:	f003 fa61 	bl	80051c8 <HAL_GPIO_WritePin>

		//		status = wire_break(wirestatus);


		if (wire_break(wirestatus))
 8001d06:	7bfb      	ldrb	r3, [r7, #15]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f000 fa61 	bl	80021d0 <wire_break>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d011      	beq.n	8001d38 <ADC_READ+0x850>
		{
			status=0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			wirestatus=0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	73fb      	strb	r3, [r7, #15]
			temperature = 0;
 8001d1e:	4b2d      	ldr	r3, [pc, #180]	@ (8001dd4 <ADC_READ+0x8ec>)
 8001d20:	f04f 0200 	mov.w	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
			adchex=0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
			memset(&reg_data_ADC_2,0,sizeof(reg_data_ADC_2));
 8001d2c:	2214      	movs	r2, #20
 8001d2e:	2100      	movs	r1, #0
 8001d30:	481f      	ldr	r0, [pc, #124]	@ (8001db0 <ADC_READ+0x8c8>)
 8001d32:	f00e f980 	bl	8010036 <memset>
 8001d36:	e015      	b.n	8001d64 <ADC_READ+0x87c>
		}
		else if(check_sensor_validity(adchex))
 8001d38:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f000 fa2d 	bl	800219c <check_sensor_validity>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d00d      	beq.n	8001d64 <ADC_READ+0x87c>
		{
			wirestatus=0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	73fb      	strb	r3, [r7, #15]
			temperature = 0;
 8001d4c:	4b21      	ldr	r3, [pc, #132]	@ (8001dd4 <ADC_READ+0x8ec>)
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
			adchex =0;
 8001d54:	2300      	movs	r3, #0
 8001d56:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
			memset(&reg_data_ADC_2,0,sizeof(reg_data_ADC_2));
 8001d5a:	2214      	movs	r2, #20
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	4814      	ldr	r0, [pc, #80]	@ (8001db0 <ADC_READ+0x8c8>)
 8001d60:	f00e f969 	bl	8010036 <memset>
		}
		wirestatus=0;
 8001d64:	2300      	movs	r3, #0
 8001d66:	73fb      	strb	r3, [r7, #15]
#endif
		temp_sensor[adc_num][channel] = temperature ;
 8001d68:	79f9      	ldrb	r1, [r7, #7]
 8001d6a:	79bb      	ldrb	r3, [r7, #6]
 8001d6c:	4a19      	ldr	r2, [pc, #100]	@ (8001dd4 <ADC_READ+0x8ec>)
 8001d6e:	6812      	ldr	r2, [r2, #0]
 8001d70:	481a      	ldr	r0, [pc, #104]	@ (8001ddc <ADC_READ+0x8f4>)
 8001d72:	0089      	lsls	r1, r1, #2
 8001d74:	440b      	add	r3, r1
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4403      	add	r3, r0
 8001d7a:	601a      	str	r2, [r3, #0]
		sensor_hex[adc_num][channel] = adchex ;
 8001d7c:	79fa      	ldrb	r2, [r7, #7]
 8001d7e:	79bb      	ldrb	r3, [r7, #6]
 8001d80:	4917      	ldr	r1, [pc, #92]	@ (8001de0 <ADC_READ+0x8f8>)
 8001d82:	0092      	lsls	r2, r2, #2
 8001d84:	4413      	add	r3, r2
 8001d86:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8001d8a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

		sensor_value = sum / 10;
 8001d8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d90:	4a08      	ldr	r2, [pc, #32]	@ (8001db4 <ADC_READ+0x8cc>)
 8001d92:	fba2 2303 	umull	r2, r3, r2, r3
 8001d96:	08db      	lsrs	r3, r3, #3
 8001d98:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

		break;
 8001d9c:	e1ed      	b.n	800217a <ADC_READ+0xc92>
 8001d9e:	bf00      	nop
 8001da0:	0a3d70a4 	.word	0x0a3d70a4
 8001da4:	3fd8a3d7 	.word	0x3fd8a3d7
 8001da8:	2000021c 	.word	0x2000021c
 8001dac:	200057fc 	.word	0x200057fc
 8001db0:	20000440 	.word	0x20000440
 8001db4:	cccccccd 	.word	0xcccccccd
 8001db8:	40240000 	.word	0x40240000
 8001dbc:	42020400 	.word	0x42020400
 8001dc0:	44fa0000 	.word	0x44fa0000
 8001dc4:	477fff00 	.word	0x477fff00
 8001dc8:	42c80000 	.word	0x42c80000
 8001dcc:	3b801132 	.word	0x3b801132
 8001dd0:	b51b057f 	.word	0xb51b057f
 8001dd4:	20000428 	.word	0x20000428
 8001dd8:	42021000 	.word	0x42021000
 8001ddc:	20000468 	.word	0x20000468
 8001de0:	20000498 	.word	0x20000498

	case ADC_3:
		//		if(sensor_table[adc_num][channel] == 1 || check_channel)
		//		{
		HAL_GPIO_WritePin(GPIOA, RESET_3_Pin, 0);
 8001de4:	2200      	movs	r2, #0
 8001de6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001dea:	48bb      	ldr	r0, [pc, #748]	@ (80020d8 <ADC_READ+0xbf0>)
 8001dec:	f003 f9ec 	bl	80051c8 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8001df0:	200a      	movs	r0, #10
 8001df2:	f002 fe3d 	bl	8004a70 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, RESET_3_Pin, 1);
 8001df6:	2201      	movs	r2, #1
 8001df8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001dfc:	48b6      	ldr	r0, [pc, #728]	@ (80020d8 <ADC_READ+0xbf0>)
 8001dfe:	f003 f9e3 	bl	80051c8 <HAL_GPIO_WritePin>
		//HAL_Delay(100);
		HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 8001e02:	2200      	movs	r2, #0
 8001e04:	2110      	movs	r1, #16
 8001e06:	48b5      	ldr	r0, [pc, #724]	@ (80020dc <ADC_READ+0xbf4>)
 8001e08:	f003 f9de 	bl	80051c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, START_3_Pin, 0);
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001e12:	48b1      	ldr	r0, [pc, #708]	@ (80020d8 <ADC_READ+0xbf0>)
 8001e14:	f003 f9d8 	bl	80051c8 <HAL_GPIO_WritePin>


		HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	2110      	movs	r1, #16
 8001e1c:	48af      	ldr	r0, [pc, #700]	@ (80020dc <ADC_READ+0xbf4>)
 8001e1e:	f003 f9d3 	bl	80051c8 <HAL_GPIO_WritePin>


		HAL_SPI_Transmit(&hspi3, (uint8_t*) &txd_buf,0x13, 0xFF);
 8001e22:	23ff      	movs	r3, #255	@ 0xff
 8001e24:	2213      	movs	r2, #19
 8001e26:	49ae      	ldr	r1, [pc, #696]	@ (80020e0 <ADC_READ+0xbf8>)
 8001e28:	48ae      	ldr	r0, [pc, #696]	@ (80020e4 <ADC_READ+0xbfc>)
 8001e2a:	f00a fa71 	bl	800c310 <HAL_SPI_Transmit>
		HAL_Delay(2);
 8001e2e:	2002      	movs	r0, #2
 8001e30:	f002 fe1e 	bl	8004a70 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 1);
 8001e34:	2201      	movs	r2, #1
 8001e36:	2110      	movs	r1, #16
 8001e38:	48a8      	ldr	r0, [pc, #672]	@ (80020dc <ADC_READ+0xbf4>)
 8001e3a:	f003 f9c5 	bl	80051c8 <HAL_GPIO_WritePin>


		//HAL_Delay(200);


		HAL_GPIO_WritePin(GPIOA, START_3_Pin, 1);
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001e44:	48a4      	ldr	r0, [pc, #656]	@ (80020d8 <ADC_READ+0xbf0>)
 8001e46:	f003 f9bf 	bl	80051c8 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2110      	movs	r1, #16
 8001e4e:	48a3      	ldr	r0, [pc, #652]	@ (80020dc <ADC_READ+0xbf4>)
 8001e50:	f003 f9ba 	bl	80051c8 <HAL_GPIO_WritePin>
		txd_buf[0] = 0x19;
 8001e54:	4ba2      	ldr	r3, [pc, #648]	@ (80020e0 <ADC_READ+0xbf8>)
 8001e56:	2219      	movs	r2, #25
 8001e58:	701a      	strb	r2, [r3, #0]

		HAL_SPI_Transmit(&hspi3, (uint8_t*) &txd_buf, 1, 0xFF);
 8001e5a:	23ff      	movs	r3, #255	@ 0xff
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	49a0      	ldr	r1, [pc, #640]	@ (80020e0 <ADC_READ+0xbf8>)
 8001e60:	48a0      	ldr	r0, [pc, #640]	@ (80020e4 <ADC_READ+0xbfc>)
 8001e62:	f00a fa55 	bl	800c310 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 1);
 8001e66:	2201      	movs	r2, #1
 8001e68:	2110      	movs	r1, #16
 8001e6a:	489c      	ldr	r0, [pc, #624]	@ (80020dc <ADC_READ+0xbf4>)
 8001e6c:	f003 f9ac 	bl	80051c8 <HAL_GPIO_WritePin>
		HAL_Delay(wait_time);
 8001e70:	4b9d      	ldr	r3, [pc, #628]	@ (80020e8 <ADC_READ+0xc00>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f002 fdfb 	bl	8004a70 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	2110      	movs	r1, #16
 8001e7e:	4897      	ldr	r0, [pc, #604]	@ (80020dc <ADC_READ+0xbf4>)
 8001e80:	f003 f9a2 	bl	80051c8 <HAL_GPIO_WritePin>
		txd_buf[0] = 0x13;
 8001e84:	4b96      	ldr	r3, [pc, #600]	@ (80020e0 <ADC_READ+0xbf8>)
 8001e86:	2213      	movs	r2, #19
 8001e88:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 10; i++)
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e8e:	e02f      	b.n	8001ef0 <ADC_READ+0xa08>
		{
			HAL_SPI_Transmit(&hspi3, (uint8_t*) &txd_buf, 1, 0xFFFFFF);
 8001e90:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8001e94:	2201      	movs	r2, #1
 8001e96:	4992      	ldr	r1, [pc, #584]	@ (80020e0 <ADC_READ+0xbf8>)
 8001e98:	4892      	ldr	r0, [pc, #584]	@ (80020e4 <ADC_READ+0xbfc>)
 8001e9a:	f00a fa39 	bl	800c310 <HAL_SPI_Transmit>

			HAL_SPI_Receive(&hspi3, (uint8_t*) &reg_data_ADC_3[i], 0x2, HAL_MAX_DELAY);
 8001e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	4a92      	ldr	r2, [pc, #584]	@ (80020ec <ADC_READ+0xc04>)
 8001ea4:	1899      	adds	r1, r3, r2
 8001ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eaa:	2202      	movs	r2, #2
 8001eac:	488d      	ldr	r0, [pc, #564]	@ (80020e4 <ADC_READ+0xbfc>)
 8001eae:	f00a fc45 	bl	800c73c <HAL_SPI_Receive>


			// Byte-wise flip
			reg_data_ADC_3[i] = (reg_data_ADC_3[i] >> 8) | (reg_data_ADC_3[i] << 8);
 8001eb2:	4a8e      	ldr	r2, [pc, #568]	@ (80020ec <ADC_READ+0xc04>)
 8001eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001eb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001eba:	0a1b      	lsrs	r3, r3, #8
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	b21a      	sxth	r2, r3
 8001ec0:	498a      	ldr	r1, [pc, #552]	@ (80020ec <ADC_READ+0xc04>)
 8001ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ec4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001ec8:	021b      	lsls	r3, r3, #8
 8001eca:	b21b      	sxth	r3, r3
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	b21b      	sxth	r3, r3
 8001ed0:	b299      	uxth	r1, r3
 8001ed2:	4a86      	ldr	r2, [pc, #536]	@ (80020ec <ADC_READ+0xc04>)
 8001ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ed6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			sum += reg_data_ADC_3[i];  // Add to sum for averaging
 8001eda:	4a84      	ldr	r2, [pc, #528]	@ (80020ec <ADC_READ+0xc04>)
 8001edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ede:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ee6:	4413      	add	r3, r2
 8001ee8:	64bb      	str	r3, [r7, #72]	@ 0x48
		for (int i = 0; i < 10; i++)
 8001eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001eec:	3301      	adds	r3, #1
 8001eee:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ef2:	2b09      	cmp	r3, #9
 8001ef4:	ddcc      	ble.n	8001e90 <ADC_READ+0x9a8>
			//					temp_sensor[adc_num][channel] = 0 ;
			//					sensor_hex[adc_num][channel] = 0 ;
			//					return 0x7FFF;
		}

		adchex = sum / 10;
 8001ef6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ef8:	4a7d      	ldr	r2, [pc, #500]	@ (80020f0 <ADC_READ+0xc08>)
 8001efa:	fba2 2303 	umull	r2, r3, r2, r3
 8001efe:	08db      	lsrs	r3, r3, #3
 8001f00:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		average = sum / 10.0;
 8001f04:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001f06:	f7fe fb0d 	bl	8000524 <__aeabi_ui2d>
 8001f0a:	f04f 0200 	mov.w	r2, #0
 8001f0e:	4b79      	ldr	r3, [pc, #484]	@ (80020f4 <ADC_READ+0xc0c>)
 8001f10:	f7fe fcac 	bl	800086c <__aeabi_ddiv>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	4610      	mov	r0, r2
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	f7fe fe54 	bl	8000bc8 <__aeabi_d2f>
 8001f20:	4603      	mov	r3, r0
 8001f22:	633b      	str	r3, [r7, #48]	@ 0x30
		HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 1);
 8001f24:	2201      	movs	r2, #1
 8001f26:	2110      	movs	r1, #16
 8001f28:	486c      	ldr	r0, [pc, #432]	@ (80020dc <ADC_READ+0xbf4>)
 8001f2a:	f003 f94d 	bl	80051c8 <HAL_GPIO_WritePin>
		resistance = ((2*1000*(float)average)/4) / 0xFFFF;
 8001f2e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001f32:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 80020f8 <ADC_READ+0xc10>
 8001f36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f3a:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001f3e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001f42:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80020fc <ADC_READ+0xc14>
 8001f46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f4a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34


		//Callendar-Van Dusen Equation
		if (resistance >= R0) {  // Above 0°C
 8001f4e:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8002100 <ADC_READ+0xc18>
 8001f52:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001f56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f5e:	db50      	blt.n	8002002 <ADC_READ+0xb1a>
			temperature = (-A + sqrt(A * A - 4 * B * (1 - (resistance / R0)))) / (2 * B);
 8001f60:	eddf 7a68 	vldr	s15, [pc, #416]	@ 8002104 <ADC_READ+0xc1c>
 8001f64:	eef1 7a67 	vneg.f32	s15, s15
 8001f68:	ee17 3a90 	vmov	r3, s15
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7fe fafb 	bl	8000568 <__aeabi_f2d>
 8001f72:	4604      	mov	r4, r0
 8001f74:	460d      	mov	r5, r1
 8001f76:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8002104 <ADC_READ+0xc1c>
 8001f7a:	eddf 7a62 	vldr	s15, [pc, #392]	@ 8002104 <ADC_READ+0xc1c>
 8001f7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f82:	eddf 6a61 	vldr	s13, [pc, #388]	@ 8002108 <ADC_READ+0xc20>
 8001f86:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 8001f8a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f8e:	eddf 5a5c 	vldr	s11, [pc, #368]	@ 8002100 <ADC_READ+0xc18>
 8001f92:	ed97 6a0d 	vldr	s12, [r7, #52]	@ 0x34
 8001f96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f9a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8001f9e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001fa2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001faa:	ee17 0a90 	vmov	r0, s15
 8001fae:	f7fe fadb 	bl	8000568 <__aeabi_f2d>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	ec43 2b10 	vmov	d0, r2, r3
 8001fba:	f010 f91d 	bl	80121f8 <sqrt>
 8001fbe:	ec53 2b10 	vmov	r2, r3, d0
 8001fc2:	4620      	mov	r0, r4
 8001fc4:	4629      	mov	r1, r5
 8001fc6:	f7fe f971 	bl	80002ac <__adddf3>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	4614      	mov	r4, r2
 8001fd0:	461d      	mov	r5, r3
 8001fd2:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8002108 <ADC_READ+0xc20>
 8001fd6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001fda:	ee17 0a90 	vmov	r0, s15
 8001fde:	f7fe fac3 	bl	8000568 <__aeabi_f2d>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	4620      	mov	r0, r4
 8001fe8:	4629      	mov	r1, r5
 8001fea:	f7fe fc3f 	bl	800086c <__aeabi_ddiv>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	4610      	mov	r0, r2
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	f7fe fde7 	bl	8000bc8 <__aeabi_d2f>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	4a43      	ldr	r2, [pc, #268]	@ (800210c <ADC_READ+0xc24>)
 8001ffe:	6013      	str	r3, [r2, #0]
 8002000:	e017      	b.n	8002032 <ADC_READ+0xb4a>
		}
		else
		{  // Below 0°C, use simpler approximation
			temperature = (resistance - R0) / 0.385;
 8002002:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8002100 <ADC_READ+0xc18>
 8002006:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800200a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800200e:	ee17 0a90 	vmov	r0, s15
 8002012:	f7fe faa9 	bl	8000568 <__aeabi_f2d>
 8002016:	a32e      	add	r3, pc, #184	@ (adr r3, 80020d0 <ADC_READ+0xbe8>)
 8002018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201c:	f7fe fc26 	bl	800086c <__aeabi_ddiv>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4610      	mov	r0, r2
 8002026:	4619      	mov	r1, r3
 8002028:	f7fe fdce 	bl	8000bc8 <__aeabi_d2f>
 800202c:	4603      	mov	r3, r0
 800202e:	4a37      	ldr	r2, [pc, #220]	@ (800210c <ADC_READ+0xc24>)
 8002030:	6013      	str	r3, [r2, #0]
		}
		if(rxd_buf[7]==txd_buf[9])
 8002032:	7dfa      	ldrb	r2, [r7, #23]
 8002034:	4b2a      	ldr	r3, [pc, #168]	@ (80020e0 <ADC_READ+0xbf8>)
 8002036:	7a5b      	ldrb	r3, [r3, #9]
 8002038:	429a      	cmp	r2, r3
 800203a:	d10e      	bne.n	800205a <ADC_READ+0xb72>
		{
			HAL_GPIO_WritePin(GPIOE, LED3_Pin, 1); // Toggle LED for visual feedback
 800203c:	2201      	movs	r2, #1
 800203e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002042:	4833      	ldr	r0, [pc, #204]	@ (8002110 <ADC_READ+0xc28>)
 8002044:	f003 f8c0 	bl	80051c8 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8002048:	2001      	movs	r0, #1
 800204a:	f002 fd11 	bl	8004a70 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOE, LED3_Pin, 0);
 800204e:	2200      	movs	r2, #0
 8002050:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002054:	482e      	ldr	r0, [pc, #184]	@ (8002110 <ADC_READ+0xc28>)
 8002056:	f003 f8b7 	bl	80051c8 <HAL_GPIO_WritePin>
#endif

		}

#if 1
		HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 800205a:	2200      	movs	r2, #0
 800205c:	2110      	movs	r1, #16
 800205e:	481f      	ldr	r0, [pc, #124]	@ (80020dc <ADC_READ+0xbf4>)
 8002060:	f003 f8b2 	bl	80051c8 <HAL_GPIO_WritePin>
		txd_buf[0] = 0x21;
 8002064:	4b1e      	ldr	r3, [pc, #120]	@ (80020e0 <ADC_READ+0xbf8>)
 8002066:	2221      	movs	r2, #33	@ 0x21
 8002068:	701a      	strb	r2, [r3, #0]
		txd_buf[1] = 0x00;
 800206a:	4b1d      	ldr	r3, [pc, #116]	@ (80020e0 <ADC_READ+0xbf8>)
 800206c:	2200      	movs	r2, #0
 800206e:	705a      	strb	r2, [r3, #1]
		HAL_SPI_Transmit(&hspi3, (uint8_t*) &txd_buf, 2, 0xFF);
 8002070:	23ff      	movs	r3, #255	@ 0xff
 8002072:	2202      	movs	r2, #2
 8002074:	491a      	ldr	r1, [pc, #104]	@ (80020e0 <ADC_READ+0xbf8>)
 8002076:	481b      	ldr	r0, [pc, #108]	@ (80020e4 <ADC_READ+0xbfc>)
 8002078:	f00a f94a 	bl	800c310 <HAL_SPI_Transmit>
		HAL_Delay(2);
 800207c:	2002      	movs	r0, #2
 800207e:	f002 fcf7 	bl	8004a70 <HAL_Delay>
		HAL_SPI_Receive(&hspi3, (uint8_t*) &wirestatus, 0x01, 0xFF);
 8002082:	f107 010f 	add.w	r1, r7, #15
 8002086:	23ff      	movs	r3, #255	@ 0xff
 8002088:	2201      	movs	r2, #1
 800208a:	4816      	ldr	r0, [pc, #88]	@ (80020e4 <ADC_READ+0xbfc>)
 800208c:	f00a fb56 	bl	800c73c <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 1);
 8002090:	2201      	movs	r2, #1
 8002092:	2110      	movs	r1, #16
 8002094:	4811      	ldr	r0, [pc, #68]	@ (80020dc <ADC_READ+0xbf4>)
 8002096:	f003 f897 	bl	80051c8 <HAL_GPIO_WritePin>

		//		status = wire_break(wirestatus);

		if (wire_break(wirestatus))
 800209a:	7bfb      	ldrb	r3, [r7, #15]
 800209c:	4618      	mov	r0, r3
 800209e:	f000 f897 	bl	80021d0 <wire_break>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d035      	beq.n	8002114 <ADC_READ+0xc2c>
		{
			status=0;
 80020a8:	2300      	movs	r3, #0
 80020aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			wirestatus=0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	73fb      	strb	r3, [r7, #15]
			temperature = 0;
 80020b2:	4b16      	ldr	r3, [pc, #88]	@ (800210c <ADC_READ+0xc24>)
 80020b4:	f04f 0200 	mov.w	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
			adchex=0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
			memset(&reg_data_ADC_3,0,sizeof(reg_data_ADC_3));
 80020c0:	2214      	movs	r2, #20
 80020c2:	2100      	movs	r1, #0
 80020c4:	4809      	ldr	r0, [pc, #36]	@ (80020ec <ADC_READ+0xc04>)
 80020c6:	f00d ffb6 	bl	8010036 <memset>
 80020ca:	e039      	b.n	8002140 <ADC_READ+0xc58>
 80020cc:	f3af 8000 	nop.w
 80020d0:	0a3d70a4 	.word	0x0a3d70a4
 80020d4:	3fd8a3d7 	.word	0x3fd8a3d7
 80020d8:	42020000 	.word	0x42020000
 80020dc:	42020c00 	.word	0x42020c00
 80020e0:	2000021c 	.word	0x2000021c
 80020e4:	2000588c 	.word	0x2000588c
 80020e8:	20000000 	.word	0x20000000
 80020ec:	20000454 	.word	0x20000454
 80020f0:	cccccccd 	.word	0xcccccccd
 80020f4:	40240000 	.word	0x40240000
 80020f8:	44fa0000 	.word	0x44fa0000
 80020fc:	477fff00 	.word	0x477fff00
 8002100:	42c80000 	.word	0x42c80000
 8002104:	3b801132 	.word	0x3b801132
 8002108:	b51b057f 	.word	0xb51b057f
 800210c:	20000428 	.word	0x20000428
 8002110:	42021000 	.word	0x42021000
		}
		else if(check_sensor_validity(adchex))
 8002114:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002118:	4618      	mov	r0, r3
 800211a:	f000 f83f 	bl	800219c <check_sensor_validity>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00d      	beq.n	8002140 <ADC_READ+0xc58>
		{
			wirestatus=0;
 8002124:	2300      	movs	r3, #0
 8002126:	73fb      	strb	r3, [r7, #15]
			temperature = 0;
 8002128:	4b17      	ldr	r3, [pc, #92]	@ (8002188 <ADC_READ+0xca0>)
 800212a:	f04f 0200 	mov.w	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
			adchex =0;
 8002130:	2300      	movs	r3, #0
 8002132:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
			memset(&reg_data_ADC_3,0,sizeof(reg_data_ADC_3));
 8002136:	2214      	movs	r2, #20
 8002138:	2100      	movs	r1, #0
 800213a:	4814      	ldr	r0, [pc, #80]	@ (800218c <ADC_READ+0xca4>)
 800213c:	f00d ff7b 	bl	8010036 <memset>
		}
		wirestatus=0;
 8002140:	2300      	movs	r3, #0
 8002142:	73fb      	strb	r3, [r7, #15]
#endif
		temp_sensor[adc_num][channel] = temperature ;
 8002144:	79f9      	ldrb	r1, [r7, #7]
 8002146:	79bb      	ldrb	r3, [r7, #6]
 8002148:	4a0f      	ldr	r2, [pc, #60]	@ (8002188 <ADC_READ+0xca0>)
 800214a:	6812      	ldr	r2, [r2, #0]
 800214c:	4810      	ldr	r0, [pc, #64]	@ (8002190 <ADC_READ+0xca8>)
 800214e:	0089      	lsls	r1, r1, #2
 8002150:	440b      	add	r3, r1
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4403      	add	r3, r0
 8002156:	601a      	str	r2, [r3, #0]
		sensor_hex[adc_num][channel] = adchex ;
 8002158:	79fa      	ldrb	r2, [r7, #7]
 800215a:	79bb      	ldrb	r3, [r7, #6]
 800215c:	490d      	ldr	r1, [pc, #52]	@ (8002194 <ADC_READ+0xcac>)
 800215e:	0092      	lsls	r2, r2, #2
 8002160:	4413      	add	r3, r2
 8002162:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8002166:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

		sensor_value = sum / 10;
 800216a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800216c:	4a0a      	ldr	r2, [pc, #40]	@ (8002198 <ADC_READ+0xcb0>)
 800216e:	fba2 2303 	umull	r2, r3, r2, r3
 8002172:	08db      	lsrs	r3, r3, #3
 8002174:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

		break;
 8002178:	bf00      	nop
	}


	return sensor_value;
 800217a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e

}
 800217e:	4618      	mov	r0, r3
 8002180:	3750      	adds	r7, #80	@ 0x50
 8002182:	46bd      	mov	sp, r7
 8002184:	bdb0      	pop	{r4, r5, r7, pc}
 8002186:	bf00      	nop
 8002188:	20000428 	.word	0x20000428
 800218c:	20000454 	.word	0x20000454
 8002190:	20000468 	.word	0x20000468
 8002194:	20000498 	.word	0x20000498
 8002198:	cccccccd 	.word	0xcccccccd

0800219c <check_sensor_validity>:
	check_channel = 0 ;
}


uint8_t check_sensor_validity(uint16_t data)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	80fb      	strh	r3, [r7, #6]
	int i=0;
 80021a6:	2300      	movs	r3, #0
 80021a8:	60fb      	str	r3, [r7, #12]
	if(data<ADC_MIN_VAL || data>ADC_MAX_VAL)
 80021aa:	88fb      	ldrh	r3, [r7, #6]
 80021ac:	f242 32d6 	movw	r2, #9174	@ 0x23d6
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d904      	bls.n	80021be <check_sensor_validity+0x22>
 80021b4:	88fb      	ldrh	r3, [r7, #6]
 80021b6:	f246 6266 	movw	r2, #26214	@ 0x6666
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d901      	bls.n	80021c2 <check_sensor_validity+0x26>
		return 1 ;
 80021be:	2301      	movs	r3, #1
 80021c0:	e000      	b.n	80021c4 <check_sensor_validity+0x28>
	//			if(data==Error_table[i])
	//			{
	//				return 1 ;
	//			}
	//		}
	return 0 ;
 80021c2:	2300      	movs	r3, #0

}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <wire_break>:

uint8_t wire_break(uint8_t flag)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	71fb      	strb	r3, [r7, #7]
	uint8_t FL_REF =0;
 80021da:	2300      	movs	r3, #0
 80021dc:	73fb      	strb	r3, [r7, #15]

	if(txd_buf[7] == 0xC2)//0xC2
 80021de:	4b1b      	ldr	r3, [pc, #108]	@ (800224c <wire_break+0x7c>)
 80021e0:	79db      	ldrb	r3, [r3, #7]
 80021e2:	2bc2      	cmp	r3, #194	@ 0xc2
 80021e4:	d102      	bne.n	80021ec <wire_break+0x1c>
	{
		FL_REF= 1;
 80021e6:	2301      	movs	r3, #1
 80021e8:	73fb      	strb	r3, [r7, #15]
 80021ea:	e008      	b.n	80021fe <wire_break+0x2e>
	}
	else if(txd_buf[7] == 0x82)//0x82
 80021ec:	4b17      	ldr	r3, [pc, #92]	@ (800224c <wire_break+0x7c>)
 80021ee:	79db      	ldrb	r3, [r3, #7]
 80021f0:	2b82      	cmp	r3, #130	@ 0x82
 80021f2:	d102      	bne.n	80021fa <wire_break+0x2a>
	{
		FL_REF= 2;
 80021f4:	2302      	movs	r3, #2
 80021f6:	73fb      	strb	r3, [r7, #15]
 80021f8:	e001      	b.n	80021fe <wire_break+0x2e>
	}
	else
	{
		FL_REF=0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	73fb      	strb	r3, [r7, #15]
	}

	switch(FL_REF)
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d002      	beq.n	800220a <wire_break+0x3a>
 8002204:	2b02      	cmp	r3, #2
 8002206:	d00a      	beq.n	800221e <wire_break+0x4e>
 8002208:	e013      	b.n	8002232 <wire_break+0x62>
	{
	case 1:
		if(0x01 == flag)  //0x29 w/o interface card :  0x01  with interface card
 800220a:	79fb      	ldrb	r3, [r7, #7]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d101      	bne.n	8002214 <wire_break+0x44>
			return 1;
 8002210:	2301      	movs	r3, #1
 8002212:	e014      	b.n	800223e <wire_break+0x6e>

		else if(0x00 == flag) //0x00 w/o interface card :  0x00  with interface card
 8002214:	79fb      	ldrb	r3, [r7, #7]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10d      	bne.n	8002236 <wire_break+0x66>
			return 0;
 800221a:	2300      	movs	r3, #0
 800221c:	e00f      	b.n	800223e <wire_break+0x6e>

		break;
	case 2:
		if(0x2b == flag) //0x2b w/o interface card :  0x03  with interface card
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	2b2b      	cmp	r3, #43	@ 0x2b
 8002222:	d101      	bne.n	8002228 <wire_break+0x58>
			return 1;
 8002224:	2301      	movs	r3, #1
 8002226:	e00a      	b.n	800223e <wire_break+0x6e>

		else if(0x2 == flag) //0x2 w/o interface card :  0x02  with interface card
 8002228:	79fb      	ldrb	r3, [r7, #7]
 800222a:	2b02      	cmp	r3, #2
 800222c:	d105      	bne.n	800223a <wire_break+0x6a>
			return 0;
 800222e:	2300      	movs	r3, #0
 8002230:	e005      	b.n	800223e <wire_break+0x6e>

		break;
	default:
		return 0;
 8002232:	2300      	movs	r3, #0
 8002234:	e003      	b.n	800223e <wire_break+0x6e>
		break;
 8002236:	bf00      	nop
 8002238:	e000      	b.n	800223c <wire_break+0x6c>
		break;
 800223a:	bf00      	nop

		break;
	}
	return 0;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3714      	adds	r7, #20
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	2000021c 	.word	0x2000021c

08002250 <NAND_operation>:
 * @brief Performs NAND operations like writing, reading, and checking block status.
 * This function writes data to NAND, reads it back to verify, checks and updates
 * block status based on the comparison result.
 */
void NAND_operation(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0

//	get_NAND_stored_data();
	if (nand_update)
 8002256:	4b35      	ldr	r3, [pc, #212]	@ (800232c <NAND_operation+0xdc>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d061      	beq.n	8002322 <NAND_operation+0xd2>
	{
		HAL_GPIO_TogglePin(GPIOE, LED5_Pin);  // Toggle status LED
 800225e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002262:	4833      	ldr	r0, [pc, #204]	@ (8002330 <NAND_operation+0xe0>)
 8002264:	f002 ffc8 	bl	80051f8 <HAL_GPIO_TogglePin>
		// Move to the next block if all pages in the current block have been written
		if (nand_address.Page > 127)
 8002268:	4b32      	ldr	r3, [pc, #200]	@ (8002334 <NAND_operation+0xe4>)
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	2b7f      	cmp	r3, #127	@ 0x7f
 800226e:	d90b      	bls.n	8002288 <NAND_operation+0x38>
		{
			get_Good_NAND_block();
 8002270:	f000 f95a 	bl	8002528 <get_Good_NAND_block>
			nand_address.Page = 0;
 8002274:	4b2f      	ldr	r3, [pc, #188]	@ (8002334 <NAND_operation+0xe4>)
 8002276:	2200      	movs	r2, #0
 8002278:	801a      	strh	r2, [r3, #0]
			HAL_NAND_Erase_Block(&hnand1, &nand_address);
 800227a:	492e      	ldr	r1, [pc, #184]	@ (8002334 <NAND_operation+0xe4>)
 800227c:	482e      	ldr	r0, [pc, #184]	@ (8002338 <NAND_operation+0xe8>)
 800227e:	f003 fe49 	bl	8005f14 <HAL_NAND_Erase_Block>
			HAL_Delay(100);
 8002282:	2064      	movs	r0, #100	@ 0x64
 8002284:	f002 fbf4 	bl	8004a70 <HAL_Delay>
		}
		// Prepare data for NAND write
		memset(read_data, 0, 8192);
 8002288:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800228c:	2100      	movs	r1, #0
 800228e:	482b      	ldr	r0, [pc, #172]	@ (800233c <NAND_operation+0xec>)
 8002290:	f00d fed1 	bl	8010036 <memset>
		nand_update = 0;
 8002294:	4b25      	ldr	r3, [pc, #148]	@ (800232c <NAND_operation+0xdc>)
 8002296:	2200      	movs	r2, #0
 8002298:	701a      	strb	r2, [r3, #0]
		get_NAND_data(NAND_data);
 800229a:	4829      	ldr	r0, [pc, #164]	@ (8002340 <NAND_operation+0xf0>)
 800229c:	f000 fb76 	bl	800298c <get_NAND_data>

		// Write data to NAND flash
		HAL_NAND_Write_Page_8b(&hnand1, &nand_address, NAND_data, 1);
 80022a0:	2301      	movs	r3, #1
 80022a2:	4a27      	ldr	r2, [pc, #156]	@ (8002340 <NAND_operation+0xf0>)
 80022a4:	4923      	ldr	r1, [pc, #140]	@ (8002334 <NAND_operation+0xe4>)
 80022a6:	4824      	ldr	r0, [pc, #144]	@ (8002338 <NAND_operation+0xe8>)
 80022a8:	f003 fa00 	bl	80056ac <HAL_NAND_Write_Page_8b>

		// Read data back from NAND flash for verification
		HAL_NAND_Read_Page_8b(&hnand1, (const NAND_AddressTypeDef *) &nand_address, read_data, 1);
 80022ac:	2301      	movs	r3, #1
 80022ae:	4a23      	ldr	r2, [pc, #140]	@ (800233c <NAND_operation+0xec>)
 80022b0:	4920      	ldr	r1, [pc, #128]	@ (8002334 <NAND_operation+0xe4>)
 80022b2:	4821      	ldr	r0, [pc, #132]	@ (8002338 <NAND_operation+0xe8>)
 80022b4:	f003 f8a0 	bl	80053f8 <HAL_NAND_Read_Page_8b>
		HAL_UART_Transmit_IT(&huart4, read_data, sizeof(read_data));
 80022b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022bc:	491f      	ldr	r1, [pc, #124]	@ (800233c <NAND_operation+0xec>)
 80022be:	4821      	ldr	r0, [pc, #132]	@ (8002344 <NAND_operation+0xf4>)
 80022c0:	f00a fdfe 	bl	800cec0 <HAL_UART_Transmit_IT>
		HAL_Delay(20);
 80022c4:	2014      	movs	r0, #20
 80022c6:	f002 fbd3 	bl	8004a70 <HAL_Delay>
		// Calculate bit difference between written and read data
		uint16_t bit_difference = calculate_hamming_distance(NAND_data, read_data, 8192);
 80022ca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022ce:	491b      	ldr	r1, [pc, #108]	@ (800233c <NAND_operation+0xec>)
 80022d0:	481b      	ldr	r0, [pc, #108]	@ (8002340 <NAND_operation+0xf0>)
 80022d2:	f000 f8be 	bl	8002452 <calculate_hamming_distance>
 80022d6:	4603      	mov	r3, r0
 80022d8:	80fb      	strh	r3, [r7, #6]

		// Check if data read matches data written
		if (bit_difference <50) // Data matches
 80022da:	88fb      	ldrh	r3, [r7, #6]
 80022dc:	2b31      	cmp	r3, #49	@ 0x31
 80022de:	d816      	bhi.n	800230e <NAND_operation+0xbe>
		{
			if (nand_address.Page == 0)
 80022e0:	4b14      	ldr	r3, [pc, #80]	@ (8002334 <NAND_operation+0xe4>)
 80022e2:	881b      	ldrh	r3, [r3, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10b      	bne.n	8002300 <NAND_operation+0xb0>
			{
				set_NAND_block_status(nand_address.Page, nand_address.Block, nand_address.Plane, 1); // Mark block as good
 80022e8:	4b12      	ldr	r3, [pc, #72]	@ (8002334 <NAND_operation+0xe4>)
 80022ea:	881b      	ldrh	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	4b11      	ldr	r3, [pc, #68]	@ (8002334 <NAND_operation+0xe4>)
 80022f0:	889b      	ldrh	r3, [r3, #4]
 80022f2:	4619      	mov	r1, r3
 80022f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002334 <NAND_operation+0xe4>)
 80022f6:	885b      	ldrh	r3, [r3, #2]
 80022f8:	461a      	mov	r2, r3
 80022fa:	2301      	movs	r3, #1
 80022fc:	f000 f854 	bl	80023a8 <set_NAND_block_status>
			}
			nand_address.Page++;
 8002300:	4b0c      	ldr	r3, [pc, #48]	@ (8002334 <NAND_operation+0xe4>)
 8002302:	881b      	ldrh	r3, [r3, #0]
 8002304:	3301      	adds	r3, #1
 8002306:	b29a      	uxth	r2, r3
 8002308:	4b0a      	ldr	r3, [pc, #40]	@ (8002334 <NAND_operation+0xe4>)
 800230a:	801a      	strh	r2, [r3, #0]
 800230c:	e007      	b.n	800231e <NAND_operation+0xce>

		}
		else // Data mismatch - possible bad block
		{
			bad_block_check_counter = 0 ;
 800230e:	4b0e      	ldr	r3, [pc, #56]	@ (8002348 <NAND_operation+0xf8>)
 8002310:	2200      	movs	r2, #0
 8002312:	801a      	strh	r2, [r3, #0]
			handle_bad_block(); // Call function to handle the bad block scenario
 8002314:	f000 f8c6 	bl	80024a4 <handle_bad_block>
			bad_block_check_counter = 0;
 8002318:	4b0b      	ldr	r3, [pc, #44]	@ (8002348 <NAND_operation+0xf8>)
 800231a:	2200      	movs	r2, #0
 800231c:	801a      	strh	r2, [r3, #0]
		}

		update_NAND_addr();
 800231e:	f000 fb95 	bl	8002a4c <update_NAND_addr>

	}
}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20005690 	.word	0x20005690
 8002330:	42021000 	.word	0x42021000
 8002334:	200004c8 	.word	0x200004c8
 8002338:	20005c54 	.word	0x20005c54
 800233c:	200004d0 	.word	0x200004d0
 8002340:	200024d0 	.word	0x200024d0
 8002344:	200059ac 	.word	0x200059ac
 8002348:	20005692 	.word	0x20005692

0800234c <get_NAND_block_status>:
/**
 * @brief Reads and updates the status of each block in NAND.
 * Sets the block status array based on whether the block is good (0xFF) or bad (0x00).
 */
void get_NAND_block_status()
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
	for (uint16_t i = 0; i < 4096; i++)
 8002352:	2300      	movs	r3, #0
 8002354:	80fb      	strh	r3, [r7, #6]
 8002356:	e016      	b.n	8002386 <get_NAND_block_status+0x3a>
	{
		nand_address.Block = i;
 8002358:	4a0f      	ldr	r2, [pc, #60]	@ (8002398 <get_NAND_block_status+0x4c>)
 800235a:	88fb      	ldrh	r3, [r7, #6]
 800235c:	8093      	strh	r3, [r2, #4]
		HAL_NAND_Read_SpareArea_8b(&hnand1, &nand_address, spare_buffer, 1);
 800235e:	2301      	movs	r3, #1
 8002360:	4a0e      	ldr	r2, [pc, #56]	@ (800239c <get_NAND_block_status+0x50>)
 8002362:	490d      	ldr	r1, [pc, #52]	@ (8002398 <get_NAND_block_status+0x4c>)
 8002364:	480e      	ldr	r0, [pc, #56]	@ (80023a0 <get_NAND_block_status+0x54>)
 8002366:	f003 faf9 	bl	800595c <HAL_NAND_Read_SpareArea_8b>
		nand_block_status[i] = (spare_buffer[0] == 0xFF) ? 1 : 0;
 800236a:	4b0c      	ldr	r3, [pc, #48]	@ (800239c <get_NAND_block_status+0x50>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2bff      	cmp	r3, #255	@ 0xff
 8002370:	bf0c      	ite	eq
 8002372:	2301      	moveq	r3, #1
 8002374:	2300      	movne	r3, #0
 8002376:	b2da      	uxtb	r2, r3
 8002378:	88fb      	ldrh	r3, [r7, #6]
 800237a:	4611      	mov	r1, r2
 800237c:	4a09      	ldr	r2, [pc, #36]	@ (80023a4 <get_NAND_block_status+0x58>)
 800237e:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < 4096; i++)
 8002380:	88fb      	ldrh	r3, [r7, #6]
 8002382:	3301      	adds	r3, #1
 8002384:	80fb      	strh	r3, [r7, #6]
 8002386:	88fb      	ldrh	r3, [r7, #6]
 8002388:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800238c:	d3e4      	bcc.n	8002358 <get_NAND_block_status+0xc>
	}
}
 800238e:	bf00      	nop
 8002390:	bf00      	nop
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	200004c8 	.word	0x200004c8
 800239c:	200044d0 	.word	0x200044d0
 80023a0:	20005c54 	.word	0x20005c54
 80023a4:	20004690 	.word	0x20004690

080023a8 <set_NAND_block_status>:
 * @param block The block number to update.
 * @param plane The NAND plane number.
 * @param block_state 1 for good block, 0 for bad block.
 */
void set_NAND_block_status(uint16_t page, uint16_t block, uint16_t plane, uint8_t block_state)
{
 80023a8:	b590      	push	{r4, r7, lr}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4604      	mov	r4, r0
 80023b0:	4608      	mov	r0, r1
 80023b2:	4611      	mov	r1, r2
 80023b4:	461a      	mov	r2, r3
 80023b6:	4623      	mov	r3, r4
 80023b8:	80fb      	strh	r3, [r7, #6]
 80023ba:	4603      	mov	r3, r0
 80023bc:	80bb      	strh	r3, [r7, #4]
 80023be:	460b      	mov	r3, r1
 80023c0:	807b      	strh	r3, [r7, #2]
 80023c2:	4613      	mov	r3, r2
 80023c4:	707b      	strb	r3, [r7, #1]
	NAND_AddressTypeDef nand_address_block = {0, block, plane};
 80023c6:	2300      	movs	r3, #0
 80023c8:	813b      	strh	r3, [r7, #8]
 80023ca:	88bb      	ldrh	r3, [r7, #4]
 80023cc:	817b      	strh	r3, [r7, #10]
 80023ce:	887b      	ldrh	r3, [r7, #2]
 80023d0:	81bb      	strh	r3, [r7, #12]
	HAL_NAND_Read_SpareArea_8b(&hnand1, &nand_address_block, spare_buffer, 1);
 80023d2:	f107 0108 	add.w	r1, r7, #8
 80023d6:	2301      	movs	r3, #1
 80023d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002410 <set_NAND_block_status+0x68>)
 80023da:	480e      	ldr	r0, [pc, #56]	@ (8002414 <set_NAND_block_status+0x6c>)
 80023dc:	f003 fabe 	bl	800595c <HAL_NAND_Read_SpareArea_8b>

	spare_buffer[0] = (block_state) ? 0xFF : 0x00;  // Set good (0xFF) or bad (0x00)
 80023e0:	787b      	ldrb	r3, [r7, #1]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <set_NAND_block_status+0x42>
 80023e6:	22ff      	movs	r2, #255	@ 0xff
 80023e8:	e000      	b.n	80023ec <set_NAND_block_status+0x44>
 80023ea:	2200      	movs	r2, #0
 80023ec:	4b08      	ldr	r3, [pc, #32]	@ (8002410 <set_NAND_block_status+0x68>)
 80023ee:	701a      	strb	r2, [r3, #0]
	nand_block_status[block] = block_state;          // Update block status array
 80023f0:	88bb      	ldrh	r3, [r7, #4]
 80023f2:	4909      	ldr	r1, [pc, #36]	@ (8002418 <set_NAND_block_status+0x70>)
 80023f4:	787a      	ldrb	r2, [r7, #1]
 80023f6:	54ca      	strb	r2, [r1, r3]
	HAL_NAND_Write_SpareArea_8b(&hnand1, &nand_address_block, spare_buffer, 1);
 80023f8:	f107 0108 	add.w	r1, r7, #8
 80023fc:	2301      	movs	r3, #1
 80023fe:	4a04      	ldr	r2, [pc, #16]	@ (8002410 <set_NAND_block_status+0x68>)
 8002400:	4804      	ldr	r0, [pc, #16]	@ (8002414 <set_NAND_block_status+0x6c>)
 8002402:	f003 fc16 	bl	8005c32 <HAL_NAND_Write_SpareArea_8b>
}
 8002406:	bf00      	nop
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	bd90      	pop	{r4, r7, pc}
 800240e:	bf00      	nop
 8002410:	200044d0 	.word	0x200044d0
 8002414:	20005c54 	.word	0x20005c54
 8002418:	20004690 	.word	0x20004690

0800241c <count_set_bits>:
 * @brief Counts the number of set bits (1s) in a byte.
 * @param byte The byte to analyze.
 * @return The number of set bits in the byte.
 */
int count_set_bits(uint8_t byte)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	71fb      	strb	r3, [r7, #7]
	int count = 0;
 8002426:	2300      	movs	r3, #0
 8002428:	60fb      	str	r3, [r7, #12]
	while (byte)
 800242a:	e008      	b.n	800243e <count_set_bits+0x22>
	{
		count += byte & 1;
 800242c:	79fb      	ldrb	r3, [r7, #7]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	4413      	add	r3, r2
 8002436:	60fb      	str	r3, [r7, #12]
		byte >>= 1;
 8002438:	79fb      	ldrb	r3, [r7, #7]
 800243a:	085b      	lsrs	r3, r3, #1
 800243c:	71fb      	strb	r3, [r7, #7]
	while (byte)
 800243e:	79fb      	ldrb	r3, [r7, #7]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1f3      	bne.n	800242c <count_set_bits+0x10>
	}
	return count;
 8002444:	68fb      	ldr	r3, [r7, #12]
}
 8002446:	4618      	mov	r0, r3
 8002448:	3714      	adds	r7, #20
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <calculate_hamming_distance>:
 * @param str2 Pointer to the second 8192-byte string.
 * @param length Length of the strings to compare (8192 bytes).
 * @return The number of differing bits between the two strings.
 */
int calculate_hamming_distance(const uint8_t *str1, const uint8_t *str2, size_t length)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b086      	sub	sp, #24
 8002456:	af00      	add	r7, sp, #0
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	607a      	str	r2, [r7, #4]
	int differing_bits = 0;
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
	for (size_t i = 0; i < length; i++)
 8002462:	2300      	movs	r3, #0
 8002464:	613b      	str	r3, [r7, #16]
 8002466:	e013      	b.n	8002490 <calculate_hamming_distance+0x3e>
	{
		differing_bits += count_set_bits(str1[i] ^ str2[i]);  // XOR and count set bits in result
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	4413      	add	r3, r2
 800246e:	781a      	ldrb	r2, [r3, #0]
 8002470:	68b9      	ldr	r1, [r7, #8]
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	440b      	add	r3, r1
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	4053      	eors	r3, r2
 800247a:	b2db      	uxtb	r3, r3
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff ffcd 	bl	800241c <count_set_bits>
 8002482:	4602      	mov	r2, r0
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	4413      	add	r3, r2
 8002488:	617b      	str	r3, [r7, #20]
	for (size_t i = 0; i < length; i++)
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	3301      	adds	r3, #1
 800248e:	613b      	str	r3, [r7, #16]
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	429a      	cmp	r2, r3
 8002496:	d3e7      	bcc.n	8002468 <calculate_hamming_distance+0x16>
	}
	return differing_bits;
 8002498:	697b      	ldr	r3, [r7, #20]
}
 800249a:	4618      	mov	r0, r3
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <handle_bad_block>:
 * @brief Handles bad block processing in NAND by erasing and relocating data.
 * If data verification fails, the function marks the block as bad, and attempts to write data
 * to the next available block.
 */
void handle_bad_block(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
	nand_address.Page = 0;
 80024a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002514 <handle_bad_block+0x70>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	801a      	strh	r2, [r3, #0]
	HAL_NAND_Erase_Block(&hnand1, &nand_address);
 80024ae:	4919      	ldr	r1, [pc, #100]	@ (8002514 <handle_bad_block+0x70>)
 80024b0:	4819      	ldr	r0, [pc, #100]	@ (8002518 <handle_bad_block+0x74>)
 80024b2:	f003 fd2f 	bl	8005f14 <HAL_NAND_Erase_Block>
	HAL_Delay(100);
 80024b6:	2064      	movs	r0, #100	@ 0x64
 80024b8:	f002 fada 	bl	8004a70 <HAL_Delay>
	if(bad_block_check_counter++ > 4094 )
 80024bc:	4b17      	ldr	r3, [pc, #92]	@ (800251c <handle_bad_block+0x78>)
 80024be:	881b      	ldrh	r3, [r3, #0]
 80024c0:	1c5a      	adds	r2, r3, #1
 80024c2:	b291      	uxth	r1, r2
 80024c4:	4a15      	ldr	r2, [pc, #84]	@ (800251c <handle_bad_block+0x78>)
 80024c6:	8011      	strh	r1, [r2, #0]
 80024c8:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d81f      	bhi.n	8002510 <handle_bad_block+0x6c>
	{
		return ;
	}
	// Attempt to rewrite data after erasing the block
	HAL_NAND_Write_Page_8b(&hnand1, &nand_address, NAND_data, 1);
 80024d0:	2301      	movs	r3, #1
 80024d2:	4a13      	ldr	r2, [pc, #76]	@ (8002520 <handle_bad_block+0x7c>)
 80024d4:	490f      	ldr	r1, [pc, #60]	@ (8002514 <handle_bad_block+0x70>)
 80024d6:	4810      	ldr	r0, [pc, #64]	@ (8002518 <handle_bad_block+0x74>)
 80024d8:	f003 f8e8 	bl	80056ac <HAL_NAND_Write_Page_8b>
	HAL_NAND_Read_Page_8b(&hnand1, (const NAND_AddressTypeDef *)&nand_address, read_data, 1);
 80024dc:	2301      	movs	r3, #1
 80024de:	4a11      	ldr	r2, [pc, #68]	@ (8002524 <handle_bad_block+0x80>)
 80024e0:	490c      	ldr	r1, [pc, #48]	@ (8002514 <handle_bad_block+0x70>)
 80024e2:	480d      	ldr	r0, [pc, #52]	@ (8002518 <handle_bad_block+0x74>)
 80024e4:	f002 ff88 	bl	80053f8 <HAL_NAND_Read_Page_8b>

		nand_address.Page++;
	}
	else // Mark block as bad and attempt to move data
	{
		set_NAND_block_status(nand_address.Page, nand_address.Block, nand_address.Plane, 0); // Mark as bad
 80024e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002514 <handle_bad_block+0x70>)
 80024ea:	8818      	ldrh	r0, [r3, #0]
 80024ec:	4b09      	ldr	r3, [pc, #36]	@ (8002514 <handle_bad_block+0x70>)
 80024ee:	8899      	ldrh	r1, [r3, #4]
 80024f0:	4b08      	ldr	r3, [pc, #32]	@ (8002514 <handle_bad_block+0x70>)
 80024f2:	885a      	ldrh	r2, [r3, #2]
 80024f4:	2300      	movs	r3, #0
 80024f6:	f7ff ff57 	bl	80023a8 <set_NAND_block_status>
		nand_address.Page = 0;
 80024fa:	4b06      	ldr	r3, [pc, #24]	@ (8002514 <handle_bad_block+0x70>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	801a      	strh	r2, [r3, #0]

		get_Good_NAND_block();
 8002500:	f000 f812 	bl	8002528 <get_Good_NAND_block>
		handle_bad_block();
 8002504:	f7ff ffce 	bl	80024a4 <handle_bad_block>
		// HAL_NAND_Erase_Block(&hnand1, &nand_address);  // Erase new block
		HAL_Delay(10);
 8002508:	200a      	movs	r0, #10
 800250a:	f002 fab1 	bl	8004a70 <HAL_Delay>
 800250e:	e000      	b.n	8002512 <handle_bad_block+0x6e>
		return ;
 8002510:	bf00      	nop
	}
}
 8002512:	bd80      	pop	{r7, pc}
 8002514:	200004c8 	.word	0x200004c8
 8002518:	20005c54 	.word	0x20005c54
 800251c:	20005692 	.word	0x20005692
 8002520:	200024d0 	.word	0x200024d0
 8002524:	200004d0 	.word	0x200004d0

08002528 <get_Good_NAND_block>:

void get_Good_NAND_block()
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
	while( nand_address.Block <= 4094 && !nand_block_status[nand_address.Block+1] )
 800252c:	e010      	b.n	8002550 <get_Good_NAND_block+0x28>
	{
		nand_address.Block++;
 800252e:	4b1a      	ldr	r3, [pc, #104]	@ (8002598 <get_Good_NAND_block+0x70>)
 8002530:	889b      	ldrh	r3, [r3, #4]
 8002532:	3301      	adds	r3, #1
 8002534:	b29a      	uxth	r2, r3
 8002536:	4b18      	ldr	r3, [pc, #96]	@ (8002598 <get_Good_NAND_block+0x70>)
 8002538:	809a      	strh	r2, [r3, #4]
		// Handle block wrapping around in case of overflow
		if (nand_address.Block > 4095)
 800253a:	4b17      	ldr	r3, [pc, #92]	@ (8002598 <get_Good_NAND_block+0x70>)
 800253c:	889b      	ldrh	r3, [r3, #4]
 800253e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002542:	d305      	bcc.n	8002550 <get_Good_NAND_block+0x28>
		{
			nand_address.Block = 0;
 8002544:	4b14      	ldr	r3, [pc, #80]	@ (8002598 <get_Good_NAND_block+0x70>)
 8002546:	2200      	movs	r2, #0
 8002548:	809a      	strh	r2, [r3, #4]
			nand_cyclic_run = 1;
 800254a:	4b14      	ldr	r3, [pc, #80]	@ (800259c <get_Good_NAND_block+0x74>)
 800254c:	2201      	movs	r2, #1
 800254e:	701a      	strb	r2, [r3, #0]
	while( nand_address.Block <= 4094 && !nand_block_status[nand_address.Block+1] )
 8002550:	4b11      	ldr	r3, [pc, #68]	@ (8002598 <get_Good_NAND_block+0x70>)
 8002552:	889b      	ldrh	r3, [r3, #4]
 8002554:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002558:	4293      	cmp	r3, r2
 800255a:	d806      	bhi.n	800256a <get_Good_NAND_block+0x42>
 800255c:	4b0e      	ldr	r3, [pc, #56]	@ (8002598 <get_Good_NAND_block+0x70>)
 800255e:	889b      	ldrh	r3, [r3, #4]
 8002560:	3301      	adds	r3, #1
 8002562:	4a0f      	ldr	r2, [pc, #60]	@ (80025a0 <get_Good_NAND_block+0x78>)
 8002564:	5cd3      	ldrb	r3, [r2, r3]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0e1      	beq.n	800252e <get_Good_NAND_block+0x6>
		}
	}
	nand_address.Block++;
 800256a:	4b0b      	ldr	r3, [pc, #44]	@ (8002598 <get_Good_NAND_block+0x70>)
 800256c:	889b      	ldrh	r3, [r3, #4]
 800256e:	3301      	adds	r3, #1
 8002570:	b29a      	uxth	r2, r3
 8002572:	4b09      	ldr	r3, [pc, #36]	@ (8002598 <get_Good_NAND_block+0x70>)
 8002574:	809a      	strh	r2, [r3, #4]
	if (nand_address.Block > 4095)
 8002576:	4b08      	ldr	r3, [pc, #32]	@ (8002598 <get_Good_NAND_block+0x70>)
 8002578:	889b      	ldrh	r3, [r3, #4]
 800257a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800257e:	d305      	bcc.n	800258c <get_Good_NAND_block+0x64>
	{
		nand_address.Block = 0;
 8002580:	4b05      	ldr	r3, [pc, #20]	@ (8002598 <get_Good_NAND_block+0x70>)
 8002582:	2200      	movs	r2, #0
 8002584:	809a      	strh	r2, [r3, #4]
		nand_cyclic_run = 1;
 8002586:	4b05      	ldr	r3, [pc, #20]	@ (800259c <get_Good_NAND_block+0x74>)
 8002588:	2201      	movs	r2, #1
 800258a:	701a      	strb	r2, [r3, #0]
	}
}
 800258c:	bf00      	nop
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	200004c8 	.word	0x200004c8
 800259c:	20005691 	.word	0x20005691
 80025a0:	20004690 	.word	0x20004690

080025a4 <SRAM_operation>:
/*
 * SRAM_operation
 * Reads time data from SRAM, updates temperature readings, and writes formatted
 * data back to SRAM. Checks for time changes and triggers NAND update if necessary.
 */
uint8_t SRAM_operation() {
 80025a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025a8:	b0d9      	sub	sp, #356	@ 0x164
 80025aa:	af34      	add	r7, sp, #208	@ 0xd0
	uint8_t time_data[8] = {0};
 80025ac:	2300      	movs	r3, #0
 80025ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80025b2:	2300      	movs	r3, #0
 80025b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	uint16_t bufSize = 0;
 80025b8:	2300      	movs	r3, #0
 80025ba:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e

	// Read current second from SRAM
	HAL_SRAM_Read_8b(&hsram1, (uint32_t *)sec_addr, (uint8_t *)&time_data, 7);
 80025be:	4ba6      	ldr	r3, [pc, #664]	@ (8002858 <SRAM_operation+0x2b4>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4619      	mov	r1, r3
 80025c4:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 80025c8:	2307      	movs	r3, #7
 80025ca:	48a4      	ldr	r0, [pc, #656]	@ (800285c <SRAM_operation+0x2b8>)
 80025cc:	f00a fb9a 	bl	800cd04 <HAL_SRAM_Read_8b>

	// Check if the second has changed
	if (time_data[0] != old_sec ) {
 80025d0:	f897 2084 	ldrb.w	r2, [r7, #132]	@ 0x84
 80025d4:	4ba2      	ldr	r3, [pc, #648]	@ (8002860 <SRAM_operation+0x2bc>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	429a      	cmp	r2, r3
 80025da:	f000 81ad 	beq.w	8002938 <SRAM_operation+0x394>
		HAL_GPIO_WritePin(GPIOE, LED4_Pin, 1); // Toggle LED for visual feedback
 80025de:	2201      	movs	r2, #1
 80025e0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80025e4:	489f      	ldr	r0, [pc, #636]	@ (8002864 <SRAM_operation+0x2c0>)
 80025e6:	f002 fdef 	bl	80051c8 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80025ea:	2001      	movs	r0, #1
 80025ec:	f002 fa40 	bl	8004a70 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, LED4_Pin, 0);
 80025f0:	2200      	movs	r2, #0
 80025f2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80025f6:	489b      	ldr	r0, [pc, #620]	@ (8002864 <SRAM_operation+0x2c0>)
 80025f8:	f002 fde6 	bl	80051c8 <HAL_GPIO_WritePin>
		//		memset(SRAM_buffer, 0, sizeof(SRAM_buffer));

		// Format temperature and time data into the buffer
		memset(SRAMopt.SRAM_buffer,0,sizeof(SRAMopt.SRAM_buffer));
 80025fc:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8002600:	2100      	movs	r1, #0
 8002602:	4899      	ldr	r0, [pc, #612]	@ (8002868 <SRAM_operation+0x2c4>)
 8002604:	f00d fd17 	bl	8010036 <memset>
		SRAMopt.Startbyte=SoF;
 8002608:	4b98      	ldr	r3, [pc, #608]	@ (800286c <SRAM_operation+0x2c8>)
 800260a:	2240      	movs	r2, #64	@ 0x40
 800260c:	701a      	strb	r2, [r3, #0]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
				"{\"TS1\": \"%.2f#%X\", \"TS2\": \"%.2f#%X\", \"TS3\": \"%.2f#%X\", \"TS4\": \"%.2f#%X\", \"TS5\": \"%.2f#%X\", "
				"\"TS6\": \"%.2f#%X\", \"TS7\": \"%.2f#%X\", \"TS8\": \"%.2f#%X\", \"TS9\": \"%.2f#%X\", \"TS10\": \"%.2f#%X\", "
				"\"TS11\": \"%.2f#%X\", \"TS12\": \"%.2f#%X\", \"TIME\": \"%x:%x:%x\",\"DATE\": \"%x-%x-20%x\"} \n\r",
				temp_sensor[0][0],sensor_hex[0][0] ,temp_sensor[0][1],sensor_hex[0][1], temp_sensor[0][2],sensor_hex[0][2], temp_sensor[0][3],sensor_hex[0][3], temp_sensor[1][0],sensor_hex[1][0], temp_sensor[1][1],sensor_hex[1][1],
 800260e:	4b98      	ldr	r3, [pc, #608]	@ (8002870 <SRAM_operation+0x2cc>)
 8002610:	681b      	ldr	r3, [r3, #0]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002612:	4618      	mov	r0, r3
 8002614:	f7fd ffa8 	bl	8000568 <__aeabi_f2d>
 8002618:	e9c7 011e 	strd	r0, r1, [r7, #120]	@ 0x78
				temp_sensor[0][0],sensor_hex[0][0] ,temp_sensor[0][1],sensor_hex[0][1], temp_sensor[0][2],sensor_hex[0][2], temp_sensor[0][3],sensor_hex[0][3], temp_sensor[1][0],sensor_hex[1][0], temp_sensor[1][1],sensor_hex[1][1],
 800261c:	4b95      	ldr	r3, [pc, #596]	@ (8002874 <SRAM_operation+0x2d0>)
 800261e:	881b      	ldrh	r3, [r3, #0]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002620:	677b      	str	r3, [r7, #116]	@ 0x74
				temp_sensor[0][0],sensor_hex[0][0] ,temp_sensor[0][1],sensor_hex[0][1], temp_sensor[0][2],sensor_hex[0][2], temp_sensor[0][3],sensor_hex[0][3], temp_sensor[1][0],sensor_hex[1][0], temp_sensor[1][1],sensor_hex[1][1],
 8002622:	4b93      	ldr	r3, [pc, #588]	@ (8002870 <SRAM_operation+0x2cc>)
 8002624:	685b      	ldr	r3, [r3, #4]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002626:	4618      	mov	r0, r3
 8002628:	f7fd ff9e 	bl	8000568 <__aeabi_f2d>
 800262c:	e9c7 011a 	strd	r0, r1, [r7, #104]	@ 0x68
				temp_sensor[0][0],sensor_hex[0][0] ,temp_sensor[0][1],sensor_hex[0][1], temp_sensor[0][2],sensor_hex[0][2], temp_sensor[0][3],sensor_hex[0][3], temp_sensor[1][0],sensor_hex[1][0], temp_sensor[1][1],sensor_hex[1][1],
 8002630:	4b90      	ldr	r3, [pc, #576]	@ (8002874 <SRAM_operation+0x2d0>)
 8002632:	885b      	ldrh	r3, [r3, #2]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002634:	673b      	str	r3, [r7, #112]	@ 0x70
				temp_sensor[0][0],sensor_hex[0][0] ,temp_sensor[0][1],sensor_hex[0][1], temp_sensor[0][2],sensor_hex[0][2], temp_sensor[0][3],sensor_hex[0][3], temp_sensor[1][0],sensor_hex[1][0], temp_sensor[1][1],sensor_hex[1][1],
 8002636:	4b8e      	ldr	r3, [pc, #568]	@ (8002870 <SRAM_operation+0x2cc>)
 8002638:	689b      	ldr	r3, [r3, #8]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800263a:	4618      	mov	r0, r3
 800263c:	f7fd ff94 	bl	8000568 <__aeabi_f2d>
 8002640:	e9c7 0118 	strd	r0, r1, [r7, #96]	@ 0x60
				temp_sensor[0][0],sensor_hex[0][0] ,temp_sensor[0][1],sensor_hex[0][1], temp_sensor[0][2],sensor_hex[0][2], temp_sensor[0][3],sensor_hex[0][3], temp_sensor[1][0],sensor_hex[1][0], temp_sensor[1][1],sensor_hex[1][1],
 8002644:	4b8b      	ldr	r3, [pc, #556]	@ (8002874 <SRAM_operation+0x2d0>)
 8002646:	889b      	ldrh	r3, [r3, #4]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002648:	65fb      	str	r3, [r7, #92]	@ 0x5c
				temp_sensor[0][0],sensor_hex[0][0] ,temp_sensor[0][1],sensor_hex[0][1], temp_sensor[0][2],sensor_hex[0][2], temp_sensor[0][3],sensor_hex[0][3], temp_sensor[1][0],sensor_hex[1][0], temp_sensor[1][1],sensor_hex[1][1],
 800264a:	4b89      	ldr	r3, [pc, #548]	@ (8002870 <SRAM_operation+0x2cc>)
 800264c:	68db      	ldr	r3, [r3, #12]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800264e:	4618      	mov	r0, r3
 8002650:	f7fd ff8a 	bl	8000568 <__aeabi_f2d>
 8002654:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
				temp_sensor[0][0],sensor_hex[0][0] ,temp_sensor[0][1],sensor_hex[0][1], temp_sensor[0][2],sensor_hex[0][2], temp_sensor[0][3],sensor_hex[0][3], temp_sensor[1][0],sensor_hex[1][0], temp_sensor[1][1],sensor_hex[1][1],
 8002658:	4b86      	ldr	r3, [pc, #536]	@ (8002874 <SRAM_operation+0x2d0>)
 800265a:	88db      	ldrh	r3, [r3, #6]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800265c:	65bb      	str	r3, [r7, #88]	@ 0x58
				temp_sensor[0][0],sensor_hex[0][0] ,temp_sensor[0][1],sensor_hex[0][1], temp_sensor[0][2],sensor_hex[0][2], temp_sensor[0][3],sensor_hex[0][3], temp_sensor[1][0],sensor_hex[1][0], temp_sensor[1][1],sensor_hex[1][1],
 800265e:	4b84      	ldr	r3, [pc, #528]	@ (8002870 <SRAM_operation+0x2cc>)
 8002660:	691b      	ldr	r3, [r3, #16]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002662:	4618      	mov	r0, r3
 8002664:	f7fd ff80 	bl	8000568 <__aeabi_f2d>
 8002668:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
				temp_sensor[0][0],sensor_hex[0][0] ,temp_sensor[0][1],sensor_hex[0][1], temp_sensor[0][2],sensor_hex[0][2], temp_sensor[0][3],sensor_hex[0][3], temp_sensor[1][0],sensor_hex[1][0], temp_sensor[1][1],sensor_hex[1][1],
 800266c:	4b81      	ldr	r3, [pc, #516]	@ (8002874 <SRAM_operation+0x2d0>)
 800266e:	891b      	ldrh	r3, [r3, #8]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002670:	647b      	str	r3, [r7, #68]	@ 0x44
				temp_sensor[0][0],sensor_hex[0][0] ,temp_sensor[0][1],sensor_hex[0][1], temp_sensor[0][2],sensor_hex[0][2], temp_sensor[0][3],sensor_hex[0][3], temp_sensor[1][0],sensor_hex[1][0], temp_sensor[1][1],sensor_hex[1][1],
 8002672:	4b7f      	ldr	r3, [pc, #508]	@ (8002870 <SRAM_operation+0x2cc>)
 8002674:	695b      	ldr	r3, [r3, #20]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002676:	4618      	mov	r0, r3
 8002678:	f7fd ff76 	bl	8000568 <__aeabi_f2d>
 800267c:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
				temp_sensor[0][0],sensor_hex[0][0] ,temp_sensor[0][1],sensor_hex[0][1], temp_sensor[0][2],sensor_hex[0][2], temp_sensor[0][3],sensor_hex[0][3], temp_sensor[1][0],sensor_hex[1][0], temp_sensor[1][1],sensor_hex[1][1],
 8002680:	4b7c      	ldr	r3, [pc, #496]	@ (8002874 <SRAM_operation+0x2d0>)
 8002682:	895b      	ldrh	r3, [r3, #10]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002684:	643b      	str	r3, [r7, #64]	@ 0x40
				temp_sensor[1][2],sensor_hex[1][2], temp_sensor[1][3],sensor_hex[1][3], temp_sensor[2][0],sensor_hex[2][0], temp_sensor[2][1],sensor_hex[2][1], temp_sensor[2][2],sensor_hex[2][2], temp_sensor[2][3],sensor_hex[2][3],
 8002686:	4b7a      	ldr	r3, [pc, #488]	@ (8002870 <SRAM_operation+0x2cc>)
 8002688:	699b      	ldr	r3, [r3, #24]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800268a:	4618      	mov	r0, r3
 800268c:	f7fd ff6c 	bl	8000568 <__aeabi_f2d>
 8002690:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
				temp_sensor[1][2],sensor_hex[1][2], temp_sensor[1][3],sensor_hex[1][3], temp_sensor[2][0],sensor_hex[2][0], temp_sensor[2][1],sensor_hex[2][1], temp_sensor[2][2],sensor_hex[2][2], temp_sensor[2][3],sensor_hex[2][3],
 8002694:	4b77      	ldr	r3, [pc, #476]	@ (8002874 <SRAM_operation+0x2d0>)
 8002696:	899b      	ldrh	r3, [r3, #12]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002698:	62fb      	str	r3, [r7, #44]	@ 0x2c
				temp_sensor[1][2],sensor_hex[1][2], temp_sensor[1][3],sensor_hex[1][3], temp_sensor[2][0],sensor_hex[2][0], temp_sensor[2][1],sensor_hex[2][1], temp_sensor[2][2],sensor_hex[2][2], temp_sensor[2][3],sensor_hex[2][3],
 800269a:	4b75      	ldr	r3, [pc, #468]	@ (8002870 <SRAM_operation+0x2cc>)
 800269c:	69db      	ldr	r3, [r3, #28]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fd ff62 	bl	8000568 <__aeabi_f2d>
 80026a4:	e9c7 0108 	strd	r0, r1, [r7, #32]
				temp_sensor[1][2],sensor_hex[1][2], temp_sensor[1][3],sensor_hex[1][3], temp_sensor[2][0],sensor_hex[2][0], temp_sensor[2][1],sensor_hex[2][1], temp_sensor[2][2],sensor_hex[2][2], temp_sensor[2][3],sensor_hex[2][3],
 80026a8:	4b72      	ldr	r3, [pc, #456]	@ (8002874 <SRAM_operation+0x2d0>)
 80026aa:	89db      	ldrh	r3, [r3, #14]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 80026ac:	62bb      	str	r3, [r7, #40]	@ 0x28
				temp_sensor[1][2],sensor_hex[1][2], temp_sensor[1][3],sensor_hex[1][3], temp_sensor[2][0],sensor_hex[2][0], temp_sensor[2][1],sensor_hex[2][1], temp_sensor[2][2],sensor_hex[2][2], temp_sensor[2][3],sensor_hex[2][3],
 80026ae:	4b70      	ldr	r3, [pc, #448]	@ (8002870 <SRAM_operation+0x2cc>)
 80026b0:	6a1b      	ldr	r3, [r3, #32]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7fd ff58 	bl	8000568 <__aeabi_f2d>
 80026b8:	e9c7 0106 	strd	r0, r1, [r7, #24]
				temp_sensor[1][2],sensor_hex[1][2], temp_sensor[1][3],sensor_hex[1][3], temp_sensor[2][0],sensor_hex[2][0], temp_sensor[2][1],sensor_hex[2][1], temp_sensor[2][2],sensor_hex[2][2], temp_sensor[2][3],sensor_hex[2][3],
 80026bc:	4b6d      	ldr	r3, [pc, #436]	@ (8002874 <SRAM_operation+0x2d0>)
 80026be:	8a1b      	ldrh	r3, [r3, #16]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 80026c0:	617b      	str	r3, [r7, #20]
				temp_sensor[1][2],sensor_hex[1][2], temp_sensor[1][3],sensor_hex[1][3], temp_sensor[2][0],sensor_hex[2][0], temp_sensor[2][1],sensor_hex[2][1], temp_sensor[2][2],sensor_hex[2][2], temp_sensor[2][3],sensor_hex[2][3],
 80026c2:	4b6b      	ldr	r3, [pc, #428]	@ (8002870 <SRAM_operation+0x2cc>)
 80026c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7fd ff4e 	bl	8000568 <__aeabi_f2d>
 80026cc:	4682      	mov	sl, r0
 80026ce:	468b      	mov	fp, r1
				temp_sensor[1][2],sensor_hex[1][2], temp_sensor[1][3],sensor_hex[1][3], temp_sensor[2][0],sensor_hex[2][0], temp_sensor[2][1],sensor_hex[2][1], temp_sensor[2][2],sensor_hex[2][2], temp_sensor[2][3],sensor_hex[2][3],
 80026d0:	4b68      	ldr	r3, [pc, #416]	@ (8002874 <SRAM_operation+0x2d0>)
 80026d2:	8a5b      	ldrh	r3, [r3, #18]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 80026d4:	613b      	str	r3, [r7, #16]
				temp_sensor[1][2],sensor_hex[1][2], temp_sensor[1][3],sensor_hex[1][3], temp_sensor[2][0],sensor_hex[2][0], temp_sensor[2][1],sensor_hex[2][1], temp_sensor[2][2],sensor_hex[2][2], temp_sensor[2][3],sensor_hex[2][3],
 80026d6:	4b66      	ldr	r3, [pc, #408]	@ (8002870 <SRAM_operation+0x2cc>)
 80026d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fd ff44 	bl	8000568 <__aeabi_f2d>
 80026e0:	4680      	mov	r8, r0
 80026e2:	4689      	mov	r9, r1
				temp_sensor[1][2],sensor_hex[1][2], temp_sensor[1][3],sensor_hex[1][3], temp_sensor[2][0],sensor_hex[2][0], temp_sensor[2][1],sensor_hex[2][1], temp_sensor[2][2],sensor_hex[2][2], temp_sensor[2][3],sensor_hex[2][3],
 80026e4:	4b63      	ldr	r3, [pc, #396]	@ (8002874 <SRAM_operation+0x2d0>)
 80026e6:	8a9b      	ldrh	r3, [r3, #20]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 80026e8:	60fb      	str	r3, [r7, #12]
				temp_sensor[1][2],sensor_hex[1][2], temp_sensor[1][3],sensor_hex[1][3], temp_sensor[2][0],sensor_hex[2][0], temp_sensor[2][1],sensor_hex[2][1], temp_sensor[2][2],sensor_hex[2][2], temp_sensor[2][3],sensor_hex[2][3],
 80026ea:	4b61      	ldr	r3, [pc, #388]	@ (8002870 <SRAM_operation+0x2cc>)
 80026ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7fd ff3a 	bl	8000568 <__aeabi_f2d>
 80026f4:	4604      	mov	r4, r0
 80026f6:	460d      	mov	r5, r1
				temp_sensor[1][2],sensor_hex[1][2], temp_sensor[1][3],sensor_hex[1][3], temp_sensor[2][0],sensor_hex[2][0], temp_sensor[2][1],sensor_hex[2][1], temp_sensor[2][2],sensor_hex[2][2], temp_sensor[2][3],sensor_hex[2][3],
 80026f8:	4b5e      	ldr	r3, [pc, #376]	@ (8002874 <SRAM_operation+0x2d0>)
 80026fa:	8adb      	ldrh	r3, [r3, #22]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 80026fc:	60bb      	str	r3, [r7, #8]
				time_data[2], time_data[1], time_data[0], time_data[4], time_data[5], time_data[6]);
 80026fe:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002702:	607b      	str	r3, [r7, #4]
				time_data[2], time_data[1], time_data[0], time_data[4], time_data[5], time_data[6]);
 8002704:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002708:	461e      	mov	r6, r3
				time_data[2], time_data[1], time_data[0], time_data[4], time_data[5], time_data[6]);
 800270a:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800270e:	4618      	mov	r0, r3
				time_data[2], time_data[1], time_data[0], time_data[4], time_data[5], time_data[6]);
 8002710:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002714:	4619      	mov	r1, r3
				time_data[2], time_data[1], time_data[0], time_data[4], time_data[5], time_data[6]);
 8002716:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800271a:	461a      	mov	r2, r3
				time_data[2], time_data[1], time_data[0], time_data[4], time_data[5], time_data[6]);
 800271c:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002720:	9332      	str	r3, [sp, #200]	@ 0xc8
 8002722:	9231      	str	r2, [sp, #196]	@ 0xc4
 8002724:	9130      	str	r1, [sp, #192]	@ 0xc0
 8002726:	902f      	str	r0, [sp, #188]	@ 0xbc
 8002728:	962e      	str	r6, [sp, #184]	@ 0xb8
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	912d      	str	r1, [sp, #180]	@ 0xb4
 800272e:	68b9      	ldr	r1, [r7, #8]
 8002730:	912c      	str	r1, [sp, #176]	@ 0xb0
 8002732:	e9cd 452a 	strd	r4, r5, [sp, #168]	@ 0xa8
 8002736:	68f9      	ldr	r1, [r7, #12]
 8002738:	9128      	str	r1, [sp, #160]	@ 0xa0
 800273a:	e9cd 8926 	strd	r8, r9, [sp, #152]	@ 0x98
 800273e:	6939      	ldr	r1, [r7, #16]
 8002740:	9124      	str	r1, [sp, #144]	@ 0x90
 8002742:	e9cd ab22 	strd	sl, fp, [sp, #136]	@ 0x88
 8002746:	6979      	ldr	r1, [r7, #20]
 8002748:	9120      	str	r1, [sp, #128]	@ 0x80
 800274a:	ed97 7b06 	vldr	d7, [r7, #24]
 800274e:	ed8d 7b1e 	vstr	d7, [sp, #120]	@ 0x78
 8002752:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002754:	911c      	str	r1, [sp, #112]	@ 0x70
 8002756:	ed97 7b08 	vldr	d7, [r7, #32]
 800275a:	ed8d 7b1a 	vstr	d7, [sp, #104]	@ 0x68
 800275e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002760:	9118      	str	r1, [sp, #96]	@ 0x60
 8002762:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8002766:	ed8d 7b16 	vstr	d7, [sp, #88]	@ 0x58
 800276a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800276c:	9114      	str	r1, [sp, #80]	@ 0x50
 800276e:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8002772:	ed8d 7b12 	vstr	d7, [sp, #72]	@ 0x48
 8002776:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002778:	9110      	str	r1, [sp, #64]	@ 0x40
 800277a:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 800277e:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8002782:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002784:	910c      	str	r1, [sp, #48]	@ 0x30
 8002786:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 800278a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800278e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8002790:	9108      	str	r1, [sp, #32]
 8002792:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8002796:	ed8d 7b06 	vstr	d7, [sp, #24]
 800279a:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800279c:	9104      	str	r1, [sp, #16]
 800279e:	ed97 7b1a 	vldr	d7, [r7, #104]	@ 0x68
 80027a2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80027a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80027ae:	4932      	ldr	r1, [pc, #200]	@ (8002878 <SRAM_operation+0x2d4>)
 80027b0:	482d      	ldr	r0, [pc, #180]	@ (8002868 <SRAM_operation+0x2c4>)
 80027b2:	f00d fbdd 	bl	800ff70 <siprintf>
 80027b6:	4603      	mov	r3, r0
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	4b2c      	ldr	r3, [pc, #176]	@ (800286c <SRAM_operation+0x2c8>)
 80027bc:	f8a3 2162 	strh.w	r2, [r3, #354]	@ 0x162
		SRAMopt.SRAM_buffer[(SRAMopt.Idxcount)-3]=EoF;
 80027c0:	4b2a      	ldr	r3, [pc, #168]	@ (800286c <SRAM_operation+0x2c8>)
 80027c2:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 80027c6:	3b03      	subs	r3, #3
 80027c8:	4a28      	ldr	r2, [pc, #160]	@ (800286c <SRAM_operation+0x2c8>)
 80027ca:	4413      	add	r3, r2
 80027cc:	2224      	movs	r2, #36	@ 0x24
 80027ce:	705a      	strb	r2, [r3, #1]

		// Write the buffer to SRAM
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sram_location, (uint8_t *)&SRAMopt,((SRAMopt.Idxcount)+1));
 80027d0:	4b2a      	ldr	r3, [pc, #168]	@ (800287c <SRAM_operation+0x2d8>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4619      	mov	r1, r3
 80027d6:	4b25      	ldr	r3, [pc, #148]	@ (800286c <SRAM_operation+0x2c8>)
 80027d8:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 80027dc:	3301      	adds	r3, #1
 80027de:	4a23      	ldr	r2, [pc, #140]	@ (800286c <SRAM_operation+0x2c8>)
 80027e0:	481e      	ldr	r0, [pc, #120]	@ (800285c <SRAM_operation+0x2b8>)
 80027e2:	f00a fad8 	bl	800cd96 <HAL_SRAM_Write_8b>
		HAL_Delay(50);
 80027e6:	2032      	movs	r0, #50	@ 0x32
 80027e8:	f002 f942 	bl	8004a70 <HAL_Delay>

		// Update SRAM location and size counter
		sram_location += ((SRAMopt.Idxcount)+1);
 80027ec:	4b1f      	ldr	r3, [pc, #124]	@ (800286c <SRAM_operation+0x2c8>)
 80027ee:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 80027f2:	461a      	mov	r2, r3
 80027f4:	4b21      	ldr	r3, [pc, #132]	@ (800287c <SRAM_operation+0x2d8>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4413      	add	r3, r2
 80027fa:	3301      	adds	r3, #1
 80027fc:	4a1f      	ldr	r2, [pc, #124]	@ (800287c <SRAM_operation+0x2d8>)
 80027fe:	6013      	str	r3, [r2, #0]
		size_counter  += ((SRAMopt.Idxcount)+1);
 8002800:	4b1a      	ldr	r3, [pc, #104]	@ (800286c <SRAM_operation+0x2c8>)
 8002802:	f8b3 2162 	ldrh.w	r2, [r3, #354]	@ 0x162
 8002806:	4b1e      	ldr	r3, [pc, #120]	@ (8002880 <SRAM_operation+0x2dc>)
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	4413      	add	r3, r2
 800280c:	b29b      	uxth	r3, r3
 800280e:	3301      	adds	r3, #1
 8002810:	b29a      	uxth	r2, r3
 8002812:	4b1b      	ldr	r3, [pc, #108]	@ (8002880 <SRAM_operation+0x2dc>)
 8002814:	801a      	strh	r2, [r3, #0]
		counter++;
 8002816:	4b1b      	ldr	r3, [pc, #108]	@ (8002884 <SRAM_operation+0x2e0>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	3301      	adds	r3, #1
 800281c:	b2da      	uxtb	r2, r3
 800281e:	4b19      	ldr	r3, [pc, #100]	@ (8002884 <SRAM_operation+0x2e0>)
 8002820:	701a      	strb	r2, [r3, #0]

		if(!ATP_UART)
 8002822:	4b19      	ldr	r3, [pc, #100]	@ (8002888 <SRAM_operation+0x2e4>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d168      	bne.n	80028fc <SRAM_operation+0x358>
		{

			HAL_GPIO_WritePin(GPIOA, RS485_CTRL1_Pin, GPIO_PIN_SET);
 800282a:	2201      	movs	r2, #1
 800282c:	2102      	movs	r1, #2
 800282e:	4817      	ldr	r0, [pc, #92]	@ (800288c <SRAM_operation+0x2e8>)
 8002830:	f002 fcca 	bl	80051c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, RS485_CTRL2_Pin, GPIO_PIN_SET);
 8002834:	2201      	movs	r2, #1
 8002836:	2104      	movs	r1, #4
 8002838:	4814      	ldr	r0, [pc, #80]	@ (800288c <SRAM_operation+0x2e8>)
 800283a:	f002 fcc5 	bl	80051c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, RS422_CTRL_Pin,  GPIO_PIN_SET);
 800283e:	2201      	movs	r2, #1
 8002840:	2101      	movs	r1, #1
 8002842:	4812      	ldr	r0, [pc, #72]	@ (800288c <SRAM_operation+0x2e8>)
 8002844:	f002 fcc0 	bl	80051c8 <HAL_GPIO_WritePin>
			HAL_Delay(2);
 8002848:	2002      	movs	r0, #2
 800284a:	f002 f911 	bl	8004a70 <HAL_Delay>
			HAL_UART_Transmit_IT(&huart8, (uint8_t *)&SRAMopt, (SRAMopt.Idxcount)+1);
 800284e:	4b07      	ldr	r3, [pc, #28]	@ (800286c <SRAM_operation+0x2c8>)
 8002850:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 8002854:	3301      	adds	r3, #1
 8002856:	e01b      	b.n	8002890 <SRAM_operation+0x2ec>
 8002858:	20000010 	.word	0x20000010
 800285c:	20005bfc 	.word	0x20005bfc
 8002860:	200057fa 	.word	0x200057fa
 8002864:	42021000 	.word	0x42021000
 8002868:	20005695 	.word	0x20005695
 800286c:	20005694 	.word	0x20005694
 8002870:	20000468 	.word	0x20000468
 8002874:	20000498 	.word	0x20000498
 8002878:	08012434 	.word	0x08012434
 800287c:	20000004 	.word	0x20000004
 8002880:	200057f8 	.word	0x200057f8
 8002884:	200057fb 	.word	0x200057fb
 8002888:	20005cc1 	.word	0x20005cc1
 800288c:	42020000 	.word	0x42020000
 8002890:	b29b      	uxth	r3, r3
 8002892:	461a      	mov	r2, r3
 8002894:	4930      	ldr	r1, [pc, #192]	@ (8002958 <SRAM_operation+0x3b4>)
 8002896:	4831      	ldr	r0, [pc, #196]	@ (800295c <SRAM_operation+0x3b8>)
 8002898:	f00a fb12 	bl	800cec0 <HAL_UART_Transmit_IT>
			HAL_UART_Transmit_IT(&huart10,(uint8_t *)&SRAMopt, (SRAMopt.Idxcount)+1);
 800289c:	4b2e      	ldr	r3, [pc, #184]	@ (8002958 <SRAM_operation+0x3b4>)
 800289e:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 80028a2:	3301      	adds	r3, #1
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	461a      	mov	r2, r3
 80028a8:	492b      	ldr	r1, [pc, #172]	@ (8002958 <SRAM_operation+0x3b4>)
 80028aa:	482d      	ldr	r0, [pc, #180]	@ (8002960 <SRAM_operation+0x3bc>)
 80028ac:	f00a fb08 	bl	800cec0 <HAL_UART_Transmit_IT>
			HAL_UART_Transmit_IT(&huart4, (uint8_t *)&SRAMopt, (SRAMopt.Idxcount)+1);
 80028b0:	4b29      	ldr	r3, [pc, #164]	@ (8002958 <SRAM_operation+0x3b4>)
 80028b2:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 80028b6:	3301      	adds	r3, #1
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	461a      	mov	r2, r3
 80028bc:	4926      	ldr	r1, [pc, #152]	@ (8002958 <SRAM_operation+0x3b4>)
 80028be:	4829      	ldr	r0, [pc, #164]	@ (8002964 <SRAM_operation+0x3c0>)
 80028c0:	f00a fafe 	bl	800cec0 <HAL_UART_Transmit_IT>
			HAL_UART_Transmit_IT(&huart5, (uint8_t *)&SRAMopt, (SRAMopt.Idxcount)+1);
 80028c4:	4b24      	ldr	r3, [pc, #144]	@ (8002958 <SRAM_operation+0x3b4>)
 80028c6:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 80028ca:	3301      	adds	r3, #1
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	461a      	mov	r2, r3
 80028d0:	4921      	ldr	r1, [pc, #132]	@ (8002958 <SRAM_operation+0x3b4>)
 80028d2:	4825      	ldr	r0, [pc, #148]	@ (8002968 <SRAM_operation+0x3c4>)
 80028d4:	f00a faf4 	bl	800cec0 <HAL_UART_Transmit_IT>
			HAL_Delay(100);
 80028d8:	2064      	movs	r0, #100	@ 0x64
 80028da:	f002 f8c9 	bl	8004a70 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, RS422_CTRL_Pin,  GPIO_PIN_RESET);
 80028de:	2200      	movs	r2, #0
 80028e0:	2101      	movs	r1, #1
 80028e2:	4822      	ldr	r0, [pc, #136]	@ (800296c <SRAM_operation+0x3c8>)
 80028e4:	f002 fc70 	bl	80051c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, RS485_CTRL1_Pin, GPIO_PIN_RESET);
 80028e8:	2200      	movs	r2, #0
 80028ea:	2102      	movs	r1, #2
 80028ec:	481f      	ldr	r0, [pc, #124]	@ (800296c <SRAM_operation+0x3c8>)
 80028ee:	f002 fc6b 	bl	80051c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, RS485_CTRL2_Pin, GPIO_PIN_RESET);
 80028f2:	2200      	movs	r2, #0
 80028f4:	2104      	movs	r1, #4
 80028f6:	481d      	ldr	r0, [pc, #116]	@ (800296c <SRAM_operation+0x3c8>)
 80028f8:	f002 fc66 	bl	80051c8 <HAL_GPIO_WritePin>
		}

		// Check if the buffer exceeds the NAND page size
		if (size_counter + (SRAMopt.Idxcount) > NAND_PAGE_SIZE) {
 80028fc:	4b1c      	ldr	r3, [pc, #112]	@ (8002970 <SRAM_operation+0x3cc>)
 80028fe:	881b      	ldrh	r3, [r3, #0]
 8002900:	461a      	mov	r2, r3
 8002902:	4b15      	ldr	r3, [pc, #84]	@ (8002958 <SRAM_operation+0x3b4>)
 8002904:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 8002908:	4413      	add	r3, r2
 800290a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800290e:	dd0f      	ble.n	8002930 <SRAM_operation+0x38c>
			sram_location = sram_base_location;
 8002910:	4b18      	ldr	r3, [pc, #96]	@ (8002974 <SRAM_operation+0x3d0>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a18      	ldr	r2, [pc, #96]	@ (8002978 <SRAM_operation+0x3d4>)
 8002916:	6013      	str	r3, [r2, #0]
			bufSize = 0;
 8002918:	2300      	movs	r3, #0
 800291a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
			size_counter = 0;
 800291e:	4b14      	ldr	r3, [pc, #80]	@ (8002970 <SRAM_operation+0x3cc>)
 8002920:	2200      	movs	r2, #0
 8002922:	801a      	strh	r2, [r3, #0]
			counter=0;
 8002924:	4b15      	ldr	r3, [pc, #84]	@ (800297c <SRAM_operation+0x3d8>)
 8002926:	2200      	movs	r2, #0
 8002928:	701a      	strb	r2, [r3, #0]
			nand_update = 1;
 800292a:	4b15      	ldr	r3, [pc, #84]	@ (8002980 <SRAM_operation+0x3dc>)
 800292c:	2201      	movs	r2, #1
 800292e:	701a      	strb	r2, [r3, #0]
		}

		// Update old_sec to current second
		old_sec = time_data[0];
 8002930:	f897 2084 	ldrb.w	r2, [r7, #132]	@ 0x84
 8002934:	4b13      	ldr	r3, [pc, #76]	@ (8002984 <SRAM_operation+0x3e0>)
 8002936:	701a      	strb	r2, [r3, #0]
	}

	// If time setting flag is set, call time_setter
	if (time_set) {
 8002938:	4b13      	ldr	r3, [pc, #76]	@ (8002988 <SRAM_operation+0x3e4>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d004      	beq.n	800294a <SRAM_operation+0x3a6>
		time_set = 0;
 8002940:	4b11      	ldr	r3, [pc, #68]	@ (8002988 <SRAM_operation+0x3e4>)
 8002942:	2200      	movs	r2, #0
 8002944:	701a      	strb	r2, [r3, #0]
		time_setter();
 8002946:	f000 f895 	bl	8002a74 <time_setter>
	}
	return 0;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3794      	adds	r7, #148	@ 0x94
 8002950:	46bd      	mov	sp, r7
 8002952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002956:	bf00      	nop
 8002958:	20005694 	.word	0x20005694
 800295c:	20005ad4 	.word	0x20005ad4
 8002960:	20005b68 	.word	0x20005b68
 8002964:	200059ac 	.word	0x200059ac
 8002968:	20005a40 	.word	0x20005a40
 800296c:	42020000 	.word	0x42020000
 8002970:	200057f8 	.word	0x200057f8
 8002974:	20000008 	.word	0x20000008
 8002978:	20000004 	.word	0x20000004
 800297c:	200057fb 	.word	0x200057fb
 8002980:	20005690 	.word	0x20005690
 8002984:	200057fa 	.word	0x200057fa
 8002988:	20005cba 	.word	0x20005cba

0800298c <get_NAND_data>:

/*
 * get_NAND_data
 * Reads a full page of data from SRAM into sram_data buffer and clears SRAM.
 */
void get_NAND_data(uint8_t *sram_data) {
 800298c:	b580      	push	{r7, lr}
 800298e:	f5ad 5d00 	sub.w	sp, sp, #8192	@ 0x2000
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	f107 0308 	add.w	r3, r7, #8
 800299a:	f843 0c04 	str.w	r0, [r3, #-4]
	uint8_t CLEAN_DATA[8192] = {0};
 800299e:	f107 0308 	add.w	r3, r7, #8
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	3304      	adds	r3, #4
 80029a8:	f641 72fc 	movw	r2, #8188	@ 0x1ffc
 80029ac:	2100      	movs	r1, #0
 80029ae:	4618      	mov	r0, r3
 80029b0:	f00d fb41 	bl	8010036 <memset>

	// Read NAND page from SRAM
	HAL_SRAM_Read_8b(&hsram1, (uint32_t *)sram_base_location, sram_data, NAND_PAGE_SIZE);
 80029b4:	4b0e      	ldr	r3, [pc, #56]	@ (80029f0 <get_NAND_data+0x64>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4619      	mov	r1, r3
 80029ba:	f107 0308 	add.w	r3, r7, #8
 80029be:	461a      	mov	r2, r3
 80029c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029c4:	f852 2c04 	ldr.w	r2, [r2, #-4]
 80029c8:	480a      	ldr	r0, [pc, #40]	@ (80029f4 <get_NAND_data+0x68>)
 80029ca:	f00a f99b 	bl	800cd04 <HAL_SRAM_Read_8b>

	// Clear the SRAM location
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sram_base_location, CLEAN_DATA, NAND_PAGE_SIZE);
 80029ce:	4b08      	ldr	r3, [pc, #32]	@ (80029f0 <get_NAND_data+0x64>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4619      	mov	r1, r3
 80029d4:	f107 0208 	add.w	r2, r7, #8
 80029d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029dc:	4805      	ldr	r0, [pc, #20]	@ (80029f4 <get_NAND_data+0x68>)
 80029de:	f00a f9da 	bl	800cd96 <HAL_SRAM_Write_8b>
}
 80029e2:	bf00      	nop
 80029e4:	f507 5700 	add.w	r7, r7, #8192	@ 0x2000
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	20000008 	.word	0x20000008
 80029f4:	20005bfc 	.word	0x20005bfc

080029f8 <get_NAND_address>:

/*
 * get_NAND_address
 * Reads the current NAND address from SRAM.
 */
uint8_t get_NAND_address(void) {
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
	HAL_SRAM_Read_8b(&hsram1, (uint32_t *)sramAddr_base_addr + 2, (uint8_t *)&nand_address, sizeof(nand_address));
 80029fc:	4b10      	ldr	r3, [pc, #64]	@ (8002a40 <get_NAND_address+0x48>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	3308      	adds	r3, #8
 8002a02:	4619      	mov	r1, r3
 8002a04:	2306      	movs	r3, #6
 8002a06:	4a0f      	ldr	r2, [pc, #60]	@ (8002a44 <get_NAND_address+0x4c>)
 8002a08:	480f      	ldr	r0, [pc, #60]	@ (8002a48 <get_NAND_address+0x50>)
 8002a0a:	f00a f97b 	bl	800cd04 <HAL_SRAM_Read_8b>
	if(nand_address.Page >= 128)
 8002a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a44 <get_NAND_address+0x4c>)
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	2b7f      	cmp	r3, #127	@ 0x7f
 8002a14:	d902      	bls.n	8002a1c <get_NAND_address+0x24>
		nand_address.Page=0;
 8002a16:	4b0b      	ldr	r3, [pc, #44]	@ (8002a44 <get_NAND_address+0x4c>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	801a      	strh	r2, [r3, #0]
	if(nand_address.Block >= 4096)
 8002a1c:	4b09      	ldr	r3, [pc, #36]	@ (8002a44 <get_NAND_address+0x4c>)
 8002a1e:	889b      	ldrh	r3, [r3, #4]
 8002a20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a24:	d302      	bcc.n	8002a2c <get_NAND_address+0x34>
		nand_address.Block=0;
 8002a26:	4b07      	ldr	r3, [pc, #28]	@ (8002a44 <get_NAND_address+0x4c>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	809a      	strh	r2, [r3, #4]
	if(nand_address.Plane > 2)
 8002a2c:	4b05      	ldr	r3, [pc, #20]	@ (8002a44 <get_NAND_address+0x4c>)
 8002a2e:	885b      	ldrh	r3, [r3, #2]
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d902      	bls.n	8002a3a <get_NAND_address+0x42>
		nand_address.Plane=0;
 8002a34:	4b03      	ldr	r3, [pc, #12]	@ (8002a44 <get_NAND_address+0x4c>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	805a      	strh	r2, [r3, #2]

	return 0;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	2000000c 	.word	0x2000000c
 8002a44:	200004c8 	.word	0x200004c8
 8002a48:	20005bfc 	.word	0x20005bfc

08002a4c <update_NAND_addr>:

/*
 * update_NAND_addr
 * Writes the current NAND address to SRAM.
 */
void update_NAND_addr() {
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr_base_addr + 2, (uint8_t *)&nand_address, sizeof(nand_address));
 8002a50:	4b05      	ldr	r3, [pc, #20]	@ (8002a68 <update_NAND_addr+0x1c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	3308      	adds	r3, #8
 8002a56:	4619      	mov	r1, r3
 8002a58:	2306      	movs	r3, #6
 8002a5a:	4a04      	ldr	r2, [pc, #16]	@ (8002a6c <update_NAND_addr+0x20>)
 8002a5c:	4804      	ldr	r0, [pc, #16]	@ (8002a70 <update_NAND_addr+0x24>)
 8002a5e:	f00a f99a 	bl	800cd96 <HAL_SRAM_Write_8b>
}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	2000000c 	.word	0x2000000c
 8002a6c:	200004c8 	.word	0x200004c8
 8002a70:	20005bfc 	.word	0x20005bfc

08002a74 <time_setter>:

/*
 * time_setter
 * Sets the time in SRAM using the format "SDD-MM-YYYY HH:MM:SS E".
 */
void time_setter() {
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
	uint8_t day, month, year, hours, minutes, seconds;
	//	0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
	//	S D D - M M - Y Y Y  Y     H  H  :  M  M  :  S  S  E
	// Parse the time string if it follows the expected format
	if (time_str[0] == 'S' && time_str[20] == 'E' &&
 8002a7a:	4b7b      	ldr	r3, [pc, #492]	@ (8002c68 <time_setter+0x1f4>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	2b53      	cmp	r3, #83	@ 0x53
 8002a80:	f040 80ed 	bne.w	8002c5e <time_setter+0x1ea>
 8002a84:	4b78      	ldr	r3, [pc, #480]	@ (8002c68 <time_setter+0x1f4>)
 8002a86:	7d1b      	ldrb	r3, [r3, #20]
 8002a88:	2b45      	cmp	r3, #69	@ 0x45
 8002a8a:	f040 80e8 	bne.w	8002c5e <time_setter+0x1ea>
			time_str[5] == '-' && time_str[8] == '-' &&
 8002a8e:	4b76      	ldr	r3, [pc, #472]	@ (8002c68 <time_setter+0x1f4>)
 8002a90:	795b      	ldrb	r3, [r3, #5]
	if (time_str[0] == 'S' && time_str[20] == 'E' &&
 8002a92:	2b2d      	cmp	r3, #45	@ 0x2d
 8002a94:	f040 80e3 	bne.w	8002c5e <time_setter+0x1ea>
			time_str[5] == '-' && time_str[8] == '-' &&
 8002a98:	4b73      	ldr	r3, [pc, #460]	@ (8002c68 <time_setter+0x1f4>)
 8002a9a:	7a1b      	ldrb	r3, [r3, #8]
 8002a9c:	2b2d      	cmp	r3, #45	@ 0x2d
 8002a9e:	f040 80de 	bne.w	8002c5e <time_setter+0x1ea>
			time_str[11] == ' ' && time_str[14] == ':' && time_str[17] == ':') {
 8002aa2:	4b71      	ldr	r3, [pc, #452]	@ (8002c68 <time_setter+0x1f4>)
 8002aa4:	7adb      	ldrb	r3, [r3, #11]
			time_str[5] == '-' && time_str[8] == '-' &&
 8002aa6:	2b20      	cmp	r3, #32
 8002aa8:	f040 80d9 	bne.w	8002c5e <time_setter+0x1ea>
			time_str[11] == ' ' && time_str[14] == ':' && time_str[17] == ':') {
 8002aac:	4b6e      	ldr	r3, [pc, #440]	@ (8002c68 <time_setter+0x1f4>)
 8002aae:	7b9b      	ldrb	r3, [r3, #14]
 8002ab0:	2b3a      	cmp	r3, #58	@ 0x3a
 8002ab2:	f040 80d4 	bne.w	8002c5e <time_setter+0x1ea>
 8002ab6:	4b6c      	ldr	r3, [pc, #432]	@ (8002c68 <time_setter+0x1f4>)
 8002ab8:	7c5b      	ldrb	r3, [r3, #17]
 8002aba:	2b3a      	cmp	r3, #58	@ 0x3a
 8002abc:	f040 80cf 	bne.w	8002c5e <time_setter+0x1ea>

		// Extract date and time components from time_str
		month = (time_str[6] - '0') * 16 + (time_str[7] - '0');
 8002ac0:	4b69      	ldr	r3, [pc, #420]	@ (8002c68 <time_setter+0x1f4>)
 8002ac2:	799b      	ldrb	r3, [r3, #6]
 8002ac4:	3b30      	subs	r3, #48	@ 0x30
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	4b66      	ldr	r3, [pc, #408]	@ (8002c68 <time_setter+0x1f4>)
 8002ace:	79db      	ldrb	r3, [r3, #7]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	3b30      	subs	r3, #48	@ 0x30
 8002ad6:	71fb      	strb	r3, [r7, #7]
		year = (time_str[3] - '0') * 16 + (time_str[4] - '0');
 8002ad8:	4b63      	ldr	r3, [pc, #396]	@ (8002c68 <time_setter+0x1f4>)
 8002ada:	78db      	ldrb	r3, [r3, #3]
 8002adc:	3b30      	subs	r3, #48	@ 0x30
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	011b      	lsls	r3, r3, #4
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	4b60      	ldr	r3, [pc, #384]	@ (8002c68 <time_setter+0x1f4>)
 8002ae6:	791b      	ldrb	r3, [r3, #4]
 8002ae8:	4413      	add	r3, r2
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	3b30      	subs	r3, #48	@ 0x30
 8002aee:	71bb      	strb	r3, [r7, #6]
		day = (time_str[9] - '0') * 16 + (time_str[10] - '0');
 8002af0:	4b5d      	ldr	r3, [pc, #372]	@ (8002c68 <time_setter+0x1f4>)
 8002af2:	7a5b      	ldrb	r3, [r3, #9]
 8002af4:	3b30      	subs	r3, #48	@ 0x30
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	011b      	lsls	r3, r3, #4
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	4b5a      	ldr	r3, [pc, #360]	@ (8002c68 <time_setter+0x1f4>)
 8002afe:	7a9b      	ldrb	r3, [r3, #10]
 8002b00:	4413      	add	r3, r2
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	3b30      	subs	r3, #48	@ 0x30
 8002b06:	717b      	strb	r3, [r7, #5]
		minutes = (time_str[15] - '0') * 16 + (time_str[16] - '0');
 8002b08:	4b57      	ldr	r3, [pc, #348]	@ (8002c68 <time_setter+0x1f4>)
 8002b0a:	7bdb      	ldrb	r3, [r3, #15]
 8002b0c:	3b30      	subs	r3, #48	@ 0x30
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	b2da      	uxtb	r2, r3
 8002b14:	4b54      	ldr	r3, [pc, #336]	@ (8002c68 <time_setter+0x1f4>)
 8002b16:	7c1b      	ldrb	r3, [r3, #16]
 8002b18:	4413      	add	r3, r2
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	3b30      	subs	r3, #48	@ 0x30
 8002b1e:	713b      	strb	r3, [r7, #4]
		hours = (time_str[12] - '0') * 16 + (time_str[13] - '0');
 8002b20:	4b51      	ldr	r3, [pc, #324]	@ (8002c68 <time_setter+0x1f4>)
 8002b22:	7b1b      	ldrb	r3, [r3, #12]
 8002b24:	3b30      	subs	r3, #48	@ 0x30
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	011b      	lsls	r3, r3, #4
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	4b4e      	ldr	r3, [pc, #312]	@ (8002c68 <time_setter+0x1f4>)
 8002b2e:	7b5b      	ldrb	r3, [r3, #13]
 8002b30:	4413      	add	r3, r2
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	3b30      	subs	r3, #48	@ 0x30
 8002b36:	70fb      	strb	r3, [r7, #3]
		seconds = (time_str[18] - '0') * 16 + (time_str[19] - '0');
 8002b38:	4b4b      	ldr	r3, [pc, #300]	@ (8002c68 <time_setter+0x1f4>)
 8002b3a:	7c9b      	ldrb	r3, [r3, #18]
 8002b3c:	3b30      	subs	r3, #48	@ 0x30
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	011b      	lsls	r3, r3, #4
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	4b48      	ldr	r3, [pc, #288]	@ (8002c68 <time_setter+0x1f4>)
 8002b46:	7cdb      	ldrb	r3, [r3, #19]
 8002b48:	4413      	add	r3, r2
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	3b30      	subs	r3, #48	@ 0x30
 8002b4e:	70bb      	strb	r3, [r7, #2]

		// Write time components to SRAM
		sramAddr = 0x60000000 | 0x7FFF8;
 8002b50:	4b46      	ldr	r3, [pc, #280]	@ (8002c6c <time_setter+0x1f8>)
 8002b52:	4a47      	ldr	r2, [pc, #284]	@ (8002c70 <time_setter+0x1fc>)
 8002b54:	601a      	str	r2, [r3, #0]
		pSrcBuffer = 0x80;
 8002b56:	4b47      	ldr	r3, [pc, #284]	@ (8002c74 <time_setter+0x200>)
 8002b58:	2280      	movs	r2, #128	@ 0x80
 8002b5a:	701a      	strb	r2, [r3, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 8002b5c:	4b43      	ldr	r3, [pc, #268]	@ (8002c6c <time_setter+0x1f8>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4619      	mov	r1, r3
 8002b62:	4b45      	ldr	r3, [pc, #276]	@ (8002c78 <time_setter+0x204>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a43      	ldr	r2, [pc, #268]	@ (8002c74 <time_setter+0x200>)
 8002b68:	4844      	ldr	r0, [pc, #272]	@ (8002c7c <time_setter+0x208>)
 8002b6a:	f00a f914 	bl	800cd96 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFF9;
 8002b6e:	4b3f      	ldr	r3, [pc, #252]	@ (8002c6c <time_setter+0x1f8>)
 8002b70:	4a43      	ldr	r2, [pc, #268]	@ (8002c80 <time_setter+0x20c>)
 8002b72:	601a      	str	r2, [r3, #0]
		pSrcBuffer = seconds;
 8002b74:	4a3f      	ldr	r2, [pc, #252]	@ (8002c74 <time_setter+0x200>)
 8002b76:	78bb      	ldrb	r3, [r7, #2]
 8002b78:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 8002b7a:	4b3c      	ldr	r3, [pc, #240]	@ (8002c6c <time_setter+0x1f8>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4b3d      	ldr	r3, [pc, #244]	@ (8002c78 <time_setter+0x204>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a3b      	ldr	r2, [pc, #236]	@ (8002c74 <time_setter+0x200>)
 8002b86:	483d      	ldr	r0, [pc, #244]	@ (8002c7c <time_setter+0x208>)
 8002b88:	f00a f905 	bl	800cd96 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFa;
 8002b8c:	4b37      	ldr	r3, [pc, #220]	@ (8002c6c <time_setter+0x1f8>)
 8002b8e:	4a3d      	ldr	r2, [pc, #244]	@ (8002c84 <time_setter+0x210>)
 8002b90:	601a      	str	r2, [r3, #0]
		pSrcBuffer = minutes;
 8002b92:	4a38      	ldr	r2, [pc, #224]	@ (8002c74 <time_setter+0x200>)
 8002b94:	793b      	ldrb	r3, [r7, #4]
 8002b96:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 8002b98:	4b34      	ldr	r3, [pc, #208]	@ (8002c6c <time_setter+0x1f8>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4b36      	ldr	r3, [pc, #216]	@ (8002c78 <time_setter+0x204>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a34      	ldr	r2, [pc, #208]	@ (8002c74 <time_setter+0x200>)
 8002ba4:	4835      	ldr	r0, [pc, #212]	@ (8002c7c <time_setter+0x208>)
 8002ba6:	f00a f8f6 	bl	800cd96 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFb;
 8002baa:	4b30      	ldr	r3, [pc, #192]	@ (8002c6c <time_setter+0x1f8>)
 8002bac:	4a36      	ldr	r2, [pc, #216]	@ (8002c88 <time_setter+0x214>)
 8002bae:	601a      	str	r2, [r3, #0]
		pSrcBuffer = hours;
 8002bb0:	4a30      	ldr	r2, [pc, #192]	@ (8002c74 <time_setter+0x200>)
 8002bb2:	78fb      	ldrb	r3, [r7, #3]
 8002bb4:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 8002bb6:	4b2d      	ldr	r3, [pc, #180]	@ (8002c6c <time_setter+0x1f8>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4b2e      	ldr	r3, [pc, #184]	@ (8002c78 <time_setter+0x204>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a2c      	ldr	r2, [pc, #176]	@ (8002c74 <time_setter+0x200>)
 8002bc2:	482e      	ldr	r0, [pc, #184]	@ (8002c7c <time_setter+0x208>)
 8002bc4:	f00a f8e7 	bl	800cd96 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFc;
 8002bc8:	4b28      	ldr	r3, [pc, #160]	@ (8002c6c <time_setter+0x1f8>)
 8002bca:	4a30      	ldr	r2, [pc, #192]	@ (8002c8c <time_setter+0x218>)
 8002bcc:	601a      	str	r2, [r3, #0]
		pSrcBuffer = 0x02;
 8002bce:	4b29      	ldr	r3, [pc, #164]	@ (8002c74 <time_setter+0x200>)
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	701a      	strb	r2, [r3, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 8002bd4:	4b25      	ldr	r3, [pc, #148]	@ (8002c6c <time_setter+0x1f8>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4b27      	ldr	r3, [pc, #156]	@ (8002c78 <time_setter+0x204>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a25      	ldr	r2, [pc, #148]	@ (8002c74 <time_setter+0x200>)
 8002be0:	4826      	ldr	r0, [pc, #152]	@ (8002c7c <time_setter+0x208>)
 8002be2:	f00a f8d8 	bl	800cd96 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFd;
 8002be6:	4b21      	ldr	r3, [pc, #132]	@ (8002c6c <time_setter+0x1f8>)
 8002be8:	4a29      	ldr	r2, [pc, #164]	@ (8002c90 <time_setter+0x21c>)
 8002bea:	601a      	str	r2, [r3, #0]
		pSrcBuffer = day;
 8002bec:	4a21      	ldr	r2, [pc, #132]	@ (8002c74 <time_setter+0x200>)
 8002bee:	797b      	ldrb	r3, [r7, #5]
 8002bf0:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 8002bf2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c6c <time_setter+0x1f8>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4b1f      	ldr	r3, [pc, #124]	@ (8002c78 <time_setter+0x204>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a1d      	ldr	r2, [pc, #116]	@ (8002c74 <time_setter+0x200>)
 8002bfe:	481f      	ldr	r0, [pc, #124]	@ (8002c7c <time_setter+0x208>)
 8002c00:	f00a f8c9 	bl	800cd96 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFe;
 8002c04:	4b19      	ldr	r3, [pc, #100]	@ (8002c6c <time_setter+0x1f8>)
 8002c06:	4a23      	ldr	r2, [pc, #140]	@ (8002c94 <time_setter+0x220>)
 8002c08:	601a      	str	r2, [r3, #0]
		pSrcBuffer = month;
 8002c0a:	4a1a      	ldr	r2, [pc, #104]	@ (8002c74 <time_setter+0x200>)
 8002c0c:	79fb      	ldrb	r3, [r7, #7]
 8002c0e:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 8002c10:	4b16      	ldr	r3, [pc, #88]	@ (8002c6c <time_setter+0x1f8>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4619      	mov	r1, r3
 8002c16:	4b18      	ldr	r3, [pc, #96]	@ (8002c78 <time_setter+0x204>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a16      	ldr	r2, [pc, #88]	@ (8002c74 <time_setter+0x200>)
 8002c1c:	4817      	ldr	r0, [pc, #92]	@ (8002c7c <time_setter+0x208>)
 8002c1e:	f00a f8ba 	bl	800cd96 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFf;
 8002c22:	4b12      	ldr	r3, [pc, #72]	@ (8002c6c <time_setter+0x1f8>)
 8002c24:	4a1c      	ldr	r2, [pc, #112]	@ (8002c98 <time_setter+0x224>)
 8002c26:	601a      	str	r2, [r3, #0]
		pSrcBuffer = year;
 8002c28:	4a12      	ldr	r2, [pc, #72]	@ (8002c74 <time_setter+0x200>)
 8002c2a:	79bb      	ldrb	r3, [r7, #6]
 8002c2c:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 8002c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8002c6c <time_setter+0x1f8>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4619      	mov	r1, r3
 8002c34:	4b10      	ldr	r3, [pc, #64]	@ (8002c78 <time_setter+0x204>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a0e      	ldr	r2, [pc, #56]	@ (8002c74 <time_setter+0x200>)
 8002c3a:	4810      	ldr	r0, [pc, #64]	@ (8002c7c <time_setter+0x208>)
 8002c3c:	f00a f8ab 	bl	800cd96 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFF8;
 8002c40:	4b0a      	ldr	r3, [pc, #40]	@ (8002c6c <time_setter+0x1f8>)
 8002c42:	4a0b      	ldr	r2, [pc, #44]	@ (8002c70 <time_setter+0x1fc>)
 8002c44:	601a      	str	r2, [r3, #0]
		pSrcBuffer = 0x00;
 8002c46:	4b0b      	ldr	r3, [pc, #44]	@ (8002c74 <time_setter+0x200>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	701a      	strb	r2, [r3, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 8002c4c:	4b07      	ldr	r3, [pc, #28]	@ (8002c6c <time_setter+0x1f8>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4619      	mov	r1, r3
 8002c52:	4b09      	ldr	r3, [pc, #36]	@ (8002c78 <time_setter+0x204>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a07      	ldr	r2, [pc, #28]	@ (8002c74 <time_setter+0x200>)
 8002c58:	4808      	ldr	r0, [pc, #32]	@ (8002c7c <time_setter+0x208>)
 8002c5a:	f00a f89c 	bl	800cd96 <HAL_SRAM_Write_8b>
	}
}
 8002c5e:	bf00      	nop
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	20005c98 	.word	0x20005c98
 8002c6c:	20005c94 	.word	0x20005c94
 8002c70:	6007fff8 	.word	0x6007fff8
 8002c74:	20000014 	.word	0x20000014
 8002c78:	20000018 	.word	0x20000018
 8002c7c:	20005bfc 	.word	0x20005bfc
 8002c80:	6007fff9 	.word	0x6007fff9
 8002c84:	6007fffa 	.word	0x6007fffa
 8002c88:	6007fffb 	.word	0x6007fffb
 8002c8c:	6007fffc 	.word	0x6007fffc
 8002c90:	6007fffd 	.word	0x6007fffd
 8002c94:	6007fffe 	.word	0x6007fffe
 8002c98:	6007ffff 	.word	0x6007ffff

08002c9c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002ca2:	f001 fe27 	bl	80048f4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002ca6:	f000 f893 	bl	8002dd0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002caa:	f000 fc15 	bl	80034d8 <MX_GPIO_Init>
	MX_FMC_Init();
 8002cae:	f000 fb47 	bl	8003340 <MX_FMC_Init>
	MX_SPI2_Init();
 8002cb2:	f000 f911 	bl	8002ed8 <MX_SPI2_Init>
	MX_SPI3_Init();
 8002cb6:	f000 f965 	bl	8002f84 <MX_SPI3_Init>
	MX_SPI5_Init();
 8002cba:	f000 f9b9 	bl	8003030 <MX_SPI5_Init>
	MX_UART4_Init();
 8002cbe:	f000 fa0d 	bl	80030dc <MX_UART4_Init>
	MX_UART5_Init();
 8002cc2:	f000 fa57 	bl	8003174 <MX_UART5_Init>
	MX_UART8_Init();
 8002cc6:	f000 faa1 	bl	800320c <MX_UART8_Init>
	MX_USART10_UART_Init();
 8002cca:	f000 faed 	bl	80032a8 <MX_USART10_UART_Init>
	MX_ICACHE_Init();
 8002cce:	f000 f8ef 	bl	8002eb0 <MX_ICACHE_Init>
	/* USER CODE BEGIN 2 */

	UART_InitAllHandlers();
 8002cd2:	f000 fdb1 	bl	8003838 <UART_InitAllHandlers>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	sramAddr = 0x60000000 | 0x7FFF8;
 8002cd6:	4b34      	ldr	r3, [pc, #208]	@ (8002da8 <main+0x10c>)
 8002cd8:	4a34      	ldr	r2, [pc, #208]	@ (8002dac <main+0x110>)
 8002cda:	601a      	str	r2, [r3, #0]
	pSrcBuffer = 0x00;
 8002cdc:	4b34      	ldr	r3, [pc, #208]	@ (8002db0 <main+0x114>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	701a      	strb	r2, [r3, #0]
	HAL_SRAM_Write_8b(&hsram1,(uint32_t *)sramAddr,&pSrcBuffer,BufferSize);
 8002ce2:	4b31      	ldr	r3, [pc, #196]	@ (8002da8 <main+0x10c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	2301      	movs	r3, #1
 8002cea:	4a31      	ldr	r2, [pc, #196]	@ (8002db0 <main+0x114>)
 8002cec:	4831      	ldr	r0, [pc, #196]	@ (8002db4 <main+0x118>)
 8002cee:	f00a f852 	bl	800cd96 <HAL_SRAM_Write_8b>
	HAL_NAND_Reset(&hnand1);
 8002cf2:	4831      	ldr	r0, [pc, #196]	@ (8002db8 <main+0x11c>)
 8002cf4:	f002 fb46 	bl	8005384 <HAL_NAND_Reset>
	while(!ADC_config(1) && ADC_config_try++ < 100);
 8002cf8:	bf00      	nop
 8002cfa:	2001      	movs	r0, #1
 8002cfc:	f7fe f98a 	bl	8001014 <ADC_config>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d107      	bne.n	8002d16 <main+0x7a>
 8002d06:	4b2d      	ldr	r3, [pc, #180]	@ (8002dbc <main+0x120>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	1c5a      	adds	r2, r3, #1
 8002d0c:	b2d1      	uxtb	r1, r2
 8002d0e:	4a2b      	ldr	r2, [pc, #172]	@ (8002dbc <main+0x120>)
 8002d10:	7011      	strb	r1, [r2, #0]
 8002d12:	2b63      	cmp	r3, #99	@ 0x63
 8002d14:	d9f1      	bls.n	8002cfa <main+0x5e>
	ADC_config_try=0;
 8002d16:	4b29      	ldr	r3, [pc, #164]	@ (8002dbc <main+0x120>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	701a      	strb	r2, [r3, #0]
	while(!ADC_config(2) && ADC_config_try++ < 100);
 8002d1c:	bf00      	nop
 8002d1e:	2002      	movs	r0, #2
 8002d20:	f7fe f978 	bl	8001014 <ADC_config>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d107      	bne.n	8002d3a <main+0x9e>
 8002d2a:	4b24      	ldr	r3, [pc, #144]	@ (8002dbc <main+0x120>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	1c5a      	adds	r2, r3, #1
 8002d30:	b2d1      	uxtb	r1, r2
 8002d32:	4a22      	ldr	r2, [pc, #136]	@ (8002dbc <main+0x120>)
 8002d34:	7011      	strb	r1, [r2, #0]
 8002d36:	2b63      	cmp	r3, #99	@ 0x63
 8002d38:	d9f1      	bls.n	8002d1e <main+0x82>
	ADC_config_try=0;
 8002d3a:	4b20      	ldr	r3, [pc, #128]	@ (8002dbc <main+0x120>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	701a      	strb	r2, [r3, #0]
	while(!ADC_config(3) && ADC_config_try++ < 100);
 8002d40:	bf00      	nop
 8002d42:	2003      	movs	r0, #3
 8002d44:	f7fe f966 	bl	8001014 <ADC_config>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d107      	bne.n	8002d5e <main+0xc2>
 8002d4e:	4b1b      	ldr	r3, [pc, #108]	@ (8002dbc <main+0x120>)
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	1c5a      	adds	r2, r3, #1
 8002d54:	b2d1      	uxtb	r1, r2
 8002d56:	4a19      	ldr	r2, [pc, #100]	@ (8002dbc <main+0x120>)
 8002d58:	7011      	strb	r1, [r2, #0]
 8002d5a:	2b63      	cmp	r3, #99	@ 0x63
 8002d5c:	d9f1      	bls.n	8002d42 <main+0xa6>
	//set_NAND_block_status();
	get_NAND_block_status();
 8002d5e:	f7ff faf5 	bl	800234c <get_NAND_block_status>
	get_NAND_address();
 8002d62:	f7ff fe49 	bl	80029f8 <get_NAND_address>
	HAL_GPIO_WritePin(GPIOA, RS485_CTRL2_Pin, GPIO_PIN_RESET);
 8002d66:	2200      	movs	r2, #0
 8002d68:	2104      	movs	r1, #4
 8002d6a:	4815      	ldr	r0, [pc, #84]	@ (8002dc0 <main+0x124>)
 8002d6c:	f002 fa2c 	bl	80051c8 <HAL_GPIO_WritePin>
	char buffe33r[] = "HELLO";
 8002d70:	4a14      	ldr	r2, [pc, #80]	@ (8002dc4 <main+0x128>)
 8002d72:	463b      	mov	r3, r7
 8002d74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d78:	6018      	str	r0, [r3, #0]
 8002d7a:	3304      	adds	r3, #4
 8002d7c:	8019      	strh	r1, [r3, #0]
	//	nand_address.Block=0;
	nand_address.Page=0;
 8002d7e:	4b12      	ldr	r3, [pc, #72]	@ (8002dc8 <main+0x12c>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	801a      	strh	r2, [r3, #0]
	nand_address.Block=0;
 8002d84:	4b10      	ldr	r3, [pc, #64]	@ (8002dc8 <main+0x12c>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	809a      	strh	r2, [r3, #4]
	nand_address.Plane=0;
 8002d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8002dc8 <main+0x12c>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	805a      	strh	r2, [r3, #2]
		}

#endif

#if 1
		ATP_UART=LOW;
 8002d90:	4b0e      	ldr	r3, [pc, #56]	@ (8002dcc <main+0x130>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	701a      	strb	r2, [r3, #0]
		ADC_operation();
 8002d96:	f7fe f8f3 	bl	8000f80 <ADC_operation>
		SRAM_operation();
 8002d9a:	f7ff fc03 	bl	80025a4 <SRAM_operation>
		NAND_operation();
 8002d9e:	f7ff fa57 	bl	8002250 <NAND_operation>
	{
 8002da2:	bf00      	nop
 8002da4:	e7f4      	b.n	8002d90 <main+0xf4>
 8002da6:	bf00      	nop
 8002da8:	20005c94 	.word	0x20005c94
 8002dac:	6007fff8 	.word	0x6007fff8
 8002db0:	20000014 	.word	0x20000014
 8002db4:	20005bfc 	.word	0x20005bfc
 8002db8:	20005c54 	.word	0x20005c54
 8002dbc:	20005cb3 	.word	0x20005cb3
 8002dc0:	42020000 	.word	0x42020000
 8002dc4:	0801253c 	.word	0x0801253c
 8002dc8:	200004c8 	.word	0x200004c8
 8002dcc:	20005cc1 	.word	0x20005cc1

08002dd0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b09c      	sub	sp, #112	@ 0x70
 8002dd4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002dd6:	f107 0320 	add.w	r3, r7, #32
 8002dda:	2250      	movs	r2, #80	@ 0x50
 8002ddc:	2100      	movs	r1, #0
 8002dde:	4618      	mov	r0, r3
 8002de0:	f00d f929 	bl	8010036 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002de4:	f107 0308 	add.w	r3, r7, #8
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	605a      	str	r2, [r3, #4]
 8002dee:	609a      	str	r2, [r3, #8]
 8002df0:	60da      	str	r2, [r3, #12]
 8002df2:	611a      	str	r2, [r3, #16]
 8002df4:	615a      	str	r2, [r3, #20]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002df6:	4b2c      	ldr	r3, [pc, #176]	@ (8002ea8 <SystemClock_Config+0xd8>)
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	4a2b      	ldr	r2, [pc, #172]	@ (8002ea8 <SystemClock_Config+0xd8>)
 8002dfc:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8002e00:	6113      	str	r3, [r2, #16]
 8002e02:	4b29      	ldr	r3, [pc, #164]	@ (8002ea8 <SystemClock_Config+0xd8>)
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002e0a:	607b      	str	r3, [r7, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002e0e:	bf00      	nop
 8002e10:	4b25      	ldr	r3, [pc, #148]	@ (8002ea8 <SystemClock_Config+0xd8>)
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	f003 0308 	and.w	r3, r3, #8
 8002e18:	2b08      	cmp	r3, #8
 8002e1a:	d1f9      	bne.n	8002e10 <SystemClock_Config+0x40>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e20:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e24:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e26:	2302      	movs	r3, #2
 8002e28:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8002e2e:	2304      	movs	r3, #4
 8002e30:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 80;
 8002e32:	2350      	movs	r3, #80	@ 0x50
 8002e34:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8002e36:	2302      	movs	r3, #2
 8002e38:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8002e3e:	2302      	movs	r3, #2
 8002e40:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 8002e42:	2308      	movs	r3, #8
 8002e44:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8002e46:	2300      	movs	r3, #0
 8002e48:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e4e:	f107 0320 	add.w	r3, r7, #32
 8002e52:	4618      	mov	r0, r3
 8002e54:	f003 f920 	bl	8006098 <HAL_RCC_OscConfig>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <SystemClock_Config+0x92>
	{
		Error_Handler();
 8002e5e:	f000 ff54 	bl	8003d0a <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e62:	231f      	movs	r3, #31
 8002e64:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_PCLK3;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e66:	2303      	movs	r3, #3
 8002e68:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e72:	2300      	movs	r3, #0
 8002e74:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8002e76:	2300      	movs	r3, #0
 8002e78:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002e7a:	f107 0308 	add.w	r3, r7, #8
 8002e7e:	2105      	movs	r1, #5
 8002e80:	4618      	mov	r0, r3
 8002e82:	f003 fd41 	bl	8006908 <HAL_RCC_ClockConfig>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <SystemClock_Config+0xc0>
	{
		Error_Handler();
 8002e8c:	f000 ff3d 	bl	8003d0a <Error_Handler>
	}

	/** Configure the programming delay
	 */
	__HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8002e90:	4b06      	ldr	r3, [pc, #24]	@ (8002eac <SystemClock_Config+0xdc>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002e98:	4a04      	ldr	r2, [pc, #16]	@ (8002eac <SystemClock_Config+0xdc>)
 8002e9a:	f043 0320 	orr.w	r3, r3, #32
 8002e9e:	6013      	str	r3, [r2, #0]
}
 8002ea0:	bf00      	nop
 8002ea2:	3770      	adds	r7, #112	@ 0x70
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	44020800 	.word	0x44020800
 8002eac:	40022000 	.word	0x40022000

08002eb0 <MX_ICACHE_Init>:
 * @brief ICACHE Initialization Function
 * @param None
 * @retval None
 */
static void MX_ICACHE_Init(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0

	/* USER CODE END ICACHE_Init 1 */

	/** Enable instruction cache in 1-way (direct mapped cache)
	 */
	if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8002eb4:	2000      	movs	r0, #0
 8002eb6:	f002 f9eb 	bl	8005290 <HAL_ICACHE_ConfigAssociativityMode>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <MX_ICACHE_Init+0x14>
	{
		Error_Handler();
 8002ec0:	f000 ff23 	bl	8003d0a <Error_Handler>
	}
	if (HAL_ICACHE_Enable() != HAL_OK)
 8002ec4:	f002 fa04 	bl	80052d0 <HAL_ICACHE_Enable>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <MX_ICACHE_Init+0x22>
	{
		Error_Handler();
 8002ece:	f000 ff1c 	bl	8003d0a <Error_Handler>
	}
	/* USER CODE BEGIN ICACHE_Init 2 */

	/* USER CODE END ICACHE_Init 2 */

}
 8002ed2:	bf00      	nop
 8002ed4:	bd80      	pop	{r7, pc}
	...

08002ed8 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8002edc:	4b27      	ldr	r3, [pc, #156]	@ (8002f7c <MX_SPI2_Init+0xa4>)
 8002ede:	4a28      	ldr	r2, [pc, #160]	@ (8002f80 <MX_SPI2_Init+0xa8>)
 8002ee0:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8002ee2:	4b26      	ldr	r3, [pc, #152]	@ (8002f7c <MX_SPI2_Init+0xa4>)
 8002ee4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002ee8:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002eea:	4b24      	ldr	r3, [pc, #144]	@ (8002f7c <MX_SPI2_Init+0xa4>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ef0:	4b22      	ldr	r3, [pc, #136]	@ (8002f7c <MX_SPI2_Init+0xa4>)
 8002ef2:	2207      	movs	r2, #7
 8002ef4:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ef6:	4b21      	ldr	r3, [pc, #132]	@ (8002f7c <MX_SPI2_Init+0xa4>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002efc:	4b1f      	ldr	r3, [pc, #124]	@ (8002f7c <MX_SPI2_Init+0xa4>)
 8002efe:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f02:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8002f04:	4b1d      	ldr	r3, [pc, #116]	@ (8002f7c <MX_SPI2_Init+0xa4>)
 8002f06:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002f0a:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8002f7c <MX_SPI2_Init+0xa4>)
 8002f0e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002f12:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f14:	4b19      	ldr	r3, [pc, #100]	@ (8002f7c <MX_SPI2_Init+0xa4>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f1a:	4b18      	ldr	r3, [pc, #96]	@ (8002f7c <MX_SPI2_Init+0xa4>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f20:	4b16      	ldr	r3, [pc, #88]	@ (8002f7c <MX_SPI2_Init+0xa4>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi2.Init.CRCPolynomial = 0x7;
 8002f26:	4b15      	ldr	r3, [pc, #84]	@ (8002f7c <MX_SPI2_Init+0xa4>)
 8002f28:	2207      	movs	r2, #7
 8002f2a:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002f2c:	4b13      	ldr	r3, [pc, #76]	@ (8002f7c <MX_SPI2_Init+0xa4>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002f32:	4b12      	ldr	r3, [pc, #72]	@ (8002f7c <MX_SPI2_Init+0xa4>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	639a      	str	r2, [r3, #56]	@ 0x38
	hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002f38:	4b10      	ldr	r3, [pc, #64]	@ (8002f7c <MX_SPI2_Init+0xa4>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	63da      	str	r2, [r3, #60]	@ 0x3c
	hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002f3e:	4b0f      	ldr	r3, [pc, #60]	@ (8002f7c <MX_SPI2_Init+0xa4>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	649a      	str	r2, [r3, #72]	@ 0x48
	hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002f44:	4b0d      	ldr	r3, [pc, #52]	@ (8002f7c <MX_SPI2_Init+0xa4>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	64da      	str	r2, [r3, #76]	@ 0x4c
	hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8002f7c <MX_SPI2_Init+0xa4>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	651a      	str	r2, [r3, #80]	@ 0x50
	hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002f50:	4b0a      	ldr	r3, [pc, #40]	@ (8002f7c <MX_SPI2_Init+0xa4>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002f56:	4b09      	ldr	r3, [pc, #36]	@ (8002f7c <MX_SPI2_Init+0xa4>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	659a      	str	r2, [r3, #88]	@ 0x58
	hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8002f5c:	4b07      	ldr	r3, [pc, #28]	@ (8002f7c <MX_SPI2_Init+0xa4>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	65da      	str	r2, [r3, #92]	@ 0x5c
	hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8002f62:	4b06      	ldr	r3, [pc, #24]	@ (8002f7c <MX_SPI2_Init+0xa4>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	661a      	str	r2, [r3, #96]	@ 0x60
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002f68:	4804      	ldr	r0, [pc, #16]	@ (8002f7c <MX_SPI2_Init+0xa4>)
 8002f6a:	f009 f861 	bl	800c030 <HAL_SPI_Init>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <MX_SPI2_Init+0xa0>
	{
		Error_Handler();
 8002f74:	f000 fec9 	bl	8003d0a <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8002f78:	bf00      	nop
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	200057fc 	.word	0x200057fc
 8002f80:	40003800 	.word	0x40003800

08002f84 <MX_SPI3_Init>:
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 8002f88:	4b27      	ldr	r3, [pc, #156]	@ (8003028 <MX_SPI3_Init+0xa4>)
 8002f8a:	4a28      	ldr	r2, [pc, #160]	@ (800302c <MX_SPI3_Init+0xa8>)
 8002f8c:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 8002f8e:	4b26      	ldr	r3, [pc, #152]	@ (8003028 <MX_SPI3_Init+0xa4>)
 8002f90:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002f94:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002f96:	4b24      	ldr	r3, [pc, #144]	@ (8003028 <MX_SPI3_Init+0xa4>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f9c:	4b22      	ldr	r3, [pc, #136]	@ (8003028 <MX_SPI3_Init+0xa4>)
 8002f9e:	2207      	movs	r2, #7
 8002fa0:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fa2:	4b21      	ldr	r3, [pc, #132]	@ (8003028 <MX_SPI3_Init+0xa4>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002fa8:	4b1f      	ldr	r3, [pc, #124]	@ (8003028 <MX_SPI3_Init+0xa4>)
 8002faa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002fae:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8002fb0:	4b1d      	ldr	r3, [pc, #116]	@ (8003028 <MX_SPI3_Init+0xa4>)
 8002fb2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002fb6:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8003028 <MX_SPI3_Init+0xa4>)
 8002fba:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002fbe:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002fc0:	4b19      	ldr	r3, [pc, #100]	@ (8003028 <MX_SPI3_Init+0xa4>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002fc6:	4b18      	ldr	r3, [pc, #96]	@ (8003028 <MX_SPI3_Init+0xa4>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fcc:	4b16      	ldr	r3, [pc, #88]	@ (8003028 <MX_SPI3_Init+0xa4>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi3.Init.CRCPolynomial = 0x7;
 8002fd2:	4b15      	ldr	r3, [pc, #84]	@ (8003028 <MX_SPI3_Init+0xa4>)
 8002fd4:	2207      	movs	r2, #7
 8002fd6:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002fd8:	4b13      	ldr	r3, [pc, #76]	@ (8003028 <MX_SPI3_Init+0xa4>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002fde:	4b12      	ldr	r3, [pc, #72]	@ (8003028 <MX_SPI3_Init+0xa4>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	639a      	str	r2, [r3, #56]	@ 0x38
	hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002fe4:	4b10      	ldr	r3, [pc, #64]	@ (8003028 <MX_SPI3_Init+0xa4>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	63da      	str	r2, [r3, #60]	@ 0x3c
	hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002fea:	4b0f      	ldr	r3, [pc, #60]	@ (8003028 <MX_SPI3_Init+0xa4>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	649a      	str	r2, [r3, #72]	@ 0x48
	hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002ff0:	4b0d      	ldr	r3, [pc, #52]	@ (8003028 <MX_SPI3_Init+0xa4>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	64da      	str	r2, [r3, #76]	@ 0x4c
	hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002ff6:	4b0c      	ldr	r3, [pc, #48]	@ (8003028 <MX_SPI3_Init+0xa4>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	651a      	str	r2, [r3, #80]	@ 0x50
	hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8003028 <MX_SPI3_Init+0xa4>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003002:	4b09      	ldr	r3, [pc, #36]	@ (8003028 <MX_SPI3_Init+0xa4>)
 8003004:	2200      	movs	r2, #0
 8003006:	659a      	str	r2, [r3, #88]	@ 0x58
	hspi3.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8003008:	4b07      	ldr	r3, [pc, #28]	@ (8003028 <MX_SPI3_Init+0xa4>)
 800300a:	2200      	movs	r2, #0
 800300c:	65da      	str	r2, [r3, #92]	@ 0x5c
	hspi3.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800300e:	4b06      	ldr	r3, [pc, #24]	@ (8003028 <MX_SPI3_Init+0xa4>)
 8003010:	2200      	movs	r2, #0
 8003012:	661a      	str	r2, [r3, #96]	@ 0x60
	if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003014:	4804      	ldr	r0, [pc, #16]	@ (8003028 <MX_SPI3_Init+0xa4>)
 8003016:	f009 f80b 	bl	800c030 <HAL_SPI_Init>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <MX_SPI3_Init+0xa0>
	{
		Error_Handler();
 8003020:	f000 fe73 	bl	8003d0a <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 8003024:	bf00      	nop
 8003026:	bd80      	pop	{r7, pc}
 8003028:	2000588c 	.word	0x2000588c
 800302c:	40003c00 	.word	0x40003c00

08003030 <MX_SPI5_Init>:
 * @brief SPI5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI5_Init(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI5_Init 1 */

	/* USER CODE END SPI5_Init 1 */
	/* SPI5 parameter configuration*/
	hspi5.Instance = SPI5;
 8003034:	4b27      	ldr	r3, [pc, #156]	@ (80030d4 <MX_SPI5_Init+0xa4>)
 8003036:	4a28      	ldr	r2, [pc, #160]	@ (80030d8 <MX_SPI5_Init+0xa8>)
 8003038:	601a      	str	r2, [r3, #0]
	hspi5.Init.Mode = SPI_MODE_MASTER;
 800303a:	4b26      	ldr	r3, [pc, #152]	@ (80030d4 <MX_SPI5_Init+0xa4>)
 800303c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003040:	605a      	str	r2, [r3, #4]
	hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8003042:	4b24      	ldr	r3, [pc, #144]	@ (80030d4 <MX_SPI5_Init+0xa4>)
 8003044:	2200      	movs	r2, #0
 8003046:	609a      	str	r2, [r3, #8]
	hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8003048:	4b22      	ldr	r3, [pc, #136]	@ (80030d4 <MX_SPI5_Init+0xa4>)
 800304a:	2207      	movs	r2, #7
 800304c:	60da      	str	r2, [r3, #12]
	hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800304e:	4b21      	ldr	r3, [pc, #132]	@ (80030d4 <MX_SPI5_Init+0xa4>)
 8003050:	2200      	movs	r2, #0
 8003052:	611a      	str	r2, [r3, #16]
	hspi5.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003054:	4b1f      	ldr	r3, [pc, #124]	@ (80030d4 <MX_SPI5_Init+0xa4>)
 8003056:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800305a:	615a      	str	r2, [r3, #20]
	hspi5.Init.NSS = SPI_NSS_SOFT;
 800305c:	4b1d      	ldr	r3, [pc, #116]	@ (80030d4 <MX_SPI5_Init+0xa4>)
 800305e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003062:	619a      	str	r2, [r3, #24]
	hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003064:	4b1b      	ldr	r3, [pc, #108]	@ (80030d4 <MX_SPI5_Init+0xa4>)
 8003066:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800306a:	61da      	str	r2, [r3, #28]
	hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800306c:	4b19      	ldr	r3, [pc, #100]	@ (80030d4 <MX_SPI5_Init+0xa4>)
 800306e:	2200      	movs	r2, #0
 8003070:	621a      	str	r2, [r3, #32]
	hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8003072:	4b18      	ldr	r3, [pc, #96]	@ (80030d4 <MX_SPI5_Init+0xa4>)
 8003074:	2200      	movs	r2, #0
 8003076:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003078:	4b16      	ldr	r3, [pc, #88]	@ (80030d4 <MX_SPI5_Init+0xa4>)
 800307a:	2200      	movs	r2, #0
 800307c:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi5.Init.CRCPolynomial = 0x7;
 800307e:	4b15      	ldr	r3, [pc, #84]	@ (80030d4 <MX_SPI5_Init+0xa4>)
 8003080:	2207      	movs	r2, #7
 8003082:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003084:	4b13      	ldr	r3, [pc, #76]	@ (80030d4 <MX_SPI5_Init+0xa4>)
 8003086:	2200      	movs	r2, #0
 8003088:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800308a:	4b12      	ldr	r3, [pc, #72]	@ (80030d4 <MX_SPI5_Init+0xa4>)
 800308c:	2200      	movs	r2, #0
 800308e:	639a      	str	r2, [r3, #56]	@ 0x38
	hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003090:	4b10      	ldr	r3, [pc, #64]	@ (80030d4 <MX_SPI5_Init+0xa4>)
 8003092:	2200      	movs	r2, #0
 8003094:	63da      	str	r2, [r3, #60]	@ 0x3c
	hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003096:	4b0f      	ldr	r3, [pc, #60]	@ (80030d4 <MX_SPI5_Init+0xa4>)
 8003098:	2200      	movs	r2, #0
 800309a:	649a      	str	r2, [r3, #72]	@ 0x48
	hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800309c:	4b0d      	ldr	r3, [pc, #52]	@ (80030d4 <MX_SPI5_Init+0xa4>)
 800309e:	2200      	movs	r2, #0
 80030a0:	64da      	str	r2, [r3, #76]	@ 0x4c
	hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80030a2:	4b0c      	ldr	r3, [pc, #48]	@ (80030d4 <MX_SPI5_Init+0xa4>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	651a      	str	r2, [r3, #80]	@ 0x50
	hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80030a8:	4b0a      	ldr	r3, [pc, #40]	@ (80030d4 <MX_SPI5_Init+0xa4>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80030ae:	4b09      	ldr	r3, [pc, #36]	@ (80030d4 <MX_SPI5_Init+0xa4>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	659a      	str	r2, [r3, #88]	@ 0x58
	hspi5.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80030b4:	4b07      	ldr	r3, [pc, #28]	@ (80030d4 <MX_SPI5_Init+0xa4>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	65da      	str	r2, [r3, #92]	@ 0x5c
	hspi5.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80030ba:	4b06      	ldr	r3, [pc, #24]	@ (80030d4 <MX_SPI5_Init+0xa4>)
 80030bc:	2200      	movs	r2, #0
 80030be:	661a      	str	r2, [r3, #96]	@ 0x60
	if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80030c0:	4804      	ldr	r0, [pc, #16]	@ (80030d4 <MX_SPI5_Init+0xa4>)
 80030c2:	f008 ffb5 	bl	800c030 <HAL_SPI_Init>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <MX_SPI5_Init+0xa0>
	{
		Error_Handler();
 80030cc:	f000 fe1d 	bl	8003d0a <Error_Handler>
	}
	/* USER CODE BEGIN SPI5_Init 2 */

	/* USER CODE END SPI5_Init 2 */

}
 80030d0:	bf00      	nop
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	2000591c 	.word	0x2000591c
 80030d8:	44002000 	.word	0x44002000

080030dc <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 80030e0:	4b22      	ldr	r3, [pc, #136]	@ (800316c <MX_UART4_Init+0x90>)
 80030e2:	4a23      	ldr	r2, [pc, #140]	@ (8003170 <MX_UART4_Init+0x94>)
 80030e4:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 80030e6:	4b21      	ldr	r3, [pc, #132]	@ (800316c <MX_UART4_Init+0x90>)
 80030e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80030ec:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80030ee:	4b1f      	ldr	r3, [pc, #124]	@ (800316c <MX_UART4_Init+0x90>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 80030f4:	4b1d      	ldr	r3, [pc, #116]	@ (800316c <MX_UART4_Init+0x90>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 80030fa:	4b1c      	ldr	r3, [pc, #112]	@ (800316c <MX_UART4_Init+0x90>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8003100:	4b1a      	ldr	r3, [pc, #104]	@ (800316c <MX_UART4_Init+0x90>)
 8003102:	220c      	movs	r2, #12
 8003104:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003106:	4b19      	ldr	r3, [pc, #100]	@ (800316c <MX_UART4_Init+0x90>)
 8003108:	2200      	movs	r2, #0
 800310a:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800310c:	4b17      	ldr	r3, [pc, #92]	@ (800316c <MX_UART4_Init+0x90>)
 800310e:	2200      	movs	r2, #0
 8003110:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003112:	4b16      	ldr	r3, [pc, #88]	@ (800316c <MX_UART4_Init+0x90>)
 8003114:	2200      	movs	r2, #0
 8003116:	621a      	str	r2, [r3, #32]
	huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003118:	4b14      	ldr	r3, [pc, #80]	@ (800316c <MX_UART4_Init+0x90>)
 800311a:	2200      	movs	r2, #0
 800311c:	625a      	str	r2, [r3, #36]	@ 0x24
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800311e:	4b13      	ldr	r3, [pc, #76]	@ (800316c <MX_UART4_Init+0x90>)
 8003120:	2200      	movs	r2, #0
 8003122:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart4) != HAL_OK)
 8003124:	4811      	ldr	r0, [pc, #68]	@ (800316c <MX_UART4_Init+0x90>)
 8003126:	f009 fe7a 	bl	800ce1e <HAL_UART_Init>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <MX_UART4_Init+0x58>
	{
		Error_Handler();
 8003130:	f000 fdeb 	bl	8003d0a <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003134:	2100      	movs	r1, #0
 8003136:	480d      	ldr	r0, [pc, #52]	@ (800316c <MX_UART4_Init+0x90>)
 8003138:	f00b ff79 	bl	800f02e <HAL_UARTEx_SetTxFifoThreshold>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <MX_UART4_Init+0x6a>
	{
		Error_Handler();
 8003142:	f000 fde2 	bl	8003d0a <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003146:	2100      	movs	r1, #0
 8003148:	4808      	ldr	r0, [pc, #32]	@ (800316c <MX_UART4_Init+0x90>)
 800314a:	f00b ffae 	bl	800f0aa <HAL_UARTEx_SetRxFifoThreshold>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <MX_UART4_Init+0x7c>
	{
		Error_Handler();
 8003154:	f000 fdd9 	bl	8003d0a <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8003158:	4804      	ldr	r0, [pc, #16]	@ (800316c <MX_UART4_Init+0x90>)
 800315a:	f00b ff2f 	bl	800efbc <HAL_UARTEx_DisableFifoMode>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <MX_UART4_Init+0x8c>
	{
		Error_Handler();
 8003164:	f000 fdd1 	bl	8003d0a <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8003168:	bf00      	nop
 800316a:	bd80      	pop	{r7, pc}
 800316c:	200059ac 	.word	0x200059ac
 8003170:	40004c00 	.word	0x40004c00

08003174 <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 8003178:	4b22      	ldr	r3, [pc, #136]	@ (8003204 <MX_UART5_Init+0x90>)
 800317a:	4a23      	ldr	r2, [pc, #140]	@ (8003208 <MX_UART5_Init+0x94>)
 800317c:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 800317e:	4b21      	ldr	r3, [pc, #132]	@ (8003204 <MX_UART5_Init+0x90>)
 8003180:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003184:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003186:	4b1f      	ldr	r3, [pc, #124]	@ (8003204 <MX_UART5_Init+0x90>)
 8003188:	2200      	movs	r2, #0
 800318a:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 800318c:	4b1d      	ldr	r3, [pc, #116]	@ (8003204 <MX_UART5_Init+0x90>)
 800318e:	2200      	movs	r2, #0
 8003190:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 8003192:	4b1c      	ldr	r3, [pc, #112]	@ (8003204 <MX_UART5_Init+0x90>)
 8003194:	2200      	movs	r2, #0
 8003196:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8003198:	4b1a      	ldr	r3, [pc, #104]	@ (8003204 <MX_UART5_Init+0x90>)
 800319a:	220c      	movs	r2, #12
 800319c:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800319e:	4b19      	ldr	r3, [pc, #100]	@ (8003204 <MX_UART5_Init+0x90>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80031a4:	4b17      	ldr	r3, [pc, #92]	@ (8003204 <MX_UART5_Init+0x90>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	61da      	str	r2, [r3, #28]
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031aa:	4b16      	ldr	r3, [pc, #88]	@ (8003204 <MX_UART5_Init+0x90>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	621a      	str	r2, [r3, #32]
	huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80031b0:	4b14      	ldr	r3, [pc, #80]	@ (8003204 <MX_UART5_Init+0x90>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	625a      	str	r2, [r3, #36]	@ 0x24
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031b6:	4b13      	ldr	r3, [pc, #76]	@ (8003204 <MX_UART5_Init+0x90>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart5) != HAL_OK)
 80031bc:	4811      	ldr	r0, [pc, #68]	@ (8003204 <MX_UART5_Init+0x90>)
 80031be:	f009 fe2e 	bl	800ce1e <HAL_UART_Init>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <MX_UART5_Init+0x58>
	{
		Error_Handler();
 80031c8:	f000 fd9f 	bl	8003d0a <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031cc:	2100      	movs	r1, #0
 80031ce:	480d      	ldr	r0, [pc, #52]	@ (8003204 <MX_UART5_Init+0x90>)
 80031d0:	f00b ff2d 	bl	800f02e <HAL_UARTEx_SetTxFifoThreshold>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <MX_UART5_Init+0x6a>
	{
		Error_Handler();
 80031da:	f000 fd96 	bl	8003d0a <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031de:	2100      	movs	r1, #0
 80031e0:	4808      	ldr	r0, [pc, #32]	@ (8003204 <MX_UART5_Init+0x90>)
 80031e2:	f00b ff62 	bl	800f0aa <HAL_UARTEx_SetRxFifoThreshold>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <MX_UART5_Init+0x7c>
	{
		Error_Handler();
 80031ec:	f000 fd8d 	bl	8003d0a <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80031f0:	4804      	ldr	r0, [pc, #16]	@ (8003204 <MX_UART5_Init+0x90>)
 80031f2:	f00b fee3 	bl	800efbc <HAL_UARTEx_DisableFifoMode>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <MX_UART5_Init+0x8c>
	{
		Error_Handler();
 80031fc:	f000 fd85 	bl	8003d0a <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 8003200:	bf00      	nop
 8003202:	bd80      	pop	{r7, pc}
 8003204:	20005a40 	.word	0x20005a40
 8003208:	40005000 	.word	0x40005000

0800320c <MX_UART8_Init>:
 * @brief UART8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART8_Init(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
	/* USER CODE END UART8_Init 0 */

	/* USER CODE BEGIN UART8_Init 1 */

	/* USER CODE END UART8_Init 1 */
	huart8.Instance = UART8;
 8003210:	4b23      	ldr	r3, [pc, #140]	@ (80032a0 <MX_UART8_Init+0x94>)
 8003212:	4a24      	ldr	r2, [pc, #144]	@ (80032a4 <MX_UART8_Init+0x98>)
 8003214:	601a      	str	r2, [r3, #0]
	huart8.Init.BaudRate = 115200;
 8003216:	4b22      	ldr	r3, [pc, #136]	@ (80032a0 <MX_UART8_Init+0x94>)
 8003218:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800321c:	605a      	str	r2, [r3, #4]
	huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800321e:	4b20      	ldr	r3, [pc, #128]	@ (80032a0 <MX_UART8_Init+0x94>)
 8003220:	2200      	movs	r2, #0
 8003222:	609a      	str	r2, [r3, #8]
	huart8.Init.StopBits = UART_STOPBITS_1;
 8003224:	4b1e      	ldr	r3, [pc, #120]	@ (80032a0 <MX_UART8_Init+0x94>)
 8003226:	2200      	movs	r2, #0
 8003228:	60da      	str	r2, [r3, #12]
	huart8.Init.Parity = UART_PARITY_NONE;
 800322a:	4b1d      	ldr	r3, [pc, #116]	@ (80032a0 <MX_UART8_Init+0x94>)
 800322c:	2200      	movs	r2, #0
 800322e:	611a      	str	r2, [r3, #16]
	huart8.Init.Mode = UART_MODE_TX_RX;
 8003230:	4b1b      	ldr	r3, [pc, #108]	@ (80032a0 <MX_UART8_Init+0x94>)
 8003232:	220c      	movs	r2, #12
 8003234:	615a      	str	r2, [r3, #20]
	huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003236:	4b1a      	ldr	r3, [pc, #104]	@ (80032a0 <MX_UART8_Init+0x94>)
 8003238:	2200      	movs	r2, #0
 800323a:	619a      	str	r2, [r3, #24]
	huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800323c:	4b18      	ldr	r3, [pc, #96]	@ (80032a0 <MX_UART8_Init+0x94>)
 800323e:	2200      	movs	r2, #0
 8003240:	61da      	str	r2, [r3, #28]
	huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003242:	4b17      	ldr	r3, [pc, #92]	@ (80032a0 <MX_UART8_Init+0x94>)
 8003244:	2200      	movs	r2, #0
 8003246:	621a      	str	r2, [r3, #32]
	huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003248:	4b15      	ldr	r3, [pc, #84]	@ (80032a0 <MX_UART8_Init+0x94>)
 800324a:	2200      	movs	r2, #0
 800324c:	625a      	str	r2, [r3, #36]	@ 0x24
	huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800324e:	4b14      	ldr	r3, [pc, #80]	@ (80032a0 <MX_UART8_Init+0x94>)
 8003250:	2200      	movs	r2, #0
 8003252:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart8) != HAL_OK)
 8003254:	4812      	ldr	r0, [pc, #72]	@ (80032a0 <MX_UART8_Init+0x94>)
 8003256:	f009 fde2 	bl	800ce1e <HAL_UART_Init>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <MX_UART8_Init+0x58>
	{
		Error_Handler();
 8003260:	f000 fd53 	bl	8003d0a <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8003264:	f04f 4120 	mov.w	r1, #2684354560	@ 0xa0000000
 8003268:	480d      	ldr	r0, [pc, #52]	@ (80032a0 <MX_UART8_Init+0x94>)
 800326a:	f00b fee0 	bl	800f02e <HAL_UARTEx_SetTxFifoThreshold>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <MX_UART8_Init+0x6c>
	{
		Error_Handler();
 8003274:	f000 fd49 	bl	8003d0a <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003278:	2100      	movs	r1, #0
 800327a:	4809      	ldr	r0, [pc, #36]	@ (80032a0 <MX_UART8_Init+0x94>)
 800327c:	f00b ff15 	bl	800f0aa <HAL_UARTEx_SetRxFifoThreshold>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <MX_UART8_Init+0x7e>
	{
		Error_Handler();
 8003286:	f000 fd40 	bl	8003d0a <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 800328a:	4805      	ldr	r0, [pc, #20]	@ (80032a0 <MX_UART8_Init+0x94>)
 800328c:	f00b fe96 	bl	800efbc <HAL_UARTEx_DisableFifoMode>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <MX_UART8_Init+0x8e>
	{
		Error_Handler();
 8003296:	f000 fd38 	bl	8003d0a <Error_Handler>
	}
	/* USER CODE BEGIN UART8_Init 2 */

	/* USER CODE END UART8_Init 2 */

}
 800329a:	bf00      	nop
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	20005ad4 	.word	0x20005ad4
 80032a4:	40007c00 	.word	0x40007c00

080032a8 <MX_USART10_UART_Init>:
 * @brief USART10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART10_UART_Init(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
	/* USER CODE END USART10_Init 0 */

	/* USER CODE BEGIN USART10_Init 1 */

	/* USER CODE END USART10_Init 1 */
	huart10.Instance = USART10;
 80032ac:	4b22      	ldr	r3, [pc, #136]	@ (8003338 <MX_USART10_UART_Init+0x90>)
 80032ae:	4a23      	ldr	r2, [pc, #140]	@ (800333c <MX_USART10_UART_Init+0x94>)
 80032b0:	601a      	str	r2, [r3, #0]
	huart10.Init.BaudRate = 115200;
 80032b2:	4b21      	ldr	r3, [pc, #132]	@ (8003338 <MX_USART10_UART_Init+0x90>)
 80032b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80032b8:	605a      	str	r2, [r3, #4]
	huart10.Init.WordLength = UART_WORDLENGTH_8B;
 80032ba:	4b1f      	ldr	r3, [pc, #124]	@ (8003338 <MX_USART10_UART_Init+0x90>)
 80032bc:	2200      	movs	r2, #0
 80032be:	609a      	str	r2, [r3, #8]
	huart10.Init.StopBits = UART_STOPBITS_1;
 80032c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003338 <MX_USART10_UART_Init+0x90>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	60da      	str	r2, [r3, #12]
	huart10.Init.Parity = UART_PARITY_NONE;
 80032c6:	4b1c      	ldr	r3, [pc, #112]	@ (8003338 <MX_USART10_UART_Init+0x90>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	611a      	str	r2, [r3, #16]
	huart10.Init.Mode = UART_MODE_TX_RX;
 80032cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003338 <MX_USART10_UART_Init+0x90>)
 80032ce:	220c      	movs	r2, #12
 80032d0:	615a      	str	r2, [r3, #20]
	huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032d2:	4b19      	ldr	r3, [pc, #100]	@ (8003338 <MX_USART10_UART_Init+0x90>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	619a      	str	r2, [r3, #24]
	huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 80032d8:	4b17      	ldr	r3, [pc, #92]	@ (8003338 <MX_USART10_UART_Init+0x90>)
 80032da:	2200      	movs	r2, #0
 80032dc:	61da      	str	r2, [r3, #28]
	huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80032de:	4b16      	ldr	r3, [pc, #88]	@ (8003338 <MX_USART10_UART_Init+0x90>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	621a      	str	r2, [r3, #32]
	huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80032e4:	4b14      	ldr	r3, [pc, #80]	@ (8003338 <MX_USART10_UART_Init+0x90>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	625a      	str	r2, [r3, #36]	@ 0x24
	huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80032ea:	4b13      	ldr	r3, [pc, #76]	@ (8003338 <MX_USART10_UART_Init+0x90>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart10) != HAL_OK)
 80032f0:	4811      	ldr	r0, [pc, #68]	@ (8003338 <MX_USART10_UART_Init+0x90>)
 80032f2:	f009 fd94 	bl	800ce1e <HAL_UART_Init>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <MX_USART10_UART_Init+0x58>
	{
		Error_Handler();
 80032fc:	f000 fd05 	bl	8003d0a <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003300:	2100      	movs	r1, #0
 8003302:	480d      	ldr	r0, [pc, #52]	@ (8003338 <MX_USART10_UART_Init+0x90>)
 8003304:	f00b fe93 	bl	800f02e <HAL_UARTEx_SetTxFifoThreshold>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <MX_USART10_UART_Init+0x6a>
	{
		Error_Handler();
 800330e:	f000 fcfc 	bl	8003d0a <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003312:	2100      	movs	r1, #0
 8003314:	4808      	ldr	r0, [pc, #32]	@ (8003338 <MX_USART10_UART_Init+0x90>)
 8003316:	f00b fec8 	bl	800f0aa <HAL_UARTEx_SetRxFifoThreshold>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <MX_USART10_UART_Init+0x7c>
	{
		Error_Handler();
 8003320:	f000 fcf3 	bl	8003d0a <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 8003324:	4804      	ldr	r0, [pc, #16]	@ (8003338 <MX_USART10_UART_Init+0x90>)
 8003326:	f00b fe49 	bl	800efbc <HAL_UARTEx_DisableFifoMode>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <MX_USART10_UART_Init+0x8c>
	{
		Error_Handler();
 8003330:	f000 fceb 	bl	8003d0a <Error_Handler>
	}
	/* USER CODE BEGIN USART10_Init 2 */

	/* USER CODE END USART10_Init 2 */

}
 8003334:	bf00      	nop
 8003336:	bd80      	pop	{r7, pc}
 8003338:	20005b68 	.word	0x20005b68
 800333c:	40006800 	.word	0x40006800

08003340 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b090      	sub	sp, #64	@ 0x40
 8003344:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_NORSRAM_TimingTypeDef Timing = {0};
 8003346:	f107 0320 	add.w	r3, r7, #32
 800334a:	2220      	movs	r2, #32
 800334c:	2100      	movs	r1, #0
 800334e:	4618      	mov	r0, r3
 8003350:	f00c fe71 	bl	8010036 <memset>
	FMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 8003354:	f107 0310 	add.w	r3, r7, #16
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	605a      	str	r2, [r3, #4]
 800335e:	609a      	str	r2, [r3, #8]
 8003360:	60da      	str	r2, [r3, #12]
	FMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 8003362:	463b      	mov	r3, r7
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	605a      	str	r2, [r3, #4]
 800336a:	609a      	str	r2, [r3, #8]
 800336c:	60da      	str	r2, [r3, #12]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SRAM1 memory initialization sequence
	 */
	hsram1.Instance = FMC_NORSRAM_DEVICE;
 800336e:	4b55      	ldr	r3, [pc, #340]	@ (80034c4 <MX_FMC_Init+0x184>)
 8003370:	4a55      	ldr	r2, [pc, #340]	@ (80034c8 <MX_FMC_Init+0x188>)
 8003372:	601a      	str	r2, [r3, #0]
	hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8003374:	4b53      	ldr	r3, [pc, #332]	@ (80034c4 <MX_FMC_Init+0x184>)
 8003376:	4a55      	ldr	r2, [pc, #340]	@ (80034cc <MX_FMC_Init+0x18c>)
 8003378:	605a      	str	r2, [r3, #4]
	/* hsram1.Init */
	hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 800337a:	4b52      	ldr	r3, [pc, #328]	@ (80034c4 <MX_FMC_Init+0x184>)
 800337c:	2200      	movs	r2, #0
 800337e:	609a      	str	r2, [r3, #8]
	hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8003380:	4b50      	ldr	r3, [pc, #320]	@ (80034c4 <MX_FMC_Init+0x184>)
 8003382:	2200      	movs	r2, #0
 8003384:	60da      	str	r2, [r3, #12]
	hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8003386:	4b4f      	ldr	r3, [pc, #316]	@ (80034c4 <MX_FMC_Init+0x184>)
 8003388:	2200      	movs	r2, #0
 800338a:	611a      	str	r2, [r3, #16]
	hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 800338c:	4b4d      	ldr	r3, [pc, #308]	@ (80034c4 <MX_FMC_Init+0x184>)
 800338e:	2200      	movs	r2, #0
 8003390:	615a      	str	r2, [r3, #20]
	hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8003392:	4b4c      	ldr	r3, [pc, #304]	@ (80034c4 <MX_FMC_Init+0x184>)
 8003394:	2200      	movs	r2, #0
 8003396:	619a      	str	r2, [r3, #24]
	hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8003398:	4b4a      	ldr	r3, [pc, #296]	@ (80034c4 <MX_FMC_Init+0x184>)
 800339a:	2200      	movs	r2, #0
 800339c:	61da      	str	r2, [r3, #28]
	hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 800339e:	4b49      	ldr	r3, [pc, #292]	@ (80034c4 <MX_FMC_Init+0x184>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	621a      	str	r2, [r3, #32]
	hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80033a4:	4b47      	ldr	r3, [pc, #284]	@ (80034c4 <MX_FMC_Init+0x184>)
 80033a6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80033aa:	625a      	str	r2, [r3, #36]	@ 0x24
	hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80033ac:	4b45      	ldr	r3, [pc, #276]	@ (80034c4 <MX_FMC_Init+0x184>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	629a      	str	r2, [r3, #40]	@ 0x28
	hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80033b2:	4b44      	ldr	r3, [pc, #272]	@ (80034c4 <MX_FMC_Init+0x184>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	62da      	str	r2, [r3, #44]	@ 0x2c
	hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80033b8:	4b42      	ldr	r3, [pc, #264]	@ (80034c4 <MX_FMC_Init+0x184>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	631a      	str	r2, [r3, #48]	@ 0x30
	hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80033be:	4b41      	ldr	r3, [pc, #260]	@ (80034c4 <MX_FMC_Init+0x184>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	635a      	str	r2, [r3, #52]	@ 0x34
	hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80033c4:	4b3f      	ldr	r3, [pc, #252]	@ (80034c4 <MX_FMC_Init+0x184>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	639a      	str	r2, [r3, #56]	@ 0x38
	hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80033ca:	4b3e      	ldr	r3, [pc, #248]	@ (80034c4 <MX_FMC_Init+0x184>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	63da      	str	r2, [r3, #60]	@ 0x3c
	hsram1.Init.NBLSetupTime = 0;
 80033d0:	4b3c      	ldr	r3, [pc, #240]	@ (80034c4 <MX_FMC_Init+0x184>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	645a      	str	r2, [r3, #68]	@ 0x44
	hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80033d6:	4b3b      	ldr	r3, [pc, #236]	@ (80034c4 <MX_FMC_Init+0x184>)
 80033d8:	2200      	movs	r2, #0
 80033da:	641a      	str	r2, [r3, #64]	@ 0x40
	hsram1.Init.MaxChipSelectPulse = DISABLE;
 80033dc:	4b39      	ldr	r3, [pc, #228]	@ (80034c4 <MX_FMC_Init+0x184>)
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
	/* Timing */
	Timing.AddressSetupTime = 15;
 80033e4:	230f      	movs	r3, #15
 80033e6:	623b      	str	r3, [r7, #32]
	Timing.AddressHoldTime = 15;
 80033e8:	230f      	movs	r3, #15
 80033ea:	627b      	str	r3, [r7, #36]	@ 0x24
	Timing.DataSetupTime = 255;
 80033ec:	23ff      	movs	r3, #255	@ 0xff
 80033ee:	62bb      	str	r3, [r7, #40]	@ 0x28
	Timing.DataHoldTime = 3;
 80033f0:	2303      	movs	r3, #3
 80033f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	Timing.BusTurnAroundDuration = 15;
 80033f4:	230f      	movs	r3, #15
 80033f6:	633b      	str	r3, [r7, #48]	@ 0x30
	Timing.CLKDivision = 16;
 80033f8:	2310      	movs	r3, #16
 80033fa:	637b      	str	r3, [r7, #52]	@ 0x34
	Timing.DataLatency = 17;
 80033fc:	2311      	movs	r3, #17
 80033fe:	63bb      	str	r3, [r7, #56]	@ 0x38
	Timing.AccessMode = FMC_ACCESS_MODE_A;
 8003400:	2300      	movs	r3, #0
 8003402:	63fb      	str	r3, [r7, #60]	@ 0x3c
	/* ExtTiming */

	if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8003404:	f107 0320 	add.w	r3, r7, #32
 8003408:	2200      	movs	r2, #0
 800340a:	4619      	mov	r1, r3
 800340c:	482d      	ldr	r0, [pc, #180]	@ (80034c4 <MX_FMC_Init+0x184>)
 800340e:	f009 fc29 	bl	800cc64 <HAL_SRAM_Init>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <MX_FMC_Init+0xdc>
	{
		Error_Handler( );
 8003418:	f000 fc77 	bl	8003d0a <Error_Handler>
	}

	/** Perform the NAND1 memory initialization sequence
	 */
	hnand1.Instance = FMC_NAND_DEVICE;
 800341c:	4b2c      	ldr	r3, [pc, #176]	@ (80034d0 <MX_FMC_Init+0x190>)
 800341e:	4a2d      	ldr	r2, [pc, #180]	@ (80034d4 <MX_FMC_Init+0x194>)
 8003420:	601a      	str	r2, [r3, #0]
	/* hnand1.Init */
	hnand1.Init.NandBank = FMC_NAND_BANK3;
 8003422:	4b2b      	ldr	r3, [pc, #172]	@ (80034d0 <MX_FMC_Init+0x190>)
 8003424:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003428:	605a      	str	r2, [r3, #4]
	hnand1.Init.Waitfeature = FMC_NAND_WAIT_FEATURE_ENABLE;
 800342a:	4b29      	ldr	r3, [pc, #164]	@ (80034d0 <MX_FMC_Init+0x190>)
 800342c:	2202      	movs	r2, #2
 800342e:	609a      	str	r2, [r3, #8]
	hnand1.Init.MemoryDataWidth = FMC_NAND_MEM_BUS_WIDTH_8;
 8003430:	4b27      	ldr	r3, [pc, #156]	@ (80034d0 <MX_FMC_Init+0x190>)
 8003432:	2200      	movs	r2, #0
 8003434:	60da      	str	r2, [r3, #12]
	hnand1.Init.EccComputation = FMC_NAND_ECC_ENABLE;
 8003436:	4b26      	ldr	r3, [pc, #152]	@ (80034d0 <MX_FMC_Init+0x190>)
 8003438:	2240      	movs	r2, #64	@ 0x40
 800343a:	611a      	str	r2, [r3, #16]
	hnand1.Init.ECCPageSize = FMC_NAND_ECC_PAGE_SIZE_8192BYTE;
 800343c:	4b24      	ldr	r3, [pc, #144]	@ (80034d0 <MX_FMC_Init+0x190>)
 800343e:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8003442:	615a      	str	r2, [r3, #20]
	hnand1.Init.TCLRSetupTime = 15;
 8003444:	4b22      	ldr	r3, [pc, #136]	@ (80034d0 <MX_FMC_Init+0x190>)
 8003446:	220f      	movs	r2, #15
 8003448:	619a      	str	r2, [r3, #24]
	hnand1.Init.TARSetupTime = 15;
 800344a:	4b21      	ldr	r3, [pc, #132]	@ (80034d0 <MX_FMC_Init+0x190>)
 800344c:	220f      	movs	r2, #15
 800344e:	61da      	str	r2, [r3, #28]
	/* hnand1.Config */
	hnand1.Config.PageSize = 8192;
 8003450:	4b1f      	ldr	r3, [pc, #124]	@ (80034d0 <MX_FMC_Init+0x190>)
 8003452:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003456:	625a      	str	r2, [r3, #36]	@ 0x24
	hnand1.Config.SpareAreaSize = 448;
 8003458:	4b1d      	ldr	r3, [pc, #116]	@ (80034d0 <MX_FMC_Init+0x190>)
 800345a:	f44f 72e0 	mov.w	r2, #448	@ 0x1c0
 800345e:	629a      	str	r2, [r3, #40]	@ 0x28
	hnand1.Config.BlockSize = 128;
 8003460:	4b1b      	ldr	r3, [pc, #108]	@ (80034d0 <MX_FMC_Init+0x190>)
 8003462:	2280      	movs	r2, #128	@ 0x80
 8003464:	62da      	str	r2, [r3, #44]	@ 0x2c
	hnand1.Config.BlockNbr = 4096;
 8003466:	4b1a      	ldr	r3, [pc, #104]	@ (80034d0 <MX_FMC_Init+0x190>)
 8003468:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800346c:	631a      	str	r2, [r3, #48]	@ 0x30
	hnand1.Config.PlaneNbr = 2;
 800346e:	4b18      	ldr	r3, [pc, #96]	@ (80034d0 <MX_FMC_Init+0x190>)
 8003470:	2202      	movs	r2, #2
 8003472:	635a      	str	r2, [r3, #52]	@ 0x34
	hnand1.Config.PlaneSize = 2048;
 8003474:	4b16      	ldr	r3, [pc, #88]	@ (80034d0 <MX_FMC_Init+0x190>)
 8003476:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800347a:	639a      	str	r2, [r3, #56]	@ 0x38
	hnand1.Config.ExtraCommandEnable = ENABLE;
 800347c:	4b14      	ldr	r3, [pc, #80]	@ (80034d0 <MX_FMC_Init+0x190>)
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	/* ComSpaceTiming */
	ComSpaceTiming.SetupTime = 19;
 8003484:	2313      	movs	r3, #19
 8003486:	613b      	str	r3, [r7, #16]
	ComSpaceTiming.WaitSetupTime = 19;
 8003488:	2313      	movs	r3, #19
 800348a:	617b      	str	r3, [r7, #20]
	ComSpaceTiming.HoldSetupTime = 6;
 800348c:	2306      	movs	r3, #6
 800348e:	61bb      	str	r3, [r7, #24]
	ComSpaceTiming.HiZSetupTime = 3;
 8003490:	2303      	movs	r3, #3
 8003492:	61fb      	str	r3, [r7, #28]
	/* AttSpaceTiming */
	AttSpaceTiming.SetupTime = 19;
 8003494:	2313      	movs	r3, #19
 8003496:	603b      	str	r3, [r7, #0]
	AttSpaceTiming.WaitSetupTime = 19;
 8003498:	2313      	movs	r3, #19
 800349a:	607b      	str	r3, [r7, #4]
	AttSpaceTiming.HoldSetupTime = 10;
 800349c:	230a      	movs	r3, #10
 800349e:	60bb      	str	r3, [r7, #8]
	AttSpaceTiming.HiZSetupTime = 9;
 80034a0:	2309      	movs	r3, #9
 80034a2:	60fb      	str	r3, [r7, #12]

	if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 80034a4:	463a      	mov	r2, r7
 80034a6:	f107 0310 	add.w	r3, r7, #16
 80034aa:	4619      	mov	r1, r3
 80034ac:	4808      	ldr	r0, [pc, #32]	@ (80034d0 <MX_FMC_Init+0x190>)
 80034ae:	f001 ff1f 	bl	80052f0 <HAL_NAND_Init>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <MX_FMC_Init+0x17c>
	{
		Error_Handler( );
 80034b8:	f000 fc27 	bl	8003d0a <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	/* USER CODE END FMC_Init 2 */
}
 80034bc:	bf00      	nop
 80034be:	3740      	adds	r7, #64	@ 0x40
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	20005bfc 	.word	0x20005bfc
 80034c8:	47000400 	.word	0x47000400
 80034cc:	47000504 	.word	0x47000504
 80034d0:	20005c54 	.word	0x20005c54
 80034d4:	47000480 	.word	0x47000480

080034d8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b08e      	sub	sp, #56	@ 0x38
 80034dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034e2:	2200      	movs	r2, #0
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	605a      	str	r2, [r3, #4]
 80034e8:	609a      	str	r2, [r3, #8]
 80034ea:	60da      	str	r2, [r3, #12]
 80034ec:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80034ee:	4bc2      	ldr	r3, [pc, #776]	@ (80037f8 <MX_GPIO_Init+0x320>)
 80034f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034f4:	4ac0      	ldr	r2, [pc, #768]	@ (80037f8 <MX_GPIO_Init+0x320>)
 80034f6:	f043 0310 	orr.w	r3, r3, #16
 80034fa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80034fe:	4bbe      	ldr	r3, [pc, #760]	@ (80037f8 <MX_GPIO_Init+0x320>)
 8003500:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003504:	f003 0310 	and.w	r3, r3, #16
 8003508:	623b      	str	r3, [r7, #32]
 800350a:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800350c:	4bba      	ldr	r3, [pc, #744]	@ (80037f8 <MX_GPIO_Init+0x320>)
 800350e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003512:	4ab9      	ldr	r2, [pc, #740]	@ (80037f8 <MX_GPIO_Init+0x320>)
 8003514:	f043 0304 	orr.w	r3, r3, #4
 8003518:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800351c:	4bb6      	ldr	r3, [pc, #728]	@ (80037f8 <MX_GPIO_Init+0x320>)
 800351e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003522:	f003 0304 	and.w	r3, r3, #4
 8003526:	61fb      	str	r3, [r7, #28]
 8003528:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800352a:	4bb3      	ldr	r3, [pc, #716]	@ (80037f8 <MX_GPIO_Init+0x320>)
 800352c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003530:	4ab1      	ldr	r2, [pc, #708]	@ (80037f8 <MX_GPIO_Init+0x320>)
 8003532:	f043 0320 	orr.w	r3, r3, #32
 8003536:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800353a:	4baf      	ldr	r3, [pc, #700]	@ (80037f8 <MX_GPIO_Init+0x320>)
 800353c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003540:	f003 0320 	and.w	r3, r3, #32
 8003544:	61bb      	str	r3, [r7, #24]
 8003546:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8003548:	4bab      	ldr	r3, [pc, #684]	@ (80037f8 <MX_GPIO_Init+0x320>)
 800354a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800354e:	4aaa      	ldr	r2, [pc, #680]	@ (80037f8 <MX_GPIO_Init+0x320>)
 8003550:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003554:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003558:	4ba7      	ldr	r3, [pc, #668]	@ (80037f8 <MX_GPIO_Init+0x320>)
 800355a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800355e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003562:	617b      	str	r3, [r7, #20]
 8003564:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003566:	4ba4      	ldr	r3, [pc, #656]	@ (80037f8 <MX_GPIO_Init+0x320>)
 8003568:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800356c:	4aa2      	ldr	r2, [pc, #648]	@ (80037f8 <MX_GPIO_Init+0x320>)
 800356e:	f043 0301 	orr.w	r3, r3, #1
 8003572:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003576:	4ba0      	ldr	r3, [pc, #640]	@ (80037f8 <MX_GPIO_Init+0x320>)
 8003578:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	613b      	str	r3, [r7, #16]
 8003582:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003584:	4b9c      	ldr	r3, [pc, #624]	@ (80037f8 <MX_GPIO_Init+0x320>)
 8003586:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800358a:	4a9b      	ldr	r2, [pc, #620]	@ (80037f8 <MX_GPIO_Init+0x320>)
 800358c:	f043 0302 	orr.w	r3, r3, #2
 8003590:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003594:	4b98      	ldr	r3, [pc, #608]	@ (80037f8 <MX_GPIO_Init+0x320>)
 8003596:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80035a2:	4b95      	ldr	r3, [pc, #596]	@ (80037f8 <MX_GPIO_Init+0x320>)
 80035a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035a8:	4a93      	ldr	r2, [pc, #588]	@ (80037f8 <MX_GPIO_Init+0x320>)
 80035aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80035b2:	4b91      	ldr	r3, [pc, #580]	@ (80037f8 <MX_GPIO_Init+0x320>)
 80035b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035bc:	60bb      	str	r3, [r7, #8]
 80035be:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80035c0:	4b8d      	ldr	r3, [pc, #564]	@ (80037f8 <MX_GPIO_Init+0x320>)
 80035c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035c6:	4a8c      	ldr	r2, [pc, #560]	@ (80037f8 <MX_GPIO_Init+0x320>)
 80035c8:	f043 0308 	orr.w	r3, r3, #8
 80035cc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80035d0:	4b89      	ldr	r3, [pc, #548]	@ (80037f8 <MX_GPIO_Init+0x320>)
 80035d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	607b      	str	r3, [r7, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, CS_1_Pin|START_1_Pin|RTC_RST_Pin, GPIO_PIN_RESET);
 80035de:	2200      	movs	r2, #0
 80035e0:	f44f 6144 	mov.w	r1, #3136	@ 0xc40
 80035e4:	4885      	ldr	r0, [pc, #532]	@ (80037fc <MX_GPIO_Init+0x324>)
 80035e6:	f001 fdef 	bl	80051c8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RESET_1_GPIO_Port, RESET_1_Pin, GPIO_PIN_RESET);
 80035ea:	2200      	movs	r2, #0
 80035ec:	2104      	movs	r1, #4
 80035ee:	4884      	ldr	r0, [pc, #528]	@ (8003800 <MX_GPIO_Init+0x328>)
 80035f0:	f001 fdea 	bl	80051c8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, RS422_CTRL_Pin|RS485_CTRL1_Pin|RS485_CTRL2_Pin|Pwr_Ctrl1_Pin
 80035f4:	2200      	movs	r2, #0
 80035f6:	f241 4167 	movw	r1, #5223	@ 0x1467
 80035fa:	4882      	ldr	r0, [pc, #520]	@ (8003804 <MX_GPIO_Init+0x32c>)
 80035fc:	f001 fde4 	bl	80051c8 <HAL_GPIO_WritePin>
			|Pwr_Ctrl2_Pin|START_3_Pin|RESET_3_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPO_1_Pin|GPO_2_Pin|CS_2_Pin, GPIO_PIN_RESET);
 8003600:	2200      	movs	r2, #0
 8003602:	f640 0103 	movw	r1, #2051	@ 0x803
 8003606:	4880      	ldr	r0, [pc, #512]	@ (8003808 <MX_GPIO_Init+0x330>)
 8003608:	f001 fdde 	bl	80051c8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 800360c:	2200      	movs	r2, #0
 800360e:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 8003612:	487e      	ldr	r0, [pc, #504]	@ (800380c <MX_GPIO_Init+0x334>)
 8003614:	f001 fdd8 	bl	80051c8 <HAL_GPIO_WritePin>
			|LED5_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8003618:	2201      	movs	r2, #1
 800361a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800361e:	487a      	ldr	r0, [pc, #488]	@ (8003808 <MX_GPIO_Init+0x330>)
 8003620:	f001 fdd2 	bl	80051c8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, START_2_Pin|RESET_2_Pin, GPIO_PIN_RESET);
 8003624:	2200      	movs	r2, #0
 8003626:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 800362a:	4879      	ldr	r0, [pc, #484]	@ (8003810 <MX_GPIO_Init+0x338>)
 800362c:	f001 fdcc 	bl	80051c8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_3_GPIO_Port, CS_3_Pin, GPIO_PIN_RESET);
 8003630:	2200      	movs	r2, #0
 8003632:	2110      	movs	r1, #16
 8003634:	4877      	ldr	r0, [pc, #476]	@ (8003814 <MX_GPIO_Init+0x33c>)
 8003636:	f001 fdc7 	bl	80051c8 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : GPI_3_Pin GPI_4_Pin GPI_5_Pin */
	GPIO_InitStruct.Pin = GPI_3_Pin|GPI_4_Pin|GPI_5_Pin;
 800363a:	2370      	movs	r3, #112	@ 0x70
 800363c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800363e:	2300      	movs	r3, #0
 8003640:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003642:	2300      	movs	r3, #0
 8003644:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003646:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800364a:	4619      	mov	r1, r3
 800364c:	486f      	ldr	r0, [pc, #444]	@ (800380c <MX_GPIO_Init+0x334>)
 800364e:	f001 fc69 	bl	8004f24 <HAL_GPIO_Init>

	/*Configure GPIO pins : CS_1_Pin START_1_Pin */
	GPIO_InitStruct.Pin = CS_1_Pin|START_1_Pin;
 8003652:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 8003656:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003658:	2301      	movs	r3, #1
 800365a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365c:	2300      	movs	r3, #0
 800365e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003660:	2303      	movs	r3, #3
 8003662:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003664:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003668:	4619      	mov	r1, r3
 800366a:	4864      	ldr	r0, [pc, #400]	@ (80037fc <MX_GPIO_Init+0x324>)
 800366c:	f001 fc5a 	bl	8004f24 <HAL_GPIO_Init>

	/*Configure GPIO pin : DRDY_1_Pin */
	GPIO_InitStruct.Pin = DRDY_1_Pin;
 8003670:	2302      	movs	r3, #2
 8003672:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003674:	4b68      	ldr	r3, [pc, #416]	@ (8003818 <MX_GPIO_Init+0x340>)
 8003676:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003678:	2300      	movs	r3, #0
 800367a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(DRDY_1_GPIO_Port, &GPIO_InitStruct);
 800367c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003680:	4619      	mov	r1, r3
 8003682:	485f      	ldr	r0, [pc, #380]	@ (8003800 <MX_GPIO_Init+0x328>)
 8003684:	f001 fc4e 	bl	8004f24 <HAL_GPIO_Init>

	/*Configure GPIO pin : RESET_1_Pin */
	GPIO_InitStruct.Pin = RESET_1_Pin;
 8003688:	2304      	movs	r3, #4
 800368a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800368c:	2301      	movs	r3, #1
 800368e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003690:	2300      	movs	r3, #0
 8003692:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003694:	2303      	movs	r3, #3
 8003696:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(RESET_1_GPIO_Port, &GPIO_InitStruct);
 8003698:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800369c:	4619      	mov	r1, r3
 800369e:	4858      	ldr	r0, [pc, #352]	@ (8003800 <MX_GPIO_Init+0x328>)
 80036a0:	f001 fc40 	bl	8004f24 <HAL_GPIO_Init>

	/*Configure GPIO pins : RS422_CTRL_Pin RS485_CTRL1_Pin RS485_CTRL2_Pin Pwr_Ctrl1_Pin
                           Pwr_Ctrl2_Pin */
	GPIO_InitStruct.Pin = RS422_CTRL_Pin|RS485_CTRL1_Pin|RS485_CTRL2_Pin|Pwr_Ctrl1_Pin
 80036a4:	2367      	movs	r3, #103	@ 0x67
 80036a6:	627b      	str	r3, [r7, #36]	@ 0x24
			|Pwr_Ctrl2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036a8:	2301      	movs	r3, #1
 80036aa:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ac:	2300      	movs	r3, #0
 80036ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036b0:	2300      	movs	r3, #0
 80036b2:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036b8:	4619      	mov	r1, r3
 80036ba:	4852      	ldr	r0, [pc, #328]	@ (8003804 <MX_GPIO_Init+0x32c>)
 80036bc:	f001 fc32 	bl	8004f24 <HAL_GPIO_Init>

	/*Configure GPIO pins : GPO_1_Pin GPO_2_Pin */
	GPIO_InitStruct.Pin = GPO_1_Pin|GPO_2_Pin;
 80036c0:	2303      	movs	r3, #3
 80036c2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036c4:	2301      	movs	r3, #1
 80036c6:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c8:	2300      	movs	r3, #0
 80036ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036cc:	2300      	movs	r3, #0
 80036ce:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036d4:	4619      	mov	r1, r3
 80036d6:	484c      	ldr	r0, [pc, #304]	@ (8003808 <MX_GPIO_Init+0x330>)
 80036d8:	f001 fc24 	bl	8004f24 <HAL_GPIO_Init>

	/*Configure GPIO pin : RTC_RST_Pin */
	GPIO_InitStruct.Pin = RTC_RST_Pin;
 80036dc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80036e0:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036e2:	2301      	movs	r3, #1
 80036e4:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e6:	2300      	movs	r3, #0
 80036e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ea:	2300      	movs	r3, #0
 80036ec:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(RTC_RST_GPIO_Port, &GPIO_InitStruct);
 80036ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036f2:	4619      	mov	r1, r3
 80036f4:	4841      	ldr	r0, [pc, #260]	@ (80037fc <MX_GPIO_Init+0x324>)
 80036f6:	f001 fc15 	bl	8004f24 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin */
	GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 80036fa:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80036fe:	627b      	str	r3, [r7, #36]	@ 0x24
			|LED5_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003700:	2301      	movs	r3, #1
 8003702:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003704:	2300      	movs	r3, #0
 8003706:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003708:	2300      	movs	r3, #0
 800370a:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800370c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003710:	4619      	mov	r1, r3
 8003712:	483e      	ldr	r0, [pc, #248]	@ (800380c <MX_GPIO_Init+0x334>)
 8003714:	f001 fc06 	bl	8004f24 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB10 CS_2_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_10|CS_2_Pin;
 8003718:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800371c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800371e:	2301      	movs	r3, #1
 8003720:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003722:	2300      	movs	r3, #0
 8003724:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003726:	2303      	movs	r3, #3
 8003728:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800372a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800372e:	4619      	mov	r1, r3
 8003730:	4835      	ldr	r0, [pc, #212]	@ (8003808 <MX_GPIO_Init+0x330>)
 8003732:	f001 fbf7 	bl	8004f24 <HAL_GPIO_Init>

	/*Configure GPIO pins : START_2_Pin RESET_2_Pin */
	GPIO_InitStruct.Pin = START_2_Pin|RESET_2_Pin;
 8003736:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800373a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800373c:	2301      	movs	r3, #1
 800373e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003740:	2300      	movs	r3, #0
 8003742:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003744:	2303      	movs	r3, #3
 8003746:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003748:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800374c:	4619      	mov	r1, r3
 800374e:	4830      	ldr	r0, [pc, #192]	@ (8003810 <MX_GPIO_Init+0x338>)
 8003750:	f001 fbe8 	bl	8004f24 <HAL_GPIO_Init>

	/*Configure GPIO pin : DRDY_2_Pin */
	GPIO_InitStruct.Pin = DRDY_2_Pin;
 8003754:	2380      	movs	r3, #128	@ 0x80
 8003756:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003758:	4b2f      	ldr	r3, [pc, #188]	@ (8003818 <MX_GPIO_Init+0x340>)
 800375a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800375c:	2300      	movs	r3, #0
 800375e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(DRDY_2_GPIO_Port, &GPIO_InitStruct);
 8003760:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003764:	4619      	mov	r1, r3
 8003766:	482a      	ldr	r0, [pc, #168]	@ (8003810 <MX_GPIO_Init+0x338>)
 8003768:	f001 fbdc 	bl	8004f24 <HAL_GPIO_Init>

	/*Configure GPIO pins : START_3_Pin RESET_3_Pin */
	GPIO_InitStruct.Pin = START_3_Pin|RESET_3_Pin;
 800376c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003770:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003772:	2301      	movs	r3, #1
 8003774:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003776:	2300      	movs	r3, #0
 8003778:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800377a:	2303      	movs	r3, #3
 800377c:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800377e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003782:	4619      	mov	r1, r3
 8003784:	481f      	ldr	r0, [pc, #124]	@ (8003804 <MX_GPIO_Init+0x32c>)
 8003786:	f001 fbcd 	bl	8004f24 <HAL_GPIO_Init>

	/*Configure GPIO pin : DRDY_3_Pin */
	GPIO_InitStruct.Pin = DRDY_3_Pin;
 800378a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800378e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003790:	4b21      	ldr	r3, [pc, #132]	@ (8003818 <MX_GPIO_Init+0x340>)
 8003792:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003794:	2300      	movs	r3, #0
 8003796:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(DRDY_3_GPIO_Port, &GPIO_InitStruct);
 8003798:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800379c:	4619      	mov	r1, r3
 800379e:	4819      	ldr	r0, [pc, #100]	@ (8003804 <MX_GPIO_Init+0x32c>)
 80037a0:	f001 fbc0 	bl	8004f24 <HAL_GPIO_Init>

	/*Configure GPIO pins : GPI_1_Pin GPI_2_Pin */
	GPIO_InitStruct.Pin = GPI_1_Pin|GPI_2_Pin;
 80037a4:	230c      	movs	r3, #12
 80037a6:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037a8:	2300      	movs	r3, #0
 80037aa:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ac:	2300      	movs	r3, #0
 80037ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037b4:	4619      	mov	r1, r3
 80037b6:	4817      	ldr	r0, [pc, #92]	@ (8003814 <MX_GPIO_Init+0x33c>)
 80037b8:	f001 fbb4 	bl	8004f24 <HAL_GPIO_Init>

	/*Configure GPIO pin : CS_3_Pin */
	GPIO_InitStruct.Pin = CS_3_Pin;
 80037bc:	2310      	movs	r3, #16
 80037be:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037c0:	2301      	movs	r3, #1
 80037c2:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c4:	2300      	movs	r3, #0
 80037c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037c8:	2303      	movs	r3, #3
 80037ca:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(CS_3_GPIO_Port, &GPIO_InitStruct);
 80037cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037d0:	4619      	mov	r1, r3
 80037d2:	4810      	ldr	r0, [pc, #64]	@ (8003814 <MX_GPIO_Init+0x33c>)
 80037d4:	f001 fba6 	bl	8004f24 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80037d8:	2200      	movs	r2, #0
 80037da:	2100      	movs	r1, #0
 80037dc:	200c      	movs	r0, #12
 80037de:	f001 fa23 	bl	8004c28 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80037e2:	200c      	movs	r0, #12
 80037e4:	f001 fa3a 	bl	8004c5c <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI7_IRQn, 0, 0);
 80037e8:	2200      	movs	r2, #0
 80037ea:	2100      	movs	r1, #0
 80037ec:	2012      	movs	r0, #18
 80037ee:	f001 fa1b 	bl	8004c28 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI7_IRQn);
 80037f2:	2012      	movs	r0, #18
 80037f4:	e012      	b.n	800381c <MX_GPIO_Init+0x344>
 80037f6:	bf00      	nop
 80037f8:	44020c00 	.word	0x44020c00
 80037fc:	42021400 	.word	0x42021400
 8003800:	42020800 	.word	0x42020800
 8003804:	42020000 	.word	0x42020000
 8003808:	42020400 	.word	0x42020400
 800380c:	42021000 	.word	0x42021000
 8003810:	42021800 	.word	0x42021800
 8003814:	42020c00 	.word	0x42020c00
 8003818:	10210000 	.word	0x10210000
 800381c:	f001 fa1e 	bl	8004c5c <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI11_IRQn, 0, 0);
 8003820:	2200      	movs	r2, #0
 8003822:	2100      	movs	r1, #0
 8003824:	2016      	movs	r0, #22
 8003826:	f001 f9ff 	bl	8004c28 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 800382a:	2016      	movs	r0, #22
 800382c:	f001 fa16 	bl	8004c5c <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8003830:	bf00      	nop
 8003832:	3738      	adds	r7, #56	@ 0x38
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <UART_InitAllHandlers>:

/* USER CODE BEGIN 4 */


void UART_InitAllHandlers(void) {
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
	// Start receiving data on all four UARTs
	HAL_UART_Receive_IT(&huart4, &uart1_rx_buffer[0], sizeof(uart1_rx_buffer));
 800383c:	2201      	movs	r2, #1
 800383e:	490a      	ldr	r1, [pc, #40]	@ (8003868 <UART_InitAllHandlers+0x30>)
 8003840:	480a      	ldr	r0, [pc, #40]	@ (800386c <UART_InitAllHandlers+0x34>)
 8003842:	f009 fbe1 	bl	800d008 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart8, &uart2_rx_buffer[0], sizeof(uart2_rx_buffer));
 8003846:	2201      	movs	r2, #1
 8003848:	4909      	ldr	r1, [pc, #36]	@ (8003870 <UART_InitAllHandlers+0x38>)
 800384a:	480a      	ldr	r0, [pc, #40]	@ (8003874 <UART_InitAllHandlers+0x3c>)
 800384c:	f009 fbdc 	bl	800d008 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart5, &uart3_rx_buffer[0], sizeof(uart3_rx_buffer));
 8003850:	2201      	movs	r2, #1
 8003852:	4909      	ldr	r1, [pc, #36]	@ (8003878 <UART_InitAllHandlers+0x40>)
 8003854:	4809      	ldr	r0, [pc, #36]	@ (800387c <UART_InitAllHandlers+0x44>)
 8003856:	f009 fbd7 	bl	800d008 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart10, &uart4_rx_buffer[0], sizeof(uart4_rx_buffer));
 800385a:	2201      	movs	r2, #1
 800385c:	4908      	ldr	r1, [pc, #32]	@ (8003880 <UART_InitAllHandlers+0x48>)
 800385e:	4809      	ldr	r0, [pc, #36]	@ (8003884 <UART_InitAllHandlers+0x4c>)
 8003860:	f009 fbd2 	bl	800d008 <HAL_UART_Receive_IT>
}
 8003864:	bf00      	nop
 8003866:	bd80      	pop	{r7, pc}
 8003868:	20005cb4 	.word	0x20005cb4
 800386c:	200059ac 	.word	0x200059ac
 8003870:	20005cb8 	.word	0x20005cb8
 8003874:	20005ad4 	.word	0x20005ad4
 8003878:	20005cbc 	.word	0x20005cbc
 800387c:	20005a40 	.word	0x20005a40
 8003880:	20005cc0 	.word	0x20005cc0
 8003884:	20005b68 	.word	0x20005b68

08003888 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]

	if (huart->Instance == UART4) {
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a97      	ldr	r2, [pc, #604]	@ (8003af4 <HAL_UART_RxCpltCallback+0x26c>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d169      	bne.n	800396e <HAL_UART_RxCpltCallback+0xe6>
		HAL_UART_Receive_IT(&huart4, &uart1_rx_buffer[0], sizeof(uart1_rx_buffer));
 800389a:	2201      	movs	r2, #1
 800389c:	4996      	ldr	r1, [pc, #600]	@ (8003af8 <HAL_UART_RxCpltCallback+0x270>)
 800389e:	4897      	ldr	r0, [pc, #604]	@ (8003afc <HAL_UART_RxCpltCallback+0x274>)
 80038a0:	f009 fbb2 	bl	800d008 <HAL_UART_Receive_IT>

		if(uart1_rx_buffer[0] == '#')//T
 80038a4:	4b94      	ldr	r3, [pc, #592]	@ (8003af8 <HAL_UART_RxCpltCallback+0x270>)
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	2b23      	cmp	r3, #35	@ 0x23
 80038aa:	d10e      	bne.n	80038ca <HAL_UART_RxCpltCallback+0x42>
		{
			command_str[command_str_index++] = uart1_rx_buffer[0] ;
 80038ac:	4b94      	ldr	r3, [pc, #592]	@ (8003b00 <HAL_UART_RxCpltCallback+0x278>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	1c5a      	adds	r2, r3, #1
 80038b2:	b2d1      	uxtb	r1, r2
 80038b4:	4a92      	ldr	r2, [pc, #584]	@ (8003b00 <HAL_UART_RxCpltCallback+0x278>)
 80038b6:	7011      	strb	r1, [r2, #0]
 80038b8:	461a      	mov	r2, r3
 80038ba:	4b8f      	ldr	r3, [pc, #572]	@ (8003af8 <HAL_UART_RxCpltCallback+0x270>)
 80038bc:	7819      	ldrb	r1, [r3, #0]
 80038be:	4b91      	ldr	r3, [pc, #580]	@ (8003b04 <HAL_UART_RxCpltCallback+0x27c>)
 80038c0:	5499      	strb	r1, [r3, r2]
			command_rcv  =1 ;
 80038c2:	4b91      	ldr	r3, [pc, #580]	@ (8003b08 <HAL_UART_RxCpltCallback+0x280>)
 80038c4:	2201      	movs	r2, #1
 80038c6:	701a      	strb	r2, [r3, #0]
 80038c8:	e018      	b.n	80038fc <HAL_UART_RxCpltCallback+0x74>

		}
		else if(command_rcv==1)
 80038ca:	4b8f      	ldr	r3, [pc, #572]	@ (8003b08 <HAL_UART_RxCpltCallback+0x280>)
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d114      	bne.n	80038fc <HAL_UART_RxCpltCallback+0x74>
		{
			command_str[command_str_index++] = uart1_rx_buffer[0] ;
 80038d2:	4b8b      	ldr	r3, [pc, #556]	@ (8003b00 <HAL_UART_RxCpltCallback+0x278>)
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	1c5a      	adds	r2, r3, #1
 80038d8:	b2d1      	uxtb	r1, r2
 80038da:	4a89      	ldr	r2, [pc, #548]	@ (8003b00 <HAL_UART_RxCpltCallback+0x278>)
 80038dc:	7011      	strb	r1, [r2, #0]
 80038de:	461a      	mov	r2, r3
 80038e0:	4b85      	ldr	r3, [pc, #532]	@ (8003af8 <HAL_UART_RxCpltCallback+0x270>)
 80038e2:	7819      	ldrb	r1, [r3, #0]
 80038e4:	4b87      	ldr	r3, [pc, #540]	@ (8003b04 <HAL_UART_RxCpltCallback+0x27c>)
 80038e6:	5499      	strb	r1, [r3, r2]
			if(command_str_index > 15)
 80038e8:	4b85      	ldr	r3, [pc, #532]	@ (8003b00 <HAL_UART_RxCpltCallback+0x278>)
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	2b0f      	cmp	r3, #15
 80038ee:	d905      	bls.n	80038fc <HAL_UART_RxCpltCallback+0x74>
			{
				command_str_index = 0 ;
 80038f0:	4b83      	ldr	r3, [pc, #524]	@ (8003b00 <HAL_UART_RxCpltCallback+0x278>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 80038f6:	4b84      	ldr	r3, [pc, #528]	@ (8003b08 <HAL_UART_RxCpltCallback+0x280>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	701a      	strb	r2, [r3, #0]
			}
		}
		if(command_rcv == 1 && uart1_rx_buffer[0] == '$')
 80038fc:	4b82      	ldr	r3, [pc, #520]	@ (8003b08 <HAL_UART_RxCpltCallback+0x280>)
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	2b01      	cmp	r3, #1
 8003902:	f040 81de 	bne.w	8003cc2 <HAL_UART_RxCpltCallback+0x43a>
 8003906:	4b7c      	ldr	r3, [pc, #496]	@ (8003af8 <HAL_UART_RxCpltCallback+0x270>)
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	2b24      	cmp	r3, #36	@ 0x24
 800390c:	f040 81d9 	bne.w	8003cc2 <HAL_UART_RxCpltCallback+0x43a>
		{
			if(command_str[command_str_index-1] == '$')
 8003910:	4b7b      	ldr	r3, [pc, #492]	@ (8003b00 <HAL_UART_RxCpltCallback+0x278>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	3b01      	subs	r3, #1
 8003916:	4a7b      	ldr	r2, [pc, #492]	@ (8003b04 <HAL_UART_RxCpltCallback+0x27c>)
 8003918:	5cd3      	ldrb	r3, [r2, r3]
 800391a:	2b24      	cmp	r3, #36	@ 0x24
 800391c:	d109      	bne.n	8003932 <HAL_UART_RxCpltCallback+0xaa>
			{
				ATP_test  = 1;
 800391e:	4b7b      	ldr	r3, [pc, #492]	@ (8003b0c <HAL_UART_RxCpltCallback+0x284>)
 8003920:	2201      	movs	r2, #1
 8003922:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 8003924:	4b76      	ldr	r3, [pc, #472]	@ (8003b00 <HAL_UART_RxCpltCallback+0x278>)
 8003926:	2200      	movs	r2, #0
 8003928:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 800392a:	4b77      	ldr	r3, [pc, #476]	@ (8003b08 <HAL_UART_RxCpltCallback+0x280>)
 800392c:	2200      	movs	r2, #0
 800392e:	701a      	strb	r2, [r3, #0]
				memset(command_str,0,sizeof(command_str));
			}
		}
	}

}
 8003930:	e1c7      	b.n	8003cc2 <HAL_UART_RxCpltCallback+0x43a>
			else if((command_str[1]=='2')&&(command_str[2]=='9'))
 8003932:	4b74      	ldr	r3, [pc, #464]	@ (8003b04 <HAL_UART_RxCpltCallback+0x27c>)
 8003934:	785b      	ldrb	r3, [r3, #1]
 8003936:	2b32      	cmp	r3, #50	@ 0x32
 8003938:	d10d      	bne.n	8003956 <HAL_UART_RxCpltCallback+0xce>
 800393a:	4b72      	ldr	r3, [pc, #456]	@ (8003b04 <HAL_UART_RxCpltCallback+0x27c>)
 800393c:	789b      	ldrb	r3, [r3, #2]
 800393e:	2b39      	cmp	r3, #57	@ 0x39
 8003940:	d109      	bne.n	8003956 <HAL_UART_RxCpltCallback+0xce>
				ATP_test  = 1;
 8003942:	4b72      	ldr	r3, [pc, #456]	@ (8003b0c <HAL_UART_RxCpltCallback+0x284>)
 8003944:	2201      	movs	r2, #1
 8003946:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 8003948:	4b6d      	ldr	r3, [pc, #436]	@ (8003b00 <HAL_UART_RxCpltCallback+0x278>)
 800394a:	2200      	movs	r2, #0
 800394c:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 800394e:	4b6e      	ldr	r3, [pc, #440]	@ (8003b08 <HAL_UART_RxCpltCallback+0x280>)
 8003950:	2200      	movs	r2, #0
 8003952:	701a      	strb	r2, [r3, #0]
 8003954:	e1b5      	b.n	8003cc2 <HAL_UART_RxCpltCallback+0x43a>
				command_str_index = 0 ;
 8003956:	4b6a      	ldr	r3, [pc, #424]	@ (8003b00 <HAL_UART_RxCpltCallback+0x278>)
 8003958:	2200      	movs	r2, #0
 800395a:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 800395c:	4b6a      	ldr	r3, [pc, #424]	@ (8003b08 <HAL_UART_RxCpltCallback+0x280>)
 800395e:	2200      	movs	r2, #0
 8003960:	701a      	strb	r2, [r3, #0]
				memset(command_str,0,sizeof(command_str));
 8003962:	220f      	movs	r2, #15
 8003964:	2100      	movs	r1, #0
 8003966:	4867      	ldr	r0, [pc, #412]	@ (8003b04 <HAL_UART_RxCpltCallback+0x27c>)
 8003968:	f00c fb65 	bl	8010036 <memset>
}
 800396c:	e1a9      	b.n	8003cc2 <HAL_UART_RxCpltCallback+0x43a>
	else if (huart->Instance == UART5) {
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a67      	ldr	r2, [pc, #412]	@ (8003b10 <HAL_UART_RxCpltCallback+0x288>)
 8003974:	4293      	cmp	r3, r2
 8003976:	f040 80d9 	bne.w	8003b2c <HAL_UART_RxCpltCallback+0x2a4>
		HAL_UART_Receive_IT(&huart5, &uart3_rx_buffer[0], 1);
 800397a:	2201      	movs	r2, #1
 800397c:	4965      	ldr	r1, [pc, #404]	@ (8003b14 <HAL_UART_RxCpltCallback+0x28c>)
 800397e:	4866      	ldr	r0, [pc, #408]	@ (8003b18 <HAL_UART_RxCpltCallback+0x290>)
 8003980:	f009 fb42 	bl	800d008 <HAL_UART_Receive_IT>
		if(uart3_rx_buffer[0] == '@' )//S
 8003984:	4b63      	ldr	r3, [pc, #396]	@ (8003b14 <HAL_UART_RxCpltCallback+0x28c>)
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	2b40      	cmp	r3, #64	@ 0x40
 800398a:	d111      	bne.n	80039b0 <HAL_UART_RxCpltCallback+0x128>
			time_str_length=0;
 800398c:	4b63      	ldr	r3, [pc, #396]	@ (8003b1c <HAL_UART_RxCpltCallback+0x294>)
 800398e:	2200      	movs	r2, #0
 8003990:	701a      	strb	r2, [r3, #0]
			time_str[time_str_length++] = uart3_rx_buffer[0];
 8003992:	4b62      	ldr	r3, [pc, #392]	@ (8003b1c <HAL_UART_RxCpltCallback+0x294>)
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	1c5a      	adds	r2, r3, #1
 8003998:	b2d1      	uxtb	r1, r2
 800399a:	4a60      	ldr	r2, [pc, #384]	@ (8003b1c <HAL_UART_RxCpltCallback+0x294>)
 800399c:	7011      	strb	r1, [r2, #0]
 800399e:	461a      	mov	r2, r3
 80039a0:	4b5c      	ldr	r3, [pc, #368]	@ (8003b14 <HAL_UART_RxCpltCallback+0x28c>)
 80039a2:	7819      	ldrb	r1, [r3, #0]
 80039a4:	4b5e      	ldr	r3, [pc, #376]	@ (8003b20 <HAL_UART_RxCpltCallback+0x298>)
 80039a6:	5499      	strb	r1, [r3, r2]
			time_rcv =1;
 80039a8:	4b5e      	ldr	r3, [pc, #376]	@ (8003b24 <HAL_UART_RxCpltCallback+0x29c>)
 80039aa:	2201      	movs	r2, #1
 80039ac:	701a      	strb	r2, [r3, #0]
 80039ae:	e018      	b.n	80039e2 <HAL_UART_RxCpltCallback+0x15a>
		else if(time_rcv==1)
 80039b0:	4b5c      	ldr	r3, [pc, #368]	@ (8003b24 <HAL_UART_RxCpltCallback+0x29c>)
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d114      	bne.n	80039e2 <HAL_UART_RxCpltCallback+0x15a>
			time_str[time_str_length++] = uart3_rx_buffer[0];
 80039b8:	4b58      	ldr	r3, [pc, #352]	@ (8003b1c <HAL_UART_RxCpltCallback+0x294>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	1c5a      	adds	r2, r3, #1
 80039be:	b2d1      	uxtb	r1, r2
 80039c0:	4a56      	ldr	r2, [pc, #344]	@ (8003b1c <HAL_UART_RxCpltCallback+0x294>)
 80039c2:	7011      	strb	r1, [r2, #0]
 80039c4:	461a      	mov	r2, r3
 80039c6:	4b53      	ldr	r3, [pc, #332]	@ (8003b14 <HAL_UART_RxCpltCallback+0x28c>)
 80039c8:	7819      	ldrb	r1, [r3, #0]
 80039ca:	4b55      	ldr	r3, [pc, #340]	@ (8003b20 <HAL_UART_RxCpltCallback+0x298>)
 80039cc:	5499      	strb	r1, [r3, r2]
			if(time_str_length > 22)
 80039ce:	4b53      	ldr	r3, [pc, #332]	@ (8003b1c <HAL_UART_RxCpltCallback+0x294>)
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	2b16      	cmp	r3, #22
 80039d4:	d905      	bls.n	80039e2 <HAL_UART_RxCpltCallback+0x15a>
				time_str_length = 0 ;
 80039d6:	4b51      	ldr	r3, [pc, #324]	@ (8003b1c <HAL_UART_RxCpltCallback+0x294>)
 80039d8:	2200      	movs	r2, #0
 80039da:	701a      	strb	r2, [r3, #0]
				time_rcv = 0 ;
 80039dc:	4b51      	ldr	r3, [pc, #324]	@ (8003b24 <HAL_UART_RxCpltCallback+0x29c>)
 80039de:	2200      	movs	r2, #0
 80039e0:	701a      	strb	r2, [r3, #0]
		if(uart3_rx_buffer[0] == '$' )//E
 80039e2:	4b4c      	ldr	r3, [pc, #304]	@ (8003b14 <HAL_UART_RxCpltCallback+0x28c>)
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	2b24      	cmp	r3, #36	@ 0x24
 80039e8:	d112      	bne.n	8003a10 <HAL_UART_RxCpltCallback+0x188>
			if(time_str_length == 21)
 80039ea:	4b4c      	ldr	r3, [pc, #304]	@ (8003b1c <HAL_UART_RxCpltCallback+0x294>)
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	2b15      	cmp	r3, #21
 80039f0:	d103      	bne.n	80039fa <HAL_UART_RxCpltCallback+0x172>
				time_set = 1;
 80039f2:	4b4d      	ldr	r3, [pc, #308]	@ (8003b28 <HAL_UART_RxCpltCallback+0x2a0>)
 80039f4:	2201      	movs	r2, #1
 80039f6:	701a      	strb	r2, [r3, #0]
 80039f8:	e00a      	b.n	8003a10 <HAL_UART_RxCpltCallback+0x188>
				time_rcv = 0 ;
 80039fa:	4b4a      	ldr	r3, [pc, #296]	@ (8003b24 <HAL_UART_RxCpltCallback+0x29c>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	701a      	strb	r2, [r3, #0]
				time_str_length = 0 ;
 8003a00:	4b46      	ldr	r3, [pc, #280]	@ (8003b1c <HAL_UART_RxCpltCallback+0x294>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	701a      	strb	r2, [r3, #0]
				memset(time_str,0,sizeof(time_str));
 8003a06:	2219      	movs	r2, #25
 8003a08:	2100      	movs	r1, #0
 8003a0a:	4845      	ldr	r0, [pc, #276]	@ (8003b20 <HAL_UART_RxCpltCallback+0x298>)
 8003a0c:	f00c fb13 	bl	8010036 <memset>
		if(uart3_rx_buffer[0] == '#')//T
 8003a10:	4b40      	ldr	r3, [pc, #256]	@ (8003b14 <HAL_UART_RxCpltCallback+0x28c>)
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	2b23      	cmp	r3, #35	@ 0x23
 8003a16:	d10e      	bne.n	8003a36 <HAL_UART_RxCpltCallback+0x1ae>
			command_str[command_str_index++] = uart3_rx_buffer[0] ;
 8003a18:	4b39      	ldr	r3, [pc, #228]	@ (8003b00 <HAL_UART_RxCpltCallback+0x278>)
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	1c5a      	adds	r2, r3, #1
 8003a1e:	b2d1      	uxtb	r1, r2
 8003a20:	4a37      	ldr	r2, [pc, #220]	@ (8003b00 <HAL_UART_RxCpltCallback+0x278>)
 8003a22:	7011      	strb	r1, [r2, #0]
 8003a24:	461a      	mov	r2, r3
 8003a26:	4b3b      	ldr	r3, [pc, #236]	@ (8003b14 <HAL_UART_RxCpltCallback+0x28c>)
 8003a28:	7819      	ldrb	r1, [r3, #0]
 8003a2a:	4b36      	ldr	r3, [pc, #216]	@ (8003b04 <HAL_UART_RxCpltCallback+0x27c>)
 8003a2c:	5499      	strb	r1, [r3, r2]
			command_rcv  =1 ;
 8003a2e:	4b36      	ldr	r3, [pc, #216]	@ (8003b08 <HAL_UART_RxCpltCallback+0x280>)
 8003a30:	2201      	movs	r2, #1
 8003a32:	701a      	strb	r2, [r3, #0]
 8003a34:	e018      	b.n	8003a68 <HAL_UART_RxCpltCallback+0x1e0>
		else if(command_rcv==1)
 8003a36:	4b34      	ldr	r3, [pc, #208]	@ (8003b08 <HAL_UART_RxCpltCallback+0x280>)
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d114      	bne.n	8003a68 <HAL_UART_RxCpltCallback+0x1e0>
			command_str[command_str_index++] = uart3_rx_buffer[0] ;
 8003a3e:	4b30      	ldr	r3, [pc, #192]	@ (8003b00 <HAL_UART_RxCpltCallback+0x278>)
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	1c5a      	adds	r2, r3, #1
 8003a44:	b2d1      	uxtb	r1, r2
 8003a46:	4a2e      	ldr	r2, [pc, #184]	@ (8003b00 <HAL_UART_RxCpltCallback+0x278>)
 8003a48:	7011      	strb	r1, [r2, #0]
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	4b31      	ldr	r3, [pc, #196]	@ (8003b14 <HAL_UART_RxCpltCallback+0x28c>)
 8003a4e:	7819      	ldrb	r1, [r3, #0]
 8003a50:	4b2c      	ldr	r3, [pc, #176]	@ (8003b04 <HAL_UART_RxCpltCallback+0x27c>)
 8003a52:	5499      	strb	r1, [r3, r2]
			if(command_str_index > 15)
 8003a54:	4b2a      	ldr	r3, [pc, #168]	@ (8003b00 <HAL_UART_RxCpltCallback+0x278>)
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	2b0f      	cmp	r3, #15
 8003a5a:	d905      	bls.n	8003a68 <HAL_UART_RxCpltCallback+0x1e0>
				command_str_index = 0 ;
 8003a5c:	4b28      	ldr	r3, [pc, #160]	@ (8003b00 <HAL_UART_RxCpltCallback+0x278>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8003a62:	4b29      	ldr	r3, [pc, #164]	@ (8003b08 <HAL_UART_RxCpltCallback+0x280>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	701a      	strb	r2, [r3, #0]
		if(command_rcv == 1 && uart3_rx_buffer[0] == '$')
 8003a68:	4b27      	ldr	r3, [pc, #156]	@ (8003b08 <HAL_UART_RxCpltCallback+0x280>)
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	f040 8128 	bne.w	8003cc2 <HAL_UART_RxCpltCallback+0x43a>
 8003a72:	4b28      	ldr	r3, [pc, #160]	@ (8003b14 <HAL_UART_RxCpltCallback+0x28c>)
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	2b24      	cmp	r3, #36	@ 0x24
 8003a78:	f040 8123 	bne.w	8003cc2 <HAL_UART_RxCpltCallback+0x43a>
			if(command_str_index < 4)
 8003a7c:	4b20      	ldr	r3, [pc, #128]	@ (8003b00 <HAL_UART_RxCpltCallback+0x278>)
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	2b03      	cmp	r3, #3
 8003a82:	d80b      	bhi.n	8003a9c <HAL_UART_RxCpltCallback+0x214>
				command_str_index = 0 ;
 8003a84:	4b1e      	ldr	r3, [pc, #120]	@ (8003b00 <HAL_UART_RxCpltCallback+0x278>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8003a8a:	4b1f      	ldr	r3, [pc, #124]	@ (8003b08 <HAL_UART_RxCpltCallback+0x280>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	701a      	strb	r2, [r3, #0]
				memset(command_str,0,sizeof(command_str));
 8003a90:	220f      	movs	r2, #15
 8003a92:	2100      	movs	r1, #0
 8003a94:	481b      	ldr	r0, [pc, #108]	@ (8003b04 <HAL_UART_RxCpltCallback+0x27c>)
 8003a96:	f00c face 	bl	8010036 <memset>
}
 8003a9a:	e112      	b.n	8003cc2 <HAL_UART_RxCpltCallback+0x43a>
			else if(command_str_index == 4)
 8003a9c:	4b18      	ldr	r3, [pc, #96]	@ (8003b00 <HAL_UART_RxCpltCallback+0x278>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	2b04      	cmp	r3, #4
 8003aa2:	d109      	bne.n	8003ab8 <HAL_UART_RxCpltCallback+0x230>
				ATP_test  = 1;
 8003aa4:	4b19      	ldr	r3, [pc, #100]	@ (8003b0c <HAL_UART_RxCpltCallback+0x284>)
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 8003aaa:	4b15      	ldr	r3, [pc, #84]	@ (8003b00 <HAL_UART_RxCpltCallback+0x278>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8003ab0:	4b15      	ldr	r3, [pc, #84]	@ (8003b08 <HAL_UART_RxCpltCallback+0x280>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	701a      	strb	r2, [r3, #0]
}
 8003ab6:	e104      	b.n	8003cc2 <HAL_UART_RxCpltCallback+0x43a>
			else if((command_str[1]=='2')&&(command_str[2]=='6'))
 8003ab8:	4b12      	ldr	r3, [pc, #72]	@ (8003b04 <HAL_UART_RxCpltCallback+0x27c>)
 8003aba:	785b      	ldrb	r3, [r3, #1]
 8003abc:	2b32      	cmp	r3, #50	@ 0x32
 8003abe:	d10d      	bne.n	8003adc <HAL_UART_RxCpltCallback+0x254>
 8003ac0:	4b10      	ldr	r3, [pc, #64]	@ (8003b04 <HAL_UART_RxCpltCallback+0x27c>)
 8003ac2:	789b      	ldrb	r3, [r3, #2]
 8003ac4:	2b36      	cmp	r3, #54	@ 0x36
 8003ac6:	d109      	bne.n	8003adc <HAL_UART_RxCpltCallback+0x254>
				ATP_test  = 1;
 8003ac8:	4b10      	ldr	r3, [pc, #64]	@ (8003b0c <HAL_UART_RxCpltCallback+0x284>)
 8003aca:	2201      	movs	r2, #1
 8003acc:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 8003ace:	4b0c      	ldr	r3, [pc, #48]	@ (8003b00 <HAL_UART_RxCpltCallback+0x278>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8003ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8003b08 <HAL_UART_RxCpltCallback+0x280>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	701a      	strb	r2, [r3, #0]
 8003ada:	e0f2      	b.n	8003cc2 <HAL_UART_RxCpltCallback+0x43a>
				command_str_index = 0 ;
 8003adc:	4b08      	ldr	r3, [pc, #32]	@ (8003b00 <HAL_UART_RxCpltCallback+0x278>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8003ae2:	4b09      	ldr	r3, [pc, #36]	@ (8003b08 <HAL_UART_RxCpltCallback+0x280>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	701a      	strb	r2, [r3, #0]
				memset(command_str,0,sizeof(command_str));
 8003ae8:	220f      	movs	r2, #15
 8003aea:	2100      	movs	r1, #0
 8003aec:	4805      	ldr	r0, [pc, #20]	@ (8003b04 <HAL_UART_RxCpltCallback+0x27c>)
 8003aee:	f00c faa2 	bl	8010036 <memset>
}
 8003af2:	e0e6      	b.n	8003cc2 <HAL_UART_RxCpltCallback+0x43a>
 8003af4:	40004c00 	.word	0x40004c00
 8003af8:	20005cb4 	.word	0x20005cb4
 8003afc:	200059ac 	.word	0x200059ac
 8003b00:	200004c4 	.word	0x200004c4
 8003b04:	200004b0 	.word	0x200004b0
 8003b08:	20005cb2 	.word	0x20005cb2
 8003b0c:	200004c5 	.word	0x200004c5
 8003b10:	40005000 	.word	0x40005000
 8003b14:	20005cbc 	.word	0x20005cbc
 8003b18:	20005a40 	.word	0x20005a40
 8003b1c:	20005cb1 	.word	0x20005cb1
 8003b20:	20005c98 	.word	0x20005c98
 8003b24:	20005cb9 	.word	0x20005cb9
 8003b28:	20005cba 	.word	0x20005cba
	else if (huart->Instance == UART8) {
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a66      	ldr	r2, [pc, #408]	@ (8003ccc <HAL_UART_RxCpltCallback+0x444>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d158      	bne.n	8003be8 <HAL_UART_RxCpltCallback+0x360>
		HAL_UART_Receive_IT(&huart8, &uart2_rx_buffer[0], sizeof(uart2_rx_buffer));
 8003b36:	2201      	movs	r2, #1
 8003b38:	4965      	ldr	r1, [pc, #404]	@ (8003cd0 <HAL_UART_RxCpltCallback+0x448>)
 8003b3a:	4866      	ldr	r0, [pc, #408]	@ (8003cd4 <HAL_UART_RxCpltCallback+0x44c>)
 8003b3c:	f009 fa64 	bl	800d008 <HAL_UART_Receive_IT>
		if(uart2_rx_buffer[0] == '#')//T
 8003b40:	4b63      	ldr	r3, [pc, #396]	@ (8003cd0 <HAL_UART_RxCpltCallback+0x448>)
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	2b23      	cmp	r3, #35	@ 0x23
 8003b46:	d10e      	bne.n	8003b66 <HAL_UART_RxCpltCallback+0x2de>
			command_str[command_str_index++] = uart2_rx_buffer[0] ;
 8003b48:	4b63      	ldr	r3, [pc, #396]	@ (8003cd8 <HAL_UART_RxCpltCallback+0x450>)
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	1c5a      	adds	r2, r3, #1
 8003b4e:	b2d1      	uxtb	r1, r2
 8003b50:	4a61      	ldr	r2, [pc, #388]	@ (8003cd8 <HAL_UART_RxCpltCallback+0x450>)
 8003b52:	7011      	strb	r1, [r2, #0]
 8003b54:	461a      	mov	r2, r3
 8003b56:	4b5e      	ldr	r3, [pc, #376]	@ (8003cd0 <HAL_UART_RxCpltCallback+0x448>)
 8003b58:	7819      	ldrb	r1, [r3, #0]
 8003b5a:	4b60      	ldr	r3, [pc, #384]	@ (8003cdc <HAL_UART_RxCpltCallback+0x454>)
 8003b5c:	5499      	strb	r1, [r3, r2]
			command_rcv  =1 ;
 8003b5e:	4b60      	ldr	r3, [pc, #384]	@ (8003ce0 <HAL_UART_RxCpltCallback+0x458>)
 8003b60:	2201      	movs	r2, #1
 8003b62:	701a      	strb	r2, [r3, #0]
 8003b64:	e018      	b.n	8003b98 <HAL_UART_RxCpltCallback+0x310>
		else if(command_rcv==1)
 8003b66:	4b5e      	ldr	r3, [pc, #376]	@ (8003ce0 <HAL_UART_RxCpltCallback+0x458>)
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d114      	bne.n	8003b98 <HAL_UART_RxCpltCallback+0x310>
			command_str[command_str_index++] = uart2_rx_buffer[0] ;
 8003b6e:	4b5a      	ldr	r3, [pc, #360]	@ (8003cd8 <HAL_UART_RxCpltCallback+0x450>)
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	1c5a      	adds	r2, r3, #1
 8003b74:	b2d1      	uxtb	r1, r2
 8003b76:	4a58      	ldr	r2, [pc, #352]	@ (8003cd8 <HAL_UART_RxCpltCallback+0x450>)
 8003b78:	7011      	strb	r1, [r2, #0]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	4b54      	ldr	r3, [pc, #336]	@ (8003cd0 <HAL_UART_RxCpltCallback+0x448>)
 8003b7e:	7819      	ldrb	r1, [r3, #0]
 8003b80:	4b56      	ldr	r3, [pc, #344]	@ (8003cdc <HAL_UART_RxCpltCallback+0x454>)
 8003b82:	5499      	strb	r1, [r3, r2]
			if(command_str_index > 15)
 8003b84:	4b54      	ldr	r3, [pc, #336]	@ (8003cd8 <HAL_UART_RxCpltCallback+0x450>)
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b0f      	cmp	r3, #15
 8003b8a:	d905      	bls.n	8003b98 <HAL_UART_RxCpltCallback+0x310>
				command_str_index = 0 ;
 8003b8c:	4b52      	ldr	r3, [pc, #328]	@ (8003cd8 <HAL_UART_RxCpltCallback+0x450>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8003b92:	4b53      	ldr	r3, [pc, #332]	@ (8003ce0 <HAL_UART_RxCpltCallback+0x458>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	701a      	strb	r2, [r3, #0]
		if(command_rcv == 1 && uart2_rx_buffer[0] == '$')
 8003b98:	4b51      	ldr	r3, [pc, #324]	@ (8003ce0 <HAL_UART_RxCpltCallback+0x458>)
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	f040 8090 	bne.w	8003cc2 <HAL_UART_RxCpltCallback+0x43a>
 8003ba2:	4b4b      	ldr	r3, [pc, #300]	@ (8003cd0 <HAL_UART_RxCpltCallback+0x448>)
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	2b24      	cmp	r3, #36	@ 0x24
 8003ba8:	f040 808b 	bne.w	8003cc2 <HAL_UART_RxCpltCallback+0x43a>
			if((command_str[1]=='2')&&(command_str[2]=='7'))
 8003bac:	4b4b      	ldr	r3, [pc, #300]	@ (8003cdc <HAL_UART_RxCpltCallback+0x454>)
 8003bae:	785b      	ldrb	r3, [r3, #1]
 8003bb0:	2b32      	cmp	r3, #50	@ 0x32
 8003bb2:	d10d      	bne.n	8003bd0 <HAL_UART_RxCpltCallback+0x348>
 8003bb4:	4b49      	ldr	r3, [pc, #292]	@ (8003cdc <HAL_UART_RxCpltCallback+0x454>)
 8003bb6:	789b      	ldrb	r3, [r3, #2]
 8003bb8:	2b37      	cmp	r3, #55	@ 0x37
 8003bba:	d109      	bne.n	8003bd0 <HAL_UART_RxCpltCallback+0x348>
				ATP_test  = 1;
 8003bbc:	4b49      	ldr	r3, [pc, #292]	@ (8003ce4 <HAL_UART_RxCpltCallback+0x45c>)
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 8003bc2:	4b45      	ldr	r3, [pc, #276]	@ (8003cd8 <HAL_UART_RxCpltCallback+0x450>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8003bc8:	4b45      	ldr	r3, [pc, #276]	@ (8003ce0 <HAL_UART_RxCpltCallback+0x458>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	701a      	strb	r2, [r3, #0]
 8003bce:	e078      	b.n	8003cc2 <HAL_UART_RxCpltCallback+0x43a>
				command_str_index = 0 ;
 8003bd0:	4b41      	ldr	r3, [pc, #260]	@ (8003cd8 <HAL_UART_RxCpltCallback+0x450>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8003bd6:	4b42      	ldr	r3, [pc, #264]	@ (8003ce0 <HAL_UART_RxCpltCallback+0x458>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	701a      	strb	r2, [r3, #0]
				memset(command_str,0,sizeof(command_str));
 8003bdc:	220f      	movs	r2, #15
 8003bde:	2100      	movs	r1, #0
 8003be0:	483e      	ldr	r0, [pc, #248]	@ (8003cdc <HAL_UART_RxCpltCallback+0x454>)
 8003be2:	f00c fa28 	bl	8010036 <memset>
}
 8003be6:	e06c      	b.n	8003cc2 <HAL_UART_RxCpltCallback+0x43a>
	else if (huart->Instance == USART10) {
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a3e      	ldr	r2, [pc, #248]	@ (8003ce8 <HAL_UART_RxCpltCallback+0x460>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d167      	bne.n	8003cc2 <HAL_UART_RxCpltCallback+0x43a>
		HAL_UART_Receive_IT(&huart10, &uart4_rx_buffer[0], sizeof(uart4_rx_buffer));
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	493d      	ldr	r1, [pc, #244]	@ (8003cec <HAL_UART_RxCpltCallback+0x464>)
 8003bf6:	483e      	ldr	r0, [pc, #248]	@ (8003cf0 <HAL_UART_RxCpltCallback+0x468>)
 8003bf8:	f009 fa06 	bl	800d008 <HAL_UART_Receive_IT>
		if(uart4_rx_buffer[0] == '#')//T
 8003bfc:	4b3b      	ldr	r3, [pc, #236]	@ (8003cec <HAL_UART_RxCpltCallback+0x464>)
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2b23      	cmp	r3, #35	@ 0x23
 8003c02:	d10e      	bne.n	8003c22 <HAL_UART_RxCpltCallback+0x39a>
			command_str[command_str_index++] = uart4_rx_buffer[0] ;
 8003c04:	4b34      	ldr	r3, [pc, #208]	@ (8003cd8 <HAL_UART_RxCpltCallback+0x450>)
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	1c5a      	adds	r2, r3, #1
 8003c0a:	b2d1      	uxtb	r1, r2
 8003c0c:	4a32      	ldr	r2, [pc, #200]	@ (8003cd8 <HAL_UART_RxCpltCallback+0x450>)
 8003c0e:	7011      	strb	r1, [r2, #0]
 8003c10:	461a      	mov	r2, r3
 8003c12:	4b36      	ldr	r3, [pc, #216]	@ (8003cec <HAL_UART_RxCpltCallback+0x464>)
 8003c14:	7819      	ldrb	r1, [r3, #0]
 8003c16:	4b31      	ldr	r3, [pc, #196]	@ (8003cdc <HAL_UART_RxCpltCallback+0x454>)
 8003c18:	5499      	strb	r1, [r3, r2]
			command_rcv  =1 ;
 8003c1a:	4b31      	ldr	r3, [pc, #196]	@ (8003ce0 <HAL_UART_RxCpltCallback+0x458>)
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	701a      	strb	r2, [r3, #0]
 8003c20:	e018      	b.n	8003c54 <HAL_UART_RxCpltCallback+0x3cc>
		else if(command_rcv==1)
 8003c22:	4b2f      	ldr	r3, [pc, #188]	@ (8003ce0 <HAL_UART_RxCpltCallback+0x458>)
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d114      	bne.n	8003c54 <HAL_UART_RxCpltCallback+0x3cc>
			command_str[command_str_index++] = uart4_rx_buffer[0] ;
 8003c2a:	4b2b      	ldr	r3, [pc, #172]	@ (8003cd8 <HAL_UART_RxCpltCallback+0x450>)
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	1c5a      	adds	r2, r3, #1
 8003c30:	b2d1      	uxtb	r1, r2
 8003c32:	4a29      	ldr	r2, [pc, #164]	@ (8003cd8 <HAL_UART_RxCpltCallback+0x450>)
 8003c34:	7011      	strb	r1, [r2, #0]
 8003c36:	461a      	mov	r2, r3
 8003c38:	4b2c      	ldr	r3, [pc, #176]	@ (8003cec <HAL_UART_RxCpltCallback+0x464>)
 8003c3a:	7819      	ldrb	r1, [r3, #0]
 8003c3c:	4b27      	ldr	r3, [pc, #156]	@ (8003cdc <HAL_UART_RxCpltCallback+0x454>)
 8003c3e:	5499      	strb	r1, [r3, r2]
			if(command_str_index > 15)
 8003c40:	4b25      	ldr	r3, [pc, #148]	@ (8003cd8 <HAL_UART_RxCpltCallback+0x450>)
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	2b0f      	cmp	r3, #15
 8003c46:	d905      	bls.n	8003c54 <HAL_UART_RxCpltCallback+0x3cc>
				command_str_index = 0 ;
 8003c48:	4b23      	ldr	r3, [pc, #140]	@ (8003cd8 <HAL_UART_RxCpltCallback+0x450>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8003c4e:	4b24      	ldr	r3, [pc, #144]	@ (8003ce0 <HAL_UART_RxCpltCallback+0x458>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	701a      	strb	r2, [r3, #0]
		if(command_rcv == 1 && uart4_rx_buffer[0] == '$')
 8003c54:	4b22      	ldr	r3, [pc, #136]	@ (8003ce0 <HAL_UART_RxCpltCallback+0x458>)
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d132      	bne.n	8003cc2 <HAL_UART_RxCpltCallback+0x43a>
 8003c5c:	4b23      	ldr	r3, [pc, #140]	@ (8003cec <HAL_UART_RxCpltCallback+0x464>)
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	2b24      	cmp	r3, #36	@ 0x24
 8003c62:	d12e      	bne.n	8003cc2 <HAL_UART_RxCpltCallback+0x43a>
			if(command_str[command_str_index-1] == '$')
 8003c64:	4b1c      	ldr	r3, [pc, #112]	@ (8003cd8 <HAL_UART_RxCpltCallback+0x450>)
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	4a1c      	ldr	r2, [pc, #112]	@ (8003cdc <HAL_UART_RxCpltCallback+0x454>)
 8003c6c:	5cd3      	ldrb	r3, [r2, r3]
 8003c6e:	2b24      	cmp	r3, #36	@ 0x24
 8003c70:	d109      	bne.n	8003c86 <HAL_UART_RxCpltCallback+0x3fe>
				ATP_test  = 1;
 8003c72:	4b1c      	ldr	r3, [pc, #112]	@ (8003ce4 <HAL_UART_RxCpltCallback+0x45c>)
 8003c74:	2201      	movs	r2, #1
 8003c76:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 8003c78:	4b17      	ldr	r3, [pc, #92]	@ (8003cd8 <HAL_UART_RxCpltCallback+0x450>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8003c7e:	4b18      	ldr	r3, [pc, #96]	@ (8003ce0 <HAL_UART_RxCpltCallback+0x458>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	701a      	strb	r2, [r3, #0]
}
 8003c84:	e01d      	b.n	8003cc2 <HAL_UART_RxCpltCallback+0x43a>
			else if((command_str[1]=='2')&&(command_str[2]=='8'))
 8003c86:	4b15      	ldr	r3, [pc, #84]	@ (8003cdc <HAL_UART_RxCpltCallback+0x454>)
 8003c88:	785b      	ldrb	r3, [r3, #1]
 8003c8a:	2b32      	cmp	r3, #50	@ 0x32
 8003c8c:	d10d      	bne.n	8003caa <HAL_UART_RxCpltCallback+0x422>
 8003c8e:	4b13      	ldr	r3, [pc, #76]	@ (8003cdc <HAL_UART_RxCpltCallback+0x454>)
 8003c90:	789b      	ldrb	r3, [r3, #2]
 8003c92:	2b38      	cmp	r3, #56	@ 0x38
 8003c94:	d109      	bne.n	8003caa <HAL_UART_RxCpltCallback+0x422>
				ATP_test  = 1;
 8003c96:	4b13      	ldr	r3, [pc, #76]	@ (8003ce4 <HAL_UART_RxCpltCallback+0x45c>)
 8003c98:	2201      	movs	r2, #1
 8003c9a:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 8003c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8003cd8 <HAL_UART_RxCpltCallback+0x450>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8003ca2:	4b0f      	ldr	r3, [pc, #60]	@ (8003ce0 <HAL_UART_RxCpltCallback+0x458>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	701a      	strb	r2, [r3, #0]
 8003ca8:	e00b      	b.n	8003cc2 <HAL_UART_RxCpltCallback+0x43a>
				command_str_index = 0 ;
 8003caa:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd8 <HAL_UART_RxCpltCallback+0x450>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8003cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ce0 <HAL_UART_RxCpltCallback+0x458>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	701a      	strb	r2, [r3, #0]
				memset(command_str,0,sizeof(command_str));
 8003cb6:	220f      	movs	r2, #15
 8003cb8:	2100      	movs	r1, #0
 8003cba:	4808      	ldr	r0, [pc, #32]	@ (8003cdc <HAL_UART_RxCpltCallback+0x454>)
 8003cbc:	f00c f9bb 	bl	8010036 <memset>
}
 8003cc0:	e7ff      	b.n	8003cc2 <HAL_UART_RxCpltCallback+0x43a>
 8003cc2:	bf00      	nop
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	40007c00 	.word	0x40007c00
 8003cd0:	20005cb8 	.word	0x20005cb8
 8003cd4:	20005ad4 	.word	0x20005ad4
 8003cd8:	200004c4 	.word	0x200004c4
 8003cdc:	200004b0 	.word	0x200004b0
 8003ce0:	20005cb2 	.word	0x20005cb2
 8003ce4:	200004c5 	.word	0x200004c5
 8003ce8:	40006800 	.word	0x40006800
 8003cec:	20005cc0 	.word	0x20005cc0
 8003cf0:	20005b68 	.word	0x20005b68

08003cf4 <HAL_GPIO_EXTI_Falling_Callback>:



// User-defined callback to handle the data-ready event
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	80fb      	strh	r3, [r7, #6]
		//HAL_UART_Transmit_IT(&huart8, "DR_3\n\r", strlen("DR_1\n\r"));
		//HAL_Delay(1);
		// Data ready logic
		// For example, read data from a sensor using SPI/I2C
	}
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d0e:	b672      	cpsid	i
}
 8003d10:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003d12:	bf00      	nop
 8003d14:	e7fd      	b.n	8003d12 <Error_Handler+0x8>

08003d16 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d16:	b480      	push	{r7}
 8003d18:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d1a:	bf00      	nop
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b0d0      	sub	sp, #320	@ 0x140
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003d2e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003d32:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d34:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	605a      	str	r2, [r3, #4]
 8003d3e:	609a      	str	r2, [r3, #8]
 8003d40:	60da      	str	r2, [r3, #12]
 8003d42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003d44:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003d48:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8003d52:	461a      	mov	r2, r3
 8003d54:	2100      	movs	r1, #0
 8003d56:	f00c f96e 	bl	8010036 <memset>
  if(hspi->Instance==SPI2)
 8003d5a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003d5e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a9c      	ldr	r2, [pc, #624]	@ (8003fd8 <HAL_SPI_MspInit+0x2b4>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d15f      	bne.n	8003e2c <HAL_SPI_MspInit+0x108>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8003d6c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003d70:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8003d74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d78:	f04f 0300 	mov.w	r3, #0
 8003d7c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi2ClockSelection = RCC_SPI2CLKSOURCE_PLL1Q;
 8003d80:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003d84:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d8e:	f107 0320 	add.w	r3, r7, #32
 8003d92:	4618      	mov	r0, r3
 8003d94:	f003 f8fa 	bl	8006f8c <HAL_RCCEx_PeriphCLKConfig>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <HAL_SPI_MspInit+0x7e>
    {
      Error_Handler();
 8003d9e:	f7ff ffb4 	bl	8003d0a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003da2:	4b8e      	ldr	r3, [pc, #568]	@ (8003fdc <HAL_SPI_MspInit+0x2b8>)
 8003da4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003da8:	4a8c      	ldr	r2, [pc, #560]	@ (8003fdc <HAL_SPI_MspInit+0x2b8>)
 8003daa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003dae:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003db2:	4b8a      	ldr	r3, [pc, #552]	@ (8003fdc <HAL_SPI_MspInit+0x2b8>)
 8003db4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003db8:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8003dbc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003dc0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003dc4:	601a      	str	r2, [r3, #0]
 8003dc6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003dca:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003dce:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dd0:	4b82      	ldr	r3, [pc, #520]	@ (8003fdc <HAL_SPI_MspInit+0x2b8>)
 8003dd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003dd6:	4a81      	ldr	r2, [pc, #516]	@ (8003fdc <HAL_SPI_MspInit+0x2b8>)
 8003dd8:	f043 0302 	orr.w	r3, r3, #2
 8003ddc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003de0:	4b7e      	ldr	r3, [pc, #504]	@ (8003fdc <HAL_SPI_MspInit+0x2b8>)
 8003de2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003de6:	f003 0202 	and.w	r2, r3, #2
 8003dea:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003dee:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003df8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003dfc:	681b      	ldr	r3, [r3, #0]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SCKL_2_Pin|MISO_2_Pin|MOSI_2_Pin;
 8003dfe:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8003e02:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e06:	2302      	movs	r3, #2
 8003e08:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e12:	2300      	movs	r3, #0
 8003e14:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003e18:	2305      	movs	r3, #5
 8003e1a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e1e:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8003e22:	4619      	mov	r1, r3
 8003e24:	486e      	ldr	r0, [pc, #440]	@ (8003fe0 <HAL_SPI_MspInit+0x2bc>)
 8003e26:	f001 f87d 	bl	8004f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8003e2a:	e0d0      	b.n	8003fce <HAL_SPI_MspInit+0x2aa>
  else if(hspi->Instance==SPI3)
 8003e2c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003e30:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a6a      	ldr	r2, [pc, #424]	@ (8003fe4 <HAL_SPI_MspInit+0x2c0>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d15f      	bne.n	8003efe <HAL_SPI_MspInit+0x1da>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8003e3e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003e42:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8003e46:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003e4a:	f04f 0300 	mov.w	r3, #0
 8003e4e:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi3ClockSelection = RCC_SPI3CLKSOURCE_PLL1Q;
 8003e52:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003e56:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003e60:	f107 0320 	add.w	r3, r7, #32
 8003e64:	4618      	mov	r0, r3
 8003e66:	f003 f891 	bl	8006f8c <HAL_RCCEx_PeriphCLKConfig>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <HAL_SPI_MspInit+0x150>
      Error_Handler();
 8003e70:	f7ff ff4b 	bl	8003d0a <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003e74:	4b59      	ldr	r3, [pc, #356]	@ (8003fdc <HAL_SPI_MspInit+0x2b8>)
 8003e76:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e7a:	4a58      	ldr	r2, [pc, #352]	@ (8003fdc <HAL_SPI_MspInit+0x2b8>)
 8003e7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e80:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003e84:	4b55      	ldr	r3, [pc, #340]	@ (8003fdc <HAL_SPI_MspInit+0x2b8>)
 8003e86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e8a:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 8003e8e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003e92:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003e96:	601a      	str	r2, [r3, #0]
 8003e98:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003e9c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003ea0:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ea2:	4b4e      	ldr	r3, [pc, #312]	@ (8003fdc <HAL_SPI_MspInit+0x2b8>)
 8003ea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ea8:	4a4c      	ldr	r2, [pc, #304]	@ (8003fdc <HAL_SPI_MspInit+0x2b8>)
 8003eaa:	f043 0304 	orr.w	r3, r3, #4
 8003eae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003eb2:	4b4a      	ldr	r3, [pc, #296]	@ (8003fdc <HAL_SPI_MspInit+0x2b8>)
 8003eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003eb8:	f003 0204 	and.w	r2, r3, #4
 8003ebc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003ec0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003ec4:	601a      	str	r2, [r3, #0]
 8003ec6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003eca:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003ece:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = SCKL_3_Pin|MISO_3_Pin|MOSI_3_Pin;
 8003ed0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8003ed4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ed8:	2302      	movs	r3, #2
 8003eda:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003eea:	2306      	movs	r3, #6
 8003eec:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ef0:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	483c      	ldr	r0, [pc, #240]	@ (8003fe8 <HAL_SPI_MspInit+0x2c4>)
 8003ef8:	f001 f814 	bl	8004f24 <HAL_GPIO_Init>
}
 8003efc:	e067      	b.n	8003fce <HAL_SPI_MspInit+0x2aa>
  else if(hspi->Instance==SPI5)
 8003efe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003f02:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a38      	ldr	r2, [pc, #224]	@ (8003fec <HAL_SPI_MspInit+0x2c8>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d15e      	bne.n	8003fce <HAL_SPI_MspInit+0x2aa>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8003f10:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003f14:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8003f18:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003f1c:	f04f 0300 	mov.w	r3, #0
 8003f20:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi5ClockSelection = RCC_SPI5CLKSOURCE_PCLK3;
 8003f24:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003f28:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f32:	f107 0320 	add.w	r3, r7, #32
 8003f36:	4618      	mov	r0, r3
 8003f38:	f003 f828 	bl	8006f8c <HAL_RCCEx_PeriphCLKConfig>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <HAL_SPI_MspInit+0x222>
      Error_Handler();
 8003f42:	f7ff fee2 	bl	8003d0a <Error_Handler>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003f46:	4b25      	ldr	r3, [pc, #148]	@ (8003fdc <HAL_SPI_MspInit+0x2b8>)
 8003f48:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003f4c:	4a23      	ldr	r2, [pc, #140]	@ (8003fdc <HAL_SPI_MspInit+0x2b8>)
 8003f4e:	f043 0320 	orr.w	r3, r3, #32
 8003f52:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8003f56:	4b21      	ldr	r3, [pc, #132]	@ (8003fdc <HAL_SPI_MspInit+0x2b8>)
 8003f58:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003f5c:	f003 0220 	and.w	r2, r3, #32
 8003f60:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003f64:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003f6e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003f72:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f74:	4b19      	ldr	r3, [pc, #100]	@ (8003fdc <HAL_SPI_MspInit+0x2b8>)
 8003f76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f7a:	4a18      	ldr	r2, [pc, #96]	@ (8003fdc <HAL_SPI_MspInit+0x2b8>)
 8003f7c:	f043 0320 	orr.w	r3, r3, #32
 8003f80:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003f84:	4b15      	ldr	r3, [pc, #84]	@ (8003fdc <HAL_SPI_MspInit+0x2b8>)
 8003f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f8a:	f003 0220 	and.w	r2, r3, #32
 8003f8e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003f92:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003f9c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003fa0:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = SCKL_1_Pin|MISO_1_Pin|MOSI_1_Pin;
 8003fa2:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003fa6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003faa:	2302      	movs	r3, #2
 8003fac:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003fbc:	2305      	movs	r3, #5
 8003fbe:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003fc2:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	4809      	ldr	r0, [pc, #36]	@ (8003ff0 <HAL_SPI_MspInit+0x2cc>)
 8003fca:	f000 ffab 	bl	8004f24 <HAL_GPIO_Init>
}
 8003fce:	bf00      	nop
 8003fd0:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	40003800 	.word	0x40003800
 8003fdc:	44020c00 	.word	0x44020c00
 8003fe0:	42020400 	.word	0x42020400
 8003fe4:	40003c00 	.word	0x40003c00
 8003fe8:	42020800 	.word	0x42020800
 8003fec:	44002000 	.word	0x44002000
 8003ff0:	42021400 	.word	0x42021400

08003ff4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b0d2      	sub	sp, #328	@ 0x148
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003ffe:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004002:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004004:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8004008:	2200      	movs	r2, #0
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	605a      	str	r2, [r3, #4]
 800400e:	609a      	str	r2, [r3, #8]
 8004010:	60da      	str	r2, [r3, #12]
 8004012:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004014:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004018:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800401c:	4618      	mov	r0, r3
 800401e:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8004022:	461a      	mov	r2, r3
 8004024:	2100      	movs	r1, #0
 8004026:	f00c f806 	bl	8010036 <memset>
  if(huart->Instance==UART4)
 800402a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800402e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4aa4      	ldr	r2, [pc, #656]	@ (80042c8 <HAL_UART_MspInit+0x2d4>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d166      	bne.n	800410a <HAL_UART_MspInit+0x116>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800403c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004040:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8004044:	f04f 0208 	mov.w	r2, #8
 8004048:	f04f 0300 	mov.w	r3, #0
 800404c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8004050:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004054:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004058:	2200      	movs	r2, #0
 800405a:	669a      	str	r2, [r3, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800405c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004060:	4618      	mov	r0, r3
 8004062:	f002 ff93 	bl	8006f8c <HAL_RCCEx_PeriphCLKConfig>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d001      	beq.n	8004070 <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 800406c:	f7ff fe4d 	bl	8003d0a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004070:	4b96      	ldr	r3, [pc, #600]	@ (80042cc <HAL_UART_MspInit+0x2d8>)
 8004072:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004076:	4a95      	ldr	r2, [pc, #596]	@ (80042cc <HAL_UART_MspInit+0x2d8>)
 8004078:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800407c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004080:	4b92      	ldr	r3, [pc, #584]	@ (80042cc <HAL_UART_MspInit+0x2d8>)
 8004082:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004086:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 800408a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800408e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004098:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800409c:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800409e:	4b8b      	ldr	r3, [pc, #556]	@ (80042cc <HAL_UART_MspInit+0x2d8>)
 80040a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040a4:	4a89      	ldr	r2, [pc, #548]	@ (80042cc <HAL_UART_MspInit+0x2d8>)
 80040a6:	f043 0302 	orr.w	r3, r3, #2
 80040aa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80040ae:	4b87      	ldr	r3, [pc, #540]	@ (80042cc <HAL_UART_MspInit+0x2d8>)
 80040b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040b4:	f003 0202 	and.w	r2, r3, #2
 80040b8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80040bc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80040c0:	601a      	str	r2, [r3, #0]
 80040c2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80040c6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80040ca:	681b      	ldr	r3, [r3, #0]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = UART_RX2_Pin|UART_TX2_Pin;
 80040cc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80040d0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040d4:	2302      	movs	r3, #2
 80040d6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040da:	2300      	movs	r3, #0
 80040dc:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040e0:	2300      	movs	r3, #0
 80040e2:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80040e6:	2308      	movs	r3, #8
 80040e8:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040ec:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80040f0:	4619      	mov	r1, r3
 80040f2:	4877      	ldr	r0, [pc, #476]	@ (80042d0 <HAL_UART_MspInit+0x2dc>)
 80040f4:	f000 ff16 	bl	8004f24 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80040f8:	2200      	movs	r2, #0
 80040fa:	2100      	movs	r1, #0
 80040fc:	203d      	movs	r0, #61	@ 0x3d
 80040fe:	f000 fd93 	bl	8004c28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004102:	203d      	movs	r0, #61	@ 0x3d
 8004104:	f000 fdaa 	bl	8004c5c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART10_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(USART10_IRQn);
  /* USER CODE END USART10_MspInit 1 */
  }

}
 8004108:	e159      	b.n	80043be <HAL_UART_MspInit+0x3ca>
  else if(huart->Instance==UART5)
 800410a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800410e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a6f      	ldr	r2, [pc, #444]	@ (80042d4 <HAL_UART_MspInit+0x2e0>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d165      	bne.n	80041e8 <HAL_UART_MspInit+0x1f4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800411c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004120:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8004124:	f04f 0210 	mov.w	r2, #16
 8004128:	f04f 0300 	mov.w	r3, #0
 800412c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8004130:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004134:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004138:	2200      	movs	r2, #0
 800413a:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800413c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004140:	4618      	mov	r0, r3
 8004142:	f002 ff23 	bl	8006f8c <HAL_RCCEx_PeriphCLKConfig>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <HAL_UART_MspInit+0x15c>
      Error_Handler();
 800414c:	f7ff fddd 	bl	8003d0a <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8004150:	4b5e      	ldr	r3, [pc, #376]	@ (80042cc <HAL_UART_MspInit+0x2d8>)
 8004152:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004156:	4a5d      	ldr	r2, [pc, #372]	@ (80042cc <HAL_UART_MspInit+0x2d8>)
 8004158:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800415c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004160:	4b5a      	ldr	r3, [pc, #360]	@ (80042cc <HAL_UART_MspInit+0x2d8>)
 8004162:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004166:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800416a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800416e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004178:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800417c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800417e:	4b53      	ldr	r3, [pc, #332]	@ (80042cc <HAL_UART_MspInit+0x2d8>)
 8004180:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004184:	4a51      	ldr	r2, [pc, #324]	@ (80042cc <HAL_UART_MspInit+0x2d8>)
 8004186:	f043 0302 	orr.w	r3, r3, #2
 800418a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800418e:	4b4f      	ldr	r3, [pc, #316]	@ (80042cc <HAL_UART_MspInit+0x2d8>)
 8004190:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004194:	f003 0202 	and.w	r2, r3, #2
 8004198:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800419c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80041a0:	601a      	str	r2, [r3, #0]
 80041a2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80041a6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80041aa:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = UART_RX3_Pin|UART_TX3_Pin;
 80041ac:	2360      	movs	r3, #96	@ 0x60
 80041ae:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041b2:	2302      	movs	r3, #2
 80041b4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b8:	2300      	movs	r3, #0
 80041ba:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041be:	2300      	movs	r3, #0
 80041c0:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80041c4:	230e      	movs	r3, #14
 80041c6:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041ca:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80041ce:	4619      	mov	r1, r3
 80041d0:	483f      	ldr	r0, [pc, #252]	@ (80042d0 <HAL_UART_MspInit+0x2dc>)
 80041d2:	f000 fea7 	bl	8004f24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80041d6:	2200      	movs	r2, #0
 80041d8:	2100      	movs	r1, #0
 80041da:	203e      	movs	r0, #62	@ 0x3e
 80041dc:	f000 fd24 	bl	8004c28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80041e0:	203e      	movs	r0, #62	@ 0x3e
 80041e2:	f000 fd3b 	bl	8004c5c <HAL_NVIC_EnableIRQ>
}
 80041e6:	e0ea      	b.n	80043be <HAL_UART_MspInit+0x3ca>
  else if(huart->Instance==UART8)
 80041e8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80041ec:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a38      	ldr	r2, [pc, #224]	@ (80042d8 <HAL_UART_MspInit+0x2e4>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d172      	bne.n	80042e0 <HAL_UART_MspInit+0x2ec>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 80041fa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80041fe:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8004202:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8004206:	f04f 0300 	mov.w	r3, #0
 800420a:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 800420e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004212:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004216:	2200      	movs	r2, #0
 8004218:	679a      	str	r2, [r3, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800421a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800421e:	4618      	mov	r0, r3
 8004220:	f002 feb4 	bl	8006f8c <HAL_RCCEx_PeriphCLKConfig>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <HAL_UART_MspInit+0x23a>
      Error_Handler();
 800422a:	f7ff fd6e 	bl	8003d0a <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 800422e:	4b27      	ldr	r3, [pc, #156]	@ (80042cc <HAL_UART_MspInit+0x2d8>)
 8004230:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004234:	4a25      	ldr	r2, [pc, #148]	@ (80042cc <HAL_UART_MspInit+0x2d8>)
 8004236:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800423a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800423e:	4b23      	ldr	r3, [pc, #140]	@ (80042cc <HAL_UART_MspInit+0x2d8>)
 8004240:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004244:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8004248:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800424c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004256:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800425a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800425c:	4b1b      	ldr	r3, [pc, #108]	@ (80042cc <HAL_UART_MspInit+0x2d8>)
 800425e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004262:	4a1a      	ldr	r2, [pc, #104]	@ (80042cc <HAL_UART_MspInit+0x2d8>)
 8004264:	f043 0310 	orr.w	r3, r3, #16
 8004268:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800426c:	4b17      	ldr	r3, [pc, #92]	@ (80042cc <HAL_UART_MspInit+0x2d8>)
 800426e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004272:	f003 0210 	and.w	r2, r3, #16
 8004276:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800427a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004284:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004288:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = UART_RX1_Pin|UART_TX1_Pin;
 800428a:	2303      	movs	r3, #3
 800428c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004290:	2302      	movs	r3, #2
 8004292:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004296:	2300      	movs	r3, #0
 8004298:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800429c:	2300      	movs	r3, #0
 800429e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80042a2:	2308      	movs	r3, #8
 80042a4:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80042a8:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80042ac:	4619      	mov	r1, r3
 80042ae:	480b      	ldr	r0, [pc, #44]	@ (80042dc <HAL_UART_MspInit+0x2e8>)
 80042b0:	f000 fe38 	bl	8004f24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 80042b4:	2200      	movs	r2, #0
 80042b6:	2100      	movs	r1, #0
 80042b8:	2063      	movs	r0, #99	@ 0x63
 80042ba:	f000 fcb5 	bl	8004c28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 80042be:	2063      	movs	r0, #99	@ 0x63
 80042c0:	f000 fccc 	bl	8004c5c <HAL_NVIC_EnableIRQ>
}
 80042c4:	e07b      	b.n	80043be <HAL_UART_MspInit+0x3ca>
 80042c6:	bf00      	nop
 80042c8:	40004c00 	.word	0x40004c00
 80042cc:	44020c00 	.word	0x44020c00
 80042d0:	42020400 	.word	0x42020400
 80042d4:	40005000 	.word	0x40005000
 80042d8:	40007c00 	.word	0x40007c00
 80042dc:	42021000 	.word	0x42021000
  else if(huart->Instance==USART10)
 80042e0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80042e4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a36      	ldr	r2, [pc, #216]	@ (80043c8 <HAL_UART_MspInit+0x3d4>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d165      	bne.n	80043be <HAL_UART_MspInit+0x3ca>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART10;
 80042f2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80042f6:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80042fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042fe:	f04f 0300 	mov.w	r3, #0
 8004302:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart10ClockSelection = RCC_USART10CLKSOURCE_PCLK1;
 8004306:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800430a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800430e:	2200      	movs	r2, #0
 8004310:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004314:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004318:	4618      	mov	r0, r3
 800431a:	f002 fe37 	bl	8006f8c <HAL_RCCEx_PeriphCLKConfig>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <HAL_UART_MspInit+0x334>
      Error_Handler();
 8004324:	f7ff fcf1 	bl	8003d0a <Error_Handler>
    __HAL_RCC_USART10_CLK_ENABLE();
 8004328:	4b28      	ldr	r3, [pc, #160]	@ (80043cc <HAL_UART_MspInit+0x3d8>)
 800432a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800432e:	4a27      	ldr	r2, [pc, #156]	@ (80043cc <HAL_UART_MspInit+0x3d8>)
 8004330:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004334:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004338:	4b24      	ldr	r3, [pc, #144]	@ (80043cc <HAL_UART_MspInit+0x3d8>)
 800433a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800433e:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 8004342:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004346:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800434a:	601a      	str	r2, [r3, #0]
 800434c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004350:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004354:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004356:	4b1d      	ldr	r3, [pc, #116]	@ (80043cc <HAL_UART_MspInit+0x3d8>)
 8004358:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800435c:	4a1b      	ldr	r2, [pc, #108]	@ (80043cc <HAL_UART_MspInit+0x3d8>)
 800435e:	f043 0310 	orr.w	r3, r3, #16
 8004362:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004366:	4b19      	ldr	r3, [pc, #100]	@ (80043cc <HAL_UART_MspInit+0x3d8>)
 8004368:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800436c:	f003 0210 	and.w	r2, r3, #16
 8004370:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004374:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004378:	601a      	str	r2, [r3, #0]
 800437a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800437e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004382:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = UART_RX4_Pin|UART_TX4_Pin;
 8004384:	230c      	movs	r3, #12
 8004386:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800438a:	2302      	movs	r3, #2
 800438c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004390:	2300      	movs	r3, #0
 8004392:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004396:	2300      	movs	r3, #0
 8004398:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART10;
 800439c:	2307      	movs	r3, #7
 800439e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80043a2:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80043a6:	4619      	mov	r1, r3
 80043a8:	4809      	ldr	r0, [pc, #36]	@ (80043d0 <HAL_UART_MspInit+0x3dc>)
 80043aa:	f000 fdbb 	bl	8004f24 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(USART10_IRQn, 0, 0);
 80043ae:	2200      	movs	r2, #0
 80043b0:	2100      	movs	r1, #0
 80043b2:	2056      	movs	r0, #86	@ 0x56
 80043b4:	f000 fc38 	bl	8004c28 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART10_IRQn);
 80043b8:	2056      	movs	r0, #86	@ 0x56
 80043ba:	f000 fc4f 	bl	8004c5c <HAL_NVIC_EnableIRQ>
}
 80043be:	bf00      	nop
 80043c0:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	40006800 	.word	0x40006800
 80043cc:	44020c00 	.word	0x44020c00
 80043d0:	42021000 	.word	0x42021000

080043d4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b086      	sub	sp, #24
 80043d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80043da:	1d3b      	adds	r3, r7, #4
 80043dc:	2200      	movs	r2, #0
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	605a      	str	r2, [r3, #4]
 80043e2:	609a      	str	r2, [r3, #8]
 80043e4:	60da      	str	r2, [r3, #12]
 80043e6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80043e8:	4b43      	ldr	r3, [pc, #268]	@ (80044f8 <HAL_FMC_MspInit+0x124>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d17f      	bne.n	80044f0 <HAL_FMC_MspInit+0x11c>
    return;
  }
  FMC_Initialized = 1;
 80043f0:	4b41      	ldr	r3, [pc, #260]	@ (80044f8 <HAL_FMC_MspInit+0x124>)
 80043f2:	2201      	movs	r2, #1
 80043f4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80043f6:	4b41      	ldr	r3, [pc, #260]	@ (80044fc <HAL_FMC_MspInit+0x128>)
 80043f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043fc:	4a3f      	ldr	r2, [pc, #252]	@ (80044fc <HAL_FMC_MspInit+0x128>)
 80043fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004402:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004406:	4b3d      	ldr	r3, [pc, #244]	@ (80044fc <HAL_FMC_MspInit+0x128>)
 8004408:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800440c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004410:	603b      	str	r3, [r7, #0]
 8004412:	683b      	ldr	r3, [r7, #0]
  PA8   ------> FMC_NOE
  PD0   ------> FMC_D2
  PD1   ------> FMC_D3
  PD7   ------> FMC_NCE
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004414:	f24f 033f 	movw	r3, #61503	@ 0xf03f
 8004418:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800441a:	2302      	movs	r3, #2
 800441c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800441e:	2300      	movs	r3, #0
 8004420:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004422:	2303      	movs	r3, #3
 8004424:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004426:	230c      	movs	r3, #12
 8004428:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800442a:	1d3b      	adds	r3, r7, #4
 800442c:	4619      	mov	r1, r3
 800442e:	4834      	ldr	r0, [pc, #208]	@ (8004500 <HAL_FMC_MspInit+0x12c>)
 8004430:	f000 fd78 	bl	8004f24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004434:	2380      	movs	r3, #128	@ 0x80
 8004436:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004438:	2302      	movs	r3, #2
 800443a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800443c:	2300      	movs	r3, #0
 800443e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004440:	2303      	movs	r3, #3
 8004442:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF13_FMC;
 8004444:	230d      	movs	r3, #13
 8004446:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004448:	1d3b      	adds	r3, r7, #4
 800444a:	4619      	mov	r1, r3
 800444c:	482d      	ldr	r0, [pc, #180]	@ (8004504 <HAL_FMC_MspInit+0x130>)
 800444e:	f000 fd69 	bl	8004f24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004452:	233f      	movs	r3, #63	@ 0x3f
 8004454:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004456:	2302      	movs	r3, #2
 8004458:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800445a:	2300      	movs	r3, #0
 800445c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800445e:	2303      	movs	r3, #3
 8004460:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004462:	230c      	movs	r3, #12
 8004464:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004466:	1d3b      	adds	r3, r7, #4
 8004468:	4619      	mov	r1, r3
 800446a:	4827      	ldr	r0, [pc, #156]	@ (8004508 <HAL_FMC_MspInit+0x134>)
 800446c:	f000 fd5a 	bl	8004f24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8004470:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8004474:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004476:	2302      	movs	r3, #2
 8004478:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800447a:	2300      	movs	r3, #0
 800447c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800447e:	2303      	movs	r3, #3
 8004480:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004482:	230c      	movs	r3, #12
 8004484:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004486:	1d3b      	adds	r3, r7, #4
 8004488:	4619      	mov	r1, r3
 800448a:	4820      	ldr	r0, [pc, #128]	@ (800450c <HAL_FMC_MspInit+0x138>)
 800448c:	f000 fd4a 	bl	8004f24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8004490:	f64f 0383 	movw	r3, #63619	@ 0xf883
 8004494:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004496:	2302      	movs	r3, #2
 8004498:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800449a:	2300      	movs	r3, #0
 800449c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800449e:	2303      	movs	r3, #3
 80044a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80044a2:	230c      	movs	r3, #12
 80044a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044a6:	1d3b      	adds	r3, r7, #4
 80044a8:	4619      	mov	r1, r3
 80044aa:	4819      	ldr	r0, [pc, #100]	@ (8004510 <HAL_FMC_MspInit+0x13c>)
 80044ac:	f000 fd3a 	bl	8004f24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80044b0:	23c0      	movs	r3, #192	@ 0xc0
 80044b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044b4:	2302      	movs	r3, #2
 80044b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b8:	2300      	movs	r3, #0
 80044ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044bc:	2303      	movs	r3, #3
 80044be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 80044c0:	2309      	movs	r3, #9
 80044c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044c4:	1d3b      	adds	r3, r7, #4
 80044c6:	4619      	mov	r1, r3
 80044c8:	4812      	ldr	r0, [pc, #72]	@ (8004514 <HAL_FMC_MspInit+0x140>)
 80044ca:	f000 fd2b 	bl	8004f24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80044ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80044d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044d4:	2302      	movs	r3, #2
 80044d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d8:	2300      	movs	r3, #0
 80044da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044dc:	2303      	movs	r3, #3
 80044de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80044e0:	230c      	movs	r3, #12
 80044e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044e4:	1d3b      	adds	r3, r7, #4
 80044e6:	4619      	mov	r1, r3
 80044e8:	4806      	ldr	r0, [pc, #24]	@ (8004504 <HAL_FMC_MspInit+0x130>)
 80044ea:	f000 fd1b 	bl	8004f24 <HAL_GPIO_Init>
 80044ee:	e000      	b.n	80044f2 <HAL_FMC_MspInit+0x11e>
    return;
 80044f0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80044f2:	3718      	adds	r7, #24
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	20005cc4 	.word	0x20005cc4
 80044fc:	44020c00 	.word	0x44020c00
 8004500:	42021400 	.word	0x42021400
 8004504:	42020000 	.word	0x42020000
 8004508:	42021800 	.word	0x42021800
 800450c:	42021000 	.word	0x42021000
 8004510:	42020c00 	.word	0x42020c00
 8004514:	42020800 	.word	0x42020800

08004518 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8004520:	f7ff ff58 	bl	80043d4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8004524:	bf00      	nop
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* hnand){
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FMC_MspInit();
 8004534:	f7ff ff4e 	bl	80043d4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 8004538:	bf00      	nop
 800453a:	3708      	adds	r7, #8
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004540:	b480      	push	{r7}
 8004542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004544:	bf00      	nop
 8004546:	e7fd      	b.n	8004544 <NMI_Handler+0x4>

08004548 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004548:	b480      	push	{r7}
 800454a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800454c:	bf00      	nop
 800454e:	e7fd      	b.n	800454c <HardFault_Handler+0x4>

08004550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004550:	b480      	push	{r7}
 8004552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004554:	bf00      	nop
 8004556:	e7fd      	b.n	8004554 <MemManage_Handler+0x4>

08004558 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004558:	b480      	push	{r7}
 800455a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800455c:	bf00      	nop
 800455e:	e7fd      	b.n	800455c <BusFault_Handler+0x4>

08004560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004564:	bf00      	nop
 8004566:	e7fd      	b.n	8004564 <UsageFault_Handler+0x4>

08004568 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800456c:	bf00      	nop
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004576:	b480      	push	{r7}
 8004578:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800457a:	bf00      	nop
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004584:	b480      	push	{r7}
 8004586:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004588:	bf00      	nop
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004596:	f000 fa4b 	bl	8004a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800459a:	bf00      	nop
 800459c:	bd80      	pop	{r7, pc}

0800459e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY_1_Pin);
 80045a2:	2002      	movs	r0, #2
 80045a4:	f000 fe42 	bl	800522c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80045a8:	bf00      	nop
 80045aa:	bd80      	pop	{r7, pc}

080045ac <EXTI7_IRQHandler>:

/**
  * @brief This function handles EXTI Line7 interrupt.
  */
void EXTI7_IRQHandler(void)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI7_IRQn 0 */

  /* USER CODE END EXTI7_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY_2_Pin);
 80045b0:	2080      	movs	r0, #128	@ 0x80
 80045b2:	f000 fe3b 	bl	800522c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI7_IRQn 1 */

  /* USER CODE END EXTI7_IRQn 1 */
}
 80045b6:	bf00      	nop
 80045b8:	bd80      	pop	{r7, pc}

080045ba <EXTI11_IRQHandler>:

/**
  * @brief This function handles EXTI Line11 interrupt.
  */
void EXTI11_IRQHandler(void)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI11_IRQn 0 */

  /* USER CODE END EXTI11_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY_3_Pin);
 80045be:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80045c2:	f000 fe33 	bl	800522c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI11_IRQn 1 */

  /* USER CODE END EXTI11_IRQn 1 */
}
 80045c6:	bf00      	nop
 80045c8:	bd80      	pop	{r7, pc}
	...

080045cc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80045d0:	4802      	ldr	r0, [pc, #8]	@ (80045dc <UART4_IRQHandler+0x10>)
 80045d2:	f008 fd7b 	bl	800d0cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80045d6:	bf00      	nop
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	200059ac 	.word	0x200059ac

080045e0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80045e4:	4802      	ldr	r0, [pc, #8]	@ (80045f0 <UART5_IRQHandler+0x10>)
 80045e6:	f008 fd71 	bl	800d0cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80045ea:	bf00      	nop
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	20005a40 	.word	0x20005a40

080045f4 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80045f8:	4802      	ldr	r0, [pc, #8]	@ (8004604 <UART8_IRQHandler+0x10>)
 80045fa:	f008 fd67 	bl	800d0cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 80045fe:	bf00      	nop
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	20005ad4 	.word	0x20005ad4

08004608 <USART10_IRQHandler>:

/* USER CODE BEGIN 1 */
void USART10_IRQHandler(void) {
 8004608:	b580      	push	{r7, lr}
 800460a:	af00      	add	r7, sp, #0
    HAL_UART_IRQHandler(&huart10);
 800460c:	4802      	ldr	r0, [pc, #8]	@ (8004618 <USART10_IRQHandler+0x10>)
 800460e:	f008 fd5d 	bl	800d0cc <HAL_UART_IRQHandler>
}
 8004612:	bf00      	nop
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	20005b68 	.word	0x20005b68

0800461c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
  return 1;
 8004620:	2301      	movs	r3, #1
}
 8004622:	4618      	mov	r0, r3
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <_kill>:

int _kill(int pid, int sig)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004636:	f00b fd51 	bl	80100dc <__errno>
 800463a:	4603      	mov	r3, r0
 800463c:	2216      	movs	r2, #22
 800463e:	601a      	str	r2, [r3, #0]
  return -1;
 8004640:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004644:	4618      	mov	r0, r3
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <_exit>:

void _exit (int status)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004654:	f04f 31ff 	mov.w	r1, #4294967295
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f7ff ffe7 	bl	800462c <_kill>
  while (1) {}    /* Make sure we hang here */
 800465e:	bf00      	nop
 8004660:	e7fd      	b.n	800465e <_exit+0x12>

08004662 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b086      	sub	sp, #24
 8004666:	af00      	add	r7, sp, #0
 8004668:	60f8      	str	r0, [r7, #12]
 800466a:	60b9      	str	r1, [r7, #8]
 800466c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800466e:	2300      	movs	r3, #0
 8004670:	617b      	str	r3, [r7, #20]
 8004672:	e00a      	b.n	800468a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004674:	f3af 8000 	nop.w
 8004678:	4601      	mov	r1, r0
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	1c5a      	adds	r2, r3, #1
 800467e:	60ba      	str	r2, [r7, #8]
 8004680:	b2ca      	uxtb	r2, r1
 8004682:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	3301      	adds	r3, #1
 8004688:	617b      	str	r3, [r7, #20]
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	429a      	cmp	r2, r3
 8004690:	dbf0      	blt.n	8004674 <_read+0x12>
  }

  return len;
 8004692:	687b      	ldr	r3, [r7, #4]
}
 8004694:	4618      	mov	r0, r3
 8004696:	3718      	adds	r7, #24
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046a8:	2300      	movs	r3, #0
 80046aa:	617b      	str	r3, [r7, #20]
 80046ac:	e009      	b.n	80046c2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	1c5a      	adds	r2, r3, #1
 80046b2:	60ba      	str	r2, [r7, #8]
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	3301      	adds	r3, #1
 80046c0:	617b      	str	r3, [r7, #20]
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	dbf1      	blt.n	80046ae <_write+0x12>
  }
  return len;
 80046ca:	687b      	ldr	r3, [r7, #4]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3718      	adds	r7, #24
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <_close>:

int _close(int file)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80046dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80046fc:	605a      	str	r2, [r3, #4]
  return 0;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <_isatty>:

int _isatty(int file)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004714:	2301      	movs	r3, #1
}
 8004716:	4618      	mov	r0, r3
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr

08004722 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004722:	b480      	push	{r7}
 8004724:	b085      	sub	sp, #20
 8004726:	af00      	add	r7, sp, #0
 8004728:	60f8      	str	r0, [r7, #12]
 800472a:	60b9      	str	r1, [r7, #8]
 800472c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3714      	adds	r7, #20
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004744:	4a14      	ldr	r2, [pc, #80]	@ (8004798 <_sbrk+0x5c>)
 8004746:	4b15      	ldr	r3, [pc, #84]	@ (800479c <_sbrk+0x60>)
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004750:	4b13      	ldr	r3, [pc, #76]	@ (80047a0 <_sbrk+0x64>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d102      	bne.n	800475e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004758:	4b11      	ldr	r3, [pc, #68]	@ (80047a0 <_sbrk+0x64>)
 800475a:	4a12      	ldr	r2, [pc, #72]	@ (80047a4 <_sbrk+0x68>)
 800475c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800475e:	4b10      	ldr	r3, [pc, #64]	@ (80047a0 <_sbrk+0x64>)
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4413      	add	r3, r2
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	429a      	cmp	r2, r3
 800476a:	d207      	bcs.n	800477c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800476c:	f00b fcb6 	bl	80100dc <__errno>
 8004770:	4603      	mov	r3, r0
 8004772:	220c      	movs	r2, #12
 8004774:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004776:	f04f 33ff 	mov.w	r3, #4294967295
 800477a:	e009      	b.n	8004790 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800477c:	4b08      	ldr	r3, [pc, #32]	@ (80047a0 <_sbrk+0x64>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004782:	4b07      	ldr	r3, [pc, #28]	@ (80047a0 <_sbrk+0x64>)
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4413      	add	r3, r2
 800478a:	4a05      	ldr	r2, [pc, #20]	@ (80047a0 <_sbrk+0x64>)
 800478c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800478e:	68fb      	ldr	r3, [r7, #12]
}
 8004790:	4618      	mov	r0, r3
 8004792:	3718      	adds	r7, #24
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	200a0000 	.word	0x200a0000
 800479c:	00000400 	.word	0x00000400
 80047a0:	20005cc8 	.word	0x20005cc8
 80047a4:	20005e20 	.word	0x20005e20

080047a8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80047ae:	4b35      	ldr	r3, [pc, #212]	@ (8004884 <SystemInit+0xdc>)
 80047b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047b4:	4a33      	ldr	r2, [pc, #204]	@ (8004884 <SystemInit+0xdc>)
 80047b6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80047ba:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80047be:	4b32      	ldr	r3, [pc, #200]	@ (8004888 <SystemInit+0xe0>)
 80047c0:	2201      	movs	r2, #1
 80047c2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80047c4:	4b30      	ldr	r3, [pc, #192]	@ (8004888 <SystemInit+0xe0>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80047ca:	4b2f      	ldr	r3, [pc, #188]	@ (8004888 <SystemInit+0xe0>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80047d0:	4b2d      	ldr	r3, [pc, #180]	@ (8004888 <SystemInit+0xe0>)
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	492c      	ldr	r1, [pc, #176]	@ (8004888 <SystemInit+0xe0>)
 80047d6:	4b2d      	ldr	r3, [pc, #180]	@ (800488c <SystemInit+0xe4>)
 80047d8:	4013      	ands	r3, r2
 80047da:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80047dc:	4b2a      	ldr	r3, [pc, #168]	@ (8004888 <SystemInit+0xe0>)
 80047de:	2200      	movs	r2, #0
 80047e0:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 80047e2:	4b29      	ldr	r3, [pc, #164]	@ (8004888 <SystemInit+0xe0>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 80047e8:	4b27      	ldr	r3, [pc, #156]	@ (8004888 <SystemInit+0xe0>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80047ee:	4b26      	ldr	r3, [pc, #152]	@ (8004888 <SystemInit+0xe0>)
 80047f0:	4a27      	ldr	r2, [pc, #156]	@ (8004890 <SystemInit+0xe8>)
 80047f2:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80047f4:	4b24      	ldr	r3, [pc, #144]	@ (8004888 <SystemInit+0xe0>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80047fa:	4b23      	ldr	r3, [pc, #140]	@ (8004888 <SystemInit+0xe0>)
 80047fc:	4a24      	ldr	r2, [pc, #144]	@ (8004890 <SystemInit+0xe8>)
 80047fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8004800:	4b21      	ldr	r3, [pc, #132]	@ (8004888 <SystemInit+0xe0>)
 8004802:	2200      	movs	r2, #0
 8004804:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8004806:	4b20      	ldr	r3, [pc, #128]	@ (8004888 <SystemInit+0xe0>)
 8004808:	4a21      	ldr	r2, [pc, #132]	@ (8004890 <SystemInit+0xe8>)
 800480a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 800480c:	4b1e      	ldr	r3, [pc, #120]	@ (8004888 <SystemInit+0xe0>)
 800480e:	2200      	movs	r2, #0
 8004810:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8004812:	4b1d      	ldr	r3, [pc, #116]	@ (8004888 <SystemInit+0xe0>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a1c      	ldr	r2, [pc, #112]	@ (8004888 <SystemInit+0xe0>)
 8004818:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800481c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800481e:	4b1a      	ldr	r3, [pc, #104]	@ (8004888 <SystemInit+0xe0>)
 8004820:	2200      	movs	r2, #0
 8004822:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004824:	4b17      	ldr	r3, [pc, #92]	@ (8004884 <SystemInit+0xdc>)
 8004826:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800482a:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 800482c:	4b19      	ldr	r3, [pc, #100]	@ (8004894 <SystemInit+0xec>)
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8004834:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800483c:	d003      	beq.n	8004846 <SystemInit+0x9e>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004844:	d117      	bne.n	8004876 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8004846:	4b13      	ldr	r3, [pc, #76]	@ (8004894 <SystemInit+0xec>)
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d005      	beq.n	800485e <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8004852:	4b10      	ldr	r3, [pc, #64]	@ (8004894 <SystemInit+0xec>)
 8004854:	4a10      	ldr	r2, [pc, #64]	@ (8004898 <SystemInit+0xf0>)
 8004856:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8004858:	4b0e      	ldr	r3, [pc, #56]	@ (8004894 <SystemInit+0xec>)
 800485a:	4a10      	ldr	r2, [pc, #64]	@ (800489c <SystemInit+0xf4>)
 800485c:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800485e:	4b0d      	ldr	r3, [pc, #52]	@ (8004894 <SystemInit+0xec>)
 8004860:	69db      	ldr	r3, [r3, #28]
 8004862:	4a0c      	ldr	r2, [pc, #48]	@ (8004894 <SystemInit+0xec>)
 8004864:	f043 0302 	orr.w	r3, r3, #2
 8004868:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800486a:	4b0a      	ldr	r3, [pc, #40]	@ (8004894 <SystemInit+0xec>)
 800486c:	69db      	ldr	r3, [r3, #28]
 800486e:	4a09      	ldr	r2, [pc, #36]	@ (8004894 <SystemInit+0xec>)
 8004870:	f043 0301 	orr.w	r3, r3, #1
 8004874:	61d3      	str	r3, [r2, #28]
  }
}
 8004876:	bf00      	nop
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	e000ed00 	.word	0xe000ed00
 8004888:	44020c00 	.word	0x44020c00
 800488c:	eae2eae3 	.word	0xeae2eae3
 8004890:	01010280 	.word	0x01010280
 8004894:	40022000 	.word	0x40022000
 8004898:	08192a3b 	.word	0x08192a3b
 800489c:	4c5d6e7f 	.word	0x4c5d6e7f

080048a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80048a0:	480d      	ldr	r0, [pc, #52]	@ (80048d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80048a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80048a4:	f7ff ff80 	bl	80047a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80048a8:	480c      	ldr	r0, [pc, #48]	@ (80048dc <LoopForever+0x6>)
  ldr r1, =_edata
 80048aa:	490d      	ldr	r1, [pc, #52]	@ (80048e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80048ac:	4a0d      	ldr	r2, [pc, #52]	@ (80048e4 <LoopForever+0xe>)
  movs r3, #0
 80048ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80048b0:	e002      	b.n	80048b8 <LoopCopyDataInit>

080048b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80048b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80048b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80048b6:	3304      	adds	r3, #4

080048b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80048b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80048ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80048bc:	d3f9      	bcc.n	80048b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80048be:	4a0a      	ldr	r2, [pc, #40]	@ (80048e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80048c0:	4c0a      	ldr	r4, [pc, #40]	@ (80048ec <LoopForever+0x16>)
  movs r3, #0
 80048c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80048c4:	e001      	b.n	80048ca <LoopFillZerobss>

080048c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80048c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80048c8:	3204      	adds	r2, #4

080048ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80048ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80048cc:	d3fb      	bcc.n	80048c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80048ce:	f00b fc0b 	bl	80100e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80048d2:	f7fe f9e3 	bl	8002c9c <main>

080048d6 <LoopForever>:

LoopForever:
    b LoopForever
 80048d6:	e7fe      	b.n	80048d6 <LoopForever>
  ldr   r0, =_estack
 80048d8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80048dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80048e0:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 80048e4:	08012908 	.word	0x08012908
  ldr r2, =_sbss
 80048e8:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 80048ec:	20005e1c 	.word	0x20005e1c

080048f0 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80048f0:	e7fe      	b.n	80048f0 <ADC1_IRQHandler>
	...

080048f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048f8:	2003      	movs	r0, #3
 80048fa:	f000 f98a 	bl	8004c12 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80048fe:	f002 f9bb 	bl	8006c78 <HAL_RCC_GetSysClockFreq>
 8004902:	4602      	mov	r2, r0
 8004904:	4b0c      	ldr	r3, [pc, #48]	@ (8004938 <HAL_Init+0x44>)
 8004906:	6a1b      	ldr	r3, [r3, #32]
 8004908:	f003 030f 	and.w	r3, r3, #15
 800490c:	490b      	ldr	r1, [pc, #44]	@ (800493c <HAL_Init+0x48>)
 800490e:	5ccb      	ldrb	r3, [r1, r3]
 8004910:	fa22 f303 	lsr.w	r3, r2, r3
 8004914:	4a0a      	ldr	r2, [pc, #40]	@ (8004940 <HAL_Init+0x4c>)
 8004916:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004918:	2004      	movs	r0, #4
 800491a:	f000 f9cf 	bl	8004cbc <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800491e:	200f      	movs	r0, #15
 8004920:	f000 f810 	bl	8004944 <HAL_InitTick>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d001      	beq.n	800492e <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e002      	b.n	8004934 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800492e:	f7ff f9f2 	bl	8003d16 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	bd80      	pop	{r7, pc}
 8004938:	44020c00 	.word	0x44020c00
 800493c:	08012544 	.word	0x08012544
 8004940:	2000001c 	.word	0x2000001c

08004944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8004950:	4b33      	ldr	r3, [pc, #204]	@ (8004a20 <HAL_InitTick+0xdc>)
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d101      	bne.n	800495c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e05c      	b.n	8004a16 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 800495c:	4b31      	ldr	r3, [pc, #196]	@ (8004a24 <HAL_InitTick+0xe0>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	2b04      	cmp	r3, #4
 8004966:	d10c      	bne.n	8004982 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8004968:	4b2f      	ldr	r3, [pc, #188]	@ (8004a28 <HAL_InitTick+0xe4>)
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	4b2c      	ldr	r3, [pc, #176]	@ (8004a20 <HAL_InitTick+0xdc>)
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	4619      	mov	r1, r3
 8004972:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004976:	fbb3 f3f1 	udiv	r3, r3, r1
 800497a:	fbb2 f3f3 	udiv	r3, r2, r3
 800497e:	60fb      	str	r3, [r7, #12]
 8004980:	e037      	b.n	80049f2 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8004982:	f000 f9f3 	bl	8004d6c <HAL_SYSTICK_GetCLKSourceConfig>
 8004986:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	2b02      	cmp	r3, #2
 800498c:	d023      	beq.n	80049d6 <HAL_InitTick+0x92>
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	2b02      	cmp	r3, #2
 8004992:	d82d      	bhi.n	80049f0 <HAL_InitTick+0xac>
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <HAL_InitTick+0x5e>
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d00d      	beq.n	80049bc <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80049a0:	e026      	b.n	80049f0 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80049a2:	4b21      	ldr	r3, [pc, #132]	@ (8004a28 <HAL_InitTick+0xe4>)
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	4b1e      	ldr	r3, [pc, #120]	@ (8004a20 <HAL_InitTick+0xdc>)
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	4619      	mov	r1, r3
 80049ac:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80049b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80049b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b8:	60fb      	str	r3, [r7, #12]
        break;
 80049ba:	e01a      	b.n	80049f2 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80049bc:	4b18      	ldr	r3, [pc, #96]	@ (8004a20 <HAL_InitTick+0xdc>)
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	461a      	mov	r2, r3
 80049c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80049c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80049ca:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80049ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d2:	60fb      	str	r3, [r7, #12]
        break;
 80049d4:	e00d      	b.n	80049f2 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80049d6:	4b12      	ldr	r3, [pc, #72]	@ (8004a20 <HAL_InitTick+0xdc>)
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	461a      	mov	r2, r3
 80049dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80049e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80049e4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80049e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ec:	60fb      	str	r3, [r7, #12]
        break;
 80049ee:	e000      	b.n	80049f2 <HAL_InitTick+0xae>
        break;
 80049f0:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f000 f940 	bl	8004c78 <HAL_SYSTICK_Config>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e009      	b.n	8004a16 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a02:	2200      	movs	r2, #0
 8004a04:	6879      	ldr	r1, [r7, #4]
 8004a06:	f04f 30ff 	mov.w	r0, #4294967295
 8004a0a:	f000 f90d 	bl	8004c28 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8004a0e:	4a07      	ldr	r2, [pc, #28]	@ (8004a2c <HAL_InitTick+0xe8>)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	20000024 	.word	0x20000024
 8004a24:	e000e010 	.word	0xe000e010
 8004a28:	2000001c 	.word	0x2000001c
 8004a2c:	20000020 	.word	0x20000020

08004a30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a30:	b480      	push	{r7}
 8004a32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004a34:	4b06      	ldr	r3, [pc, #24]	@ (8004a50 <HAL_IncTick+0x20>)
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	461a      	mov	r2, r3
 8004a3a:	4b06      	ldr	r3, [pc, #24]	@ (8004a54 <HAL_IncTick+0x24>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4413      	add	r3, r2
 8004a40:	4a04      	ldr	r2, [pc, #16]	@ (8004a54 <HAL_IncTick+0x24>)
 8004a42:	6013      	str	r3, [r2, #0]
}
 8004a44:	bf00      	nop
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	20000024 	.word	0x20000024
 8004a54:	20005ccc 	.word	0x20005ccc

08004a58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8004a5c:	4b03      	ldr	r3, [pc, #12]	@ (8004a6c <HAL_GetTick+0x14>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	20005ccc 	.word	0x20005ccc

08004a70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a78:	f7ff ffee 	bl	8004a58 <HAL_GetTick>
 8004a7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a88:	d005      	beq.n	8004a96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8004ab4 <HAL_Delay+0x44>)
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4413      	add	r3, r2
 8004a94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004a96:	bf00      	nop
 8004a98:	f7ff ffde 	bl	8004a58 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d8f7      	bhi.n	8004a98 <HAL_Delay+0x28>
  {
  }
}
 8004aa8:	bf00      	nop
 8004aaa:	bf00      	nop
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	20000024 	.word	0x20000024

08004ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f003 0307 	and.w	r3, r3, #7
 8004ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8004afc <__NVIC_SetPriorityGrouping+0x44>)
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ace:	68ba      	ldr	r2, [r7, #8]
 8004ad0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ae0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004ae4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004aea:	4a04      	ldr	r2, [pc, #16]	@ (8004afc <__NVIC_SetPriorityGrouping+0x44>)
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	60d3      	str	r3, [r2, #12]
}
 8004af0:	bf00      	nop
 8004af2:	3714      	adds	r7, #20
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr
 8004afc:	e000ed00 	.word	0xe000ed00

08004b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b00:	b480      	push	{r7}
 8004b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b04:	4b04      	ldr	r3, [pc, #16]	@ (8004b18 <__NVIC_GetPriorityGrouping+0x18>)
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	0a1b      	lsrs	r3, r3, #8
 8004b0a:	f003 0307 	and.w	r3, r3, #7
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr
 8004b18:	e000ed00 	.word	0xe000ed00

08004b1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	4603      	mov	r3, r0
 8004b24:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	db0b      	blt.n	8004b46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b2e:	88fb      	ldrh	r3, [r7, #6]
 8004b30:	f003 021f 	and.w	r2, r3, #31
 8004b34:	4907      	ldr	r1, [pc, #28]	@ (8004b54 <__NVIC_EnableIRQ+0x38>)
 8004b36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b3a:	095b      	lsrs	r3, r3, #5
 8004b3c:	2001      	movs	r0, #1
 8004b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8004b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b46:	bf00      	nop
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	e000e100 	.word	0xe000e100

08004b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	4603      	mov	r3, r0
 8004b60:	6039      	str	r1, [r7, #0]
 8004b62:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	db0a      	blt.n	8004b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	490c      	ldr	r1, [pc, #48]	@ (8004ba4 <__NVIC_SetPriority+0x4c>)
 8004b72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b76:	0112      	lsls	r2, r2, #4
 8004b78:	b2d2      	uxtb	r2, r2
 8004b7a:	440b      	add	r3, r1
 8004b7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b80:	e00a      	b.n	8004b98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	b2da      	uxtb	r2, r3
 8004b86:	4908      	ldr	r1, [pc, #32]	@ (8004ba8 <__NVIC_SetPriority+0x50>)
 8004b88:	88fb      	ldrh	r3, [r7, #6]
 8004b8a:	f003 030f 	and.w	r3, r3, #15
 8004b8e:	3b04      	subs	r3, #4
 8004b90:	0112      	lsls	r2, r2, #4
 8004b92:	b2d2      	uxtb	r2, r2
 8004b94:	440b      	add	r3, r1
 8004b96:	761a      	strb	r2, [r3, #24]
}
 8004b98:	bf00      	nop
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr
 8004ba4:	e000e100 	.word	0xe000e100
 8004ba8:	e000ed00 	.word	0xe000ed00

08004bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b089      	sub	sp, #36	@ 0x24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f003 0307 	and.w	r3, r3, #7
 8004bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	f1c3 0307 	rsb	r3, r3, #7
 8004bc6:	2b04      	cmp	r3, #4
 8004bc8:	bf28      	it	cs
 8004bca:	2304      	movcs	r3, #4
 8004bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	3304      	adds	r3, #4
 8004bd2:	2b06      	cmp	r3, #6
 8004bd4:	d902      	bls.n	8004bdc <NVIC_EncodePriority+0x30>
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	3b03      	subs	r3, #3
 8004bda:	e000      	b.n	8004bde <NVIC_EncodePriority+0x32>
 8004bdc:	2300      	movs	r3, #0
 8004bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004be0:	f04f 32ff 	mov.w	r2, #4294967295
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bea:	43da      	mvns	r2, r3
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	401a      	ands	r2, r3
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8004bfe:	43d9      	mvns	r1, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c04:	4313      	orrs	r3, r2
         );
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3724      	adds	r7, #36	@ 0x24
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr

08004c12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b082      	sub	sp, #8
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f7ff ff4c 	bl	8004ab8 <__NVIC_SetPriorityGrouping>
}
 8004c20:	bf00      	nop
 8004c22:	3708      	adds	r7, #8
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	4603      	mov	r3, r0
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
 8004c34:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004c36:	f7ff ff63 	bl	8004b00 <__NVIC_GetPriorityGrouping>
 8004c3a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	68b9      	ldr	r1, [r7, #8]
 8004c40:	6978      	ldr	r0, [r7, #20]
 8004c42:	f7ff ffb3 	bl	8004bac <NVIC_EncodePriority>
 8004c46:	4602      	mov	r2, r0
 8004c48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c4c:	4611      	mov	r1, r2
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7ff ff82 	bl	8004b58 <__NVIC_SetPriority>
}
 8004c54:	bf00      	nop
 8004c56:	3718      	adds	r7, #24
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	4603      	mov	r3, r0
 8004c64:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7ff ff56 	bl	8004b1c <__NVIC_EnableIRQ>
}
 8004c70:	bf00      	nop
 8004c72:	3708      	adds	r7, #8
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	3b01      	subs	r3, #1
 8004c84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c88:	d301      	bcc.n	8004c8e <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e00d      	b.n	8004caa <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8004c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8004cb8 <HAL_SYSTICK_Config+0x40>)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	3b01      	subs	r3, #1
 8004c94:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8004c96:	4b08      	ldr	r3, [pc, #32]	@ (8004cb8 <HAL_SYSTICK_Config+0x40>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8004c9c:	4b06      	ldr	r3, [pc, #24]	@ (8004cb8 <HAL_SYSTICK_Config+0x40>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a05      	ldr	r2, [pc, #20]	@ (8004cb8 <HAL_SYSTICK_Config+0x40>)
 8004ca2:	f043 0303 	orr.w	r3, r3, #3
 8004ca6:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	e000e010 	.word	0xe000e010

08004cbc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b04      	cmp	r3, #4
 8004cc8:	d844      	bhi.n	8004d54 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8004cca:	a201      	add	r2, pc, #4	@ (adr r2, 8004cd0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8004ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd0:	08004cf3 	.word	0x08004cf3
 8004cd4:	08004d11 	.word	0x08004d11
 8004cd8:	08004d33 	.word	0x08004d33
 8004cdc:	08004d55 	.word	0x08004d55
 8004ce0:	08004ce5 	.word	0x08004ce5
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8004ce4:	4b1f      	ldr	r3, [pc, #124]	@ (8004d64 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a1e      	ldr	r2, [pc, #120]	@ (8004d64 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004cea:	f043 0304 	orr.w	r3, r3, #4
 8004cee:	6013      	str	r3, [r2, #0]
      break;
 8004cf0:	e031      	b.n	8004d56 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8004cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8004d64 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a1b      	ldr	r2, [pc, #108]	@ (8004d64 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004cf8:	f023 0304 	bic.w	r3, r3, #4
 8004cfc:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8004cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8004d68 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004d00:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004d04:	4a18      	ldr	r2, [pc, #96]	@ (8004d68 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004d06:	f023 030c 	bic.w	r3, r3, #12
 8004d0a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8004d0e:	e022      	b.n	8004d56 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8004d10:	4b14      	ldr	r3, [pc, #80]	@ (8004d64 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a13      	ldr	r2, [pc, #76]	@ (8004d64 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004d16:	f023 0304 	bic.w	r3, r3, #4
 8004d1a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8004d1c:	4b12      	ldr	r3, [pc, #72]	@ (8004d68 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004d1e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004d22:	f023 030c 	bic.w	r3, r3, #12
 8004d26:	4a10      	ldr	r2, [pc, #64]	@ (8004d68 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004d28:	f043 0304 	orr.w	r3, r3, #4
 8004d2c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8004d30:	e011      	b.n	8004d56 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8004d32:	4b0c      	ldr	r3, [pc, #48]	@ (8004d64 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a0b      	ldr	r2, [pc, #44]	@ (8004d64 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004d38:	f023 0304 	bic.w	r3, r3, #4
 8004d3c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8004d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8004d68 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004d40:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004d44:	f023 030c 	bic.w	r3, r3, #12
 8004d48:	4a07      	ldr	r2, [pc, #28]	@ (8004d68 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004d4a:	f043 0308 	orr.w	r3, r3, #8
 8004d4e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8004d52:	e000      	b.n	8004d56 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8004d54:	bf00      	nop
  }
}
 8004d56:	bf00      	nop
 8004d58:	370c      	adds	r7, #12
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	e000e010 	.word	0xe000e010
 8004d68:	44020c00 	.word	0x44020c00

08004d6c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8004d72:	4b17      	ldr	r3, [pc, #92]	@ (8004dd0 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0304 	and.w	r3, r3, #4
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d002      	beq.n	8004d84 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8004d7e:	2304      	movs	r3, #4
 8004d80:	607b      	str	r3, [r7, #4]
 8004d82:	e01e      	b.n	8004dc2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8004d84:	4b13      	ldr	r3, [pc, #76]	@ (8004dd4 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8004d86:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004d8a:	f003 030c 	and.w	r3, r3, #12
 8004d8e:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	2b08      	cmp	r3, #8
 8004d94:	d00f      	beq.n	8004db6 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2b08      	cmp	r3, #8
 8004d9a:	d80f      	bhi.n	8004dbc <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d003      	beq.n	8004daa <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	2b04      	cmp	r3, #4
 8004da6:	d003      	beq.n	8004db0 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8004da8:	e008      	b.n	8004dbc <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8004daa:	2300      	movs	r3, #0
 8004dac:	607b      	str	r3, [r7, #4]
        break;
 8004dae:	e008      	b.n	8004dc2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8004db0:	2301      	movs	r3, #1
 8004db2:	607b      	str	r3, [r7, #4]
        break;
 8004db4:	e005      	b.n	8004dc2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8004db6:	2302      	movs	r3, #2
 8004db8:	607b      	str	r3, [r7, #4]
        break;
 8004dba:	e002      	b.n	8004dc2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	607b      	str	r3, [r7, #4]
        break;
 8004dc0:	bf00      	nop
    }
  }
  return systick_source;
 8004dc2:	687b      	ldr	r3, [r7, #4]
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr
 8004dd0:	e000e010 	.word	0xe000e010
 8004dd4:	44020c00 	.word	0x44020c00

08004dd8 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8004de0:	f7ff fe3a 	bl	8004a58 <HAL_GetTick>
 8004de4:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d101      	bne.n	8004df0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e06b      	b.n	8004ec8 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d008      	beq.n	8004e0e <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2220      	movs	r2, #32
 8004e00:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e05c      	b.n	8004ec8 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	695a      	ldr	r2, [r3, #20]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f042 0204 	orr.w	r2, r2, #4
 8004e1c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2205      	movs	r2, #5
 8004e22:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8004e26:	e020      	b.n	8004e6a <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8004e28:	f7ff fe16 	bl	8004a58 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b05      	cmp	r3, #5
 8004e34:	d919      	bls.n	8004e6a <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e3a:	f043 0210 	orr.w	r2, r3, #16
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2203      	movs	r2, #3
 8004e46:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d003      	beq.n	8004e5e <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e02e      	b.n	8004ec8 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d0d7      	beq.n	8004e28 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	695a      	ldr	r2, [r3, #20]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f042 0202 	orr.w	r2, r2, #2
 8004e86:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2204      	movs	r2, #4
 8004e8c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8004e98:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d007      	beq.n	8004ebe <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e019      	b.n	8004f16 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d004      	beq.n	8004ef8 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e00e      	b.n	8004f16 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2204      	movs	r2, #4
 8004efc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	6812      	ldr	r2, [r2, #0]
 8004f0a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004f0e:	f043 0304 	orr.w	r3, r3, #4
 8004f12:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
	...

08004f24 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b087      	sub	sp, #28
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004f32:	e136      	b.n	80051a2 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	2101      	movs	r1, #1
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f40:	4013      	ands	r3, r2
 8004f42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	f000 8128 	beq.w	800519c <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d003      	beq.n	8004f5c <HAL_GPIO_Init+0x38>
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	2b12      	cmp	r3, #18
 8004f5a:	d125      	bne.n	8004fa8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	08da      	lsrs	r2, r3, #3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	3208      	adds	r2, #8
 8004f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f68:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	f003 0307 	and.w	r3, r3, #7
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	220f      	movs	r2, #15
 8004f74:	fa02 f303 	lsl.w	r3, r2, r3
 8004f78:	43db      	mvns	r3, r3
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	f003 020f 	and.w	r2, r3, #15
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	f003 0307 	and.w	r3, r3, #7
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	fa02 f303 	lsl.w	r3, r2, r3
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	08da      	lsrs	r2, r3, #3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	3208      	adds	r2, #8
 8004fa2:	6979      	ldr	r1, [r7, #20]
 8004fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	2203      	movs	r2, #3
 8004fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb8:	43db      	mvns	r3, r3
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f003 0203 	and.w	r2, r3, #3
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	005b      	lsls	r3, r3, #1
 8004fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d00b      	beq.n	8004ffc <HAL_GPIO_Init+0xd8>
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d007      	beq.n	8004ffc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ff0:	2b11      	cmp	r3, #17
 8004ff2:	d003      	beq.n	8004ffc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	2b12      	cmp	r3, #18
 8004ffa:	d130      	bne.n	800505e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	005b      	lsls	r3, r3, #1
 8005006:	2203      	movs	r2, #3
 8005008:	fa02 f303 	lsl.w	r3, r2, r3
 800500c:	43db      	mvns	r3, r3
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	4013      	ands	r3, r2
 8005012:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	68da      	ldr	r2, [r3, #12]
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	005b      	lsls	r3, r3, #1
 800501c:	fa02 f303 	lsl.w	r3, r2, r3
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	4313      	orrs	r3, r2
 8005024:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005032:	2201      	movs	r2, #1
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	fa02 f303 	lsl.w	r3, r2, r3
 800503a:	43db      	mvns	r3, r3
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	4013      	ands	r3, r2
 8005040:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	091b      	lsrs	r3, r3, #4
 8005048:	f003 0201 	and.w	r2, r3, #1
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	fa02 f303 	lsl.w	r3, r2, r3
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	4313      	orrs	r3, r2
 8005056:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	2b03      	cmp	r3, #3
 8005064:	d017      	beq.n	8005096 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	005b      	lsls	r3, r3, #1
 8005070:	2203      	movs	r2, #3
 8005072:	fa02 f303 	lsl.w	r3, r2, r3
 8005076:	43db      	mvns	r3, r3
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	4013      	ands	r3, r2
 800507c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	689a      	ldr	r2, [r3, #8]
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	fa02 f303 	lsl.w	r3, r2, r3
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	4313      	orrs	r3, r2
 800508e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d07c      	beq.n	800519c <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80050a2:	4a47      	ldr	r2, [pc, #284]	@ (80051c0 <HAL_GPIO_Init+0x29c>)
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	089b      	lsrs	r3, r3, #2
 80050a8:	3318      	adds	r3, #24
 80050aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050ae:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	f003 0303 	and.w	r3, r3, #3
 80050b6:	00db      	lsls	r3, r3, #3
 80050b8:	220f      	movs	r2, #15
 80050ba:	fa02 f303 	lsl.w	r3, r2, r3
 80050be:	43db      	mvns	r3, r3
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	4013      	ands	r3, r2
 80050c4:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	0a9a      	lsrs	r2, r3, #10
 80050ca:	4b3e      	ldr	r3, [pc, #248]	@ (80051c4 <HAL_GPIO_Init+0x2a0>)
 80050cc:	4013      	ands	r3, r2
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	f002 0203 	and.w	r2, r2, #3
 80050d4:	00d2      	lsls	r2, r2, #3
 80050d6:	4093      	lsls	r3, r2
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	4313      	orrs	r3, r2
 80050dc:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80050de:	4938      	ldr	r1, [pc, #224]	@ (80051c0 <HAL_GPIO_Init+0x29c>)
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	089b      	lsrs	r3, r3, #2
 80050e4:	3318      	adds	r3, #24
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80050ec:	4b34      	ldr	r3, [pc, #208]	@ (80051c0 <HAL_GPIO_Init+0x29c>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	43db      	mvns	r3, r3
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	4013      	ands	r3, r2
 80050fa:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d003      	beq.n	8005110 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	4313      	orrs	r3, r2
 800510e:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8005110:	4a2b      	ldr	r2, [pc, #172]	@ (80051c0 <HAL_GPIO_Init+0x29c>)
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8005116:	4b2a      	ldr	r3, [pc, #168]	@ (80051c0 <HAL_GPIO_Init+0x29c>)
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	43db      	mvns	r3, r3
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	4013      	ands	r3, r2
 8005124:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d003      	beq.n	800513a <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	4313      	orrs	r3, r2
 8005138:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800513a:	4a21      	ldr	r2, [pc, #132]	@ (80051c0 <HAL_GPIO_Init+0x29c>)
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8005140:	4b1f      	ldr	r3, [pc, #124]	@ (80051c0 <HAL_GPIO_Init+0x29c>)
 8005142:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005146:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	43db      	mvns	r3, r3
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	4013      	ands	r3, r2
 8005150:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	4313      	orrs	r3, r2
 8005164:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8005166:	4a16      	ldr	r2, [pc, #88]	@ (80051c0 <HAL_GPIO_Init+0x29c>)
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800516e:	4b14      	ldr	r3, [pc, #80]	@ (80051c0 <HAL_GPIO_Init+0x29c>)
 8005170:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005174:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	43db      	mvns	r3, r3
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	4013      	ands	r3, r2
 800517e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	4313      	orrs	r3, r2
 8005192:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8005194:	4a0a      	ldr	r2, [pc, #40]	@ (80051c0 <HAL_GPIO_Init+0x29c>)
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	3301      	adds	r3, #1
 80051a0:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	fa22 f303 	lsr.w	r3, r2, r3
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f47f aec1 	bne.w	8004f34 <HAL_GPIO_Init+0x10>
  }
}
 80051b2:	bf00      	nop
 80051b4:	bf00      	nop
 80051b6:	371c      	adds	r7, #28
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	44022000 	.word	0x44022000
 80051c4:	002f7f7f 	.word	0x002f7f7f

080051c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	460b      	mov	r3, r1
 80051d2:	807b      	strh	r3, [r7, #2]
 80051d4:	4613      	mov	r3, r2
 80051d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80051d8:	787b      	ldrb	r3, [r7, #1]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d003      	beq.n	80051e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80051de:	887a      	ldrh	r2, [r7, #2]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80051e4:	e002      	b.n	80051ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80051e6:	887a      	ldrh	r2, [r7, #2]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	460b      	mov	r3, r1
 8005202:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800520a:	887a      	ldrh	r2, [r7, #2]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4013      	ands	r3, r2
 8005210:	041a      	lsls	r2, r3, #16
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	43d9      	mvns	r1, r3
 8005216:	887b      	ldrh	r3, [r7, #2]
 8005218:	400b      	ands	r3, r1
 800521a:	431a      	orrs	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	619a      	str	r2, [r3, #24]
}
 8005220:	bf00      	nop
 8005222:	3714      	adds	r7, #20
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	4603      	mov	r3, r0
 8005234:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8005236:	4b0f      	ldr	r3, [pc, #60]	@ (8005274 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8005238:	68da      	ldr	r2, [r3, #12]
 800523a:	88fb      	ldrh	r3, [r7, #6]
 800523c:	4013      	ands	r3, r2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d006      	beq.n	8005250 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8005242:	4a0c      	ldr	r2, [pc, #48]	@ (8005274 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8005244:	88fb      	ldrh	r3, [r7, #6]
 8005246:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8005248:	88fb      	ldrh	r3, [r7, #6]
 800524a:	4618      	mov	r0, r3
 800524c:	f000 f814 	bl	8005278 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8005250:	4b08      	ldr	r3, [pc, #32]	@ (8005274 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8005252:	691a      	ldr	r2, [r3, #16]
 8005254:	88fb      	ldrh	r3, [r7, #6]
 8005256:	4013      	ands	r3, r2
 8005258:	2b00      	cmp	r3, #0
 800525a:	d006      	beq.n	800526a <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800525c:	4a05      	ldr	r2, [pc, #20]	@ (8005274 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800525e:	88fb      	ldrh	r3, [r7, #6]
 8005260:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8005262:	88fb      	ldrh	r3, [r7, #6]
 8005264:	4618      	mov	r0, r3
 8005266:	f7fe fd45 	bl	8003cf4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800526a:	bf00      	nop
 800526c:	3708      	adds	r7, #8
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	44022000 	.word	0x44022000

08005278 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	4603      	mov	r3, r0
 8005280:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8005282:	bf00      	nop
 8005284:	370c      	adds	r7, #12
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
	...

08005290 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005298:	2300      	movs	r3, #0
 800529a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800529c:	4b0b      	ldr	r3, [pc, #44]	@ (80052cc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0301 	and.w	r3, r3, #1
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d002      	beq.n	80052ae <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	73fb      	strb	r3, [r7, #15]
 80052ac:	e007      	b.n	80052be <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80052ae:	4b07      	ldr	r3, [pc, #28]	@ (80052cc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f023 0204 	bic.w	r2, r3, #4
 80052b6:	4905      	ldr	r1, [pc, #20]	@ (80052cc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	600b      	str	r3, [r1, #0]
  }

  return status;
 80052be:	7bfb      	ldrb	r3, [r7, #15]
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3714      	adds	r7, #20
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr
 80052cc:	40030400 	.word	0x40030400

080052d0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80052d0:	b480      	push	{r7}
 80052d2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80052d4:	4b05      	ldr	r3, [pc, #20]	@ (80052ec <HAL_ICACHE_Enable+0x1c>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a04      	ldr	r2, [pc, #16]	@ (80052ec <HAL_ICACHE_Enable+0x1c>)
 80052da:	f043 0301 	orr.w	r3, r3, #1
 80052de:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr
 80052ec:	40030400 	.word	0x40030400

080052f0 <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e037      	b.n	8005376 <HAL_NAND_Init+0x86>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d106      	bne.n	8005320 <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f7ff f906 	bl	800452c <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	3304      	adds	r3, #4
 8005328:	4619      	mov	r1, r3
 800532a:	4610      	mov	r0, r2
 800532c:	f00a f8a0 	bl	800f470 <FMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6818      	ldr	r0, [r3, #0]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	461a      	mov	r2, r3
 800533a:	68b9      	ldr	r1, [r7, #8]
 800533c:	f00a f8c2 	bl	800f4c4 <FMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6818      	ldr	r0, [r3, #0]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	461a      	mov	r2, r3
 800534a:	6879      	ldr	r1, [r7, #4]
 800534c:	f00a f8d7 	bl	800f4fe <FMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
  __FMC_NAND_ENABLE(hnand->Instance);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f042 0204 	orr.w	r2, r2, #4
 800535e:	601a      	str	r2, [r3, #0]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8005360:	4b07      	ldr	r3, [pc, #28]	@ (8005380 <HAL_NAND_Init+0x90>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a06      	ldr	r2, [pc, #24]	@ (8005380 <HAL_NAND_Init+0x90>)
 8005366:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800536a:	6013      	str	r3, [r2, #0]
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	47000400 	.word	0x47000400

08005384 <HAL_NAND_Reset>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Reset(NAND_HandleTypeDef *hnand)
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  uint32_t deviceaddress;

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b02      	cmp	r3, #2
 8005396:	d101      	bne.n	800539c <HAL_NAND_Reset+0x18>
  {
    return HAL_BUSY;
 8005398:	2302      	movs	r3, #2
 800539a:	e027      	b.n	80053ec <HAL_NAND_Reset+0x68>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d120      	bne.n	80053ea <HAL_NAND_Reset+0x66>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d101      	bne.n	80053b6 <HAL_NAND_Reset+0x32>
 80053b2:	2302      	movs	r3, #2
 80053b4:	e01a      	b.n	80053ec <HAL_NAND_Reset+0x68>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2202      	movs	r2, #2
 80053c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 80053c6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80053ca:	60fb      	str	r3, [r7, #12]

    /* Send NAND reset command */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = 0xFF;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053d2:	22ff      	movs	r2, #255	@ 0xff
 80053d4:	701a      	strb	r2, [r3, #0]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
 80053e8:	e000      	b.n	80053ec <HAL_NAND_Reset+0x68>
    return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1

}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3714      	adds	r7, #20
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <HAL_NAND_Read_Page_8b>:
  * @param  NumPageToRead  number of pages to read from block
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Read_Page_8b(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress,
                                        uint8_t *pBuffer, uint32_t NumPageToRead)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b08c      	sub	sp, #48	@ 0x30
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
 8005404:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t tickstart;
  uint32_t deviceaddress;
  uint32_t numpagesread = 0U;
 8005406:	2300      	movs	r3, #0
 8005408:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t nandaddress;
  uint32_t nbpages = NumPageToRead;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	623b      	str	r3, [r7, #32]
  uint8_t *buff = pBuffer;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	61fb      	str	r3, [r7, #28]

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b02      	cmp	r3, #2
 800541c:	d101      	bne.n	8005422 <HAL_NAND_Read_Page_8b+0x2a>
  {
    return HAL_BUSY;
 800541e:	2302      	movs	r3, #2
 8005420:	e140      	b.n	80056a4 <HAL_NAND_Read_Page_8b+0x2ac>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b01      	cmp	r3, #1
 800542c:	f040 8139 	bne.w	80056a2 <HAL_NAND_Read_Page_8b+0x2aa>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005436:	2b01      	cmp	r3, #1
 8005438:	d101      	bne.n	800543e <HAL_NAND_Read_Page_8b+0x46>
 800543a:	2302      	movs	r3, #2
 800543c:	e132      	b.n	80056a4 <HAL_NAND_Read_Page_8b+0x2ac>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2202      	movs	r2, #2
 800544a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 800544e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005452:	61bb      	str	r3, [r7, #24]

    /* NAND raw address calculation */
    nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	881b      	ldrh	r3, [r3, #0]
 8005458:	4619      	mov	r1, r3
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	889b      	ldrh	r3, [r3, #4]
 800545e:	461a      	mov	r2, r3
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	885b      	ldrh	r3, [r3, #2]
 8005464:	4618      	mov	r0, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800546a:	fb00 f303 	mul.w	r3, r0, r3
 800546e:	4413      	add	r3, r2
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005474:	fb02 f303 	mul.w	r3, r2, r3
 8005478:	440b      	add	r3, r1
 800547a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Page(s) read loop */
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 800547c:	e0fa      	b.n	8005674 <HAL_NAND_Read_Page_8b+0x27c>
    {
      /* Send read page command sequence */
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005484:	2200      	movs	r2, #0
 8005486:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005488:	f3bf 8f4f 	dsb	sy
}
 800548c:	bf00      	nop
      __DSB();

      /* Cards with page size <= 512 bytes */
      if ((hnand->Config.PageSize) <= 512U)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005492:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005496:	d848      	bhi.n	800552a <HAL_NAND_Read_Page_8b+0x132>
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80054a0:	fb02 f303 	mul.w	r3, r2, r3
 80054a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054a8:	d21a      	bcs.n	80054e0 <HAL_NAND_Read_Page_8b+0xe8>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054b0:	2200      	movs	r2, #0
 80054b2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80054b4:	f3bf 8f4f 	dsb	sy
}
 80054b8:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054c2:	b2d2      	uxtb	r2, r2
 80054c4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80054c6:	f3bf 8f4f 	dsb	sy
}
 80054ca:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80054cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ce:	0a1a      	lsrs	r2, r3, #8
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054d6:	b2d2      	uxtb	r2, r2
 80054d8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80054da:	f3bf 8f4f 	dsb	sy
}
 80054de:	e07d      	b.n	80055dc <HAL_NAND_Read_Page_8b+0x1e4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054e6:	2200      	movs	r2, #0
 80054e8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80054ea:	f3bf 8f4f 	dsb	sy
}
 80054ee:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054f8:	b2d2      	uxtb	r2, r2
 80054fa:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80054fc:	f3bf 8f4f 	dsb	sy
}
 8005500:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005504:	0a1a      	lsrs	r2, r3, #8
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800550c:	b2d2      	uxtb	r2, r2
 800550e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005510:	f3bf 8f4f 	dsb	sy
}
 8005514:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8005516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005518:	0c1a      	lsrs	r2, r3, #16
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005520:	b2d2      	uxtb	r2, r2
 8005522:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005524:	f3bf 8f4f 	dsb	sy
}
 8005528:	e058      	b.n	80055dc <HAL_NAND_Read_Page_8b+0x1e4>
          __DSB();
        }
      }
      else /* (hnand->Config.PageSize) > 512 */
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005532:	fb02 f303 	mul.w	r3, r2, r3
 8005536:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800553a:	d222      	bcs.n	8005582 <HAL_NAND_Read_Page_8b+0x18a>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005542:	2200      	movs	r2, #0
 8005544:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005546:	f3bf 8f4f 	dsb	sy
}
 800554a:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005552:	2200      	movs	r2, #0
 8005554:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005556:	f3bf 8f4f 	dsb	sy
}
 800555a:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005562:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005564:	b2d2      	uxtb	r2, r2
 8005566:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005568:	f3bf 8f4f 	dsb	sy
}
 800556c:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 800556e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005570:	0a1a      	lsrs	r2, r3, #8
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005578:	b2d2      	uxtb	r2, r2
 800557a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800557c:	f3bf 8f4f 	dsb	sy
}
 8005580:	e02c      	b.n	80055dc <HAL_NAND_Read_Page_8b+0x1e4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005588:	2200      	movs	r2, #0
 800558a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800558c:	f3bf 8f4f 	dsb	sy
}
 8005590:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005598:	2200      	movs	r2, #0
 800559a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800559c:	f3bf 8f4f 	dsb	sy
}
 80055a0:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055aa:	b2d2      	uxtb	r2, r2
 80055ac:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80055ae:	f3bf 8f4f 	dsb	sy
}
 80055b2:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80055b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b6:	0a1a      	lsrs	r2, r3, #8
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055be:	b2d2      	uxtb	r2, r2
 80055c0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80055c2:	f3bf 8f4f 	dsb	sy
}
 80055c6:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 80055c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ca:	0c1a      	lsrs	r2, r3, #16
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055d2:	b2d2      	uxtb	r2, r2
 80055d4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80055d6:	f3bf 8f4f 	dsb	sy
}
 80055da:	bf00      	nop
          __DSB();
        }
      }

      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055e2:	2230      	movs	r2, #48	@ 0x30
 80055e4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80055e6:	f3bf 8f4f 	dsb	sy
}
 80055ea:	bf00      	nop
      __DSB();


      if (hnand->Config.ExtraCommandEnable == ENABLE)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d123      	bne.n	800563e <HAL_NAND_Read_Page_8b+0x246>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80055f6:	f7ff fa2f 	bl	8004a58 <HAL_GetTick>
 80055fa:	6178      	str	r0, [r7, #20]

        /* Read status until NAND is ready */
        while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 80055fc:	e011      	b.n	8005622 <HAL_NAND_Read_Page_8b+0x22a>
        {
          if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 80055fe:	f7ff fa2b 	bl	8004a58 <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800560c:	d909      	bls.n	8005622 <HAL_NAND_Read_Page_8b+0x22a>
          {
            /* Update the NAND controller state */
            hnand->State = HAL_NAND_STATE_ERROR;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2203      	movs	r2, #3
 8005612:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

            /* Process unlocked */
            __HAL_UNLOCK(hnand);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 2020 	strb.w	r2, [r3, #32]

            return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e040      	b.n	80056a4 <HAL_NAND_Read_Page_8b+0x2ac>
        while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	f000 fd13 	bl	800604e <HAL_NAND_Read_Status>
 8005628:	4603      	mov	r3, r0
 800562a:	2b40      	cmp	r3, #64	@ 0x40
 800562c:	d1e7      	bne.n	80055fe <HAL_NAND_Read_Page_8b+0x206>
          }
        }

        /* Go back to read mode */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = ((uint8_t)0x00);
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005634:	2200      	movs	r2, #0
 8005636:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005638:	f3bf 8f4f 	dsb	sy
}
 800563c:	bf00      	nop
        __DSB();
      }

      /* Get Data into Buffer */
      for (index = 0U; index < hnand->Config.PageSize; index++)
 800563e:	2300      	movs	r3, #0
 8005640:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005642:	e009      	b.n	8005658 <HAL_NAND_Read_Page_8b+0x260>
      {
        *buff = *(uint8_t *)deviceaddress;
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	781a      	ldrb	r2, [r3, #0]
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	701a      	strb	r2, [r3, #0]
        buff++;
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	3301      	adds	r3, #1
 8005650:	61fb      	str	r3, [r7, #28]
      for (index = 0U; index < hnand->Config.PageSize; index++)
 8005652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005654:	3301      	adds	r3, #1
 8005656:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800565c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800565e:	429a      	cmp	r2, r3
 8005660:	d3f0      	bcc.n	8005644 <HAL_NAND_Read_Page_8b+0x24c>
      }

      /* Increment read pages number */
      numpagesread++;
 8005662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005664:	3301      	adds	r3, #1
 8005666:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Decrement pages to read */
      nbpages--;
 8005668:	6a3b      	ldr	r3, [r7, #32]
 800566a:	3b01      	subs	r3, #1
 800566c:	623b      	str	r3, [r7, #32]

      /* Increment the NAND address */
      nandaddress = (uint32_t)(nandaddress + 1U);
 800566e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005670:	3301      	adds	r3, #1
 8005672:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8005674:	6a3b      	ldr	r3, [r7, #32]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d009      	beq.n	800568e <HAL_NAND_Read_Page_8b+0x296>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005682:	fb02 f303 	mul.w	r3, r2, r3
 8005686:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005688:	429a      	cmp	r2, r3
 800568a:	f4ff aef8 	bcc.w	800547e <HAL_NAND_Read_Page_8b+0x86>
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800569e:	2300      	movs	r3, #0
 80056a0:	e000      	b.n	80056a4 <HAL_NAND_Read_Page_8b+0x2ac>
    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3730      	adds	r7, #48	@ 0x30
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <HAL_NAND_Write_Page_8b>:
  * @param  NumPageToWrite   number of pages to write to block
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Write_Page_8b(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress,
                                         const uint8_t *pBuffer, uint32_t NumPageToWrite)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b08c      	sub	sp, #48	@ 0x30
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
 80056b8:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t tickstart;
  uint32_t deviceaddress;
  uint32_t numpageswritten = 0U;
 80056ba:	2300      	movs	r3, #0
 80056bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t nandaddress;
  uint32_t nbpages = NumPageToWrite;
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	623b      	str	r3, [r7, #32]
  const uint8_t *buff = pBuffer;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	61fb      	str	r3, [r7, #28]

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d101      	bne.n	80056d6 <HAL_NAND_Write_Page_8b+0x2a>
  {
    return HAL_BUSY;
 80056d2:	2302      	movs	r3, #2
 80056d4:	e13e      	b.n	8005954 <HAL_NAND_Write_Page_8b+0x2a8>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b01      	cmp	r3, #1
 80056e0:	f040 8137 	bne.w	8005952 <HAL_NAND_Write_Page_8b+0x2a6>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d101      	bne.n	80056f2 <HAL_NAND_Write_Page_8b+0x46>
 80056ee:	2302      	movs	r3, #2
 80056f0:	e130      	b.n	8005954 <HAL_NAND_Write_Page_8b+0x2a8>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2202      	movs	r2, #2
 80056fe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 8005702:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005706:	61bb      	str	r3, [r7, #24]

    /* NAND raw address calculation */
    nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	881b      	ldrh	r3, [r3, #0]
 800570c:	4619      	mov	r1, r3
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	889b      	ldrh	r3, [r3, #4]
 8005712:	461a      	mov	r2, r3
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	885b      	ldrh	r3, [r3, #2]
 8005718:	4618      	mov	r0, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800571e:	fb00 f303 	mul.w	r3, r0, r3
 8005722:	4413      	add	r3, r2
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005728:	fb02 f303 	mul.w	r3, r2, r3
 800572c:	440b      	add	r3, r1
 800572e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Page(s) write loop */
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8005730:	e0f8      	b.n	8005924 <HAL_NAND_Write_Page_8b+0x278>
    {
      /* Send write page command sequence */
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005738:	2200      	movs	r2, #0
 800573a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800573c:	f3bf 8f4f 	dsb	sy
}
 8005740:	bf00      	nop
      __DSB();
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005748:	2280      	movs	r2, #128	@ 0x80
 800574a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800574c:	f3bf 8f4f 	dsb	sy
}
 8005750:	bf00      	nop
      __DSB();

      /* Cards with page size <= 512 bytes */
      if ((hnand->Config.PageSize) <= 512U)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005756:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800575a:	d848      	bhi.n	80057ee <HAL_NAND_Write_Page_8b+0x142>
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005764:	fb02 f303 	mul.w	r3, r2, r3
 8005768:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800576c:	d21a      	bcs.n	80057a4 <HAL_NAND_Write_Page_8b+0xf8>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005774:	2200      	movs	r2, #0
 8005776:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005778:	f3bf 8f4f 	dsb	sy
}
 800577c:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005784:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005786:	b2d2      	uxtb	r2, r2
 8005788:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800578a:	f3bf 8f4f 	dsb	sy
}
 800578e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005792:	0a1a      	lsrs	r2, r3, #8
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800579a:	b2d2      	uxtb	r2, r2
 800579c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800579e:	f3bf 8f4f 	dsb	sy
}
 80057a2:	e07d      	b.n	80058a0 <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057aa:	2200      	movs	r2, #0
 80057ac:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80057ae:	f3bf 8f4f 	dsb	sy
}
 80057b2:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057bc:	b2d2      	uxtb	r2, r2
 80057be:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80057c0:	f3bf 8f4f 	dsb	sy
}
 80057c4:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80057c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c8:	0a1a      	lsrs	r2, r3, #8
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057d0:	b2d2      	uxtb	r2, r2
 80057d2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80057d4:	f3bf 8f4f 	dsb	sy
}
 80057d8:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 80057da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057dc:	0c1a      	lsrs	r2, r3, #16
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057e4:	b2d2      	uxtb	r2, r2
 80057e6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80057e8:	f3bf 8f4f 	dsb	sy
}
 80057ec:	e058      	b.n	80058a0 <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
      }
      else /* (hnand->Config.PageSize) > 512 */
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80057f6:	fb02 f303 	mul.w	r3, r2, r3
 80057fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057fe:	d222      	bcs.n	8005846 <HAL_NAND_Write_Page_8b+0x19a>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005806:	2200      	movs	r2, #0
 8005808:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800580a:	f3bf 8f4f 	dsb	sy
}
 800580e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005816:	2200      	movs	r2, #0
 8005818:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800581a:	f3bf 8f4f 	dsb	sy
}
 800581e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005826:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005828:	b2d2      	uxtb	r2, r2
 800582a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800582c:	f3bf 8f4f 	dsb	sy
}
 8005830:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005834:	0a1a      	lsrs	r2, r3, #8
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800583c:	b2d2      	uxtb	r2, r2
 800583e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005840:	f3bf 8f4f 	dsb	sy
}
 8005844:	e02c      	b.n	80058a0 <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800584c:	2200      	movs	r2, #0
 800584e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005850:	f3bf 8f4f 	dsb	sy
}
 8005854:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800585c:	2200      	movs	r2, #0
 800585e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005860:	f3bf 8f4f 	dsb	sy
}
 8005864:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800586c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800586e:	b2d2      	uxtb	r2, r2
 8005870:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005872:	f3bf 8f4f 	dsb	sy
}
 8005876:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587a:	0a1a      	lsrs	r2, r3, #8
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005882:	b2d2      	uxtb	r2, r2
 8005884:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005886:	f3bf 8f4f 	dsb	sy
}
 800588a:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 800588c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588e:	0c1a      	lsrs	r2, r3, #16
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005896:	b2d2      	uxtb	r2, r2
 8005898:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800589a:	f3bf 8f4f 	dsb	sy
}
 800589e:	bf00      	nop
          __DSB();
        }
      }

      /* Write data to memory */
      for (index = 0U; index < hnand->Config.PageSize; index++)
 80058a0:	2300      	movs	r3, #0
 80058a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058a4:	e00c      	b.n	80058c0 <HAL_NAND_Write_Page_8b+0x214>
      {
        *(__IO uint8_t *)deviceaddress = *buff;
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	69fa      	ldr	r2, [r7, #28]
 80058aa:	7812      	ldrb	r2, [r2, #0]
 80058ac:	701a      	strb	r2, [r3, #0]
        buff++;
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	3301      	adds	r3, #1
 80058b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("dsb 0xF":::"memory");
 80058b4:	f3bf 8f4f 	dsb	sy
}
 80058b8:	bf00      	nop
      for (index = 0U; index < hnand->Config.PageSize; index++)
 80058ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058bc:	3301      	adds	r3, #1
 80058be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d3ed      	bcc.n	80058a6 <HAL_NAND_Write_Page_8b+0x1fa>
        __DSB();
      }

      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058d0:	2210      	movs	r2, #16
 80058d2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80058d4:	f3bf 8f4f 	dsb	sy
}
 80058d8:	bf00      	nop
      __DSB();

      /* Get tick */
      tickstart = HAL_GetTick();
 80058da:	f7ff f8bd 	bl	8004a58 <HAL_GetTick>
 80058de:	6178      	str	r0, [r7, #20]

      /* Read status until NAND is ready */
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 80058e0:	e011      	b.n	8005906 <HAL_NAND_Write_Page_8b+0x25a>
      {
        if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 80058e2:	f7ff f8b9 	bl	8004a58 <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80058f0:	d909      	bls.n	8005906 <HAL_NAND_Write_Page_8b+0x25a>
        {
          /* Update the NAND controller state */
          hnand->State = HAL_NAND_STATE_ERROR;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2203      	movs	r2, #3
 80058f6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process unlocked */
          __HAL_UNLOCK(hnand);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e026      	b.n	8005954 <HAL_NAND_Write_Page_8b+0x2a8>
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8005906:	68f8      	ldr	r0, [r7, #12]
 8005908:	f000 fba1 	bl	800604e <HAL_NAND_Read_Status>
 800590c:	4603      	mov	r3, r0
 800590e:	2b40      	cmp	r3, #64	@ 0x40
 8005910:	d1e7      	bne.n	80058e2 <HAL_NAND_Write_Page_8b+0x236>
        }
      }

      /* Increment written pages number */
      numpageswritten++;
 8005912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005914:	3301      	adds	r3, #1
 8005916:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Decrement pages to write */
      nbpages--;
 8005918:	6a3b      	ldr	r3, [r7, #32]
 800591a:	3b01      	subs	r3, #1
 800591c:	623b      	str	r3, [r7, #32]

      /* Increment the NAND address */
      nandaddress = (uint32_t)(nandaddress + 1U);
 800591e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005920:	3301      	adds	r3, #1
 8005922:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8005924:	6a3b      	ldr	r3, [r7, #32]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d009      	beq.n	800593e <HAL_NAND_Write_Page_8b+0x292>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005932:	fb02 f303 	mul.w	r3, r2, r3
 8005936:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005938:	429a      	cmp	r2, r3
 800593a:	f4ff aefa 	bcc.w	8005732 <HAL_NAND_Write_Page_8b+0x86>
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800594e:	2300      	movs	r3, #0
 8005950:	e000      	b.n	8005954 <HAL_NAND_Write_Page_8b+0x2a8>
    return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
}
 8005954:	4618      	mov	r0, r3
 8005956:	3730      	adds	r7, #48	@ 0x30
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <HAL_NAND_Read_SpareArea_8b>:
  * @param  NumSpareAreaToRead Number of spare area to read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Read_SpareArea_8b(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress,
                                             uint8_t *pBuffer, uint32_t NumSpareAreaToRead)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b08c      	sub	sp, #48	@ 0x30
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	607a      	str	r2, [r7, #4]
 8005968:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t tickstart;
  uint32_t deviceaddress;
  uint32_t numsparearearead = 0U;
 800596a:	2300      	movs	r3, #0
 800596c:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t nandaddress;
  uint32_t columnaddress;
  uint32_t nbspare = NumSpareAreaToRead;
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	623b      	str	r3, [r7, #32]
  uint8_t *buff = pBuffer;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	61fb      	str	r3, [r7, #28]

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b02      	cmp	r3, #2
 8005980:	d101      	bne.n	8005986 <HAL_NAND_Read_SpareArea_8b+0x2a>
  {
    return HAL_BUSY;
 8005982:	2302      	movs	r3, #2
 8005984:	e151      	b.n	8005c2a <HAL_NAND_Read_SpareArea_8b+0x2ce>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b01      	cmp	r3, #1
 8005990:	f040 814a 	bne.w	8005c28 <HAL_NAND_Read_SpareArea_8b+0x2cc>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f893 3020 	ldrb.w	r3, [r3, #32]
 800599a:	2b01      	cmp	r3, #1
 800599c:	d101      	bne.n	80059a2 <HAL_NAND_Read_SpareArea_8b+0x46>
 800599e:	2302      	movs	r3, #2
 80059a0:	e143      	b.n	8005c2a <HAL_NAND_Read_SpareArea_8b+0x2ce>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2202      	movs	r2, #2
 80059ae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 80059b2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80059b6:	61bb      	str	r3, [r7, #24]

    /* NAND raw address calculation */
    nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	881b      	ldrh	r3, [r3, #0]
 80059bc:	4619      	mov	r1, r3
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	889b      	ldrh	r3, [r3, #4]
 80059c2:	461a      	mov	r2, r3
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	885b      	ldrh	r3, [r3, #2]
 80059c8:	4618      	mov	r0, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ce:	fb00 f303 	mul.w	r3, r0, r3
 80059d2:	4413      	add	r3, r2
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80059d8:	fb02 f303 	mul.w	r3, r2, r3
 80059dc:	440b      	add	r3, r1
 80059de:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Column in page address */
    columnaddress = COLUMN_ADDRESS(hnand);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e4:	617b      	str	r3, [r7, #20]

    /* Spare area(s) read loop */
    while ((nbspare != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 80059e6:	e108      	b.n	8005bfa <HAL_NAND_Read_SpareArea_8b+0x29e>
    {
      /* Cards with page size <= 512 bytes */
      if ((hnand->Config.PageSize) <= 512U)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059f0:	d850      	bhi.n	8005a94 <HAL_NAND_Read_SpareArea_8b+0x138>
      {
        /* Send read spare area command sequence */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_C;
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059f8:	2250      	movs	r2, #80	@ 0x50
 80059fa:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80059fc:	f3bf 8f4f 	dsb	sy
}
 8005a00:	bf00      	nop
        __DSB();

        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005a0a:	fb02 f303 	mul.w	r3, r2, r3
 8005a0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a12:	d21a      	bcs.n	8005a4a <HAL_NAND_Read_SpareArea_8b+0xee>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005a1e:	f3bf 8f4f 	dsb	sy
}
 8005a22:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a2c:	b2d2      	uxtb	r2, r2
 8005a2e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005a30:	f3bf 8f4f 	dsb	sy
}
 8005a34:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a38:	0a1a      	lsrs	r2, r3, #8
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a40:	b2d2      	uxtb	r2, r2
 8005a42:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005a44:	f3bf 8f4f 	dsb	sy
}
 8005a48:	e08b      	b.n	8005b62 <HAL_NAND_Read_SpareArea_8b+0x206>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a50:	2200      	movs	r2, #0
 8005a52:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005a54:	f3bf 8f4f 	dsb	sy
}
 8005a58:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a62:	b2d2      	uxtb	r2, r2
 8005a64:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005a66:	f3bf 8f4f 	dsb	sy
}
 8005a6a:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a6e:	0a1a      	lsrs	r2, r3, #8
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a76:	b2d2      	uxtb	r2, r2
 8005a78:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005a7a:	f3bf 8f4f 	dsb	sy
}
 8005a7e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8005a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a82:	0c1a      	lsrs	r2, r3, #16
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a8a:	b2d2      	uxtb	r2, r2
 8005a8c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005a8e:	f3bf 8f4f 	dsb	sy
}
 8005a92:	e066      	b.n	8005b62 <HAL_NAND_Read_SpareArea_8b+0x206>
        }
      }
      else /* (hnand->Config.PageSize) > 512 */
      {
        /* Send read spare area command sequence */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005a9e:	f3bf 8f4f 	dsb	sy
}
 8005aa2:	bf00      	nop
        __DSB();

        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005aac:	fb02 f303 	mul.w	r3, r2, r3
 8005ab0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ab4:	d225      	bcs.n	8005b02 <HAL_NAND_Read_SpareArea_8b+0x1a6>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnaddress);
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	b2d2      	uxtb	r2, r2
 8005ac0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005ac2:	f3bf 8f4f 	dsb	sy
}
 8005ac6:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnaddress);
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	0a1a      	lsrs	r2, r3, #8
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ad2:	b2d2      	uxtb	r2, r2
 8005ad4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005ad6:	f3bf 8f4f 	dsb	sy
}
 8005ada:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ae2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ae4:	b2d2      	uxtb	r2, r2
 8005ae6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005ae8:	f3bf 8f4f 	dsb	sy
}
 8005aec:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af0:	0a1a      	lsrs	r2, r3, #8
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005af8:	b2d2      	uxtb	r2, r2
 8005afa:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005afc:	f3bf 8f4f 	dsb	sy
}
 8005b00:	e02f      	b.n	8005b62 <HAL_NAND_Read_SpareArea_8b+0x206>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnaddress);
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	b2d2      	uxtb	r2, r2
 8005b0c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005b0e:	f3bf 8f4f 	dsb	sy
}
 8005b12:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnaddress);
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	0a1a      	lsrs	r2, r3, #8
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b1e:	b2d2      	uxtb	r2, r2
 8005b20:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005b22:	f3bf 8f4f 	dsb	sy
}
 8005b26:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b30:	b2d2      	uxtb	r2, r2
 8005b32:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005b34:	f3bf 8f4f 	dsb	sy
}
 8005b38:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3c:	0a1a      	lsrs	r2, r3, #8
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b44:	b2d2      	uxtb	r2, r2
 8005b46:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005b48:	f3bf 8f4f 	dsb	sy
}
 8005b4c:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b50:	0c1a      	lsrs	r2, r3, #16
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b58:	b2d2      	uxtb	r2, r2
 8005b5a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005b5c:	f3bf 8f4f 	dsb	sy
}
 8005b60:	bf00      	nop
          __DSB();
        }
      }

      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_TRUE1;
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b68:	2230      	movs	r2, #48	@ 0x30
 8005b6a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005b6c:	f3bf 8f4f 	dsb	sy
}
 8005b70:	bf00      	nop
      __DSB();

      if (hnand->Config.ExtraCommandEnable == ENABLE)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d123      	bne.n	8005bc4 <HAL_NAND_Read_SpareArea_8b+0x268>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005b7c:	f7fe ff6c 	bl	8004a58 <HAL_GetTick>
 8005b80:	6138      	str	r0, [r7, #16]

        /* Read status until NAND is ready */
        while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8005b82:	e011      	b.n	8005ba8 <HAL_NAND_Read_SpareArea_8b+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 8005b84:	f7fe ff68 	bl	8004a58 <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b92:	d909      	bls.n	8005ba8 <HAL_NAND_Read_SpareArea_8b+0x24c>
          {
            /* Update the NAND controller state */
            hnand->State = HAL_NAND_STATE_ERROR;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2203      	movs	r2, #3
 8005b98:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

            /* Process unlocked */
            __HAL_UNLOCK(hnand);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 2020 	strb.w	r2, [r3, #32]

            return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e040      	b.n	8005c2a <HAL_NAND_Read_SpareArea_8b+0x2ce>
        while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8005ba8:	68f8      	ldr	r0, [r7, #12]
 8005baa:	f000 fa50 	bl	800604e <HAL_NAND_Read_Status>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b40      	cmp	r3, #64	@ 0x40
 8005bb2:	d1e7      	bne.n	8005b84 <HAL_NAND_Read_SpareArea_8b+0x228>
          }
        }

        /* Go back to read mode */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = ((uint8_t)0x00);
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bba:	2200      	movs	r2, #0
 8005bbc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005bbe:	f3bf 8f4f 	dsb	sy
}
 8005bc2:	bf00      	nop
        __DSB();
      }

      /* Get Data into Buffer */
      for (index = 0U; index < hnand->Config.SpareAreaSize; index++)
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bc8:	e009      	b.n	8005bde <HAL_NAND_Read_SpareArea_8b+0x282>
      {
        *buff = *(uint8_t *)deviceaddress;
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	781a      	ldrb	r2, [r3, #0]
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	701a      	strb	r2, [r3, #0]
        buff++;
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	61fb      	str	r3, [r7, #28]
      for (index = 0U; index < hnand->Config.SpareAreaSize; index++)
 8005bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bda:	3301      	adds	r3, #1
 8005bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005be2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d3f0      	bcc.n	8005bca <HAL_NAND_Read_SpareArea_8b+0x26e>
      }

      /* Increment read spare areas number */
      numsparearearead++;
 8005be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bea:	3301      	adds	r3, #1
 8005bec:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Decrement spare areas to read */
      nbspare--;
 8005bee:	6a3b      	ldr	r3, [r7, #32]
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	623b      	str	r3, [r7, #32]

      /* Increment the NAND address */
      nandaddress = (uint32_t)(nandaddress + 1U);
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((nbspare != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8005bfa:	6a3b      	ldr	r3, [r7, #32]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d009      	beq.n	8005c14 <HAL_NAND_Read_SpareArea_8b+0x2b8>
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005c08:	fb02 f303 	mul.w	r3, r2, r3
 8005c0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	f4ff aeea 	bcc.w	80059e8 <HAL_NAND_Read_SpareArea_8b+0x8c>
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005c24:	2300      	movs	r3, #0
 8005c26:	e000      	b.n	8005c2a <HAL_NAND_Read_SpareArea_8b+0x2ce>
    return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3730      	adds	r7, #48	@ 0x30
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <HAL_NAND_Write_SpareArea_8b>:
  * @param  NumSpareAreaTowrite   number of spare areas to write to block
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Write_SpareArea_8b(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress,
                                              const uint8_t *pBuffer, uint32_t NumSpareAreaTowrite)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b08c      	sub	sp, #48	@ 0x30
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	60f8      	str	r0, [r7, #12]
 8005c3a:	60b9      	str	r1, [r7, #8]
 8005c3c:	607a      	str	r2, [r7, #4]
 8005c3e:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t tickstart;
  uint32_t deviceaddress;
  uint32_t numspareareawritten = 0U;
 8005c40:	2300      	movs	r3, #0
 8005c42:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t nandaddress;
  uint32_t columnaddress;
  uint32_t nbspare = NumSpareAreaTowrite;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	623b      	str	r3, [r7, #32]
  const uint8_t *buff = pBuffer;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	61fb      	str	r3, [r7, #28]

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d101      	bne.n	8005c5c <HAL_NAND_Write_SpareArea_8b+0x2a>
  {
    return HAL_BUSY;
 8005c58:	2302      	movs	r3, #2
 8005c5a:	e157      	b.n	8005f0c <HAL_NAND_Write_SpareArea_8b+0x2da>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	f040 8150 	bne.w	8005f0a <HAL_NAND_Write_SpareArea_8b+0x2d8>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d101      	bne.n	8005c78 <HAL_NAND_Write_SpareArea_8b+0x46>
 8005c74:	2302      	movs	r3, #2
 8005c76:	e149      	b.n	8005f0c <HAL_NAND_Write_SpareArea_8b+0x2da>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2202      	movs	r2, #2
 8005c84:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 8005c88:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005c8c:	61bb      	str	r3, [r7, #24]

    /* Page address calculation */
    nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	881b      	ldrh	r3, [r3, #0]
 8005c92:	4619      	mov	r1, r3
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	889b      	ldrh	r3, [r3, #4]
 8005c98:	461a      	mov	r2, r3
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	885b      	ldrh	r3, [r3, #2]
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ca4:	fb00 f303 	mul.w	r3, r0, r3
 8005ca8:	4413      	add	r3, r2
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005cae:	fb02 f303 	mul.w	r3, r2, r3
 8005cb2:	440b      	add	r3, r1
 8005cb4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Column in page address */
    columnaddress = COLUMN_ADDRESS(hnand);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cba:	617b      	str	r3, [r7, #20]

    /* Spare area(s) write loop */
    while ((nbspare != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8005cbc:	e10e      	b.n	8005edc <HAL_NAND_Write_SpareArea_8b+0x2aa>
    {
      /* Cards with page size <= 512 bytes */
      if ((hnand->Config.PageSize) <= 512U)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cc6:	d858      	bhi.n	8005d7a <HAL_NAND_Write_SpareArea_8b+0x148>
      {
        /* Send write Spare area command sequence */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_C;
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cce:	2250      	movs	r2, #80	@ 0x50
 8005cd0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005cd2:	f3bf 8f4f 	dsb	sy
}
 8005cd6:	bf00      	nop
        __DSB();
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cde:	2280      	movs	r2, #128	@ 0x80
 8005ce0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005ce2:	f3bf 8f4f 	dsb	sy
}
 8005ce6:	bf00      	nop
        __DSB();

        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005cf0:	fb02 f303 	mul.w	r3, r2, r3
 8005cf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cf8:	d21a      	bcs.n	8005d30 <HAL_NAND_Write_SpareArea_8b+0xfe>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d00:	2200      	movs	r2, #0
 8005d02:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d04:	f3bf 8f4f 	dsb	sy
}
 8005d08:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d12:	b2d2      	uxtb	r2, r2
 8005d14:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d16:	f3bf 8f4f 	dsb	sy
}
 8005d1a:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1e:	0a1a      	lsrs	r2, r3, #8
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d26:	b2d2      	uxtb	r2, r2
 8005d28:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d2a:	f3bf 8f4f 	dsb	sy
}
 8005d2e:	e093      	b.n	8005e58 <HAL_NAND_Write_SpareArea_8b+0x226>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d36:	2200      	movs	r2, #0
 8005d38:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d3a:	f3bf 8f4f 	dsb	sy
}
 8005d3e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d48:	b2d2      	uxtb	r2, r2
 8005d4a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d4c:	f3bf 8f4f 	dsb	sy
}
 8005d50:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d54:	0a1a      	lsrs	r2, r3, #8
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d5c:	b2d2      	uxtb	r2, r2
 8005d5e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d60:	f3bf 8f4f 	dsb	sy
}
 8005d64:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8005d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d68:	0c1a      	lsrs	r2, r3, #16
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d70:	b2d2      	uxtb	r2, r2
 8005d72:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d74:	f3bf 8f4f 	dsb	sy
}
 8005d78:	e06e      	b.n	8005e58 <HAL_NAND_Write_SpareArea_8b+0x226>
        }
      }
      else /* (hnand->Config.PageSize) > 512 */
      {
        /* Send write Spare area command sequence */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d80:	2200      	movs	r2, #0
 8005d82:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d84:	f3bf 8f4f 	dsb	sy
}
 8005d88:	bf00      	nop
        __DSB();
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d90:	2280      	movs	r2, #128	@ 0x80
 8005d92:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d94:	f3bf 8f4f 	dsb	sy
}
 8005d98:	bf00      	nop
        __DSB();

        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005da2:	fb02 f303 	mul.w	r3, r2, r3
 8005da6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005daa:	d225      	bcs.n	8005df8 <HAL_NAND_Write_SpareArea_8b+0x1c6>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnaddress);
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	b2d2      	uxtb	r2, r2
 8005db6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005db8:	f3bf 8f4f 	dsb	sy
}
 8005dbc:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnaddress);
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	0a1a      	lsrs	r2, r3, #8
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dc8:	b2d2      	uxtb	r2, r2
 8005dca:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005dcc:	f3bf 8f4f 	dsb	sy
}
 8005dd0:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dda:	b2d2      	uxtb	r2, r2
 8005ddc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005dde:	f3bf 8f4f 	dsb	sy
}
 8005de2:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de6:	0a1a      	lsrs	r2, r3, #8
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dee:	b2d2      	uxtb	r2, r2
 8005df0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005df2:	f3bf 8f4f 	dsb	sy
}
 8005df6:	e02f      	b.n	8005e58 <HAL_NAND_Write_SpareArea_8b+0x226>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnaddress);
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	b2d2      	uxtb	r2, r2
 8005e02:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005e04:	f3bf 8f4f 	dsb	sy
}
 8005e08:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnaddress);
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	0a1a      	lsrs	r2, r3, #8
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e14:	b2d2      	uxtb	r2, r2
 8005e16:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005e18:	f3bf 8f4f 	dsb	sy
}
 8005e1c:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e26:	b2d2      	uxtb	r2, r2
 8005e28:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005e2a:	f3bf 8f4f 	dsb	sy
}
 8005e2e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e32:	0a1a      	lsrs	r2, r3, #8
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e3a:	b2d2      	uxtb	r2, r2
 8005e3c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005e3e:	f3bf 8f4f 	dsb	sy
}
 8005e42:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8005e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e46:	0c1a      	lsrs	r2, r3, #16
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e4e:	b2d2      	uxtb	r2, r2
 8005e50:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005e52:	f3bf 8f4f 	dsb	sy
}
 8005e56:	bf00      	nop
          __DSB();
        }
      }

      /* Write data to memory */
      for (index = 0U; index < hnand->Config.SpareAreaSize; index++)
 8005e58:	2300      	movs	r3, #0
 8005e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e5c:	e00c      	b.n	8005e78 <HAL_NAND_Write_SpareArea_8b+0x246>
      {
        *(__IO uint8_t *)deviceaddress = *buff;
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	69fa      	ldr	r2, [r7, #28]
 8005e62:	7812      	ldrb	r2, [r2, #0]
 8005e64:	701a      	strb	r2, [r3, #0]
        buff++;
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("dsb 0xF":::"memory");
 8005e6c:	f3bf 8f4f 	dsb	sy
}
 8005e70:	bf00      	nop
      for (index = 0U; index < hnand->Config.SpareAreaSize; index++)
 8005e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e74:	3301      	adds	r3, #1
 8005e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d3ed      	bcc.n	8005e5e <HAL_NAND_Write_SpareArea_8b+0x22c>
        __DSB();
      }

      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e88:	2210      	movs	r2, #16
 8005e8a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005e8c:	f3bf 8f4f 	dsb	sy
}
 8005e90:	bf00      	nop
      __DSB();

      /* Get tick */
      tickstart = HAL_GetTick();
 8005e92:	f7fe fde1 	bl	8004a58 <HAL_GetTick>
 8005e96:	6138      	str	r0, [r7, #16]

      /* Read status until NAND is ready */
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8005e98:	e011      	b.n	8005ebe <HAL_NAND_Write_SpareArea_8b+0x28c>
      {
        if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 8005e9a:	f7fe fddd 	bl	8004a58 <HAL_GetTick>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ea8:	d909      	bls.n	8005ebe <HAL_NAND_Write_SpareArea_8b+0x28c>
        {
          /* Update the NAND controller state */
          hnand->State = HAL_NAND_STATE_ERROR;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2203      	movs	r2, #3
 8005eae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process unlocked */
          __HAL_UNLOCK(hnand);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e026      	b.n	8005f0c <HAL_NAND_Write_SpareArea_8b+0x2da>
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	f000 f8c5 	bl	800604e <HAL_NAND_Read_Status>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b40      	cmp	r3, #64	@ 0x40
 8005ec8:	d1e7      	bne.n	8005e9a <HAL_NAND_Write_SpareArea_8b+0x268>
        }
      }

      /* Increment written spare areas number */
      numspareareawritten++;
 8005eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ecc:	3301      	adds	r3, #1
 8005ece:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Decrement spare areas to write */
      nbspare--;
 8005ed0:	6a3b      	ldr	r3, [r7, #32]
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	623b      	str	r3, [r7, #32]

      /* Increment the NAND address */
      nandaddress = (uint32_t)(nandaddress + 1U);
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed8:	3301      	adds	r3, #1
 8005eda:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((nbspare != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8005edc:	6a3b      	ldr	r3, [r7, #32]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d009      	beq.n	8005ef6 <HAL_NAND_Write_SpareArea_8b+0x2c4>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005eea:	fb02 f303 	mul.w	r3, r2, r3
 8005eee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	f4ff aee4 	bcc.w	8005cbe <HAL_NAND_Write_SpareArea_8b+0x8c>
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
 8005f08:	e000      	b.n	8005f0c <HAL_NAND_Write_SpareArea_8b+0x2da>
    return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3730      	adds	r7, #48	@ 0x30
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <HAL_NAND_Erase_Block>:
  *                the configuration information for NAND module.
  * @param  pAddress  pointer to NAND address structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Erase_Block(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  uint32_t deviceaddress;

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d101      	bne.n	8005f2e <HAL_NAND_Erase_Block+0x1a>
  {
    return HAL_BUSY;
 8005f2a:	2302      	movs	r3, #2
 8005f2c:	e089      	b.n	8006042 <HAL_NAND_Erase_Block+0x12e>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	f040 8082 	bne.w	8006040 <HAL_NAND_Erase_Block+0x12c>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d101      	bne.n	8005f4a <HAL_NAND_Erase_Block+0x36>
 8005f46:	2302      	movs	r3, #2
 8005f48:	e07b      	b.n	8006042 <HAL_NAND_Erase_Block+0x12e>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2202      	movs	r2, #2
 8005f56:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 8005f5a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005f5e:	60fb      	str	r3, [r7, #12]

    /* Send Erase block command sequence */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE0;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f66:	2260      	movs	r2, #96	@ 0x60
 8005f68:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005f6a:	f3bf 8f4f 	dsb	sy
}
 8005f6e:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	881b      	ldrh	r3, [r3, #0]
 8005f74:	b2da      	uxtb	r2, r3
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	889b      	ldrh	r3, [r3, #4]
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	885b      	ldrh	r3, [r3, #2]
 8005f80:	4618      	mov	r0, r3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f86:	fb00 f303 	mul.w	r3, r0, r3
 8005f8a:	440b      	add	r3, r1
 8005f8c:	b2d9      	uxtb	r1, r3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	fb11 f303 	smulbb	r3, r1, r3
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	68f9      	ldr	r1, [r7, #12]
 8005f9c:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8005fa0:	4413      	add	r3, r2
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	700b      	strb	r3, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005fa6:	f3bf 8f4f 	dsb	sy
}
 8005faa:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	881b      	ldrh	r3, [r3, #0]
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	889b      	ldrh	r3, [r3, #4]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	885b      	ldrh	r3, [r3, #2]
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fc2:	fb00 f303 	mul.w	r3, r0, r3
 8005fc6:	4413      	add	r3, r2
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005fcc:	fb02 f303 	mul.w	r3, r2, r3
 8005fd0:	440b      	add	r3, r1
 8005fd2:	0a1a      	lsrs	r2, r3, #8
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fda:	b2d2      	uxtb	r2, r2
 8005fdc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005fde:	f3bf 8f4f 	dsb	sy
}
 8005fe2:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	881b      	ldrh	r3, [r3, #0]
 8005fe8:	4619      	mov	r1, r3
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	889b      	ldrh	r3, [r3, #4]
 8005fee:	461a      	mov	r2, r3
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	885b      	ldrh	r3, [r3, #2]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ffa:	fb00 f303 	mul.w	r3, r0, r3
 8005ffe:	4413      	add	r3, r2
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006004:	fb02 f303 	mul.w	r3, r2, r3
 8006008:	440b      	add	r3, r1
 800600a:	0c1a      	lsrs	r2, r3, #16
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006012:	b2d2      	uxtb	r2, r2
 8006014:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006016:	f3bf 8f4f 	dsb	sy
}
 800601a:	bf00      	nop
    __DSB();

    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE1;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006022:	22d0      	movs	r2, #208	@ 0xd0
 8006024:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006026:	f3bf 8f4f 	dsb	sy
}
 800602a:	bf00      	nop
    __DSB();

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800603c:	2300      	movs	r3, #0
 800603e:	e000      	b.n	8006042 <HAL_NAND_Erase_Block+0x12e>
    return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
}
 8006042:	4618      	mov	r0, r3
 8006044:	3714      	adds	r7, #20
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr

0800604e <HAL_NAND_Read_Status>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval NAND status
  */
uint32_t HAL_NAND_Read_Status(const NAND_HandleTypeDef *hnand)
{
 800604e:	b480      	push	{r7}
 8006050:	b085      	sub	sp, #20
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
  uint32_t data;
  uint32_t deviceaddress;
  UNUSED(hnand);

  /* Identify the device address */
  deviceaddress = NAND_DEVICE;
 8006056:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800605a:	60fb      	str	r3, [r7, #12]

  /* Send Read status operation command */
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_STATUS;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006062:	2270      	movs	r2, #112	@ 0x70
 8006064:	701a      	strb	r2, [r3, #0]

  /* Read status register data */
  data = *(__IO uint8_t *)deviceaddress;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	b2db      	uxtb	r3, r3
 800606c:	60bb      	str	r3, [r7, #8]

  /* Return the status */
  if ((data & NAND_ERROR) == NAND_ERROR)
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	f003 0301 	and.w	r3, r3, #1
 8006074:	2b00      	cmp	r3, #0
 8006076:	d001      	beq.n	800607c <HAL_NAND_Read_Status+0x2e>
  {
    return NAND_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e007      	b.n	800608c <HAL_NAND_Read_Status+0x3e>
  }
  else if ((data & NAND_READY) == NAND_READY)
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006082:	2b00      	cmp	r3, #0
 8006084:	d001      	beq.n	800608a <HAL_NAND_Read_Status+0x3c>
  {
    return NAND_READY;
 8006086:	2340      	movs	r3, #64	@ 0x40
 8006088:	e000      	b.n	800608c <HAL_NAND_Read_Status+0x3e>
  }
  else
  {
    return NAND_BUSY;
 800608a:	2300      	movs	r3, #0
  }
}
 800608c:	4618      	mov	r0, r3
 800608e:	3714      	adds	r7, #20
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b088      	sub	sp, #32
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d102      	bne.n	80060ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	f000 bc28 	b.w	80068fc <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060ac:	4b94      	ldr	r3, [pc, #592]	@ (8006300 <HAL_RCC_OscConfig+0x268>)
 80060ae:	69db      	ldr	r3, [r3, #28]
 80060b0:	f003 0318 	and.w	r3, r3, #24
 80060b4:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80060b6:	4b92      	ldr	r3, [pc, #584]	@ (8006300 <HAL_RCC_OscConfig+0x268>)
 80060b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ba:	f003 0303 	and.w	r3, r3, #3
 80060be:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0310 	and.w	r3, r3, #16
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d05b      	beq.n	8006184 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	2b08      	cmp	r3, #8
 80060d0:	d005      	beq.n	80060de <HAL_RCC_OscConfig+0x46>
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	2b18      	cmp	r3, #24
 80060d6:	d114      	bne.n	8006102 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d111      	bne.n	8006102 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	69db      	ldr	r3, [r3, #28]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d102      	bne.n	80060ec <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	f000 bc08 	b.w	80068fc <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80060ec:	4b84      	ldr	r3, [pc, #528]	@ (8006300 <HAL_RCC_OscConfig+0x268>)
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	041b      	lsls	r3, r3, #16
 80060fa:	4981      	ldr	r1, [pc, #516]	@ (8006300 <HAL_RCC_OscConfig+0x268>)
 80060fc:	4313      	orrs	r3, r2
 80060fe:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8006100:	e040      	b.n	8006184 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	69db      	ldr	r3, [r3, #28]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d023      	beq.n	8006152 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800610a:	4b7d      	ldr	r3, [pc, #500]	@ (8006300 <HAL_RCC_OscConfig+0x268>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a7c      	ldr	r2, [pc, #496]	@ (8006300 <HAL_RCC_OscConfig+0x268>)
 8006110:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006114:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006116:	f7fe fc9f 	bl	8004a58 <HAL_GetTick>
 800611a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800611c:	e008      	b.n	8006130 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800611e:	f7fe fc9b 	bl	8004a58 <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	2b02      	cmp	r3, #2
 800612a:	d901      	bls.n	8006130 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e3e5      	b.n	80068fc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8006130:	4b73      	ldr	r3, [pc, #460]	@ (8006300 <HAL_RCC_OscConfig+0x268>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006138:	2b00      	cmp	r3, #0
 800613a:	d0f0      	beq.n	800611e <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800613c:	4b70      	ldr	r3, [pc, #448]	@ (8006300 <HAL_RCC_OscConfig+0x268>)
 800613e:	699b      	ldr	r3, [r3, #24]
 8006140:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a1b      	ldr	r3, [r3, #32]
 8006148:	041b      	lsls	r3, r3, #16
 800614a:	496d      	ldr	r1, [pc, #436]	@ (8006300 <HAL_RCC_OscConfig+0x268>)
 800614c:	4313      	orrs	r3, r2
 800614e:	618b      	str	r3, [r1, #24]
 8006150:	e018      	b.n	8006184 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006152:	4b6b      	ldr	r3, [pc, #428]	@ (8006300 <HAL_RCC_OscConfig+0x268>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a6a      	ldr	r2, [pc, #424]	@ (8006300 <HAL_RCC_OscConfig+0x268>)
 8006158:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800615c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800615e:	f7fe fc7b 	bl	8004a58 <HAL_GetTick>
 8006162:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8006164:	e008      	b.n	8006178 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8006166:	f7fe fc77 	bl	8004a58 <HAL_GetTick>
 800616a:	4602      	mov	r2, r0
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	2b02      	cmp	r3, #2
 8006172:	d901      	bls.n	8006178 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8006174:	2303      	movs	r3, #3
 8006176:	e3c1      	b.n	80068fc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8006178:	4b61      	ldr	r3, [pc, #388]	@ (8006300 <HAL_RCC_OscConfig+0x268>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006180:	2b00      	cmp	r3, #0
 8006182:	d1f0      	bne.n	8006166 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 0301 	and.w	r3, r3, #1
 800618c:	2b00      	cmp	r3, #0
 800618e:	f000 80a0 	beq.w	80062d2 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	2b10      	cmp	r3, #16
 8006196:	d005      	beq.n	80061a4 <HAL_RCC_OscConfig+0x10c>
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	2b18      	cmp	r3, #24
 800619c:	d109      	bne.n	80061b2 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	2b03      	cmp	r3, #3
 80061a2:	d106      	bne.n	80061b2 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f040 8092 	bne.w	80062d2 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e3a4      	b.n	80068fc <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061ba:	d106      	bne.n	80061ca <HAL_RCC_OscConfig+0x132>
 80061bc:	4b50      	ldr	r3, [pc, #320]	@ (8006300 <HAL_RCC_OscConfig+0x268>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a4f      	ldr	r2, [pc, #316]	@ (8006300 <HAL_RCC_OscConfig+0x268>)
 80061c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061c6:	6013      	str	r3, [r2, #0]
 80061c8:	e058      	b.n	800627c <HAL_RCC_OscConfig+0x1e4>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d112      	bne.n	80061f8 <HAL_RCC_OscConfig+0x160>
 80061d2:	4b4b      	ldr	r3, [pc, #300]	@ (8006300 <HAL_RCC_OscConfig+0x268>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a4a      	ldr	r2, [pc, #296]	@ (8006300 <HAL_RCC_OscConfig+0x268>)
 80061d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061dc:	6013      	str	r3, [r2, #0]
 80061de:	4b48      	ldr	r3, [pc, #288]	@ (8006300 <HAL_RCC_OscConfig+0x268>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a47      	ldr	r2, [pc, #284]	@ (8006300 <HAL_RCC_OscConfig+0x268>)
 80061e4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80061e8:	6013      	str	r3, [r2, #0]
 80061ea:	4b45      	ldr	r3, [pc, #276]	@ (8006300 <HAL_RCC_OscConfig+0x268>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a44      	ldr	r2, [pc, #272]	@ (8006300 <HAL_RCC_OscConfig+0x268>)
 80061f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80061f4:	6013      	str	r3, [r2, #0]
 80061f6:	e041      	b.n	800627c <HAL_RCC_OscConfig+0x1e4>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006200:	d112      	bne.n	8006228 <HAL_RCC_OscConfig+0x190>
 8006202:	4b3f      	ldr	r3, [pc, #252]	@ (8006300 <HAL_RCC_OscConfig+0x268>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a3e      	ldr	r2, [pc, #248]	@ (8006300 <HAL_RCC_OscConfig+0x268>)
 8006208:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800620c:	6013      	str	r3, [r2, #0]
 800620e:	4b3c      	ldr	r3, [pc, #240]	@ (8006300 <HAL_RCC_OscConfig+0x268>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a3b      	ldr	r2, [pc, #236]	@ (8006300 <HAL_RCC_OscConfig+0x268>)
 8006214:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006218:	6013      	str	r3, [r2, #0]
 800621a:	4b39      	ldr	r3, [pc, #228]	@ (8006300 <HAL_RCC_OscConfig+0x268>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a38      	ldr	r2, [pc, #224]	@ (8006300 <HAL_RCC_OscConfig+0x268>)
 8006220:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006224:	6013      	str	r3, [r2, #0]
 8006226:	e029      	b.n	800627c <HAL_RCC_OscConfig+0x1e4>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8006230:	d112      	bne.n	8006258 <HAL_RCC_OscConfig+0x1c0>
 8006232:	4b33      	ldr	r3, [pc, #204]	@ (8006300 <HAL_RCC_OscConfig+0x268>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a32      	ldr	r2, [pc, #200]	@ (8006300 <HAL_RCC_OscConfig+0x268>)
 8006238:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800623c:	6013      	str	r3, [r2, #0]
 800623e:	4b30      	ldr	r3, [pc, #192]	@ (8006300 <HAL_RCC_OscConfig+0x268>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a2f      	ldr	r2, [pc, #188]	@ (8006300 <HAL_RCC_OscConfig+0x268>)
 8006244:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006248:	6013      	str	r3, [r2, #0]
 800624a:	4b2d      	ldr	r3, [pc, #180]	@ (8006300 <HAL_RCC_OscConfig+0x268>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a2c      	ldr	r2, [pc, #176]	@ (8006300 <HAL_RCC_OscConfig+0x268>)
 8006250:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006254:	6013      	str	r3, [r2, #0]
 8006256:	e011      	b.n	800627c <HAL_RCC_OscConfig+0x1e4>
 8006258:	4b29      	ldr	r3, [pc, #164]	@ (8006300 <HAL_RCC_OscConfig+0x268>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a28      	ldr	r2, [pc, #160]	@ (8006300 <HAL_RCC_OscConfig+0x268>)
 800625e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006262:	6013      	str	r3, [r2, #0]
 8006264:	4b26      	ldr	r3, [pc, #152]	@ (8006300 <HAL_RCC_OscConfig+0x268>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a25      	ldr	r2, [pc, #148]	@ (8006300 <HAL_RCC_OscConfig+0x268>)
 800626a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800626e:	6013      	str	r3, [r2, #0]
 8006270:	4b23      	ldr	r3, [pc, #140]	@ (8006300 <HAL_RCC_OscConfig+0x268>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a22      	ldr	r2, [pc, #136]	@ (8006300 <HAL_RCC_OscConfig+0x268>)
 8006276:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800627a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d013      	beq.n	80062ac <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006284:	f7fe fbe8 	bl	8004a58 <HAL_GetTick>
 8006288:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800628a:	e008      	b.n	800629e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800628c:	f7fe fbe4 	bl	8004a58 <HAL_GetTick>
 8006290:	4602      	mov	r2, r0
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	2b64      	cmp	r3, #100	@ 0x64
 8006298:	d901      	bls.n	800629e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	e32e      	b.n	80068fc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800629e:	4b18      	ldr	r3, [pc, #96]	@ (8006300 <HAL_RCC_OscConfig+0x268>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d0f0      	beq.n	800628c <HAL_RCC_OscConfig+0x1f4>
 80062aa:	e012      	b.n	80062d2 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ac:	f7fe fbd4 	bl	8004a58 <HAL_GetTick>
 80062b0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80062b2:	e008      	b.n	80062c6 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80062b4:	f7fe fbd0 	bl	8004a58 <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	2b64      	cmp	r3, #100	@ 0x64
 80062c0:	d901      	bls.n	80062c6 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e31a      	b.n	80068fc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80062c6:	4b0e      	ldr	r3, [pc, #56]	@ (8006300 <HAL_RCC_OscConfig+0x268>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d1f0      	bne.n	80062b4 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0302 	and.w	r3, r3, #2
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f000 809a 	beq.w	8006414 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d005      	beq.n	80062f2 <HAL_RCC_OscConfig+0x25a>
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	2b18      	cmp	r3, #24
 80062ea:	d149      	bne.n	8006380 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d146      	bne.n	8006380 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d104      	bne.n	8006304 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e2fe      	b.n	80068fc <HAL_RCC_OscConfig+0x864>
 80062fe:	bf00      	nop
 8006300:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d11c      	bne.n	8006344 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800630a:	4b9a      	ldr	r3, [pc, #616]	@ (8006574 <HAL_RCC_OscConfig+0x4dc>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0218 	and.w	r2, r3, #24
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	429a      	cmp	r2, r3
 8006318:	d014      	beq.n	8006344 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800631a:	4b96      	ldr	r3, [pc, #600]	@ (8006574 <HAL_RCC_OscConfig+0x4dc>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f023 0218 	bic.w	r2, r3, #24
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	4993      	ldr	r1, [pc, #588]	@ (8006574 <HAL_RCC_OscConfig+0x4dc>)
 8006328:	4313      	orrs	r3, r2
 800632a:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 800632c:	f000 fdd0 	bl	8006ed0 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006330:	4b91      	ldr	r3, [pc, #580]	@ (8006578 <HAL_RCC_OscConfig+0x4e0>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4618      	mov	r0, r3
 8006336:	f7fe fb05 	bl	8004944 <HAL_InitTick>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d001      	beq.n	8006344 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e2db      	b.n	80068fc <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006344:	f7fe fb88 	bl	8004a58 <HAL_GetTick>
 8006348:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800634a:	e008      	b.n	800635e <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800634c:	f7fe fb84 	bl	8004a58 <HAL_GetTick>
 8006350:	4602      	mov	r2, r0
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	2b02      	cmp	r3, #2
 8006358:	d901      	bls.n	800635e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e2ce      	b.n	80068fc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800635e:	4b85      	ldr	r3, [pc, #532]	@ (8006574 <HAL_RCC_OscConfig+0x4dc>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0302 	and.w	r3, r3, #2
 8006366:	2b00      	cmp	r3, #0
 8006368:	d0f0      	beq.n	800634c <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800636a:	4b82      	ldr	r3, [pc, #520]	@ (8006574 <HAL_RCC_OscConfig+0x4dc>)
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	695b      	ldr	r3, [r3, #20]
 8006376:	041b      	lsls	r3, r3, #16
 8006378:	497e      	ldr	r1, [pc, #504]	@ (8006574 <HAL_RCC_OscConfig+0x4dc>)
 800637a:	4313      	orrs	r3, r2
 800637c:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800637e:	e049      	b.n	8006414 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d02c      	beq.n	80063e2 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8006388:	4b7a      	ldr	r3, [pc, #488]	@ (8006574 <HAL_RCC_OscConfig+0x4dc>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f023 0218 	bic.w	r2, r3, #24
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	4977      	ldr	r1, [pc, #476]	@ (8006574 <HAL_RCC_OscConfig+0x4dc>)
 8006396:	4313      	orrs	r3, r2
 8006398:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800639a:	4b76      	ldr	r3, [pc, #472]	@ (8006574 <HAL_RCC_OscConfig+0x4dc>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a75      	ldr	r2, [pc, #468]	@ (8006574 <HAL_RCC_OscConfig+0x4dc>)
 80063a0:	f043 0301 	orr.w	r3, r3, #1
 80063a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063a6:	f7fe fb57 	bl	8004a58 <HAL_GetTick>
 80063aa:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80063ac:	e008      	b.n	80063c0 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80063ae:	f7fe fb53 	bl	8004a58 <HAL_GetTick>
 80063b2:	4602      	mov	r2, r0
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d901      	bls.n	80063c0 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e29d      	b.n	80068fc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80063c0:	4b6c      	ldr	r3, [pc, #432]	@ (8006574 <HAL_RCC_OscConfig+0x4dc>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0302 	and.w	r3, r3, #2
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d0f0      	beq.n	80063ae <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80063cc:	4b69      	ldr	r3, [pc, #420]	@ (8006574 <HAL_RCC_OscConfig+0x4dc>)
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	695b      	ldr	r3, [r3, #20]
 80063d8:	041b      	lsls	r3, r3, #16
 80063da:	4966      	ldr	r1, [pc, #408]	@ (8006574 <HAL_RCC_OscConfig+0x4dc>)
 80063dc:	4313      	orrs	r3, r2
 80063de:	610b      	str	r3, [r1, #16]
 80063e0:	e018      	b.n	8006414 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063e2:	4b64      	ldr	r3, [pc, #400]	@ (8006574 <HAL_RCC_OscConfig+0x4dc>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a63      	ldr	r2, [pc, #396]	@ (8006574 <HAL_RCC_OscConfig+0x4dc>)
 80063e8:	f023 0301 	bic.w	r3, r3, #1
 80063ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ee:	f7fe fb33 	bl	8004a58 <HAL_GetTick>
 80063f2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80063f4:	e008      	b.n	8006408 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80063f6:	f7fe fb2f 	bl	8004a58 <HAL_GetTick>
 80063fa:	4602      	mov	r2, r0
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	2b02      	cmp	r3, #2
 8006402:	d901      	bls.n	8006408 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e279      	b.n	80068fc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006408:	4b5a      	ldr	r3, [pc, #360]	@ (8006574 <HAL_RCC_OscConfig+0x4dc>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 0302 	and.w	r3, r3, #2
 8006410:	2b00      	cmp	r3, #0
 8006412:	d1f0      	bne.n	80063f6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0308 	and.w	r3, r3, #8
 800641c:	2b00      	cmp	r3, #0
 800641e:	d03c      	beq.n	800649a <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d01c      	beq.n	8006462 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006428:	4b52      	ldr	r3, [pc, #328]	@ (8006574 <HAL_RCC_OscConfig+0x4dc>)
 800642a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800642e:	4a51      	ldr	r2, [pc, #324]	@ (8006574 <HAL_RCC_OscConfig+0x4dc>)
 8006430:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006434:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006438:	f7fe fb0e 	bl	8004a58 <HAL_GetTick>
 800643c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800643e:	e008      	b.n	8006452 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8006440:	f7fe fb0a 	bl	8004a58 <HAL_GetTick>
 8006444:	4602      	mov	r2, r0
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	2b02      	cmp	r3, #2
 800644c:	d901      	bls.n	8006452 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e254      	b.n	80068fc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006452:	4b48      	ldr	r3, [pc, #288]	@ (8006574 <HAL_RCC_OscConfig+0x4dc>)
 8006454:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006458:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800645c:	2b00      	cmp	r3, #0
 800645e:	d0ef      	beq.n	8006440 <HAL_RCC_OscConfig+0x3a8>
 8006460:	e01b      	b.n	800649a <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006462:	4b44      	ldr	r3, [pc, #272]	@ (8006574 <HAL_RCC_OscConfig+0x4dc>)
 8006464:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006468:	4a42      	ldr	r2, [pc, #264]	@ (8006574 <HAL_RCC_OscConfig+0x4dc>)
 800646a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800646e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006472:	f7fe faf1 	bl	8004a58 <HAL_GetTick>
 8006476:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006478:	e008      	b.n	800648c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800647a:	f7fe faed 	bl	8004a58 <HAL_GetTick>
 800647e:	4602      	mov	r2, r0
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	2b02      	cmp	r3, #2
 8006486:	d901      	bls.n	800648c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	e237      	b.n	80068fc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800648c:	4b39      	ldr	r3, [pc, #228]	@ (8006574 <HAL_RCC_OscConfig+0x4dc>)
 800648e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006492:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1ef      	bne.n	800647a <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 0304 	and.w	r3, r3, #4
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f000 80d2 	beq.w	800664c <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80064a8:	4b34      	ldr	r3, [pc, #208]	@ (800657c <HAL_RCC_OscConfig+0x4e4>)
 80064aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ac:	f003 0301 	and.w	r3, r3, #1
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d118      	bne.n	80064e6 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80064b4:	4b31      	ldr	r3, [pc, #196]	@ (800657c <HAL_RCC_OscConfig+0x4e4>)
 80064b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064b8:	4a30      	ldr	r2, [pc, #192]	@ (800657c <HAL_RCC_OscConfig+0x4e4>)
 80064ba:	f043 0301 	orr.w	r3, r3, #1
 80064be:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064c0:	f7fe faca 	bl	8004a58 <HAL_GetTick>
 80064c4:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80064c6:	e008      	b.n	80064da <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064c8:	f7fe fac6 	bl	8004a58 <HAL_GetTick>
 80064cc:	4602      	mov	r2, r0
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d901      	bls.n	80064da <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	e210      	b.n	80068fc <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80064da:	4b28      	ldr	r3, [pc, #160]	@ (800657c <HAL_RCC_OscConfig+0x4e4>)
 80064dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d0f0      	beq.n	80064c8 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d108      	bne.n	8006500 <HAL_RCC_OscConfig+0x468>
 80064ee:	4b21      	ldr	r3, [pc, #132]	@ (8006574 <HAL_RCC_OscConfig+0x4dc>)
 80064f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064f4:	4a1f      	ldr	r2, [pc, #124]	@ (8006574 <HAL_RCC_OscConfig+0x4dc>)
 80064f6:	f043 0301 	orr.w	r3, r3, #1
 80064fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80064fe:	e074      	b.n	80065ea <HAL_RCC_OscConfig+0x552>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d118      	bne.n	800653a <HAL_RCC_OscConfig+0x4a2>
 8006508:	4b1a      	ldr	r3, [pc, #104]	@ (8006574 <HAL_RCC_OscConfig+0x4dc>)
 800650a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800650e:	4a19      	ldr	r2, [pc, #100]	@ (8006574 <HAL_RCC_OscConfig+0x4dc>)
 8006510:	f023 0301 	bic.w	r3, r3, #1
 8006514:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006518:	4b16      	ldr	r3, [pc, #88]	@ (8006574 <HAL_RCC_OscConfig+0x4dc>)
 800651a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800651e:	4a15      	ldr	r2, [pc, #84]	@ (8006574 <HAL_RCC_OscConfig+0x4dc>)
 8006520:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006524:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006528:	4b12      	ldr	r3, [pc, #72]	@ (8006574 <HAL_RCC_OscConfig+0x4dc>)
 800652a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800652e:	4a11      	ldr	r2, [pc, #68]	@ (8006574 <HAL_RCC_OscConfig+0x4dc>)
 8006530:	f023 0304 	bic.w	r3, r3, #4
 8006534:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006538:	e057      	b.n	80065ea <HAL_RCC_OscConfig+0x552>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	2b05      	cmp	r3, #5
 8006540:	d11e      	bne.n	8006580 <HAL_RCC_OscConfig+0x4e8>
 8006542:	4b0c      	ldr	r3, [pc, #48]	@ (8006574 <HAL_RCC_OscConfig+0x4dc>)
 8006544:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006548:	4a0a      	ldr	r2, [pc, #40]	@ (8006574 <HAL_RCC_OscConfig+0x4dc>)
 800654a:	f043 0304 	orr.w	r3, r3, #4
 800654e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006552:	4b08      	ldr	r3, [pc, #32]	@ (8006574 <HAL_RCC_OscConfig+0x4dc>)
 8006554:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006558:	4a06      	ldr	r2, [pc, #24]	@ (8006574 <HAL_RCC_OscConfig+0x4dc>)
 800655a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800655e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006562:	4b04      	ldr	r3, [pc, #16]	@ (8006574 <HAL_RCC_OscConfig+0x4dc>)
 8006564:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006568:	4a02      	ldr	r2, [pc, #8]	@ (8006574 <HAL_RCC_OscConfig+0x4dc>)
 800656a:	f043 0301 	orr.w	r3, r3, #1
 800656e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006572:	e03a      	b.n	80065ea <HAL_RCC_OscConfig+0x552>
 8006574:	44020c00 	.word	0x44020c00
 8006578:	20000020 	.word	0x20000020
 800657c:	44020800 	.word	0x44020800
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	2b85      	cmp	r3, #133	@ 0x85
 8006586:	d118      	bne.n	80065ba <HAL_RCC_OscConfig+0x522>
 8006588:	4ba2      	ldr	r3, [pc, #648]	@ (8006814 <HAL_RCC_OscConfig+0x77c>)
 800658a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800658e:	4aa1      	ldr	r2, [pc, #644]	@ (8006814 <HAL_RCC_OscConfig+0x77c>)
 8006590:	f043 0304 	orr.w	r3, r3, #4
 8006594:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006598:	4b9e      	ldr	r3, [pc, #632]	@ (8006814 <HAL_RCC_OscConfig+0x77c>)
 800659a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800659e:	4a9d      	ldr	r2, [pc, #628]	@ (8006814 <HAL_RCC_OscConfig+0x77c>)
 80065a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065a4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80065a8:	4b9a      	ldr	r3, [pc, #616]	@ (8006814 <HAL_RCC_OscConfig+0x77c>)
 80065aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065ae:	4a99      	ldr	r2, [pc, #612]	@ (8006814 <HAL_RCC_OscConfig+0x77c>)
 80065b0:	f043 0301 	orr.w	r3, r3, #1
 80065b4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80065b8:	e017      	b.n	80065ea <HAL_RCC_OscConfig+0x552>
 80065ba:	4b96      	ldr	r3, [pc, #600]	@ (8006814 <HAL_RCC_OscConfig+0x77c>)
 80065bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065c0:	4a94      	ldr	r2, [pc, #592]	@ (8006814 <HAL_RCC_OscConfig+0x77c>)
 80065c2:	f023 0301 	bic.w	r3, r3, #1
 80065c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80065ca:	4b92      	ldr	r3, [pc, #584]	@ (8006814 <HAL_RCC_OscConfig+0x77c>)
 80065cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065d0:	4a90      	ldr	r2, [pc, #576]	@ (8006814 <HAL_RCC_OscConfig+0x77c>)
 80065d2:	f023 0304 	bic.w	r3, r3, #4
 80065d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80065da:	4b8e      	ldr	r3, [pc, #568]	@ (8006814 <HAL_RCC_OscConfig+0x77c>)
 80065dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065e0:	4a8c      	ldr	r2, [pc, #560]	@ (8006814 <HAL_RCC_OscConfig+0x77c>)
 80065e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065e6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d016      	beq.n	8006620 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065f2:	f7fe fa31 	bl	8004a58 <HAL_GetTick>
 80065f6:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065f8:	e00a      	b.n	8006610 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065fa:	f7fe fa2d 	bl	8004a58 <HAL_GetTick>
 80065fe:	4602      	mov	r2, r0
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006608:	4293      	cmp	r3, r2
 800660a:	d901      	bls.n	8006610 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 800660c:	2303      	movs	r3, #3
 800660e:	e175      	b.n	80068fc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006610:	4b80      	ldr	r3, [pc, #512]	@ (8006814 <HAL_RCC_OscConfig+0x77c>)
 8006612:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006616:	f003 0302 	and.w	r3, r3, #2
 800661a:	2b00      	cmp	r3, #0
 800661c:	d0ed      	beq.n	80065fa <HAL_RCC_OscConfig+0x562>
 800661e:	e015      	b.n	800664c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006620:	f7fe fa1a 	bl	8004a58 <HAL_GetTick>
 8006624:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006626:	e00a      	b.n	800663e <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006628:	f7fe fa16 	bl	8004a58 <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006636:	4293      	cmp	r3, r2
 8006638:	d901      	bls.n	800663e <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e15e      	b.n	80068fc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800663e:	4b75      	ldr	r3, [pc, #468]	@ (8006814 <HAL_RCC_OscConfig+0x77c>)
 8006640:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006644:	f003 0302 	and.w	r3, r3, #2
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1ed      	bne.n	8006628 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0320 	and.w	r3, r3, #32
 8006654:	2b00      	cmp	r3, #0
 8006656:	d036      	beq.n	80066c6 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800665c:	2b00      	cmp	r3, #0
 800665e:	d019      	beq.n	8006694 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006660:	4b6c      	ldr	r3, [pc, #432]	@ (8006814 <HAL_RCC_OscConfig+0x77c>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a6b      	ldr	r2, [pc, #428]	@ (8006814 <HAL_RCC_OscConfig+0x77c>)
 8006666:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800666a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800666c:	f7fe f9f4 	bl	8004a58 <HAL_GetTick>
 8006670:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006672:	e008      	b.n	8006686 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8006674:	f7fe f9f0 	bl	8004a58 <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	2b02      	cmp	r3, #2
 8006680:	d901      	bls.n	8006686 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e13a      	b.n	80068fc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006686:	4b63      	ldr	r3, [pc, #396]	@ (8006814 <HAL_RCC_OscConfig+0x77c>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800668e:	2b00      	cmp	r3, #0
 8006690:	d0f0      	beq.n	8006674 <HAL_RCC_OscConfig+0x5dc>
 8006692:	e018      	b.n	80066c6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006694:	4b5f      	ldr	r3, [pc, #380]	@ (8006814 <HAL_RCC_OscConfig+0x77c>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a5e      	ldr	r2, [pc, #376]	@ (8006814 <HAL_RCC_OscConfig+0x77c>)
 800669a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800669e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066a0:	f7fe f9da 	bl	8004a58 <HAL_GetTick>
 80066a4:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80066a6:	e008      	b.n	80066ba <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80066a8:	f7fe f9d6 	bl	8004a58 <HAL_GetTick>
 80066ac:	4602      	mov	r2, r0
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	2b02      	cmp	r3, #2
 80066b4:	d901      	bls.n	80066ba <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e120      	b.n	80068fc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80066ba:	4b56      	ldr	r3, [pc, #344]	@ (8006814 <HAL_RCC_OscConfig+0x77c>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1f0      	bne.n	80066a8 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f000 8115 	beq.w	80068fa <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	2b18      	cmp	r3, #24
 80066d4:	f000 80af 	beq.w	8006836 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066dc:	2b02      	cmp	r3, #2
 80066de:	f040 8086 	bne.w	80067ee <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80066e2:	4b4c      	ldr	r3, [pc, #304]	@ (8006814 <HAL_RCC_OscConfig+0x77c>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a4b      	ldr	r2, [pc, #300]	@ (8006814 <HAL_RCC_OscConfig+0x77c>)
 80066e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80066ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066ee:	f7fe f9b3 	bl	8004a58 <HAL_GetTick>
 80066f2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80066f4:	e008      	b.n	8006708 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80066f6:	f7fe f9af 	bl	8004a58 <HAL_GetTick>
 80066fa:	4602      	mov	r2, r0
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	2b02      	cmp	r3, #2
 8006702:	d901      	bls.n	8006708 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8006704:	2303      	movs	r3, #3
 8006706:	e0f9      	b.n	80068fc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006708:	4b42      	ldr	r3, [pc, #264]	@ (8006814 <HAL_RCC_OscConfig+0x77c>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006710:	2b00      	cmp	r3, #0
 8006712:	d1f0      	bne.n	80066f6 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8006714:	4b3f      	ldr	r3, [pc, #252]	@ (8006814 <HAL_RCC_OscConfig+0x77c>)
 8006716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006718:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800671c:	f023 0303 	bic.w	r3, r3, #3
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006728:	0212      	lsls	r2, r2, #8
 800672a:	430a      	orrs	r2, r1
 800672c:	4939      	ldr	r1, [pc, #228]	@ (8006814 <HAL_RCC_OscConfig+0x77c>)
 800672e:	4313      	orrs	r3, r2
 8006730:	628b      	str	r3, [r1, #40]	@ 0x28
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006736:	3b01      	subs	r3, #1
 8006738:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006740:	3b01      	subs	r3, #1
 8006742:	025b      	lsls	r3, r3, #9
 8006744:	b29b      	uxth	r3, r3
 8006746:	431a      	orrs	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800674c:	3b01      	subs	r3, #1
 800674e:	041b      	lsls	r3, r3, #16
 8006750:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006754:	431a      	orrs	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800675a:	3b01      	subs	r3, #1
 800675c:	061b      	lsls	r3, r3, #24
 800675e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006762:	492c      	ldr	r1, [pc, #176]	@ (8006814 <HAL_RCC_OscConfig+0x77c>)
 8006764:	4313      	orrs	r3, r2
 8006766:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8006768:	4b2a      	ldr	r3, [pc, #168]	@ (8006814 <HAL_RCC_OscConfig+0x77c>)
 800676a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800676c:	4a29      	ldr	r2, [pc, #164]	@ (8006814 <HAL_RCC_OscConfig+0x77c>)
 800676e:	f023 0310 	bic.w	r3, r3, #16
 8006772:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006778:	4a26      	ldr	r2, [pc, #152]	@ (8006814 <HAL_RCC_OscConfig+0x77c>)
 800677a:	00db      	lsls	r3, r3, #3
 800677c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800677e:	4b25      	ldr	r3, [pc, #148]	@ (8006814 <HAL_RCC_OscConfig+0x77c>)
 8006780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006782:	4a24      	ldr	r2, [pc, #144]	@ (8006814 <HAL_RCC_OscConfig+0x77c>)
 8006784:	f043 0310 	orr.w	r3, r3, #16
 8006788:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800678a:	4b22      	ldr	r3, [pc, #136]	@ (8006814 <HAL_RCC_OscConfig+0x77c>)
 800678c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800678e:	f023 020c 	bic.w	r2, r3, #12
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006796:	491f      	ldr	r1, [pc, #124]	@ (8006814 <HAL_RCC_OscConfig+0x77c>)
 8006798:	4313      	orrs	r3, r2
 800679a:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 800679c:	4b1d      	ldr	r3, [pc, #116]	@ (8006814 <HAL_RCC_OscConfig+0x77c>)
 800679e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067a0:	f023 0220 	bic.w	r2, r3, #32
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067a8:	491a      	ldr	r1, [pc, #104]	@ (8006814 <HAL_RCC_OscConfig+0x77c>)
 80067aa:	4313      	orrs	r3, r2
 80067ac:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80067ae:	4b19      	ldr	r3, [pc, #100]	@ (8006814 <HAL_RCC_OscConfig+0x77c>)
 80067b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067b2:	4a18      	ldr	r2, [pc, #96]	@ (8006814 <HAL_RCC_OscConfig+0x77c>)
 80067b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067b8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80067ba:	4b16      	ldr	r3, [pc, #88]	@ (8006814 <HAL_RCC_OscConfig+0x77c>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a15      	ldr	r2, [pc, #84]	@ (8006814 <HAL_RCC_OscConfig+0x77c>)
 80067c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80067c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067c6:	f7fe f947 	bl	8004a58 <HAL_GetTick>
 80067ca:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80067cc:	e008      	b.n	80067e0 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80067ce:	f7fe f943 	bl	8004a58 <HAL_GetTick>
 80067d2:	4602      	mov	r2, r0
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	2b02      	cmp	r3, #2
 80067da:	d901      	bls.n	80067e0 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e08d      	b.n	80068fc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80067e0:	4b0c      	ldr	r3, [pc, #48]	@ (8006814 <HAL_RCC_OscConfig+0x77c>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d0f0      	beq.n	80067ce <HAL_RCC_OscConfig+0x736>
 80067ec:	e085      	b.n	80068fa <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80067ee:	4b09      	ldr	r3, [pc, #36]	@ (8006814 <HAL_RCC_OscConfig+0x77c>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a08      	ldr	r2, [pc, #32]	@ (8006814 <HAL_RCC_OscConfig+0x77c>)
 80067f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067fa:	f7fe f92d 	bl	8004a58 <HAL_GetTick>
 80067fe:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006800:	e00a      	b.n	8006818 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8006802:	f7fe f929 	bl	8004a58 <HAL_GetTick>
 8006806:	4602      	mov	r2, r0
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	1ad3      	subs	r3, r2, r3
 800680c:	2b02      	cmp	r3, #2
 800680e:	d903      	bls.n	8006818 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e073      	b.n	80068fc <HAL_RCC_OscConfig+0x864>
 8006814:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006818:	4b3a      	ldr	r3, [pc, #232]	@ (8006904 <HAL_RCC_OscConfig+0x86c>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1ee      	bne.n	8006802 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8006824:	4b37      	ldr	r3, [pc, #220]	@ (8006904 <HAL_RCC_OscConfig+0x86c>)
 8006826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006828:	4a36      	ldr	r2, [pc, #216]	@ (8006904 <HAL_RCC_OscConfig+0x86c>)
 800682a:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800682e:	f023 0303 	bic.w	r3, r3, #3
 8006832:	6293      	str	r3, [r2, #40]	@ 0x28
 8006834:	e061      	b.n	80068fa <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8006836:	4b33      	ldr	r3, [pc, #204]	@ (8006904 <HAL_RCC_OscConfig+0x86c>)
 8006838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800683a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800683c:	4b31      	ldr	r3, [pc, #196]	@ (8006904 <HAL_RCC_OscConfig+0x86c>)
 800683e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006840:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006846:	2b01      	cmp	r3, #1
 8006848:	d031      	beq.n	80068ae <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	f003 0203 	and.w	r2, r3, #3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006854:	429a      	cmp	r2, r3
 8006856:	d12a      	bne.n	80068ae <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	0a1b      	lsrs	r3, r3, #8
 800685c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8006864:	429a      	cmp	r2, r3
 8006866:	d122      	bne.n	80068ae <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006872:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8006874:	429a      	cmp	r2, r3
 8006876:	d11a      	bne.n	80068ae <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	0a5b      	lsrs	r3, r3, #9
 800687c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006884:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8006886:	429a      	cmp	r2, r3
 8006888:	d111      	bne.n	80068ae <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	0c1b      	lsrs	r3, r3, #16
 800688e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006896:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8006898:	429a      	cmp	r2, r3
 800689a:	d108      	bne.n	80068ae <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	0e1b      	lsrs	r3, r3, #24
 80068a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068a8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d001      	beq.n	80068b2 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e024      	b.n	80068fc <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80068b2:	4b14      	ldr	r3, [pc, #80]	@ (8006904 <HAL_RCC_OscConfig+0x86c>)
 80068b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068b6:	08db      	lsrs	r3, r3, #3
 80068b8:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d01a      	beq.n	80068fa <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80068c4:	4b0f      	ldr	r3, [pc, #60]	@ (8006904 <HAL_RCC_OscConfig+0x86c>)
 80068c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068c8:	4a0e      	ldr	r2, [pc, #56]	@ (8006904 <HAL_RCC_OscConfig+0x86c>)
 80068ca:	f023 0310 	bic.w	r3, r3, #16
 80068ce:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d0:	f7fe f8c2 	bl	8004a58 <HAL_GetTick>
 80068d4:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80068d6:	bf00      	nop
 80068d8:	f7fe f8be 	bl	8004a58 <HAL_GetTick>
 80068dc:	4602      	mov	r2, r0
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d0f9      	beq.n	80068d8 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068e8:	4a06      	ldr	r2, [pc, #24]	@ (8006904 <HAL_RCC_OscConfig+0x86c>)
 80068ea:	00db      	lsls	r3, r3, #3
 80068ec:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80068ee:	4b05      	ldr	r3, [pc, #20]	@ (8006904 <HAL_RCC_OscConfig+0x86c>)
 80068f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068f2:	4a04      	ldr	r2, [pc, #16]	@ (8006904 <HAL_RCC_OscConfig+0x86c>)
 80068f4:	f043 0310 	orr.w	r3, r3, #16
 80068f8:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3720      	adds	r7, #32
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}
 8006904:	44020c00 	.word	0x44020c00

08006908 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d101      	bne.n	800691c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e19e      	b.n	8006c5a <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800691c:	4b83      	ldr	r3, [pc, #524]	@ (8006b2c <HAL_RCC_ClockConfig+0x224>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 030f 	and.w	r3, r3, #15
 8006924:	683a      	ldr	r2, [r7, #0]
 8006926:	429a      	cmp	r2, r3
 8006928:	d910      	bls.n	800694c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800692a:	4b80      	ldr	r3, [pc, #512]	@ (8006b2c <HAL_RCC_ClockConfig+0x224>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f023 020f 	bic.w	r2, r3, #15
 8006932:	497e      	ldr	r1, [pc, #504]	@ (8006b2c <HAL_RCC_ClockConfig+0x224>)
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	4313      	orrs	r3, r2
 8006938:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800693a:	4b7c      	ldr	r3, [pc, #496]	@ (8006b2c <HAL_RCC_ClockConfig+0x224>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 030f 	and.w	r3, r3, #15
 8006942:	683a      	ldr	r2, [r7, #0]
 8006944:	429a      	cmp	r2, r3
 8006946:	d001      	beq.n	800694c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e186      	b.n	8006c5a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 0310 	and.w	r3, r3, #16
 8006954:	2b00      	cmp	r3, #0
 8006956:	d012      	beq.n	800697e <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	695a      	ldr	r2, [r3, #20]
 800695c:	4b74      	ldr	r3, [pc, #464]	@ (8006b30 <HAL_RCC_ClockConfig+0x228>)
 800695e:	6a1b      	ldr	r3, [r3, #32]
 8006960:	0a1b      	lsrs	r3, r3, #8
 8006962:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006966:	429a      	cmp	r2, r3
 8006968:	d909      	bls.n	800697e <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800696a:	4b71      	ldr	r3, [pc, #452]	@ (8006b30 <HAL_RCC_ClockConfig+0x228>)
 800696c:	6a1b      	ldr	r3, [r3, #32]
 800696e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	021b      	lsls	r3, r3, #8
 8006978:	496d      	ldr	r1, [pc, #436]	@ (8006b30 <HAL_RCC_ClockConfig+0x228>)
 800697a:	4313      	orrs	r3, r2
 800697c:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0308 	and.w	r3, r3, #8
 8006986:	2b00      	cmp	r3, #0
 8006988:	d012      	beq.n	80069b0 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	691a      	ldr	r2, [r3, #16]
 800698e:	4b68      	ldr	r3, [pc, #416]	@ (8006b30 <HAL_RCC_ClockConfig+0x228>)
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	091b      	lsrs	r3, r3, #4
 8006994:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006998:	429a      	cmp	r2, r3
 800699a:	d909      	bls.n	80069b0 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800699c:	4b64      	ldr	r3, [pc, #400]	@ (8006b30 <HAL_RCC_ClockConfig+0x228>)
 800699e:	6a1b      	ldr	r3, [r3, #32]
 80069a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	011b      	lsls	r3, r3, #4
 80069aa:	4961      	ldr	r1, [pc, #388]	@ (8006b30 <HAL_RCC_ClockConfig+0x228>)
 80069ac:	4313      	orrs	r3, r2
 80069ae:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 0304 	and.w	r3, r3, #4
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d010      	beq.n	80069de <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	68da      	ldr	r2, [r3, #12]
 80069c0:	4b5b      	ldr	r3, [pc, #364]	@ (8006b30 <HAL_RCC_ClockConfig+0x228>)
 80069c2:	6a1b      	ldr	r3, [r3, #32]
 80069c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d908      	bls.n	80069de <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80069cc:	4b58      	ldr	r3, [pc, #352]	@ (8006b30 <HAL_RCC_ClockConfig+0x228>)
 80069ce:	6a1b      	ldr	r3, [r3, #32]
 80069d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	4955      	ldr	r1, [pc, #340]	@ (8006b30 <HAL_RCC_ClockConfig+0x228>)
 80069da:	4313      	orrs	r3, r2
 80069dc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0302 	and.w	r3, r3, #2
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d010      	beq.n	8006a0c <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	689a      	ldr	r2, [r3, #8]
 80069ee:	4b50      	ldr	r3, [pc, #320]	@ (8006b30 <HAL_RCC_ClockConfig+0x228>)
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	f003 030f 	and.w	r3, r3, #15
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d908      	bls.n	8006a0c <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80069fa:	4b4d      	ldr	r3, [pc, #308]	@ (8006b30 <HAL_RCC_ClockConfig+0x228>)
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	f023 020f 	bic.w	r2, r3, #15
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	494a      	ldr	r1, [pc, #296]	@ (8006b30 <HAL_RCC_ClockConfig+0x228>)
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 0301 	and.w	r3, r3, #1
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f000 8093 	beq.w	8006b40 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	2b03      	cmp	r3, #3
 8006a20:	d107      	bne.n	8006a32 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006a22:	4b43      	ldr	r3, [pc, #268]	@ (8006b30 <HAL_RCC_ClockConfig+0x228>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d121      	bne.n	8006a72 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e113      	b.n	8006c5a <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d107      	bne.n	8006a4a <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a3a:	4b3d      	ldr	r3, [pc, #244]	@ (8006b30 <HAL_RCC_ClockConfig+0x228>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d115      	bne.n	8006a72 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e107      	b.n	8006c5a <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d107      	bne.n	8006a62 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8006a52:	4b37      	ldr	r3, [pc, #220]	@ (8006b30 <HAL_RCC_ClockConfig+0x228>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d109      	bne.n	8006a72 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e0fb      	b.n	8006c5a <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a62:	4b33      	ldr	r3, [pc, #204]	@ (8006b30 <HAL_RCC_ClockConfig+0x228>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 0302 	and.w	r3, r3, #2
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d101      	bne.n	8006a72 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e0f3      	b.n	8006c5a <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8006a72:	4b2f      	ldr	r3, [pc, #188]	@ (8006b30 <HAL_RCC_ClockConfig+0x228>)
 8006a74:	69db      	ldr	r3, [r3, #28]
 8006a76:	f023 0203 	bic.w	r2, r3, #3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	492c      	ldr	r1, [pc, #176]	@ (8006b30 <HAL_RCC_ClockConfig+0x228>)
 8006a80:	4313      	orrs	r3, r2
 8006a82:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a84:	f7fd ffe8 	bl	8004a58 <HAL_GetTick>
 8006a88:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	2b03      	cmp	r3, #3
 8006a90:	d112      	bne.n	8006ab8 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a92:	e00a      	b.n	8006aaa <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006a94:	f7fd ffe0 	bl	8004a58 <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d901      	bls.n	8006aaa <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e0d7      	b.n	8006c5a <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006aaa:	4b21      	ldr	r3, [pc, #132]	@ (8006b30 <HAL_RCC_ClockConfig+0x228>)
 8006aac:	69db      	ldr	r3, [r3, #28]
 8006aae:	f003 0318 	and.w	r3, r3, #24
 8006ab2:	2b18      	cmp	r3, #24
 8006ab4:	d1ee      	bne.n	8006a94 <HAL_RCC_ClockConfig+0x18c>
 8006ab6:	e043      	b.n	8006b40 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d112      	bne.n	8006ae6 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006ac0:	e00a      	b.n	8006ad8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006ac2:	f7fd ffc9 	bl	8004a58 <HAL_GetTick>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d901      	bls.n	8006ad8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	e0c0      	b.n	8006c5a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006ad8:	4b15      	ldr	r3, [pc, #84]	@ (8006b30 <HAL_RCC_ClockConfig+0x228>)
 8006ada:	69db      	ldr	r3, [r3, #28]
 8006adc:	f003 0318 	and.w	r3, r3, #24
 8006ae0:	2b10      	cmp	r3, #16
 8006ae2:	d1ee      	bne.n	8006ac2 <HAL_RCC_ClockConfig+0x1ba>
 8006ae4:	e02c      	b.n	8006b40 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d122      	bne.n	8006b34 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8006aee:	e00a      	b.n	8006b06 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006af0:	f7fd ffb2 	bl	8004a58 <HAL_GetTick>
 8006af4:	4602      	mov	r2, r0
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d901      	bls.n	8006b06 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8006b02:	2303      	movs	r3, #3
 8006b04:	e0a9      	b.n	8006c5a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8006b06:	4b0a      	ldr	r3, [pc, #40]	@ (8006b30 <HAL_RCC_ClockConfig+0x228>)
 8006b08:	69db      	ldr	r3, [r3, #28]
 8006b0a:	f003 0318 	and.w	r3, r3, #24
 8006b0e:	2b08      	cmp	r3, #8
 8006b10:	d1ee      	bne.n	8006af0 <HAL_RCC_ClockConfig+0x1e8>
 8006b12:	e015      	b.n	8006b40 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006b14:	f7fd ffa0 	bl	8004a58 <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d906      	bls.n	8006b34 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e097      	b.n	8006c5a <HAL_RCC_ClockConfig+0x352>
 8006b2a:	bf00      	nop
 8006b2c:	40022000 	.word	0x40022000
 8006b30:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006b34:	4b4b      	ldr	r3, [pc, #300]	@ (8006c64 <HAL_RCC_ClockConfig+0x35c>)
 8006b36:	69db      	ldr	r3, [r3, #28]
 8006b38:	f003 0318 	and.w	r3, r3, #24
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1e9      	bne.n	8006b14 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0302 	and.w	r3, r3, #2
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d010      	beq.n	8006b6e <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	689a      	ldr	r2, [r3, #8]
 8006b50:	4b44      	ldr	r3, [pc, #272]	@ (8006c64 <HAL_RCC_ClockConfig+0x35c>)
 8006b52:	6a1b      	ldr	r3, [r3, #32]
 8006b54:	f003 030f 	and.w	r3, r3, #15
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d208      	bcs.n	8006b6e <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8006b5c:	4b41      	ldr	r3, [pc, #260]	@ (8006c64 <HAL_RCC_ClockConfig+0x35c>)
 8006b5e:	6a1b      	ldr	r3, [r3, #32]
 8006b60:	f023 020f 	bic.w	r2, r3, #15
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	493e      	ldr	r1, [pc, #248]	@ (8006c64 <HAL_RCC_ClockConfig+0x35c>)
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b6e:	4b3e      	ldr	r3, [pc, #248]	@ (8006c68 <HAL_RCC_ClockConfig+0x360>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 030f 	and.w	r3, r3, #15
 8006b76:	683a      	ldr	r2, [r7, #0]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d210      	bcs.n	8006b9e <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b7c:	4b3a      	ldr	r3, [pc, #232]	@ (8006c68 <HAL_RCC_ClockConfig+0x360>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f023 020f 	bic.w	r2, r3, #15
 8006b84:	4938      	ldr	r1, [pc, #224]	@ (8006c68 <HAL_RCC_ClockConfig+0x360>)
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b8c:	4b36      	ldr	r3, [pc, #216]	@ (8006c68 <HAL_RCC_ClockConfig+0x360>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 030f 	and.w	r3, r3, #15
 8006b94:	683a      	ldr	r2, [r7, #0]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d001      	beq.n	8006b9e <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e05d      	b.n	8006c5a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0304 	and.w	r3, r3, #4
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d010      	beq.n	8006bcc <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	68da      	ldr	r2, [r3, #12]
 8006bae:	4b2d      	ldr	r3, [pc, #180]	@ (8006c64 <HAL_RCC_ClockConfig+0x35c>)
 8006bb0:	6a1b      	ldr	r3, [r3, #32]
 8006bb2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d208      	bcs.n	8006bcc <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8006bba:	4b2a      	ldr	r3, [pc, #168]	@ (8006c64 <HAL_RCC_ClockConfig+0x35c>)
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	4927      	ldr	r1, [pc, #156]	@ (8006c64 <HAL_RCC_ClockConfig+0x35c>)
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 0308 	and.w	r3, r3, #8
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d012      	beq.n	8006bfe <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	691a      	ldr	r2, [r3, #16]
 8006bdc:	4b21      	ldr	r3, [pc, #132]	@ (8006c64 <HAL_RCC_ClockConfig+0x35c>)
 8006bde:	6a1b      	ldr	r3, [r3, #32]
 8006be0:	091b      	lsrs	r3, r3, #4
 8006be2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d209      	bcs.n	8006bfe <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8006bea:	4b1e      	ldr	r3, [pc, #120]	@ (8006c64 <HAL_RCC_ClockConfig+0x35c>)
 8006bec:	6a1b      	ldr	r3, [r3, #32]
 8006bee:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	011b      	lsls	r3, r3, #4
 8006bf8:	491a      	ldr	r1, [pc, #104]	@ (8006c64 <HAL_RCC_ClockConfig+0x35c>)
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 0310 	and.w	r3, r3, #16
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d012      	beq.n	8006c30 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	695a      	ldr	r2, [r3, #20]
 8006c0e:	4b15      	ldr	r3, [pc, #84]	@ (8006c64 <HAL_RCC_ClockConfig+0x35c>)
 8006c10:	6a1b      	ldr	r3, [r3, #32]
 8006c12:	0a1b      	lsrs	r3, r3, #8
 8006c14:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d209      	bcs.n	8006c30 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8006c1c:	4b11      	ldr	r3, [pc, #68]	@ (8006c64 <HAL_RCC_ClockConfig+0x35c>)
 8006c1e:	6a1b      	ldr	r3, [r3, #32]
 8006c20:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	695b      	ldr	r3, [r3, #20]
 8006c28:	021b      	lsls	r3, r3, #8
 8006c2a:	490e      	ldr	r1, [pc, #56]	@ (8006c64 <HAL_RCC_ClockConfig+0x35c>)
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006c30:	f000 f822 	bl	8006c78 <HAL_RCC_GetSysClockFreq>
 8006c34:	4602      	mov	r2, r0
 8006c36:	4b0b      	ldr	r3, [pc, #44]	@ (8006c64 <HAL_RCC_ClockConfig+0x35c>)
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	f003 030f 	and.w	r3, r3, #15
 8006c3e:	490b      	ldr	r1, [pc, #44]	@ (8006c6c <HAL_RCC_ClockConfig+0x364>)
 8006c40:	5ccb      	ldrb	r3, [r1, r3]
 8006c42:	fa22 f303 	lsr.w	r3, r2, r3
 8006c46:	4a0a      	ldr	r2, [pc, #40]	@ (8006c70 <HAL_RCC_ClockConfig+0x368>)
 8006c48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8006c74 <HAL_RCC_ClockConfig+0x36c>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7fd fe78 	bl	8004944 <HAL_InitTick>
 8006c54:	4603      	mov	r3, r0
 8006c56:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8006c58:	7afb      	ldrb	r3, [r7, #11]
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	44020c00 	.word	0x44020c00
 8006c68:	40022000 	.word	0x40022000
 8006c6c:	08012544 	.word	0x08012544
 8006c70:	2000001c 	.word	0x2000001c
 8006c74:	20000020 	.word	0x20000020

08006c78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b089      	sub	sp, #36	@ 0x24
 8006c7c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8006c7e:	4b8c      	ldr	r3, [pc, #560]	@ (8006eb0 <HAL_RCC_GetSysClockFreq+0x238>)
 8006c80:	69db      	ldr	r3, [r3, #28]
 8006c82:	f003 0318 	and.w	r3, r3, #24
 8006c86:	2b08      	cmp	r3, #8
 8006c88:	d102      	bne.n	8006c90 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006c8a:	4b8a      	ldr	r3, [pc, #552]	@ (8006eb4 <HAL_RCC_GetSysClockFreq+0x23c>)
 8006c8c:	61fb      	str	r3, [r7, #28]
 8006c8e:	e107      	b.n	8006ea0 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006c90:	4b87      	ldr	r3, [pc, #540]	@ (8006eb0 <HAL_RCC_GetSysClockFreq+0x238>)
 8006c92:	69db      	ldr	r3, [r3, #28]
 8006c94:	f003 0318 	and.w	r3, r3, #24
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d112      	bne.n	8006cc2 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8006c9c:	4b84      	ldr	r3, [pc, #528]	@ (8006eb0 <HAL_RCC_GetSysClockFreq+0x238>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 0320 	and.w	r3, r3, #32
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d009      	beq.n	8006cbc <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006ca8:	4b81      	ldr	r3, [pc, #516]	@ (8006eb0 <HAL_RCC_GetSysClockFreq+0x238>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	08db      	lsrs	r3, r3, #3
 8006cae:	f003 0303 	and.w	r3, r3, #3
 8006cb2:	4a81      	ldr	r2, [pc, #516]	@ (8006eb8 <HAL_RCC_GetSysClockFreq+0x240>)
 8006cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8006cb8:	61fb      	str	r3, [r7, #28]
 8006cba:	e0f1      	b.n	8006ea0 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8006cbc:	4b7e      	ldr	r3, [pc, #504]	@ (8006eb8 <HAL_RCC_GetSysClockFreq+0x240>)
 8006cbe:	61fb      	str	r3, [r7, #28]
 8006cc0:	e0ee      	b.n	8006ea0 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006cc2:	4b7b      	ldr	r3, [pc, #492]	@ (8006eb0 <HAL_RCC_GetSysClockFreq+0x238>)
 8006cc4:	69db      	ldr	r3, [r3, #28]
 8006cc6:	f003 0318 	and.w	r3, r3, #24
 8006cca:	2b10      	cmp	r3, #16
 8006ccc:	d102      	bne.n	8006cd4 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006cce:	4b7b      	ldr	r3, [pc, #492]	@ (8006ebc <HAL_RCC_GetSysClockFreq+0x244>)
 8006cd0:	61fb      	str	r3, [r7, #28]
 8006cd2:	e0e5      	b.n	8006ea0 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006cd4:	4b76      	ldr	r3, [pc, #472]	@ (8006eb0 <HAL_RCC_GetSysClockFreq+0x238>)
 8006cd6:	69db      	ldr	r3, [r3, #28]
 8006cd8:	f003 0318 	and.w	r3, r3, #24
 8006cdc:	2b18      	cmp	r3, #24
 8006cde:	f040 80dd 	bne.w	8006e9c <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006ce2:	4b73      	ldr	r3, [pc, #460]	@ (8006eb0 <HAL_RCC_GetSysClockFreq+0x238>)
 8006ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ce6:	f003 0303 	and.w	r3, r3, #3
 8006cea:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8006cec:	4b70      	ldr	r3, [pc, #448]	@ (8006eb0 <HAL_RCC_GetSysClockFreq+0x238>)
 8006cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cf0:	0a1b      	lsrs	r3, r3, #8
 8006cf2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006cf6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006cf8:	4b6d      	ldr	r3, [pc, #436]	@ (8006eb0 <HAL_RCC_GetSysClockFreq+0x238>)
 8006cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cfc:	091b      	lsrs	r3, r3, #4
 8006cfe:	f003 0301 	and.w	r3, r3, #1
 8006d02:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8006d04:	4b6a      	ldr	r3, [pc, #424]	@ (8006eb0 <HAL_RCC_GetSysClockFreq+0x238>)
 8006d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8006d08:	08db      	lsrs	r3, r3, #3
 8006d0a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8006d0e:	68fa      	ldr	r2, [r7, #12]
 8006d10:	fb02 f303 	mul.w	r3, r2, r3
 8006d14:	ee07 3a90 	vmov	s15, r3
 8006d18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d1c:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f000 80b7 	beq.w	8006e96 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d003      	beq.n	8006d36 <HAL_RCC_GetSysClockFreq+0xbe>
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	2b03      	cmp	r3, #3
 8006d32:	d056      	beq.n	8006de2 <HAL_RCC_GetSysClockFreq+0x16a>
 8006d34:	e077      	b.n	8006e26 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8006d36:	4b5e      	ldr	r3, [pc, #376]	@ (8006eb0 <HAL_RCC_GetSysClockFreq+0x238>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0320 	and.w	r3, r3, #32
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d02d      	beq.n	8006d9e <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006d42:	4b5b      	ldr	r3, [pc, #364]	@ (8006eb0 <HAL_RCC_GetSysClockFreq+0x238>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	08db      	lsrs	r3, r3, #3
 8006d48:	f003 0303 	and.w	r3, r3, #3
 8006d4c:	4a5a      	ldr	r2, [pc, #360]	@ (8006eb8 <HAL_RCC_GetSysClockFreq+0x240>)
 8006d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d52:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	ee07 3a90 	vmov	s15, r3
 8006d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	ee07 3a90 	vmov	s15, r3
 8006d64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d6c:	4b50      	ldr	r3, [pc, #320]	@ (8006eb0 <HAL_RCC_GetSysClockFreq+0x238>)
 8006d6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d74:	ee07 3a90 	vmov	s15, r3
 8006d78:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d7c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d80:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8006ec0 <HAL_RCC_GetSysClockFreq+0x248>
 8006d84:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006d88:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d8c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d90:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006d94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d98:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8006d9c:	e065      	b.n	8006e6a <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	ee07 3a90 	vmov	s15, r3
 8006da4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006da8:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8006ec4 <HAL_RCC_GetSysClockFreq+0x24c>
 8006dac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006db0:	4b3f      	ldr	r3, [pc, #252]	@ (8006eb0 <HAL_RCC_GetSysClockFreq+0x238>)
 8006db2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006db4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006db8:	ee07 3a90 	vmov	s15, r3
 8006dbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8006dc0:	ed97 6a02 	vldr	s12, [r7, #8]
 8006dc4:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006ec0 <HAL_RCC_GetSysClockFreq+0x248>
 8006dc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006dcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8006dd0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ddc:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8006de0:	e043      	b.n	8006e6a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	ee07 3a90 	vmov	s15, r3
 8006de8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dec:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8006ec8 <HAL_RCC_GetSysClockFreq+0x250>
 8006df0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006df4:	4b2e      	ldr	r3, [pc, #184]	@ (8006eb0 <HAL_RCC_GetSysClockFreq+0x238>)
 8006df6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dfc:	ee07 3a90 	vmov	s15, r3
 8006e00:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e04:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e08:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8006ec0 <HAL_RCC_GetSysClockFreq+0x248>
 8006e0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006e10:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e14:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e18:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006e1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e20:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8006e24:	e021      	b.n	8006e6a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	ee07 3a90 	vmov	s15, r3
 8006e2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e30:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006ecc <HAL_RCC_GetSysClockFreq+0x254>
 8006e34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e38:	4b1d      	ldr	r3, [pc, #116]	@ (8006eb0 <HAL_RCC_GetSysClockFreq+0x238>)
 8006e3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e40:	ee07 3a90 	vmov	s15, r3
 8006e44:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e48:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e4c:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8006ec0 <HAL_RCC_GetSysClockFreq+0x248>
 8006e50:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006e54:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e58:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006e60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e64:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8006e68:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8006e6a:	4b11      	ldr	r3, [pc, #68]	@ (8006eb0 <HAL_RCC_GetSysClockFreq+0x238>)
 8006e6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e6e:	0a5b      	lsrs	r3, r3, #9
 8006e70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e74:	3301      	adds	r3, #1
 8006e76:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	ee07 3a90 	vmov	s15, r3
 8006e7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006e82:	edd7 6a06 	vldr	s13, [r7, #24]
 8006e86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e8e:	ee17 3a90 	vmov	r3, s15
 8006e92:	61fb      	str	r3, [r7, #28]
 8006e94:	e004      	b.n	8006ea0 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8006e96:	2300      	movs	r3, #0
 8006e98:	61fb      	str	r3, [r7, #28]
 8006e9a:	e001      	b.n	8006ea0 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8006e9c:	4b06      	ldr	r3, [pc, #24]	@ (8006eb8 <HAL_RCC_GetSysClockFreq+0x240>)
 8006e9e:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8006ea0:	69fb      	ldr	r3, [r7, #28]
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3724      	adds	r7, #36	@ 0x24
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop
 8006eb0:	44020c00 	.word	0x44020c00
 8006eb4:	003d0900 	.word	0x003d0900
 8006eb8:	03d09000 	.word	0x03d09000
 8006ebc:	017d7840 	.word	0x017d7840
 8006ec0:	46000000 	.word	0x46000000
 8006ec4:	4c742400 	.word	0x4c742400
 8006ec8:	4bbebc20 	.word	0x4bbebc20
 8006ecc:	4a742400 	.word	0x4a742400

08006ed0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8006ed4:	f7ff fed0 	bl	8006c78 <HAL_RCC_GetSysClockFreq>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	4b08      	ldr	r3, [pc, #32]	@ (8006efc <HAL_RCC_GetHCLKFreq+0x2c>)
 8006edc:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8006ede:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8006ee2:	4907      	ldr	r1, [pc, #28]	@ (8006f00 <HAL_RCC_GetHCLKFreq+0x30>)
 8006ee4:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8006ee6:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8006eea:	fa22 f303 	lsr.w	r3, r2, r3
 8006eee:	4a05      	ldr	r2, [pc, #20]	@ (8006f04 <HAL_RCC_GetHCLKFreq+0x34>)
 8006ef0:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8006ef2:	4b04      	ldr	r3, [pc, #16]	@ (8006f04 <HAL_RCC_GetHCLKFreq+0x34>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	44020c00 	.word	0x44020c00
 8006f00:	08012544 	.word	0x08012544
 8006f04:	2000001c 	.word	0x2000001c

08006f08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8006f0c:	f7ff ffe0 	bl	8006ed0 <HAL_RCC_GetHCLKFreq>
 8006f10:	4602      	mov	r2, r0
 8006f12:	4b06      	ldr	r3, [pc, #24]	@ (8006f2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f14:	6a1b      	ldr	r3, [r3, #32]
 8006f16:	091b      	lsrs	r3, r3, #4
 8006f18:	f003 0307 	and.w	r3, r3, #7
 8006f1c:	4904      	ldr	r1, [pc, #16]	@ (8006f30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006f1e:	5ccb      	ldrb	r3, [r1, r3]
 8006f20:	f003 031f 	and.w	r3, r3, #31
 8006f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	44020c00 	.word	0x44020c00
 8006f30:	08012554 	.word	0x08012554

08006f34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8006f38:	f7ff ffca 	bl	8006ed0 <HAL_RCC_GetHCLKFreq>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	4b06      	ldr	r3, [pc, #24]	@ (8006f58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f40:	6a1b      	ldr	r3, [r3, #32]
 8006f42:	0a1b      	lsrs	r3, r3, #8
 8006f44:	f003 0307 	and.w	r3, r3, #7
 8006f48:	4904      	ldr	r1, [pc, #16]	@ (8006f5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006f4a:	5ccb      	ldrb	r3, [r1, r3]
 8006f4c:	f003 031f 	and.w	r3, r3, #31
 8006f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	44020c00 	.word	0x44020c00
 8006f5c:	08012554 	.word	0x08012554

08006f60 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8006f64:	f7ff ffb4 	bl	8006ed0 <HAL_RCC_GetHCLKFreq>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	4b06      	ldr	r3, [pc, #24]	@ (8006f84 <HAL_RCC_GetPCLK3Freq+0x24>)
 8006f6c:	6a1b      	ldr	r3, [r3, #32]
 8006f6e:	0b1b      	lsrs	r3, r3, #12
 8006f70:	f003 0307 	and.w	r3, r3, #7
 8006f74:	4904      	ldr	r1, [pc, #16]	@ (8006f88 <HAL_RCC_GetPCLK3Freq+0x28>)
 8006f76:	5ccb      	ldrb	r3, [r1, r3]
 8006f78:	f003 031f 	and.w	r3, r3, #31
 8006f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	44020c00 	.word	0x44020c00
 8006f88:	08012554 	.word	0x08012554

08006f8c <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8006f8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f90:	b0d8      	sub	sp, #352	@ 0x160
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006f98:	2300      	movs	r3, #0
 8006f9a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006fa4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fac:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8006fb0:	2500      	movs	r5, #0
 8006fb2:	ea54 0305 	orrs.w	r3, r4, r5
 8006fb6:	d00b      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8006fb8:	4bcd      	ldr	r3, [pc, #820]	@ (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006fba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006fbe:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8006fc2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006fc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fc8:	4ac9      	ldr	r2, [pc, #804]	@ (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006fca:	430b      	orrs	r3, r1
 8006fcc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006fd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd8:	f002 0801 	and.w	r8, r2, #1
 8006fdc:	f04f 0900 	mov.w	r9, #0
 8006fe0:	ea58 0309 	orrs.w	r3, r8, r9
 8006fe4:	d042      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8006fe6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006fea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fec:	2b05      	cmp	r3, #5
 8006fee:	d823      	bhi.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8006ff0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8006ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff6:	bf00      	nop
 8006ff8:	08007041 	.word	0x08007041
 8006ffc:	08007011 	.word	0x08007011
 8007000:	08007025 	.word	0x08007025
 8007004:	08007041 	.word	0x08007041
 8007008:	08007041 	.word	0x08007041
 800700c:	08007041 	.word	0x08007041
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007010:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007014:	3308      	adds	r3, #8
 8007016:	4618      	mov	r0, r3
 8007018:	f004 feda 	bl	800bdd0 <RCCEx_PLL2_Config>
 800701c:	4603      	mov	r3, r0
 800701e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8007022:	e00e      	b.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007024:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007028:	3330      	adds	r3, #48	@ 0x30
 800702a:	4618      	mov	r0, r3
 800702c:	f004 ff68 	bl	800bf00 <RCCEx_PLL3_Config>
 8007030:	4603      	mov	r3, r0
 8007032:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8007036:	e004      	b.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800703e:	e000      	b.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8007040:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007042:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007046:	2b00      	cmp	r3, #0
 8007048:	d10c      	bne.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800704a:	4ba9      	ldr	r3, [pc, #676]	@ (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800704c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007050:	f023 0107 	bic.w	r1, r3, #7
 8007054:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007058:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800705a:	4aa5      	ldr	r2, [pc, #660]	@ (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800705c:	430b      	orrs	r3, r1
 800705e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007062:	e003      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007064:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007068:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800706c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007074:	f002 0a02 	and.w	sl, r2, #2
 8007078:	f04f 0b00 	mov.w	fp, #0
 800707c:	ea5a 030b 	orrs.w	r3, sl, fp
 8007080:	f000 8088 	beq.w	8007194 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8007084:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007088:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800708a:	2b28      	cmp	r3, #40	@ 0x28
 800708c:	d868      	bhi.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800708e:	a201      	add	r2, pc, #4	@ (adr r2, 8007094 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8007090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007094:	08007169 	.word	0x08007169
 8007098:	08007161 	.word	0x08007161
 800709c:	08007161 	.word	0x08007161
 80070a0:	08007161 	.word	0x08007161
 80070a4:	08007161 	.word	0x08007161
 80070a8:	08007161 	.word	0x08007161
 80070ac:	08007161 	.word	0x08007161
 80070b0:	08007161 	.word	0x08007161
 80070b4:	08007139 	.word	0x08007139
 80070b8:	08007161 	.word	0x08007161
 80070bc:	08007161 	.word	0x08007161
 80070c0:	08007161 	.word	0x08007161
 80070c4:	08007161 	.word	0x08007161
 80070c8:	08007161 	.word	0x08007161
 80070cc:	08007161 	.word	0x08007161
 80070d0:	08007161 	.word	0x08007161
 80070d4:	0800714d 	.word	0x0800714d
 80070d8:	08007161 	.word	0x08007161
 80070dc:	08007161 	.word	0x08007161
 80070e0:	08007161 	.word	0x08007161
 80070e4:	08007161 	.word	0x08007161
 80070e8:	08007161 	.word	0x08007161
 80070ec:	08007161 	.word	0x08007161
 80070f0:	08007161 	.word	0x08007161
 80070f4:	08007169 	.word	0x08007169
 80070f8:	08007161 	.word	0x08007161
 80070fc:	08007161 	.word	0x08007161
 8007100:	08007161 	.word	0x08007161
 8007104:	08007161 	.word	0x08007161
 8007108:	08007161 	.word	0x08007161
 800710c:	08007161 	.word	0x08007161
 8007110:	08007161 	.word	0x08007161
 8007114:	08007169 	.word	0x08007169
 8007118:	08007161 	.word	0x08007161
 800711c:	08007161 	.word	0x08007161
 8007120:	08007161 	.word	0x08007161
 8007124:	08007161 	.word	0x08007161
 8007128:	08007161 	.word	0x08007161
 800712c:	08007161 	.word	0x08007161
 8007130:	08007161 	.word	0x08007161
 8007134:	08007169 	.word	0x08007169
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007138:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800713c:	3308      	adds	r3, #8
 800713e:	4618      	mov	r0, r3
 8007140:	f004 fe46 	bl	800bdd0 <RCCEx_PLL2_Config>
 8007144:	4603      	mov	r3, r0
 8007146:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800714a:	e00e      	b.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800714c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007150:	3330      	adds	r3, #48	@ 0x30
 8007152:	4618      	mov	r0, r3
 8007154:	f004 fed4 	bl	800bf00 <RCCEx_PLL3_Config>
 8007158:	4603      	mov	r3, r0
 800715a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800715e:	e004      	b.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007166:	e000      	b.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8007168:	bf00      	nop
    }

    if (ret == HAL_OK)
 800716a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800716e:	2b00      	cmp	r3, #0
 8007170:	d10c      	bne.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8007172:	4b5f      	ldr	r3, [pc, #380]	@ (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007174:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007178:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800717c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007180:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007182:	4a5b      	ldr	r2, [pc, #364]	@ (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007184:	430b      	orrs	r3, r1
 8007186:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800718a:	e003      	b.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800718c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007190:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007194:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719c:	f002 0304 	and.w	r3, r2, #4
 80071a0:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80071a4:	2300      	movs	r3, #0
 80071a6:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80071aa:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 80071ae:	460b      	mov	r3, r1
 80071b0:	4313      	orrs	r3, r2
 80071b2:	d04e      	beq.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80071b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071ba:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80071be:	d02c      	beq.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80071c0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80071c4:	d825      	bhi.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80071c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071ca:	d028      	beq.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x292>
 80071cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071d0:	d81f      	bhi.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80071d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80071d4:	d025      	beq.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80071d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80071d8:	d81b      	bhi.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80071da:	2b80      	cmp	r3, #128	@ 0x80
 80071dc:	d00f      	beq.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x272>
 80071de:	2b80      	cmp	r3, #128	@ 0x80
 80071e0:	d817      	bhi.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d01f      	beq.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80071e6:	2b40      	cmp	r3, #64	@ 0x40
 80071e8:	d113      	bne.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80071ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071ee:	3308      	adds	r3, #8
 80071f0:	4618      	mov	r0, r3
 80071f2:	f004 fded 	bl	800bdd0 <RCCEx_PLL2_Config>
 80071f6:	4603      	mov	r3, r0
 80071f8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80071fc:	e014      	b.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80071fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007202:	3330      	adds	r3, #48	@ 0x30
 8007204:	4618      	mov	r0, r3
 8007206:	f004 fe7b 	bl	800bf00 <RCCEx_PLL3_Config>
 800720a:	4603      	mov	r3, r0
 800720c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8007210:	e00a      	b.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007218:	e006      	b.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800721a:	bf00      	nop
 800721c:	e004      	b.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800721e:	bf00      	nop
 8007220:	e002      	b.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8007222:	bf00      	nop
 8007224:	e000      	b.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8007226:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007228:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800722c:	2b00      	cmp	r3, #0
 800722e:	d10c      	bne.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8007230:	4b2f      	ldr	r3, [pc, #188]	@ (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007232:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007236:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800723a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800723e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007240:	4a2b      	ldr	r2, [pc, #172]	@ (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007242:	430b      	orrs	r3, r1
 8007244:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007248:	e003      	b.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800724a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800724e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007252:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725a:	f002 0308 	and.w	r3, r2, #8
 800725e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8007262:	2300      	movs	r3, #0
 8007264:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8007268:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 800726c:	460b      	mov	r3, r1
 800726e:	4313      	orrs	r3, r2
 8007270:	d056      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8007272:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007276:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007278:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800727c:	d031      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800727e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007282:	d82a      	bhi.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007284:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007288:	d02d      	beq.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800728a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800728e:	d824      	bhi.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007290:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007294:	d029      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8007296:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800729a:	d81e      	bhi.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800729c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072a0:	d011      	beq.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80072a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072a6:	d818      	bhi.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d023      	beq.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80072ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072b0:	d113      	bne.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80072b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072b6:	3308      	adds	r3, #8
 80072b8:	4618      	mov	r0, r3
 80072ba:	f004 fd89 	bl	800bdd0 <RCCEx_PLL2_Config>
 80072be:	4603      	mov	r3, r0
 80072c0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80072c4:	e017      	b.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80072c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072ca:	3330      	adds	r3, #48	@ 0x30
 80072cc:	4618      	mov	r0, r3
 80072ce:	f004 fe17 	bl	800bf00 <RCCEx_PLL3_Config>
 80072d2:	4603      	mov	r3, r0
 80072d4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80072d8:	e00d      	b.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80072e0:	e009      	b.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80072e2:	bf00      	nop
 80072e4:	e007      	b.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80072e6:	bf00      	nop
 80072e8:	e005      	b.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80072ea:	bf00      	nop
 80072ec:	e003      	b.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80072ee:	bf00      	nop
 80072f0:	44020c00 	.word	0x44020c00
        break;
 80072f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072f6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d10c      	bne.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80072fe:	4bbb      	ldr	r3, [pc, #748]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007300:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007304:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8007308:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800730c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800730e:	4ab7      	ldr	r2, [pc, #732]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007310:	430b      	orrs	r3, r1
 8007312:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007316:	e003      	b.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007318:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800731c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007320:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007328:	f002 0310 	and.w	r3, r2, #16
 800732c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8007330:	2300      	movs	r3, #0
 8007332:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8007336:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 800733a:	460b      	mov	r3, r1
 800733c:	4313      	orrs	r3, r2
 800733e:	d053      	beq.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8007340:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007344:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007346:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800734a:	d031      	beq.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x424>
 800734c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007350:	d82a      	bhi.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007352:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007356:	d02d      	beq.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8007358:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800735c:	d824      	bhi.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800735e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007362:	d029      	beq.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8007364:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007368:	d81e      	bhi.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800736a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800736e:	d011      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007370:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007374:	d818      	bhi.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007376:	2b00      	cmp	r3, #0
 8007378:	d020      	beq.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x430>
 800737a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800737e:	d113      	bne.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007380:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007384:	3308      	adds	r3, #8
 8007386:	4618      	mov	r0, r3
 8007388:	f004 fd22 	bl	800bdd0 <RCCEx_PLL2_Config>
 800738c:	4603      	mov	r3, r0
 800738e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8007392:	e014      	b.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007394:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007398:	3330      	adds	r3, #48	@ 0x30
 800739a:	4618      	mov	r0, r3
 800739c:	f004 fdb0 	bl	800bf00 <RCCEx_PLL3_Config>
 80073a0:	4603      	mov	r3, r0
 80073a2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80073a6:	e00a      	b.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80073ae:	e006      	b.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80073b0:	bf00      	nop
 80073b2:	e004      	b.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80073b4:	bf00      	nop
 80073b6:	e002      	b.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80073b8:	bf00      	nop
 80073ba:	e000      	b.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80073bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073be:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d10c      	bne.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80073c6:	4b89      	ldr	r3, [pc, #548]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80073c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80073cc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80073d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80073d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073d6:	4a85      	ldr	r2, [pc, #532]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80073d8:	430b      	orrs	r3, r1
 80073da:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80073de:	e003      	b.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073e0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80073e4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80073e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80073ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f0:	f002 0320 	and.w	r3, r2, #32
 80073f4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80073f8:	2300      	movs	r3, #0
 80073fa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80073fe:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 8007402:	460b      	mov	r3, r1
 8007404:	4313      	orrs	r3, r2
 8007406:	d053      	beq.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8007408:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800740c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800740e:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007412:	d031      	beq.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8007414:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007418:	d82a      	bhi.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800741a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800741e:	d02d      	beq.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8007420:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007424:	d824      	bhi.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8007426:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800742a:	d029      	beq.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800742c:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007430:	d81e      	bhi.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8007432:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007436:	d011      	beq.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8007438:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800743c:	d818      	bhi.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800743e:	2b00      	cmp	r3, #0
 8007440:	d020      	beq.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8007442:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007446:	d113      	bne.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007448:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800744c:	3308      	adds	r3, #8
 800744e:	4618      	mov	r0, r3
 8007450:	f004 fcbe 	bl	800bdd0 <RCCEx_PLL2_Config>
 8007454:	4603      	mov	r3, r0
 8007456:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800745a:	e014      	b.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800745c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007460:	3330      	adds	r3, #48	@ 0x30
 8007462:	4618      	mov	r0, r3
 8007464:	f004 fd4c 	bl	800bf00 <RCCEx_PLL3_Config>
 8007468:	4603      	mov	r3, r0
 800746a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800746e:	e00a      	b.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007476:	e006      	b.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8007478:	bf00      	nop
 800747a:	e004      	b.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800747c:	bf00      	nop
 800747e:	e002      	b.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8007480:	bf00      	nop
 8007482:	e000      	b.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8007484:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007486:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800748a:	2b00      	cmp	r3, #0
 800748c:	d10c      	bne.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800748e:	4b57      	ldr	r3, [pc, #348]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007490:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007494:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8007498:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800749c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800749e:	4a53      	ldr	r2, [pc, #332]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80074a0:	430b      	orrs	r3, r1
 80074a2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80074a6:	e003      	b.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074a8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80074ac:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80074b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b8:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80074bc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80074c0:	2300      	movs	r3, #0
 80074c2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80074c6:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 80074ca:	460b      	mov	r3, r1
 80074cc:	4313      	orrs	r3, r2
 80074ce:	d053      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 80074d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074d6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80074da:	d031      	beq.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80074dc:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80074e0:	d82a      	bhi.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80074e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074e6:	d02d      	beq.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80074e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074ec:	d824      	bhi.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80074ee:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80074f2:	d029      	beq.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80074f4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80074f8:	d81e      	bhi.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80074fa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80074fe:	d011      	beq.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8007500:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007504:	d818      	bhi.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8007506:	2b00      	cmp	r3, #0
 8007508:	d020      	beq.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800750a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800750e:	d113      	bne.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007510:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007514:	3308      	adds	r3, #8
 8007516:	4618      	mov	r0, r3
 8007518:	f004 fc5a 	bl	800bdd0 <RCCEx_PLL2_Config>
 800751c:	4603      	mov	r3, r0
 800751e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8007522:	e014      	b.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007524:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007528:	3330      	adds	r3, #48	@ 0x30
 800752a:	4618      	mov	r0, r3
 800752c:	f004 fce8 	bl	800bf00 <RCCEx_PLL3_Config>
 8007530:	4603      	mov	r3, r0
 8007532:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8007536:	e00a      	b.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800753e:	e006      	b.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8007540:	bf00      	nop
 8007542:	e004      	b.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8007544:	bf00      	nop
 8007546:	e002      	b.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8007548:	bf00      	nop
 800754a:	e000      	b.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800754c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800754e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007552:	2b00      	cmp	r3, #0
 8007554:	d10c      	bne.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8007556:	4b25      	ldr	r3, [pc, #148]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007558:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800755c:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8007560:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007564:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007566:	4a21      	ldr	r2, [pc, #132]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007568:	430b      	orrs	r3, r1
 800756a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800756e:	e003      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007570:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007574:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007578:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800757c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007580:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007584:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8007588:	2300      	movs	r3, #0
 800758a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800758e:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 8007592:	460b      	mov	r3, r1
 8007594:	4313      	orrs	r3, r2
 8007596:	d055      	beq.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8007598:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800759c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800759e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80075a2:	d033      	beq.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x680>
 80075a4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80075a8:	d82c      	bhi.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80075aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80075ae:	d02f      	beq.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x684>
 80075b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80075b4:	d826      	bhi.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80075b6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80075ba:	d02b      	beq.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x688>
 80075bc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80075c0:	d820      	bhi.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80075c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80075c6:	d013      	beq.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80075c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80075cc:	d81a      	bhi.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d022      	beq.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 80075d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80075d6:	d115      	bne.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80075d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075dc:	3308      	adds	r3, #8
 80075de:	4618      	mov	r0, r3
 80075e0:	f004 fbf6 	bl	800bdd0 <RCCEx_PLL2_Config>
 80075e4:	4603      	mov	r3, r0
 80075e6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80075ea:	e016      	b.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x68e>
 80075ec:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80075f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075f4:	3330      	adds	r3, #48	@ 0x30
 80075f6:	4618      	mov	r0, r3
 80075f8:	f004 fc82 	bl	800bf00 <RCCEx_PLL3_Config>
 80075fc:	4603      	mov	r3, r0
 80075fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8007602:	e00a      	b.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800760a:	e006      	b.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800760c:	bf00      	nop
 800760e:	e004      	b.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8007610:	bf00      	nop
 8007612:	e002      	b.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8007614:	bf00      	nop
 8007616:	e000      	b.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8007618:	bf00      	nop
    }

    if (ret == HAL_OK)
 800761a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800761e:	2b00      	cmp	r3, #0
 8007620:	d10c      	bne.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8007622:	4bbb      	ldr	r3, [pc, #748]	@ (8007910 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007624:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007628:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800762c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007630:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007632:	4ab7      	ldr	r2, [pc, #732]	@ (8007910 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007634:	430b      	orrs	r3, r1
 8007636:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800763a:	e003      	b.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800763c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007640:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8007644:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8007650:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8007654:	2300      	movs	r3, #0
 8007656:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800765a:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 800765e:	460b      	mov	r3, r1
 8007660:	4313      	orrs	r3, r2
 8007662:	d053      	beq.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8007664:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007668:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800766a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800766e:	d031      	beq.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8007670:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007674:	d82a      	bhi.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x740>
 8007676:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800767a:	d02d      	beq.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 800767c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007680:	d824      	bhi.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x740>
 8007682:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007686:	d029      	beq.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x750>
 8007688:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800768c:	d81e      	bhi.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x740>
 800768e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007692:	d011      	beq.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8007694:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007698:	d818      	bhi.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x740>
 800769a:	2b00      	cmp	r3, #0
 800769c:	d020      	beq.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x754>
 800769e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80076a2:	d113      	bne.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80076a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076a8:	3308      	adds	r3, #8
 80076aa:	4618      	mov	r0, r3
 80076ac:	f004 fb90 	bl	800bdd0 <RCCEx_PLL2_Config>
 80076b0:	4603      	mov	r3, r0
 80076b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80076b6:	e014      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80076b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076bc:	3330      	adds	r3, #48	@ 0x30
 80076be:	4618      	mov	r0, r3
 80076c0:	f004 fc1e 	bl	800bf00 <RCCEx_PLL3_Config>
 80076c4:	4603      	mov	r3, r0
 80076c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80076ca:	e00a      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80076d2:	e006      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80076d4:	bf00      	nop
 80076d6:	e004      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80076d8:	bf00      	nop
 80076da:	e002      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80076dc:	bf00      	nop
 80076de:	e000      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80076e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076e2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d10c      	bne.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 80076ea:	4b89      	ldr	r3, [pc, #548]	@ (8007910 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80076ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80076f0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80076f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80076fa:	4a85      	ldr	r2, [pc, #532]	@ (8007910 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80076fc:	430b      	orrs	r3, r1
 80076fe:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007702:	e003      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007704:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007708:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 800770c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007714:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8007718:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800771c:	2300      	movs	r3, #0
 800771e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007722:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007726:	460b      	mov	r3, r1
 8007728:	4313      	orrs	r3, r2
 800772a:	d055      	beq.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 800772c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007730:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007734:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8007738:	d031      	beq.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x812>
 800773a:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800773e:	d82a      	bhi.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8007740:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007744:	d02d      	beq.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x816>
 8007746:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800774a:	d824      	bhi.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800774c:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8007750:	d029      	beq.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8007752:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8007756:	d81e      	bhi.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8007758:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800775c:	d011      	beq.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 800775e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007762:	d818      	bhi.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8007764:	2b00      	cmp	r3, #0
 8007766:	d020      	beq.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8007768:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800776c:	d113      	bne.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800776e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007772:	3308      	adds	r3, #8
 8007774:	4618      	mov	r0, r3
 8007776:	f004 fb2b 	bl	800bdd0 <RCCEx_PLL2_Config>
 800777a:	4603      	mov	r3, r0
 800777c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8007780:	e014      	b.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007782:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007786:	3330      	adds	r3, #48	@ 0x30
 8007788:	4618      	mov	r0, r3
 800778a:	f004 fbb9 	bl	800bf00 <RCCEx_PLL3_Config>
 800778e:	4603      	mov	r3, r0
 8007790:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8007794:	e00a      	b.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800779c:	e006      	b.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800779e:	bf00      	nop
 80077a0:	e004      	b.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80077a2:	bf00      	nop
 80077a4:	e002      	b.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80077a6:	bf00      	nop
 80077a8:	e000      	b.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80077aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077ac:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d10d      	bne.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 80077b4:	4b56      	ldr	r3, [pc, #344]	@ (8007910 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80077b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80077ba:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 80077be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80077c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077c6:	4a52      	ldr	r2, [pc, #328]	@ (8007910 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80077c8:	430b      	orrs	r3, r1
 80077ca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80077ce:	e003      	b.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077d0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80077d4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 80077d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80077dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e0:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80077e4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80077e8:	2300      	movs	r3, #0
 80077ea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80077ee:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80077f2:	460b      	mov	r3, r1
 80077f4:	4313      	orrs	r3, r2
 80077f6:	d044      	beq.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 80077f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80077fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007800:	2b05      	cmp	r3, #5
 8007802:	d823      	bhi.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8007804:	a201      	add	r2, pc, #4	@ (adr r2, 800780c <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8007806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800780a:	bf00      	nop
 800780c:	08007855 	.word	0x08007855
 8007810:	08007825 	.word	0x08007825
 8007814:	08007839 	.word	0x08007839
 8007818:	08007855 	.word	0x08007855
 800781c:	08007855 	.word	0x08007855
 8007820:	08007855 	.word	0x08007855
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007824:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007828:	3308      	adds	r3, #8
 800782a:	4618      	mov	r0, r3
 800782c:	f004 fad0 	bl	800bdd0 <RCCEx_PLL2_Config>
 8007830:	4603      	mov	r3, r0
 8007832:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8007836:	e00e      	b.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007838:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800783c:	3330      	adds	r3, #48	@ 0x30
 800783e:	4618      	mov	r0, r3
 8007840:	f004 fb5e 	bl	800bf00 <RCCEx_PLL3_Config>
 8007844:	4603      	mov	r3, r0
 8007846:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800784a:	e004      	b.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800784c:	2301      	movs	r3, #1
 800784e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007852:	e000      	b.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8007854:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007856:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800785a:	2b00      	cmp	r3, #0
 800785c:	d10d      	bne.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 800785e:	4b2c      	ldr	r3, [pc, #176]	@ (8007910 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007860:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007864:	f023 0107 	bic.w	r1, r3, #7
 8007868:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800786c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007870:	4a27      	ldr	r2, [pc, #156]	@ (8007910 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007872:	430b      	orrs	r3, r1
 8007874:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007878:	e003      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800787a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800787e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8007882:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800788e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007892:	2300      	movs	r3, #0
 8007894:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007898:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800789c:	460b      	mov	r3, r1
 800789e:	4313      	orrs	r3, r2
 80078a0:	d04f      	beq.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 80078a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078aa:	2b50      	cmp	r3, #80	@ 0x50
 80078ac:	d029      	beq.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80078ae:	2b50      	cmp	r3, #80	@ 0x50
 80078b0:	d823      	bhi.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80078b2:	2b40      	cmp	r3, #64	@ 0x40
 80078b4:	d027      	beq.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 80078b6:	2b40      	cmp	r3, #64	@ 0x40
 80078b8:	d81f      	bhi.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80078ba:	2b30      	cmp	r3, #48	@ 0x30
 80078bc:	d025      	beq.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x97e>
 80078be:	2b30      	cmp	r3, #48	@ 0x30
 80078c0:	d81b      	bhi.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80078c2:	2b20      	cmp	r3, #32
 80078c4:	d00f      	beq.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80078c6:	2b20      	cmp	r3, #32
 80078c8:	d817      	bhi.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d022      	beq.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80078ce:	2b10      	cmp	r3, #16
 80078d0:	d113      	bne.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80078d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078d6:	3308      	adds	r3, #8
 80078d8:	4618      	mov	r0, r3
 80078da:	f004 fa79 	bl	800bdd0 <RCCEx_PLL2_Config>
 80078de:	4603      	mov	r3, r0
 80078e0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80078e4:	e017      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80078e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078ea:	3330      	adds	r3, #48	@ 0x30
 80078ec:	4618      	mov	r0, r3
 80078ee:	f004 fb07 	bl	800bf00 <RCCEx_PLL3_Config>
 80078f2:	4603      	mov	r3, r0
 80078f4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80078f8:	e00d      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007900:	e009      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8007902:	bf00      	nop
 8007904:	e007      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8007906:	bf00      	nop
 8007908:	e005      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800790a:	bf00      	nop
 800790c:	e003      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 800790e:	bf00      	nop
 8007910:	44020c00 	.word	0x44020c00
        break;
 8007914:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007916:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10d      	bne.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 800791e:	4baf      	ldr	r3, [pc, #700]	@ (8007bdc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007920:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007924:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8007928:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800792c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007930:	4aaa      	ldr	r2, [pc, #680]	@ (8007bdc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007932:	430b      	orrs	r3, r1
 8007934:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007938:	e003      	b.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800793a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800793e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007942:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800794e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007952:	2300      	movs	r3, #0
 8007954:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007958:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800795c:	460b      	mov	r3, r1
 800795e:	4313      	orrs	r3, r2
 8007960:	d055      	beq.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8007962:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007966:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800796a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800796e:	d031      	beq.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8007970:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007974:	d82a      	bhi.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8007976:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800797a:	d02d      	beq.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 800797c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007980:	d824      	bhi.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8007982:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007986:	d029      	beq.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8007988:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800798c:	d81e      	bhi.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800798e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007992:	d011      	beq.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8007994:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007998:	d818      	bhi.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800799a:	2b00      	cmp	r3, #0
 800799c:	d020      	beq.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 800799e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80079a2:	d113      	bne.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80079a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079a8:	3308      	adds	r3, #8
 80079aa:	4618      	mov	r0, r3
 80079ac:	f004 fa10 	bl	800bdd0 <RCCEx_PLL2_Config>
 80079b0:	4603      	mov	r3, r0
 80079b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80079b6:	e014      	b.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80079b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079bc:	3330      	adds	r3, #48	@ 0x30
 80079be:	4618      	mov	r0, r3
 80079c0:	f004 fa9e 	bl	800bf00 <RCCEx_PLL3_Config>
 80079c4:	4603      	mov	r3, r0
 80079c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80079ca:	e00a      	b.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80079d2:	e006      	b.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80079d4:	bf00      	nop
 80079d6:	e004      	b.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80079d8:	bf00      	nop
 80079da:	e002      	b.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80079dc:	bf00      	nop
 80079de:	e000      	b.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80079e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079e2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d10d      	bne.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80079ea:	4b7c      	ldr	r3, [pc, #496]	@ (8007bdc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80079ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80079f0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80079f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079fc:	4a77      	ldr	r2, [pc, #476]	@ (8007bdc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80079fe:	430b      	orrs	r3, r1
 8007a00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007a04:	e003      	b.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a06:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007a0a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007a0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a16:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007a1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007a1e:	2300      	movs	r3, #0
 8007a20:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007a24:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007a28:	460b      	mov	r3, r1
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	d03d      	beq.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8007a2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a36:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a3a:	d01b      	beq.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8007a3c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a40:	d814      	bhi.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8007a42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a46:	d017      	beq.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8007a48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a4c:	d80e      	bhi.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d014      	beq.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8007a52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a56:	d109      	bne.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007a58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a5c:	3330      	adds	r3, #48	@ 0x30
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f004 fa4e 	bl	800bf00 <RCCEx_PLL3_Config>
 8007a64:	4603      	mov	r3, r0
 8007a66:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8007a6a:	e008      	b.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007a72:	e004      	b.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8007a74:	bf00      	nop
 8007a76:	e002      	b.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8007a78:	bf00      	nop
 8007a7a:	e000      	b.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8007a7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a7e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d10d      	bne.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8007a86:	4b55      	ldr	r3, [pc, #340]	@ (8007bdc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007a88:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007a8c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007a90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a98:	4a50      	ldr	r2, [pc, #320]	@ (8007bdc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007a9a:	430b      	orrs	r3, r1
 8007a9c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007aa0:	e003      	b.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aa2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007aa6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007aaa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007ab6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007aba:	2300      	movs	r3, #0
 8007abc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007ac0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	d03d      	beq.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8007aca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ad2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007ad6:	d01b      	beq.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8007ad8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007adc:	d814      	bhi.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8007ade:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007ae2:	d017      	beq.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8007ae4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007ae8:	d80e      	bhi.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d014      	beq.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8007aee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007af2:	d109      	bne.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007af4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007af8:	3330      	adds	r3, #48	@ 0x30
 8007afa:	4618      	mov	r0, r3
 8007afc:	f004 fa00 	bl	800bf00 <RCCEx_PLL3_Config>
 8007b00:	4603      	mov	r3, r0
 8007b02:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8007b06:	e008      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007b0e:	e004      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8007b10:	bf00      	nop
 8007b12:	e002      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8007b14:	bf00      	nop
 8007b16:	e000      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8007b18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b1a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d10d      	bne.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8007b22:	4b2e      	ldr	r3, [pc, #184]	@ (8007bdc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007b24:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007b28:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8007b2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b34:	4a29      	ldr	r2, [pc, #164]	@ (8007bdc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007b36:	430b      	orrs	r3, r1
 8007b38:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007b3c:	e003      	b.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b3e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007b42:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007b46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007b52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007b56:	2300      	movs	r3, #0
 8007b58:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007b5c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007b60:	460b      	mov	r3, r1
 8007b62:	4313      	orrs	r3, r2
 8007b64:	d040      	beq.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8007b66:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007b6e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007b72:	d01b      	beq.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8007b74:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007b78:	d814      	bhi.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8007b7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007b7e:	d017      	beq.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007b80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007b84:	d80e      	bhi.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d014      	beq.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8007b8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b8e:	d109      	bne.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007b90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b94:	3330      	adds	r3, #48	@ 0x30
 8007b96:	4618      	mov	r0, r3
 8007b98:	f004 f9b2 	bl	800bf00 <RCCEx_PLL3_Config>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8007ba2:	e008      	b.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007baa:	e004      	b.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8007bac:	bf00      	nop
 8007bae:	e002      	b.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8007bb0:	bf00      	nop
 8007bb2:	e000      	b.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8007bb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bb6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d110      	bne.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8007bbe:	4b07      	ldr	r3, [pc, #28]	@ (8007bdc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007bc0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007bc4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007bc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007bcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007bd0:	4a02      	ldr	r2, [pc, #8]	@ (8007bdc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007bd2:	430b      	orrs	r3, r1
 8007bd4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007bd8:	e006      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8007bda:	bf00      	nop
 8007bdc:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007be0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007be4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007be8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf0:	2100      	movs	r1, #0
 8007bf2:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8007bf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bfa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007bfe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007c02:	460b      	mov	r3, r1
 8007c04:	4313      	orrs	r3, r2
 8007c06:	d03d      	beq.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8007c08:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c10:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007c14:	d01b      	beq.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8007c16:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007c1a:	d814      	bhi.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8007c1c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007c20:	d017      	beq.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8007c22:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007c26:	d80e      	bhi.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d014      	beq.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8007c2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c30:	d109      	bne.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007c32:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c36:	3330      	adds	r3, #48	@ 0x30
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f004 f961 	bl	800bf00 <RCCEx_PLL3_Config>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8007c44:	e008      	b.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007c4c:	e004      	b.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8007c4e:	bf00      	nop
 8007c50:	e002      	b.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8007c52:	bf00      	nop
 8007c54:	e000      	b.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8007c56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c58:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d10d      	bne.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8007c60:	4bbe      	ldr	r3, [pc, #760]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007c62:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007c66:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007c6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c72:	4aba      	ldr	r2, [pc, #744]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007c74:	430b      	orrs	r3, r1
 8007c76:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007c7a:	e003      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c7c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007c80:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8007c84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c8c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007c90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007c94:	2300      	movs	r3, #0
 8007c96:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007c9a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	d035      	beq.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8007ca4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ca8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007cac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007cb0:	d015      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8007cb2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007cb6:	d80e      	bhi.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d012      	beq.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8007cbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007cc0:	d109      	bne.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007cc2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007cc6:	3330      	adds	r3, #48	@ 0x30
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f004 f919 	bl	800bf00 <RCCEx_PLL3_Config>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8007cd4:	e006      	b.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007cdc:	e002      	b.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8007cde:	bf00      	nop
 8007ce0:	e000      	b.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8007ce2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ce4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d10d      	bne.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8007cec:	4b9b      	ldr	r3, [pc, #620]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007cee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007cf2:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8007cf6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007cfa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007cfe:	4a97      	ldr	r2, [pc, #604]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007d00:	430b      	orrs	r3, r1
 8007d02:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007d06:	e003      	b.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d08:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007d0c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007d10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d18:	2100      	movs	r1, #0
 8007d1a:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8007d1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d22:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007d26:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	d00e      	beq.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8007d30:	4b8a      	ldr	r3, [pc, #552]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007d32:	69db      	ldr	r3, [r3, #28]
 8007d34:	4a89      	ldr	r2, [pc, #548]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007d36:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007d3a:	61d3      	str	r3, [r2, #28]
 8007d3c:	4b87      	ldr	r3, [pc, #540]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007d3e:	69d9      	ldr	r1, [r3, #28]
 8007d40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d44:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8007d48:	4a84      	ldr	r2, [pc, #528]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007d4a:	430b      	orrs	r3, r1
 8007d4c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007d4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d56:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007d5a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d5e:	2300      	movs	r3, #0
 8007d60:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007d64:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007d68:	460b      	mov	r3, r1
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	d055      	beq.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8007d6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d72:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007d76:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007d7a:	d031      	beq.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8007d7c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007d80:	d82a      	bhi.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8007d82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d86:	d02d      	beq.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8007d88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d8c:	d824      	bhi.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8007d8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d92:	d029      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8007d94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d98:	d81e      	bhi.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8007d9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d9e:	d011      	beq.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8007da0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007da4:	d818      	bhi.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d020      	beq.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8007daa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007dae:	d113      	bne.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007db0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007db4:	3308      	adds	r3, #8
 8007db6:	4618      	mov	r0, r3
 8007db8:	f004 f80a 	bl	800bdd0 <RCCEx_PLL2_Config>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8007dc2:	e014      	b.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007dc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007dc8:	3330      	adds	r3, #48	@ 0x30
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f004 f898 	bl	800bf00 <RCCEx_PLL3_Config>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8007dd6:	e00a      	b.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007dde:	e006      	b.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8007de0:	bf00      	nop
 8007de2:	e004      	b.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8007de4:	bf00      	nop
 8007de6:	e002      	b.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8007de8:	bf00      	nop
 8007dea:	e000      	b.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8007dec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d10d      	bne.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8007df6:	4b59      	ldr	r3, [pc, #356]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007df8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007dfc:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8007e00:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007e08:	4a54      	ldr	r2, [pc, #336]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007e0a:	430b      	orrs	r3, r1
 8007e0c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007e10:	e003      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e12:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007e16:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007e1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e22:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007e26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e30:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007e34:	460b      	mov	r3, r1
 8007e36:	4313      	orrs	r3, r2
 8007e38:	d055      	beq.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8007e3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007e42:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007e46:	d031      	beq.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8007e48:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007e4c:	d82a      	bhi.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8007e4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e52:	d02d      	beq.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8007e54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e58:	d824      	bhi.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8007e5a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007e5e:	d029      	beq.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8007e60:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007e64:	d81e      	bhi.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8007e66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e6a:	d011      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8007e6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e70:	d818      	bhi.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d020      	beq.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8007e76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e7a:	d113      	bne.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007e7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e80:	3308      	adds	r3, #8
 8007e82:	4618      	mov	r0, r3
 8007e84:	f003 ffa4 	bl	800bdd0 <RCCEx_PLL2_Config>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8007e8e:	e014      	b.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007e90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e94:	3330      	adds	r3, #48	@ 0x30
 8007e96:	4618      	mov	r0, r3
 8007e98:	f004 f832 	bl	800bf00 <RCCEx_PLL3_Config>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8007ea2:	e00a      	b.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007eaa:	e006      	b.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8007eac:	bf00      	nop
 8007eae:	e004      	b.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8007eb0:	bf00      	nop
 8007eb2:	e002      	b.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8007eb4:	bf00      	nop
 8007eb6:	e000      	b.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8007eb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007eba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d10d      	bne.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8007ec2:	4b26      	ldr	r3, [pc, #152]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007ec4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007ec8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007ecc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ed0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007ed4:	4a21      	ldr	r2, [pc, #132]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007ed6:	430b      	orrs	r3, r1
 8007ed8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007edc:	e003      	b.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ede:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007ee2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8007ee6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eee:	2100      	movs	r1, #0
 8007ef0:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8007ef4:	f003 0320 	and.w	r3, r3, #32
 8007ef8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007efc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007f00:	460b      	mov	r3, r1
 8007f02:	4313      	orrs	r3, r2
 8007f04:	d057      	beq.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8007f06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007f0e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007f12:	d033      	beq.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8007f14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007f18:	d82c      	bhi.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8007f1a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007f1e:	d02f      	beq.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8007f20:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007f24:	d826      	bhi.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8007f26:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007f2a:	d02b      	beq.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8007f2c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007f30:	d820      	bhi.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8007f32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f36:	d013      	beq.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007f38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f3c:	d81a      	bhi.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d022      	beq.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8007f42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f46:	d115      	bne.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007f48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f4c:	3308      	adds	r3, #8
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f003 ff3e 	bl	800bdd0 <RCCEx_PLL2_Config>
 8007f54:	4603      	mov	r3, r0
 8007f56:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8007f5a:	e016      	b.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8007f5c:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007f60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f64:	3330      	adds	r3, #48	@ 0x30
 8007f66:	4618      	mov	r0, r3
 8007f68:	f003 ffca 	bl	800bf00 <RCCEx_PLL3_Config>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8007f72:	e00a      	b.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007f7a:	e006      	b.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8007f7c:	bf00      	nop
 8007f7e:	e004      	b.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8007f80:	bf00      	nop
 8007f82:	e002      	b.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8007f84:	bf00      	nop
 8007f86:	e000      	b.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8007f88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f8a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d10d      	bne.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8007f92:	4bbb      	ldr	r3, [pc, #748]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007f94:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007f98:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007f9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007fa0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007fa4:	4ab6      	ldr	r2, [pc, #728]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007fa6:	430b      	orrs	r3, r1
 8007fa8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007fac:	e003      	b.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007fb2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8007fb6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fbe:	2100      	movs	r1, #0
 8007fc0:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8007fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fc8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007fcc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	d055      	beq.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8007fd6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007fda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007fde:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8007fe2:	d031      	beq.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8007fe4:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8007fe8:	d82a      	bhi.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8007fea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007fee:	d02d      	beq.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8007ff0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ff4:	d824      	bhi.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8007ff6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007ffa:	d029      	beq.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8007ffc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008000:	d81e      	bhi.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8008002:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008006:	d011      	beq.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8008008:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800800c:	d818      	bhi.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800800e:	2b00      	cmp	r3, #0
 8008010:	d020      	beq.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8008012:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008016:	d113      	bne.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008018:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800801c:	3308      	adds	r3, #8
 800801e:	4618      	mov	r0, r3
 8008020:	f003 fed6 	bl	800bdd0 <RCCEx_PLL2_Config>
 8008024:	4603      	mov	r3, r0
 8008026:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800802a:	e014      	b.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800802c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008030:	3330      	adds	r3, #48	@ 0x30
 8008032:	4618      	mov	r0, r3
 8008034:	f003 ff64 	bl	800bf00 <RCCEx_PLL3_Config>
 8008038:	4603      	mov	r3, r0
 800803a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800803e:	e00a      	b.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008046:	e006      	b.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8008048:	bf00      	nop
 800804a:	e004      	b.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800804c:	bf00      	nop
 800804e:	e002      	b.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8008050:	bf00      	nop
 8008052:	e000      	b.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8008054:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008056:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800805a:	2b00      	cmp	r3, #0
 800805c:	d10d      	bne.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 800805e:	4b88      	ldr	r3, [pc, #544]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008060:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008064:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8008068:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800806c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008070:	4a83      	ldr	r2, [pc, #524]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008072:	430b      	orrs	r3, r1
 8008074:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8008078:	e003      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800807a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800807e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8008082:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808a:	2100      	movs	r1, #0
 800808c:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8008090:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008094:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008098:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800809c:	460b      	mov	r3, r1
 800809e:	4313      	orrs	r3, r2
 80080a0:	d055      	beq.n	800814e <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 80080a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80080a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80080aa:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80080ae:	d031      	beq.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 80080b0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80080b4:	d82a      	bhi.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80080b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80080ba:	d02d      	beq.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 80080bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80080c0:	d824      	bhi.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80080c2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80080c6:	d029      	beq.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x1190>
 80080c8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80080cc:	d81e      	bhi.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80080ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80080d2:	d011      	beq.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 80080d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80080d8:	d818      	bhi.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d020      	beq.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 80080de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80080e2:	d113      	bne.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80080e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80080e8:	3308      	adds	r3, #8
 80080ea:	4618      	mov	r0, r3
 80080ec:	f003 fe70 	bl	800bdd0 <RCCEx_PLL2_Config>
 80080f0:	4603      	mov	r3, r0
 80080f2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80080f6:	e014      	b.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80080f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80080fc:	3330      	adds	r3, #48	@ 0x30
 80080fe:	4618      	mov	r0, r3
 8008100:	f003 fefe 	bl	800bf00 <RCCEx_PLL3_Config>
 8008104:	4603      	mov	r3, r0
 8008106:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800810a:	e00a      	b.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008112:	e006      	b.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8008114:	bf00      	nop
 8008116:	e004      	b.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8008118:	bf00      	nop
 800811a:	e002      	b.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800811c:	bf00      	nop
 800811e:	e000      	b.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8008120:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008122:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008126:	2b00      	cmp	r3, #0
 8008128:	d10d      	bne.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 800812a:	4b55      	ldr	r3, [pc, #340]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800812c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008130:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008134:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008138:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800813c:	4a50      	ldr	r2, [pc, #320]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800813e:	430b      	orrs	r3, r1
 8008140:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8008144:	e003      	b.n	800814e <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008146:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800814a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 800814e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008156:	2100      	movs	r1, #0
 8008158:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800815c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008160:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008164:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008168:	460b      	mov	r3, r1
 800816a:	4313      	orrs	r3, r2
 800816c:	d055      	beq.n	800821a <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 800816e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008172:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008176:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800817a:	d031      	beq.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 800817c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008180:	d82a      	bhi.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8008182:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008186:	d02d      	beq.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8008188:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800818c:	d824      	bhi.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800818e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008192:	d029      	beq.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8008194:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008198:	d81e      	bhi.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800819a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800819e:	d011      	beq.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 80081a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081a4:	d818      	bhi.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d020      	beq.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x1260>
 80081aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80081ae:	d113      	bne.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80081b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80081b4:	3308      	adds	r3, #8
 80081b6:	4618      	mov	r0, r3
 80081b8:	f003 fe0a 	bl	800bdd0 <RCCEx_PLL2_Config>
 80081bc:	4603      	mov	r3, r0
 80081be:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80081c2:	e014      	b.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80081c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80081c8:	3330      	adds	r3, #48	@ 0x30
 80081ca:	4618      	mov	r0, r3
 80081cc:	f003 fe98 	bl	800bf00 <RCCEx_PLL3_Config>
 80081d0:	4603      	mov	r3, r0
 80081d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80081d6:	e00a      	b.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80081de:	e006      	b.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80081e0:	bf00      	nop
 80081e2:	e004      	b.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80081e4:	bf00      	nop
 80081e6:	e002      	b.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80081e8:	bf00      	nop
 80081ea:	e000      	b.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80081ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081ee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d10d      	bne.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 80081f6:	4b22      	ldr	r3, [pc, #136]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80081f8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80081fc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008200:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008204:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008208:	4a1d      	ldr	r2, [pc, #116]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800820a:	430b      	orrs	r3, r1
 800820c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8008210:	e003      	b.n	800821a <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008212:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008216:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800821a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800821e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008222:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008226:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800822a:	2300      	movs	r3, #0
 800822c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008230:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008234:	460b      	mov	r3, r1
 8008236:	4313      	orrs	r3, r2
 8008238:	d055      	beq.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800823a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800823e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008242:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008246:	d035      	beq.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8008248:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800824c:	d82e      	bhi.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800824e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008252:	d031      	beq.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8008254:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008258:	d828      	bhi.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800825a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800825e:	d01b      	beq.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8008260:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008264:	d822      	bhi.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8008266:	2b00      	cmp	r3, #0
 8008268:	d003      	beq.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 800826a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800826e:	d009      	beq.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8008270:	e01c      	b.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008272:	4b03      	ldr	r3, [pc, #12]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008276:	4a02      	ldr	r2, [pc, #8]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008278:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800827c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800827e:	e01c      	b.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8008280:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008284:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008288:	3308      	adds	r3, #8
 800828a:	4618      	mov	r0, r3
 800828c:	f003 fda0 	bl	800bdd0 <RCCEx_PLL2_Config>
 8008290:	4603      	mov	r3, r0
 8008292:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008296:	e010      	b.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008298:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800829c:	3330      	adds	r3, #48	@ 0x30
 800829e:	4618      	mov	r0, r3
 80082a0:	f003 fe2e 	bl	800bf00 <RCCEx_PLL3_Config>
 80082a4:	4603      	mov	r3, r0
 80082a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80082aa:	e006      	b.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80082b2:	e002      	b.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80082b4:	bf00      	nop
 80082b6:	e000      	b.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80082b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082ba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d10d      	bne.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80082c2:	4bc3      	ldr	r3, [pc, #780]	@ (80085d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80082c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80082c8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80082cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80082d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80082d4:	4abe      	ldr	r2, [pc, #760]	@ (80085d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80082d6:	430b      	orrs	r3, r1
 80082d8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80082dc:	e003      	b.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80082e2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80082e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80082ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ee:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80082f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80082f6:	2300      	movs	r3, #0
 80082f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80082fc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008300:	460b      	mov	r3, r1
 8008302:	4313      	orrs	r3, r2
 8008304:	d051      	beq.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8008306:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800830a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800830e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008312:	d033      	beq.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8008314:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008318:	d82c      	bhi.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800831a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800831e:	d02d      	beq.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8008320:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8008324:	d826      	bhi.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8008326:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800832a:	d019      	beq.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 800832c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008330:	d820      	bhi.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8008332:	2b00      	cmp	r3, #0
 8008334:	d003      	beq.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8008336:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800833a:	d007      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 800833c:	e01a      	b.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800833e:	4ba4      	ldr	r3, [pc, #656]	@ (80085d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008342:	4aa3      	ldr	r2, [pc, #652]	@ (80085d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008344:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008348:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800834a:	e018      	b.n	800837e <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800834c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008350:	3308      	adds	r3, #8
 8008352:	4618      	mov	r0, r3
 8008354:	f003 fd3c 	bl	800bdd0 <RCCEx_PLL2_Config>
 8008358:	4603      	mov	r3, r0
 800835a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800835e:	e00e      	b.n	800837e <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008360:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008364:	3330      	adds	r3, #48	@ 0x30
 8008366:	4618      	mov	r0, r3
 8008368:	f003 fdca 	bl	800bf00 <RCCEx_PLL3_Config>
 800836c:	4603      	mov	r3, r0
 800836e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8008372:	e004      	b.n	800837e <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008374:	2301      	movs	r3, #1
 8008376:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800837a:	e000      	b.n	800837e <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 800837c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800837e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008382:	2b00      	cmp	r3, #0
 8008384:	d10d      	bne.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8008386:	4b92      	ldr	r3, [pc, #584]	@ (80085d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008388:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800838c:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8008390:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008394:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008398:	4a8d      	ldr	r2, [pc, #564]	@ (80085d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800839a:	430b      	orrs	r3, r1
 800839c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80083a0:	e003      	b.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80083a6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80083aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80083ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80083b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80083b8:	2300      	movs	r3, #0
 80083ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80083bc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80083c0:	460b      	mov	r3, r1
 80083c2:	4313      	orrs	r3, r2
 80083c4:	d032      	beq.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80083c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80083ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80083ce:	2b05      	cmp	r3, #5
 80083d0:	d80f      	bhi.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 80083d2:	2b03      	cmp	r3, #3
 80083d4:	d211      	bcs.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x146e>
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d911      	bls.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0x1472>
 80083da:	2b02      	cmp	r3, #2
 80083dc:	d109      	bne.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80083de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80083e2:	3308      	adds	r3, #8
 80083e4:	4618      	mov	r0, r3
 80083e6:	f003 fcf3 	bl	800bdd0 <RCCEx_PLL2_Config>
 80083ea:	4603      	mov	r3, r0
 80083ec:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80083f0:	e006      	b.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80083f2:	2301      	movs	r3, #1
 80083f4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80083f8:	e002      	b.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80083fa:	bf00      	nop
 80083fc:	e000      	b.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80083fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008400:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008404:	2b00      	cmp	r3, #0
 8008406:	d10d      	bne.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8008408:	4b71      	ldr	r3, [pc, #452]	@ (80085d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800840a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800840e:	f023 0107 	bic.w	r1, r3, #7
 8008412:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008416:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800841a:	4a6d      	ldr	r2, [pc, #436]	@ (80085d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800841c:	430b      	orrs	r3, r1
 800841e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008422:	e003      	b.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008424:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008428:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 800842c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008434:	2100      	movs	r1, #0
 8008436:	6739      	str	r1, [r7, #112]	@ 0x70
 8008438:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800843c:	677b      	str	r3, [r7, #116]	@ 0x74
 800843e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008442:	460b      	mov	r3, r1
 8008444:	4313      	orrs	r3, r2
 8008446:	d024      	beq.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8008448:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800844c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008450:	2b00      	cmp	r3, #0
 8008452:	d005      	beq.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8008454:	2b08      	cmp	r3, #8
 8008456:	d005      	beq.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800845e:	e002      	b.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8008460:	bf00      	nop
 8008462:	e000      	b.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8008464:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008466:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800846a:	2b00      	cmp	r3, #0
 800846c:	d10d      	bne.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800846e:	4b58      	ldr	r3, [pc, #352]	@ (80085d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008470:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008474:	f023 0108 	bic.w	r1, r3, #8
 8008478:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800847c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008480:	4a53      	ldr	r2, [pc, #332]	@ (80085d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008482:	430b      	orrs	r3, r1
 8008484:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008488:	e003      	b.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800848a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800848e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008492:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800849e:	66bb      	str	r3, [r7, #104]	@ 0x68
 80084a0:	2300      	movs	r3, #0
 80084a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80084a4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80084a8:	460b      	mov	r3, r1
 80084aa:	4313      	orrs	r3, r2
 80084ac:	f000 80b9 	beq.w	8008622 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80084b0:	4b48      	ldr	r3, [pc, #288]	@ (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80084b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084b4:	4a47      	ldr	r2, [pc, #284]	@ (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80084b6:	f043 0301 	orr.w	r3, r3, #1
 80084ba:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80084bc:	f7fc facc 	bl	8004a58 <HAL_GetTick>
 80084c0:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80084c4:	e00b      	b.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80084c6:	f7fc fac7 	bl	8004a58 <HAL_GetTick>
 80084ca:	4602      	mov	r2, r0
 80084cc:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80084d0:	1ad3      	subs	r3, r2, r3
 80084d2:	2b02      	cmp	r3, #2
 80084d4:	d903      	bls.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 80084d6:	2303      	movs	r3, #3
 80084d8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80084dc:	e005      	b.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80084de:	4b3d      	ldr	r3, [pc, #244]	@ (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80084e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084e2:	f003 0301 	and.w	r3, r3, #1
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d0ed      	beq.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 80084ea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	f040 8093 	bne.w	800861a <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80084f4:	4b36      	ldr	r3, [pc, #216]	@ (80085d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80084f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80084fe:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8008502:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8008506:	2b00      	cmp	r3, #0
 8008508:	d023      	beq.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 800850a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800850e:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8008512:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8008516:	4293      	cmp	r3, r2
 8008518:	d01b      	beq.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800851a:	4b2d      	ldr	r3, [pc, #180]	@ (80085d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800851c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008520:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008524:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008528:	4b29      	ldr	r3, [pc, #164]	@ (80085d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800852a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800852e:	4a28      	ldr	r2, [pc, #160]	@ (80085d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008530:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008534:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008538:	4b25      	ldr	r3, [pc, #148]	@ (80085d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800853a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800853e:	4a24      	ldr	r2, [pc, #144]	@ (80085d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008540:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008544:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008548:	4a21      	ldr	r2, [pc, #132]	@ (80085d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800854a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800854e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008552:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8008556:	f003 0301 	and.w	r3, r3, #1
 800855a:	2b00      	cmp	r3, #0
 800855c:	d019      	beq.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800855e:	f7fc fa7b 	bl	8004a58 <HAL_GetTick>
 8008562:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008566:	e00d      	b.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008568:	f7fc fa76 	bl	8004a58 <HAL_GetTick>
 800856c:	4602      	mov	r2, r0
 800856e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8008572:	1ad2      	subs	r2, r2, r3
 8008574:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008578:	429a      	cmp	r2, r3
 800857a:	d903      	bls.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 800857c:	2303      	movs	r3, #3
 800857e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 8008582:	e006      	b.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008584:	4b12      	ldr	r3, [pc, #72]	@ (80085d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008586:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800858a:	f003 0302 	and.w	r3, r3, #2
 800858e:	2b00      	cmp	r3, #0
 8008590:	d0ea      	beq.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8008592:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008596:	2b00      	cmp	r3, #0
 8008598:	d13a      	bne.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800859a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800859e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80085a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80085aa:	d115      	bne.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 80085ac:	4b08      	ldr	r3, [pc, #32]	@ (80085d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80085ae:	69db      	ldr	r3, [r3, #28]
 80085b0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80085b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80085b8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80085bc:	091b      	lsrs	r3, r3, #4
 80085be:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80085c2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80085c6:	4a02      	ldr	r2, [pc, #8]	@ (80085d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80085c8:	430b      	orrs	r3, r1
 80085ca:	61d3      	str	r3, [r2, #28]
 80085cc:	e00a      	b.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 80085ce:	bf00      	nop
 80085d0:	44020c00 	.word	0x44020c00
 80085d4:	44020800 	.word	0x44020800
 80085d8:	4b9f      	ldr	r3, [pc, #636]	@ (8008858 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80085da:	69db      	ldr	r3, [r3, #28]
 80085dc:	4a9e      	ldr	r2, [pc, #632]	@ (8008858 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80085de:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80085e2:	61d3      	str	r3, [r2, #28]
 80085e4:	4b9c      	ldr	r3, [pc, #624]	@ (8008858 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80085e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80085ea:	4a9b      	ldr	r2, [pc, #620]	@ (8008858 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80085ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085f0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80085f4:	4b98      	ldr	r3, [pc, #608]	@ (8008858 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80085f6:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80085fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80085fe:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8008602:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008606:	4a94      	ldr	r2, [pc, #592]	@ (8008858 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008608:	430b      	orrs	r3, r1
 800860a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800860e:	e008      	b.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008610:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008614:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 8008618:	e003      	b.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800861a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800861e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008622:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862a:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800862e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008630:	2300      	movs	r3, #0
 8008632:	667b      	str	r3, [r7, #100]	@ 0x64
 8008634:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008638:	460b      	mov	r3, r1
 800863a:	4313      	orrs	r3, r2
 800863c:	d035      	beq.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800863e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008642:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008646:	2b30      	cmp	r3, #48	@ 0x30
 8008648:	d014      	beq.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 800864a:	2b30      	cmp	r3, #48	@ 0x30
 800864c:	d80e      	bhi.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800864e:	2b20      	cmp	r3, #32
 8008650:	d012      	beq.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8008652:	2b20      	cmp	r3, #32
 8008654:	d80a      	bhi.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8008656:	2b00      	cmp	r3, #0
 8008658:	d010      	beq.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 800865a:	2b10      	cmp	r3, #16
 800865c:	d106      	bne.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800865e:	4b7e      	ldr	r3, [pc, #504]	@ (8008858 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008662:	4a7d      	ldr	r2, [pc, #500]	@ (8008858 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008664:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008668:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800866a:	e008      	b.n	800867e <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800866c:	2301      	movs	r3, #1
 800866e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008672:	e004      	b.n	800867e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8008674:	bf00      	nop
 8008676:	e002      	b.n	800867e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8008678:	bf00      	nop
 800867a:	e000      	b.n	800867e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800867c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800867e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008682:	2b00      	cmp	r3, #0
 8008684:	d10d      	bne.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8008686:	4b74      	ldr	r3, [pc, #464]	@ (8008858 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008688:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800868c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008690:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008694:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008698:	4a6f      	ldr	r2, [pc, #444]	@ (8008858 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800869a:	430b      	orrs	r3, r1
 800869c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80086a0:	e003      	b.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80086a6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80086aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80086ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b2:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80086b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80086b8:	2300      	movs	r3, #0
 80086ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80086bc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80086c0:	460b      	mov	r3, r1
 80086c2:	4313      	orrs	r3, r2
 80086c4:	d033      	beq.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 80086c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80086ca:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d002      	beq.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 80086d2:	2b40      	cmp	r3, #64	@ 0x40
 80086d4:	d007      	beq.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 80086d6:	e010      	b.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086d8:	4b5f      	ldr	r3, [pc, #380]	@ (8008858 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80086da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086dc:	4a5e      	ldr	r2, [pc, #376]	@ (8008858 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80086de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80086e2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80086e4:	e00d      	b.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80086e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80086ea:	3308      	adds	r3, #8
 80086ec:	4618      	mov	r0, r3
 80086ee:	f003 fb6f 	bl	800bdd0 <RCCEx_PLL2_Config>
 80086f2:	4603      	mov	r3, r0
 80086f4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80086f8:	e003      	b.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008700:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008702:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008706:	2b00      	cmp	r3, #0
 8008708:	d10d      	bne.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 800870a:	4b53      	ldr	r3, [pc, #332]	@ (8008858 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800870c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008710:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8008714:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008718:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800871c:	4a4e      	ldr	r2, [pc, #312]	@ (8008858 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800871e:	430b      	orrs	r3, r1
 8008720:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008724:	e003      	b.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008726:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800872a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800872e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008736:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800873a:	653b      	str	r3, [r7, #80]	@ 0x50
 800873c:	2300      	movs	r3, #0
 800873e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008740:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008744:	460b      	mov	r3, r1
 8008746:	4313      	orrs	r3, r2
 8008748:	d033      	beq.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 800874a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800874e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8008752:	2b00      	cmp	r3, #0
 8008754:	d002      	beq.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8008756:	2b80      	cmp	r3, #128	@ 0x80
 8008758:	d007      	beq.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x17de>
 800875a:	e010      	b.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800875c:	4b3e      	ldr	r3, [pc, #248]	@ (8008858 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800875e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008760:	4a3d      	ldr	r2, [pc, #244]	@ (8008858 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008762:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008766:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8008768:	e00d      	b.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800876a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800876e:	3308      	adds	r3, #8
 8008770:	4618      	mov	r0, r3
 8008772:	f003 fb2d 	bl	800bdd0 <RCCEx_PLL2_Config>
 8008776:	4603      	mov	r3, r0
 8008778:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 800877c:	e003      	b.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 800877e:	2301      	movs	r3, #1
 8008780:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008784:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008786:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800878a:	2b00      	cmp	r3, #0
 800878c:	d10d      	bne.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 800878e:	4b32      	ldr	r3, [pc, #200]	@ (8008858 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008790:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008794:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8008798:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800879c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80087a0:	4a2d      	ldr	r2, [pc, #180]	@ (8008858 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80087a2:	430b      	orrs	r3, r1
 80087a4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80087a8:	e003      	b.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087aa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80087ae:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80087b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80087b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ba:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80087be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80087c0:	2300      	movs	r3, #0
 80087c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80087c4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80087c8:	460b      	mov	r3, r1
 80087ca:	4313      	orrs	r3, r2
 80087cc:	d04a      	beq.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80087ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80087d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80087d6:	2b04      	cmp	r3, #4
 80087d8:	d827      	bhi.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x189e>
 80087da:	a201      	add	r2, pc, #4	@ (adr r2, 80087e0 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 80087dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e0:	080087f5 	.word	0x080087f5
 80087e4:	08008803 	.word	0x08008803
 80087e8:	08008817 	.word	0x08008817
 80087ec:	08008833 	.word	0x08008833
 80087f0:	08008833 	.word	0x08008833
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087f4:	4b18      	ldr	r3, [pc, #96]	@ (8008858 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80087f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087f8:	4a17      	ldr	r2, [pc, #92]	@ (8008858 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80087fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80087fe:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8008800:	e018      	b.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008802:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008806:	3308      	adds	r3, #8
 8008808:	4618      	mov	r0, r3
 800880a:	f003 fae1 	bl	800bdd0 <RCCEx_PLL2_Config>
 800880e:	4603      	mov	r3, r0
 8008810:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8008814:	e00e      	b.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008816:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800881a:	3330      	adds	r3, #48	@ 0x30
 800881c:	4618      	mov	r0, r3
 800881e:	f003 fb6f 	bl	800bf00 <RCCEx_PLL3_Config>
 8008822:	4603      	mov	r3, r0
 8008824:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8008828:	e004      	b.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008830:	e000      	b.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8008832:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008834:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008838:	2b00      	cmp	r3, #0
 800883a:	d10f      	bne.n	800885c <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800883c:	4b06      	ldr	r3, [pc, #24]	@ (8008858 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800883e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008842:	f023 0107 	bic.w	r1, r3, #7
 8008846:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800884a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800884e:	4a02      	ldr	r2, [pc, #8]	@ (8008858 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008850:	430b      	orrs	r3, r1
 8008852:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008856:	e005      	b.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8008858:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800885c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008860:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8008864:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800886c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008870:	643b      	str	r3, [r7, #64]	@ 0x40
 8008872:	2300      	movs	r3, #0
 8008874:	647b      	str	r3, [r7, #68]	@ 0x44
 8008876:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800887a:	460b      	mov	r3, r1
 800887c:	4313      	orrs	r3, r2
 800887e:	f000 8081 	beq.w	8008984 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8008882:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008886:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800888a:	2b20      	cmp	r3, #32
 800888c:	d85f      	bhi.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 800888e:	a201      	add	r2, pc, #4	@ (adr r2, 8008894 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8008890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008894:	08008919 	.word	0x08008919
 8008898:	0800894f 	.word	0x0800894f
 800889c:	0800894f 	.word	0x0800894f
 80088a0:	0800894f 	.word	0x0800894f
 80088a4:	0800894f 	.word	0x0800894f
 80088a8:	0800894f 	.word	0x0800894f
 80088ac:	0800894f 	.word	0x0800894f
 80088b0:	0800894f 	.word	0x0800894f
 80088b4:	08008927 	.word	0x08008927
 80088b8:	0800894f 	.word	0x0800894f
 80088bc:	0800894f 	.word	0x0800894f
 80088c0:	0800894f 	.word	0x0800894f
 80088c4:	0800894f 	.word	0x0800894f
 80088c8:	0800894f 	.word	0x0800894f
 80088cc:	0800894f 	.word	0x0800894f
 80088d0:	0800894f 	.word	0x0800894f
 80088d4:	0800893b 	.word	0x0800893b
 80088d8:	0800894f 	.word	0x0800894f
 80088dc:	0800894f 	.word	0x0800894f
 80088e0:	0800894f 	.word	0x0800894f
 80088e4:	0800894f 	.word	0x0800894f
 80088e8:	0800894f 	.word	0x0800894f
 80088ec:	0800894f 	.word	0x0800894f
 80088f0:	0800894f 	.word	0x0800894f
 80088f4:	08008957 	.word	0x08008957
 80088f8:	0800894f 	.word	0x0800894f
 80088fc:	0800894f 	.word	0x0800894f
 8008900:	0800894f 	.word	0x0800894f
 8008904:	0800894f 	.word	0x0800894f
 8008908:	0800894f 	.word	0x0800894f
 800890c:	0800894f 	.word	0x0800894f
 8008910:	0800894f 	.word	0x0800894f
 8008914:	08008957 	.word	0x08008957
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008918:	4bab      	ldr	r3, [pc, #684]	@ (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800891a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800891c:	4aaa      	ldr	r2, [pc, #680]	@ (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800891e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008922:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8008924:	e018      	b.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008926:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800892a:	3308      	adds	r3, #8
 800892c:	4618      	mov	r0, r3
 800892e:	f003 fa4f 	bl	800bdd0 <RCCEx_PLL2_Config>
 8008932:	4603      	mov	r3, r0
 8008934:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8008938:	e00e      	b.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800893a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800893e:	3330      	adds	r3, #48	@ 0x30
 8008940:	4618      	mov	r0, r3
 8008942:	f003 fadd 	bl	800bf00 <RCCEx_PLL3_Config>
 8008946:	4603      	mov	r3, r0
 8008948:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800894c:	e004      	b.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800894e:	2301      	movs	r3, #1
 8008950:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008954:	e000      	b.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8008956:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008958:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800895c:	2b00      	cmp	r3, #0
 800895e:	d10d      	bne.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8008960:	4b99      	ldr	r3, [pc, #612]	@ (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008966:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800896a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800896e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008972:	4a95      	ldr	r2, [pc, #596]	@ (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008974:	430b      	orrs	r3, r1
 8008976:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800897a:	e003      	b.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800897c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008980:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8008984:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008990:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008992:	2300      	movs	r3, #0
 8008994:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008996:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800899a:	460b      	mov	r3, r1
 800899c:	4313      	orrs	r3, r2
 800899e:	d04e      	beq.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80089a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80089a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80089a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089ac:	d02e      	beq.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 80089ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089b2:	d827      	bhi.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80089b4:	2bc0      	cmp	r3, #192	@ 0xc0
 80089b6:	d02b      	beq.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 80089b8:	2bc0      	cmp	r3, #192	@ 0xc0
 80089ba:	d823      	bhi.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80089bc:	2b80      	cmp	r3, #128	@ 0x80
 80089be:	d017      	beq.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 80089c0:	2b80      	cmp	r3, #128	@ 0x80
 80089c2:	d81f      	bhi.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d002      	beq.n	80089ce <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 80089c8:	2b40      	cmp	r3, #64	@ 0x40
 80089ca:	d007      	beq.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 80089cc:	e01a      	b.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089ce:	4b7e      	ldr	r3, [pc, #504]	@ (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80089d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089d2:	4a7d      	ldr	r2, [pc, #500]	@ (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80089d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80089d8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80089da:	e01a      	b.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80089dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80089e0:	3308      	adds	r3, #8
 80089e2:	4618      	mov	r0, r3
 80089e4:	f003 f9f4 	bl	800bdd0 <RCCEx_PLL2_Config>
 80089e8:	4603      	mov	r3, r0
 80089ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80089ee:	e010      	b.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80089f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80089f4:	3330      	adds	r3, #48	@ 0x30
 80089f6:	4618      	mov	r0, r3
 80089f8:	f003 fa82 	bl	800bf00 <RCCEx_PLL3_Config>
 80089fc:	4603      	mov	r3, r0
 80089fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8008a02:	e006      	b.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a04:	2301      	movs	r3, #1
 8008a06:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008a0a:	e002      	b.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8008a0c:	bf00      	nop
 8008a0e:	e000      	b.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8008a10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a12:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d10d      	bne.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8008a1a:	4b6b      	ldr	r3, [pc, #428]	@ (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008a20:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008a24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008a28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008a2c:	4a66      	ldr	r2, [pc, #408]	@ (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008a2e:	430b      	orrs	r3, r1
 8008a30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008a34:	e003      	b.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a36:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008a3a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8008a3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a46:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008a4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a50:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008a54:	460b      	mov	r3, r1
 8008a56:	4313      	orrs	r3, r2
 8008a58:	d055      	beq.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8008a5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008a5e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8008a62:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008a66:	d031      	beq.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8008a68:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008a6c:	d82a      	bhi.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8008a6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a72:	d02d      	beq.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8008a74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a78:	d824      	bhi.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8008a7a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008a7e:	d029      	beq.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8008a80:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008a84:	d81e      	bhi.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8008a86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a8a:	d011      	beq.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8008a8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a90:	d818      	bhi.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d020      	beq.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8008a96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a9a:	d113      	bne.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008a9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008aa0:	3308      	adds	r3, #8
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f003 f994 	bl	800bdd0 <RCCEx_PLL2_Config>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8008aae:	e014      	b.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008ab0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008ab4:	3330      	adds	r3, #48	@ 0x30
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f003 fa22 	bl	800bf00 <RCCEx_PLL3_Config>
 8008abc:	4603      	mov	r3, r0
 8008abe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8008ac2:	e00a      	b.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008aca:	e006      	b.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8008acc:	bf00      	nop
 8008ace:	e004      	b.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8008ad0:	bf00      	nop
 8008ad2:	e002      	b.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8008ad4:	bf00      	nop
 8008ad6:	e000      	b.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8008ad8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ada:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d10d      	bne.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8008ae2:	4b39      	ldr	r3, [pc, #228]	@ (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008ae8:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8008aec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008af0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8008af4:	4a34      	ldr	r2, [pc, #208]	@ (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008af6:	430b      	orrs	r3, r1
 8008af8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008afc:	e003      	b.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008afe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008b02:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8008b06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008b12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008b14:	2300      	movs	r3, #0
 8008b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b18:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	d058      	beq.n	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8008b22:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008b26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b2a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008b2e:	d031      	beq.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8008b30:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008b34:	d82a      	bhi.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8008b36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b3a:	d02d      	beq.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8008b3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b40:	d824      	bhi.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8008b42:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008b46:	d029      	beq.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8008b48:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008b4c:	d81e      	bhi.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8008b4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b52:	d011      	beq.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8008b54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b58:	d818      	bhi.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d020      	beq.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8008b5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b62:	d113      	bne.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008b64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008b68:	3308      	adds	r3, #8
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f003 f930 	bl	800bdd0 <RCCEx_PLL2_Config>
 8008b70:	4603      	mov	r3, r0
 8008b72:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8008b76:	e014      	b.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008b78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008b7c:	3330      	adds	r3, #48	@ 0x30
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f003 f9be 	bl	800bf00 <RCCEx_PLL3_Config>
 8008b84:	4603      	mov	r3, r0
 8008b86:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8008b8a:	e00a      	b.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008b92:	e006      	b.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8008b94:	bf00      	nop
 8008b96:	e004      	b.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8008b98:	bf00      	nop
 8008b9a:	e002      	b.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8008b9c:	bf00      	nop
 8008b9e:	e000      	b.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8008ba0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ba2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d110      	bne.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8008baa:	4b07      	ldr	r3, [pc, #28]	@ (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008bb0:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8008bb4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008bb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008bbc:	4902      	ldr	r1, [pc, #8]	@ (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8008bc4:	e006      	b.n	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8008bc6:	bf00      	nop
 8008bc8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bcc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008bd0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008bd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bdc:	2100      	movs	r1, #0
 8008bde:	6239      	str	r1, [r7, #32]
 8008be0:	f003 0301 	and.w	r3, r3, #1
 8008be4:	627b      	str	r3, [r7, #36]	@ 0x24
 8008be6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008bea:	460b      	mov	r3, r1
 8008bec:	4313      	orrs	r3, r2
 8008bee:	d055      	beq.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8008bf0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008bf4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008bf8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8008bfc:	d031      	beq.n	8008c62 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8008bfe:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8008c02:	d82a      	bhi.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8008c04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c08:	d02d      	beq.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8008c0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c0e:	d824      	bhi.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8008c10:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8008c14:	d029      	beq.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8008c16:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8008c1a:	d81e      	bhi.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8008c1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c20:	d011      	beq.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8008c22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c26:	d818      	bhi.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d020      	beq.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8008c2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c30:	d113      	bne.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008c32:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008c36:	3308      	adds	r3, #8
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f003 f8c9 	bl	800bdd0 <RCCEx_PLL2_Config>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008c44:	e014      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008c46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008c4a:	3330      	adds	r3, #48	@ 0x30
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f003 f957 	bl	800bf00 <RCCEx_PLL3_Config>
 8008c52:	4603      	mov	r3, r0
 8008c54:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008c58:	e00a      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008c60:	e006      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8008c62:	bf00      	nop
 8008c64:	e004      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8008c66:	bf00      	nop
 8008c68:	e002      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8008c6a:	bf00      	nop
 8008c6c:	e000      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8008c6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c70:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d10d      	bne.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8008c78:	4b88      	ldr	r3, [pc, #544]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008c7e:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8008c82:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008c86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008c8a:	4984      	ldr	r1, [pc, #528]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8008c92:	e003      	b.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c94:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008c98:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008c9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca4:	2100      	movs	r1, #0
 8008ca6:	61b9      	str	r1, [r7, #24]
 8008ca8:	f003 0302 	and.w	r3, r3, #2
 8008cac:	61fb      	str	r3, [r7, #28]
 8008cae:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008cb2:	460b      	mov	r3, r1
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	d03d      	beq.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8008cb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008cbc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008cc0:	2b03      	cmp	r3, #3
 8008cc2:	d81c      	bhi.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8008cc4:	a201      	add	r2, pc, #4	@ (adr r2, 8008ccc <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8008cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cca:	bf00      	nop
 8008ccc:	08008d07 	.word	0x08008d07
 8008cd0:	08008cdd 	.word	0x08008cdd
 8008cd4:	08008ceb 	.word	0x08008ceb
 8008cd8:	08008d07 	.word	0x08008d07
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cdc:	4b6f      	ldr	r3, [pc, #444]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ce0:	4a6e      	ldr	r2, [pc, #440]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008ce2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ce6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8008ce8:	e00e      	b.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008cea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008cee:	3308      	adds	r3, #8
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f003 f86d 	bl	800bdd0 <RCCEx_PLL2_Config>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8008cfc:	e004      	b.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008d04:	e000      	b.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8008d06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d08:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d10d      	bne.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8008d10:	4b62      	ldr	r3, [pc, #392]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008d12:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008d16:	f023 0203 	bic.w	r2, r3, #3
 8008d1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008d1e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008d22:	495e      	ldr	r1, [pc, #376]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008d24:	4313      	orrs	r3, r2
 8008d26:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8008d2a:	e003      	b.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d2c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008d30:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008d34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d3c:	2100      	movs	r1, #0
 8008d3e:	6139      	str	r1, [r7, #16]
 8008d40:	f003 0304 	and.w	r3, r3, #4
 8008d44:	617b      	str	r3, [r7, #20]
 8008d46:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008d4a:	460b      	mov	r3, r1
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	d03a      	beq.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8008d50:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008d54:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008d58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d5c:	d00e      	beq.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8008d5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d62:	d815      	bhi.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d017      	beq.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8008d68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d6c:	d110      	bne.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d6e:	4b4b      	ldr	r3, [pc, #300]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d72:	4a4a      	ldr	r2, [pc, #296]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008d74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d78:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8008d7a:	e00e      	b.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008d7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008d80:	3308      	adds	r3, #8
 8008d82:	4618      	mov	r0, r3
 8008d84:	f003 f824 	bl	800bdd0 <RCCEx_PLL2_Config>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8008d8e:	e004      	b.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8008d90:	2301      	movs	r3, #1
 8008d92:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008d96:	e000      	b.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8008d98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d9a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d10d      	bne.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8008da2:	4b3e      	ldr	r3, [pc, #248]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008da4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008da8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008dac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008db0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008db4:	4939      	ldr	r1, [pc, #228]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008db6:	4313      	orrs	r3, r2
 8008db8:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8008dbc:	e003      	b.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dbe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008dc2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008dc6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dce:	2100      	movs	r1, #0
 8008dd0:	60b9      	str	r1, [r7, #8]
 8008dd2:	f003 0310 	and.w	r3, r3, #16
 8008dd6:	60fb      	str	r3, [r7, #12]
 8008dd8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008ddc:	460b      	mov	r3, r1
 8008dde:	4313      	orrs	r3, r2
 8008de0:	d038      	beq.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8008de2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008de6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8008dea:	2b30      	cmp	r3, #48	@ 0x30
 8008dec:	d01b      	beq.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8008dee:	2b30      	cmp	r3, #48	@ 0x30
 8008df0:	d815      	bhi.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8008df2:	2b10      	cmp	r3, #16
 8008df4:	d002      	beq.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8008df6:	2b20      	cmp	r3, #32
 8008df8:	d007      	beq.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8008dfa:	e010      	b.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dfc:	4b27      	ldr	r3, [pc, #156]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e00:	4a26      	ldr	r2, [pc, #152]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008e02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e06:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8008e08:	e00e      	b.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008e0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008e0e:	3330      	adds	r3, #48	@ 0x30
 8008e10:	4618      	mov	r0, r3
 8008e12:	f003 f875 	bl	800bf00 <RCCEx_PLL3_Config>
 8008e16:	4603      	mov	r3, r0
 8008e18:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8008e1c:	e004      	b.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008e24:	e000      	b.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8008e26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e28:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d10d      	bne.n	8008e4c <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8008e30:	4b1a      	ldr	r3, [pc, #104]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008e32:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008e36:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008e3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008e3e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8008e42:	4916      	ldr	r1, [pc, #88]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008e44:	4313      	orrs	r3, r2
 8008e46:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8008e4a:	e003      	b.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e4c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008e50:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008e54:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5c:	2100      	movs	r1, #0
 8008e5e:	6039      	str	r1, [r7, #0]
 8008e60:	f003 0308 	and.w	r3, r3, #8
 8008e64:	607b      	str	r3, [r7, #4]
 8008e66:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	d00c      	beq.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8008e70:	4b0a      	ldr	r3, [pc, #40]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008e72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008e76:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008e7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008e7e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8008e82:	4906      	ldr	r1, [pc, #24]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008e84:	4313      	orrs	r3, r2
 8008e86:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8008e8a:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8008e94:	46bd      	mov	sp, r7
 8008e96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e9a:	bf00      	nop
 8008e9c:	44020c00 	.word	0x44020c00

08008ea0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b08b      	sub	sp, #44	@ 0x2c
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8008ea8:	4bad      	ldr	r3, [pc, #692]	@ (8009160 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008eaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eb0:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8008eb2:	4bab      	ldr	r3, [pc, #684]	@ (8009160 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eb6:	f003 0303 	and.w	r3, r3, #3
 8008eba:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8008ebc:	4ba8      	ldr	r3, [pc, #672]	@ (8009160 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ec0:	0a1b      	lsrs	r3, r3, #8
 8008ec2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ec6:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8008ec8:	4ba5      	ldr	r3, [pc, #660]	@ (8009160 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ecc:	f003 0310 	and.w	r3, r3, #16
 8008ed0:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8008ed2:	4ba3      	ldr	r3, [pc, #652]	@ (8009160 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ed6:	08db      	lsrs	r3, r3, #3
 8008ed8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008edc:	697a      	ldr	r2, [r7, #20]
 8008ede:	fb02 f303 	mul.w	r3, r2, r3
 8008ee2:	ee07 3a90 	vmov	s15, r3
 8008ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eea:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	f000 8126 	beq.w	8009142 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8008ef6:	69fb      	ldr	r3, [r7, #28]
 8008ef8:	2b03      	cmp	r3, #3
 8008efa:	d053      	beq.n	8008fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8008efc:	69fb      	ldr	r3, [r7, #28]
 8008efe:	2b03      	cmp	r3, #3
 8008f00:	d86f      	bhi.n	8008fe2 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8008f02:	69fb      	ldr	r3, [r7, #28]
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	d003      	beq.n	8008f10 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8008f08:	69fb      	ldr	r3, [r7, #28]
 8008f0a:	2b02      	cmp	r3, #2
 8008f0c:	d02b      	beq.n	8008f66 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8008f0e:	e068      	b.n	8008fe2 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008f10:	4b93      	ldr	r3, [pc, #588]	@ (8009160 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	08db      	lsrs	r3, r3, #3
 8008f16:	f003 0303 	and.w	r3, r3, #3
 8008f1a:	4a92      	ldr	r2, [pc, #584]	@ (8009164 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f20:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	ee07 3a90 	vmov	s15, r3
 8008f28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f2c:	69bb      	ldr	r3, [r7, #24]
 8008f2e:	ee07 3a90 	vmov	s15, r3
 8008f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f3a:	6a3b      	ldr	r3, [r7, #32]
 8008f3c:	ee07 3a90 	vmov	s15, r3
 8008f40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f44:	ed97 6a04 	vldr	s12, [r7, #16]
 8008f48:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8009168 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8008f4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f54:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f60:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008f64:	e068      	b.n	8009038 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8008f66:	69bb      	ldr	r3, [r7, #24]
 8008f68:	ee07 3a90 	vmov	s15, r3
 8008f6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f70:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 800916c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8008f74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f78:	6a3b      	ldr	r3, [r7, #32]
 8008f7a:	ee07 3a90 	vmov	s15, r3
 8008f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f82:	ed97 6a04 	vldr	s12, [r7, #16]
 8008f86:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009168 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8008f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f9e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008fa2:	e049      	b.n	8009038 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8008fa4:	69bb      	ldr	r3, [r7, #24]
 8008fa6:	ee07 3a90 	vmov	s15, r3
 8008faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fae:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8009170 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8008fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fb6:	6a3b      	ldr	r3, [r7, #32]
 8008fb8:	ee07 3a90 	vmov	s15, r3
 8008fbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fc0:	ed97 6a04 	vldr	s12, [r7, #16]
 8008fc4:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8009168 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8008fc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fd0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fdc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008fe0:	e02a      	b.n	8009038 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008fe2:	4b5f      	ldr	r3, [pc, #380]	@ (8009160 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	08db      	lsrs	r3, r3, #3
 8008fe8:	f003 0303 	and.w	r3, r3, #3
 8008fec:	4a5d      	ldr	r2, [pc, #372]	@ (8009164 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008fee:	fa22 f303 	lsr.w	r3, r2, r3
 8008ff2:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	ee07 3a90 	vmov	s15, r3
 8008ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ffe:	69bb      	ldr	r3, [r7, #24]
 8009000:	ee07 3a90 	vmov	s15, r3
 8009004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009008:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800900c:	6a3b      	ldr	r3, [r7, #32]
 800900e:	ee07 3a90 	vmov	s15, r3
 8009012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009016:	ed97 6a04 	vldr	s12, [r7, #16]
 800901a:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8009168 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800901e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009026:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800902a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800902e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009032:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8009036:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009038:	4b49      	ldr	r3, [pc, #292]	@ (8009160 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009040:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009044:	d121      	bne.n	800908a <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8009046:	4b46      	ldr	r3, [pc, #280]	@ (8009160 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8009048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800904a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800904e:	2b00      	cmp	r3, #0
 8009050:	d017      	beq.n	8009082 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009052:	4b43      	ldr	r3, [pc, #268]	@ (8009160 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8009054:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009056:	0a5b      	lsrs	r3, r3, #9
 8009058:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800905c:	ee07 3a90 	vmov	s15, r3
 8009060:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8009064:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009068:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800906c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009070:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009074:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009078:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	601a      	str	r2, [r3, #0]
 8009080:	e006      	b.n	8009090 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2200      	movs	r2, #0
 8009086:	601a      	str	r2, [r3, #0]
 8009088:	e002      	b.n	8009090 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2200      	movs	r2, #0
 800908e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009090:	4b33      	ldr	r3, [pc, #204]	@ (8009160 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009098:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800909c:	d121      	bne.n	80090e2 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800909e:	4b30      	ldr	r3, [pc, #192]	@ (8009160 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80090a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d017      	beq.n	80090da <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80090aa:	4b2d      	ldr	r3, [pc, #180]	@ (8009160 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80090ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090ae:	0c1b      	lsrs	r3, r3, #16
 80090b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090b4:	ee07 3a90 	vmov	s15, r3
 80090b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 80090bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80090c0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80090c4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80090c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090d0:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	605a      	str	r2, [r3, #4]
 80090d8:	e006      	b.n	80090e8 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2200      	movs	r2, #0
 80090de:	605a      	str	r2, [r3, #4]
 80090e0:	e002      	b.n	80090e8 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2200      	movs	r2, #0
 80090e6:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80090e8:	4b1d      	ldr	r3, [pc, #116]	@ (8009160 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80090f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80090f4:	d121      	bne.n	800913a <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80090f6:	4b1a      	ldr	r3, [pc, #104]	@ (8009160 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80090f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d017      	beq.n	8009132 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009102:	4b17      	ldr	r3, [pc, #92]	@ (8009160 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8009104:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009106:	0e1b      	lsrs	r3, r3, #24
 8009108:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800910c:	ee07 3a90 	vmov	s15, r3
 8009110:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8009114:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009118:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800911c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009120:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009124:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009128:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009130:	e010      	b.n	8009154 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2200      	movs	r2, #0
 8009136:	609a      	str	r2, [r3, #8]
}
 8009138:	e00c      	b.n	8009154 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2200      	movs	r2, #0
 800913e:	609a      	str	r2, [r3, #8]
}
 8009140:	e008      	b.n	8009154 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2200      	movs	r2, #0
 8009146:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	609a      	str	r2, [r3, #8]
}
 8009154:	bf00      	nop
 8009156:	372c      	adds	r7, #44	@ 0x2c
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr
 8009160:	44020c00 	.word	0x44020c00
 8009164:	03d09000 	.word	0x03d09000
 8009168:	46000000 	.word	0x46000000
 800916c:	4a742400 	.word	0x4a742400
 8009170:	4bbebc20 	.word	0x4bbebc20

08009174 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8009174:	b480      	push	{r7}
 8009176:	b08b      	sub	sp, #44	@ 0x2c
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800917c:	4bad      	ldr	r3, [pc, #692]	@ (8009434 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800917e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009184:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8009186:	4bab      	ldr	r3, [pc, #684]	@ (8009434 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8009188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800918a:	f003 0303 	and.w	r3, r3, #3
 800918e:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8009190:	4ba8      	ldr	r3, [pc, #672]	@ (8009434 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8009192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009194:	0a1b      	lsrs	r3, r3, #8
 8009196:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800919a:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 800919c:	4ba5      	ldr	r3, [pc, #660]	@ (8009434 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800919e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091a0:	f003 0310 	and.w	r3, r3, #16
 80091a4:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80091a6:	4ba3      	ldr	r3, [pc, #652]	@ (8009434 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80091a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091aa:	08db      	lsrs	r3, r3, #3
 80091ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80091b0:	697a      	ldr	r2, [r7, #20]
 80091b2:	fb02 f303 	mul.w	r3, r2, r3
 80091b6:	ee07 3a90 	vmov	s15, r3
 80091ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091be:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80091c2:	69bb      	ldr	r3, [r7, #24]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	f000 8126 	beq.w	8009416 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 80091ca:	69fb      	ldr	r3, [r7, #28]
 80091cc:	2b03      	cmp	r3, #3
 80091ce:	d053      	beq.n	8009278 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 80091d0:	69fb      	ldr	r3, [r7, #28]
 80091d2:	2b03      	cmp	r3, #3
 80091d4:	d86f      	bhi.n	80092b6 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 80091d6:	69fb      	ldr	r3, [r7, #28]
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d003      	beq.n	80091e4 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 80091dc:	69fb      	ldr	r3, [r7, #28]
 80091de:	2b02      	cmp	r3, #2
 80091e0:	d02b      	beq.n	800923a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 80091e2:	e068      	b.n	80092b6 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80091e4:	4b93      	ldr	r3, [pc, #588]	@ (8009434 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	08db      	lsrs	r3, r3, #3
 80091ea:	f003 0303 	and.w	r3, r3, #3
 80091ee:	4a92      	ldr	r2, [pc, #584]	@ (8009438 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80091f0:	fa22 f303 	lsr.w	r3, r2, r3
 80091f4:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	ee07 3a90 	vmov	s15, r3
 80091fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009200:	69bb      	ldr	r3, [r7, #24]
 8009202:	ee07 3a90 	vmov	s15, r3
 8009206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800920a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800920e:	6a3b      	ldr	r3, [r7, #32]
 8009210:	ee07 3a90 	vmov	s15, r3
 8009214:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009218:	ed97 6a04 	vldr	s12, [r7, #16]
 800921c:	eddf 5a87 	vldr	s11, [pc, #540]	@ 800943c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8009220:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009224:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009228:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800922c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009230:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009234:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8009238:	e068      	b.n	800930c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800923a:	69bb      	ldr	r3, [r7, #24]
 800923c:	ee07 3a90 	vmov	s15, r3
 8009240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009244:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8009440 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8009248:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800924c:	6a3b      	ldr	r3, [r7, #32]
 800924e:	ee07 3a90 	vmov	s15, r3
 8009252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009256:	ed97 6a04 	vldr	s12, [r7, #16]
 800925a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800943c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800925e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009266:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800926a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800926e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009272:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8009276:	e049      	b.n	800930c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	ee07 3a90 	vmov	s15, r3
 800927e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009282:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8009444 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8009286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800928a:	6a3b      	ldr	r3, [r7, #32]
 800928c:	ee07 3a90 	vmov	s15, r3
 8009290:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009294:	ed97 6a04 	vldr	s12, [r7, #16]
 8009298:	eddf 5a68 	vldr	s11, [pc, #416]	@ 800943c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800929c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092b0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80092b4:	e02a      	b.n	800930c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80092b6:	4b5f      	ldr	r3, [pc, #380]	@ (8009434 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	08db      	lsrs	r3, r3, #3
 80092bc:	f003 0303 	and.w	r3, r3, #3
 80092c0:	4a5d      	ldr	r2, [pc, #372]	@ (8009438 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80092c2:	fa22 f303 	lsr.w	r3, r2, r3
 80092c6:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	ee07 3a90 	vmov	s15, r3
 80092ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092d2:	69bb      	ldr	r3, [r7, #24]
 80092d4:	ee07 3a90 	vmov	s15, r3
 80092d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092e0:	6a3b      	ldr	r3, [r7, #32]
 80092e2:	ee07 3a90 	vmov	s15, r3
 80092e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092ea:	ed97 6a04 	vldr	s12, [r7, #16]
 80092ee:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800943c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80092f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009306:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800930a:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800930c:	4b49      	ldr	r3, [pc, #292]	@ (8009434 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009314:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009318:	d121      	bne.n	800935e <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800931a:	4b46      	ldr	r3, [pc, #280]	@ (8009434 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800931c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800931e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009322:	2b00      	cmp	r3, #0
 8009324:	d017      	beq.n	8009356 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009326:	4b43      	ldr	r3, [pc, #268]	@ (8009434 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8009328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800932a:	0a5b      	lsrs	r3, r3, #9
 800932c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009330:	ee07 3a90 	vmov	s15, r3
 8009334:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8009338:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800933c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8009340:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009344:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009348:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800934c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	601a      	str	r2, [r3, #0]
 8009354:	e006      	b.n	8009364 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2200      	movs	r2, #0
 800935a:	601a      	str	r2, [r3, #0]
 800935c:	e002      	b.n	8009364 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2200      	movs	r2, #0
 8009362:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009364:	4b33      	ldr	r3, [pc, #204]	@ (8009434 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800936c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009370:	d121      	bne.n	80093b6 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8009372:	4b30      	ldr	r3, [pc, #192]	@ (8009434 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8009374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800937a:	2b00      	cmp	r3, #0
 800937c:	d017      	beq.n	80093ae <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800937e:	4b2d      	ldr	r3, [pc, #180]	@ (8009434 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8009380:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009382:	0c1b      	lsrs	r3, r3, #16
 8009384:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009388:	ee07 3a90 	vmov	s15, r3
 800938c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8009390:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009394:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8009398:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800939c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093a4:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	605a      	str	r2, [r3, #4]
 80093ac:	e006      	b.n	80093bc <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2200      	movs	r2, #0
 80093b2:	605a      	str	r2, [r3, #4]
 80093b4:	e002      	b.n	80093bc <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2200      	movs	r2, #0
 80093ba:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80093bc:	4b1d      	ldr	r3, [pc, #116]	@ (8009434 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80093c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80093c8:	d121      	bne.n	800940e <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80093ca:	4b1a      	ldr	r3, [pc, #104]	@ (8009434 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80093cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d017      	beq.n	8009406 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80093d6:	4b17      	ldr	r3, [pc, #92]	@ (8009434 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80093d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093da:	0e1b      	lsrs	r3, r3, #24
 80093dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093e0:	ee07 3a90 	vmov	s15, r3
 80093e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80093e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80093ec:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80093f0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80093f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093fc:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009404:	e010      	b.n	8009428 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2200      	movs	r2, #0
 800940a:	609a      	str	r2, [r3, #8]
}
 800940c:	e00c      	b.n	8009428 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2200      	movs	r2, #0
 8009412:	609a      	str	r2, [r3, #8]
}
 8009414:	e008      	b.n	8009428 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2200      	movs	r2, #0
 800941a:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2200      	movs	r2, #0
 8009420:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2200      	movs	r2, #0
 8009426:	609a      	str	r2, [r3, #8]
}
 8009428:	bf00      	nop
 800942a:	372c      	adds	r7, #44	@ 0x2c
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr
 8009434:	44020c00 	.word	0x44020c00
 8009438:	03d09000 	.word	0x03d09000
 800943c:	46000000 	.word	0x46000000
 8009440:	4a742400 	.word	0x4a742400
 8009444:	4bbebc20 	.word	0x4bbebc20

08009448 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8009448:	b480      	push	{r7}
 800944a:	b08b      	sub	sp, #44	@ 0x2c
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8009450:	4bad      	ldr	r3, [pc, #692]	@ (8009708 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8009452:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009458:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800945a:	4bab      	ldr	r3, [pc, #684]	@ (8009708 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800945c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800945e:	f003 0303 	and.w	r3, r3, #3
 8009462:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8009464:	4ba8      	ldr	r3, [pc, #672]	@ (8009708 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8009466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009468:	0a1b      	lsrs	r3, r3, #8
 800946a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800946e:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8009470:	4ba5      	ldr	r3, [pc, #660]	@ (8009708 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8009472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009474:	f003 0310 	and.w	r3, r3, #16
 8009478:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800947a:	4ba3      	ldr	r3, [pc, #652]	@ (8009708 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800947c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800947e:	08db      	lsrs	r3, r3, #3
 8009480:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009484:	697a      	ldr	r2, [r7, #20]
 8009486:	fb02 f303 	mul.w	r3, r2, r3
 800948a:	ee07 3a90 	vmov	s15, r3
 800948e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009492:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8009496:	69bb      	ldr	r3, [r7, #24]
 8009498:	2b00      	cmp	r3, #0
 800949a:	f000 8126 	beq.w	80096ea <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 800949e:	69fb      	ldr	r3, [r7, #28]
 80094a0:	2b03      	cmp	r3, #3
 80094a2:	d053      	beq.n	800954c <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 80094a4:	69fb      	ldr	r3, [r7, #28]
 80094a6:	2b03      	cmp	r3, #3
 80094a8:	d86f      	bhi.n	800958a <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 80094aa:	69fb      	ldr	r3, [r7, #28]
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d003      	beq.n	80094b8 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 80094b0:	69fb      	ldr	r3, [r7, #28]
 80094b2:	2b02      	cmp	r3, #2
 80094b4:	d02b      	beq.n	800950e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 80094b6:	e068      	b.n	800958a <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80094b8:	4b93      	ldr	r3, [pc, #588]	@ (8009708 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	08db      	lsrs	r3, r3, #3
 80094be:	f003 0303 	and.w	r3, r3, #3
 80094c2:	4a92      	ldr	r2, [pc, #584]	@ (800970c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80094c4:	fa22 f303 	lsr.w	r3, r2, r3
 80094c8:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	ee07 3a90 	vmov	s15, r3
 80094d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094d4:	69bb      	ldr	r3, [r7, #24]
 80094d6:	ee07 3a90 	vmov	s15, r3
 80094da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094e2:	6a3b      	ldr	r3, [r7, #32]
 80094e4:	ee07 3a90 	vmov	s15, r3
 80094e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094ec:	ed97 6a04 	vldr	s12, [r7, #16]
 80094f0:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8009710 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80094f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009500:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009504:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009508:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800950c:	e068      	b.n	80095e0 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800950e:	69bb      	ldr	r3, [r7, #24]
 8009510:	ee07 3a90 	vmov	s15, r3
 8009514:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009518:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8009714 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800951c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009520:	6a3b      	ldr	r3, [r7, #32]
 8009522:	ee07 3a90 	vmov	s15, r3
 8009526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800952a:	ed97 6a04 	vldr	s12, [r7, #16]
 800952e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009710 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8009532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800953a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800953e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009546:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800954a:	e049      	b.n	80095e0 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800954c:	69bb      	ldr	r3, [r7, #24]
 800954e:	ee07 3a90 	vmov	s15, r3
 8009552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009556:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8009718 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 800955a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800955e:	6a3b      	ldr	r3, [r7, #32]
 8009560:	ee07 3a90 	vmov	s15, r3
 8009564:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009568:	ed97 6a04 	vldr	s12, [r7, #16]
 800956c:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8009710 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8009570:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009574:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009578:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800957c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009580:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009584:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8009588:	e02a      	b.n	80095e0 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800958a:	4b5f      	ldr	r3, [pc, #380]	@ (8009708 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	08db      	lsrs	r3, r3, #3
 8009590:	f003 0303 	and.w	r3, r3, #3
 8009594:	4a5d      	ldr	r2, [pc, #372]	@ (800970c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009596:	fa22 f303 	lsr.w	r3, r2, r3
 800959a:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	ee07 3a90 	vmov	s15, r3
 80095a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095a6:	69bb      	ldr	r3, [r7, #24]
 80095a8:	ee07 3a90 	vmov	s15, r3
 80095ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095b4:	6a3b      	ldr	r3, [r7, #32]
 80095b6:	ee07 3a90 	vmov	s15, r3
 80095ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095be:	ed97 6a04 	vldr	s12, [r7, #16]
 80095c2:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8009710 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80095c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095da:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80095de:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80095e0:	4b49      	ldr	r3, [pc, #292]	@ (8009708 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80095e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095ec:	d121      	bne.n	8009632 <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80095ee:	4b46      	ldr	r3, [pc, #280]	@ (8009708 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80095f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d017      	beq.n	800962a <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80095fa:	4b43      	ldr	r3, [pc, #268]	@ (8009708 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80095fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095fe:	0a5b      	lsrs	r3, r3, #9
 8009600:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009604:	ee07 3a90 	vmov	s15, r3
 8009608:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 800960c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009610:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8009614:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009618:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800961c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009620:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	601a      	str	r2, [r3, #0]
 8009628:	e006      	b.n	8009638 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2200      	movs	r2, #0
 800962e:	601a      	str	r2, [r3, #0]
 8009630:	e002      	b.n	8009638 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2200      	movs	r2, #0
 8009636:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009638:	4b33      	ldr	r3, [pc, #204]	@ (8009708 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009640:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009644:	d121      	bne.n	800968a <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8009646:	4b30      	ldr	r3, [pc, #192]	@ (8009708 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8009648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800964a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800964e:	2b00      	cmp	r3, #0
 8009650:	d017      	beq.n	8009682 <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009652:	4b2d      	ldr	r3, [pc, #180]	@ (8009708 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8009654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009656:	0c1b      	lsrs	r3, r3, #16
 8009658:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800965c:	ee07 3a90 	vmov	s15, r3
 8009660:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8009664:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009668:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800966c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009670:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009674:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009678:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	605a      	str	r2, [r3, #4]
 8009680:	e006      	b.n	8009690 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	605a      	str	r2, [r3, #4]
 8009688:	e002      	b.n	8009690 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2200      	movs	r2, #0
 800968e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009690:	4b1d      	ldr	r3, [pc, #116]	@ (8009708 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009698:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800969c:	d121      	bne.n	80096e2 <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800969e:	4b1a      	ldr	r3, [pc, #104]	@ (8009708 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80096a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d017      	beq.n	80096da <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80096aa:	4b17      	ldr	r3, [pc, #92]	@ (8009708 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80096ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096ae:	0e1b      	lsrs	r3, r3, #24
 80096b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096b4:	ee07 3a90 	vmov	s15, r3
 80096b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 80096bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80096c0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80096c4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80096c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096d0:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80096d8:	e010      	b.n	80096fc <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2200      	movs	r2, #0
 80096de:	609a      	str	r2, [r3, #8]
}
 80096e0:	e00c      	b.n	80096fc <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	609a      	str	r2, [r3, #8]
}
 80096e8:	e008      	b.n	80096fc <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2200      	movs	r2, #0
 80096ee:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2200      	movs	r2, #0
 80096f4:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2200      	movs	r2, #0
 80096fa:	609a      	str	r2, [r3, #8]
}
 80096fc:	bf00      	nop
 80096fe:	372c      	adds	r7, #44	@ 0x2c
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr
 8009708:	44020c00 	.word	0x44020c00
 800970c:	03d09000 	.word	0x03d09000
 8009710:	46000000 	.word	0x46000000
 8009714:	4a742400 	.word	0x4a742400
 8009718:	4bbebc20 	.word	0x4bbebc20

0800971c <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800971c:	b590      	push	{r4, r7, lr}
 800971e:	b08f      	sub	sp, #60	@ 0x3c
 8009720:	af00      	add	r7, sp, #0
 8009722:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8009726:	e9d7 0100 	ldrd	r0, r1, [r7]
 800972a:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 800972e:	4321      	orrs	r1, r4
 8009730:	d150      	bne.n	80097d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8009732:	4b26      	ldr	r3, [pc, #152]	@ (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009734:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009738:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800973c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800973e:	4b23      	ldr	r3, [pc, #140]	@ (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009740:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009744:	f003 0302 	and.w	r3, r3, #2
 8009748:	2b02      	cmp	r3, #2
 800974a:	d108      	bne.n	800975e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800974c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800974e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009752:	d104      	bne.n	800975e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8009754:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009758:	637b      	str	r3, [r7, #52]	@ 0x34
 800975a:	f002 bb2a 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800975e:	4b1b      	ldr	r3, [pc, #108]	@ (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009760:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009764:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009768:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800976c:	d108      	bne.n	8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800976e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009770:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009774:	d104      	bne.n	8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8009776:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800977a:	637b      	str	r3, [r7, #52]	@ 0x34
 800977c:	f002 bb19 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8009780:	4b12      	ldr	r3, [pc, #72]	@ (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009788:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800978c:	d119      	bne.n	80097c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800978e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009790:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009794:	d115      	bne.n	80097c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8009796:	4b0d      	ldr	r3, [pc, #52]	@ (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009798:	69db      	ldr	r3, [r3, #28]
 800979a:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800979e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097a2:	d30a      	bcc.n	80097ba <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80097a4:	4b09      	ldr	r3, [pc, #36]	@ (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80097a6:	69db      	ldr	r3, [r3, #28]
 80097a8:	0a1b      	lsrs	r3, r3, #8
 80097aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80097ae:	4a08      	ldr	r2, [pc, #32]	@ (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80097b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80097b4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80097b6:	f002 bafc 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 80097ba:	2300      	movs	r3, #0
 80097bc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80097be:	f002 baf8 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80097c2:	2300      	movs	r3, #0
 80097c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80097c6:	f002 baf4 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80097ca:	bf00      	nop
 80097cc:	44020c00 	.word	0x44020c00
 80097d0:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80097d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80097d8:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 80097dc:	ea50 0104 	orrs.w	r1, r0, r4
 80097e0:	f001 8275 	beq.w	800acce <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 80097e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80097e8:	2801      	cmp	r0, #1
 80097ea:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 80097ee:	f082 82dd 	bcs.w	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80097f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80097f6:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 80097fa:	ea50 0104 	orrs.w	r1, r0, r4
 80097fe:	f001 816c 	beq.w	800aada <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8009802:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009806:	2801      	cmp	r0, #1
 8009808:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 800980c:	f082 82ce 	bcs.w	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009810:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009814:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 8009818:	ea50 0104 	orrs.w	r1, r0, r4
 800981c:	f001 8602 	beq.w	800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8009820:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009824:	2801      	cmp	r0, #1
 8009826:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 800982a:	f082 82bf 	bcs.w	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800982e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009832:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 8009836:	ea50 0104 	orrs.w	r1, r0, r4
 800983a:	f001 854c 	beq.w	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 800983e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009842:	2801      	cmp	r0, #1
 8009844:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 8009848:	f082 82b0 	bcs.w	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800984c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009850:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 8009854:	ea50 0104 	orrs.w	r1, r0, r4
 8009858:	f001 849e 	beq.w	800b198 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 800985c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009860:	2801      	cmp	r0, #1
 8009862:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 8009866:	f082 82a1 	bcs.w	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800986a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800986e:	f1a1 0420 	sub.w	r4, r1, #32
 8009872:	ea50 0104 	orrs.w	r1, r0, r4
 8009876:	f001 83e8 	beq.w	800b04a <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 800987a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800987e:	2801      	cmp	r0, #1
 8009880:	f171 0120 	sbcs.w	r1, r1, #32
 8009884:	f082 8292 	bcs.w	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009888:	e9d7 0100 	ldrd	r0, r1, [r7]
 800988c:	f1a1 0410 	sub.w	r4, r1, #16
 8009890:	ea50 0104 	orrs.w	r1, r0, r4
 8009894:	f002 8256 	beq.w	800bd44 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8009898:	e9d7 0100 	ldrd	r0, r1, [r7]
 800989c:	2801      	cmp	r0, #1
 800989e:	f171 0110 	sbcs.w	r1, r1, #16
 80098a2:	f082 8283 	bcs.w	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80098a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80098aa:	f1a1 0408 	sub.w	r4, r1, #8
 80098ae:	ea50 0104 	orrs.w	r1, r0, r4
 80098b2:	f002 81cc 	beq.w	800bc4e <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 80098b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80098ba:	2801      	cmp	r0, #1
 80098bc:	f171 0108 	sbcs.w	r1, r1, #8
 80098c0:	f082 8274 	bcs.w	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80098c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80098c8:	1f0c      	subs	r4, r1, #4
 80098ca:	ea50 0104 	orrs.w	r1, r0, r4
 80098ce:	f001 8648 	beq.w	800b562 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 80098d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80098d6:	2801      	cmp	r0, #1
 80098d8:	f171 0104 	sbcs.w	r1, r1, #4
 80098dc:	f082 8266 	bcs.w	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80098e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80098e4:	1e8c      	subs	r4, r1, #2
 80098e6:	ea50 0104 	orrs.w	r1, r0, r4
 80098ea:	f002 8143 	beq.w	800bb74 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 80098ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80098f2:	2801      	cmp	r0, #1
 80098f4:	f171 0102 	sbcs.w	r1, r1, #2
 80098f8:	f082 8258 	bcs.w	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80098fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009900:	1e4c      	subs	r4, r1, #1
 8009902:	ea50 0104 	orrs.w	r1, r0, r4
 8009906:	f002 80ce 	beq.w	800baa6 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 800990a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800990e:	2801      	cmp	r0, #1
 8009910:	f171 0101 	sbcs.w	r1, r1, #1
 8009914:	f082 824a 	bcs.w	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009918:	e9d7 0100 	ldrd	r0, r1, [r7]
 800991c:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8009920:	4321      	orrs	r1, r4
 8009922:	f002 8059 	beq.w	800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8009926:	e9d7 0100 	ldrd	r0, r1, [r7]
 800992a:	4cd9      	ldr	r4, [pc, #868]	@ (8009c90 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800992c:	42a0      	cmp	r0, r4
 800992e:	f171 0100 	sbcs.w	r1, r1, #0
 8009932:	f082 823b 	bcs.w	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009936:	e9d7 0100 	ldrd	r0, r1, [r7]
 800993a:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 800993e:	4321      	orrs	r1, r4
 8009940:	f001 87d9 	beq.w	800b8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8009944:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009948:	4cd2      	ldr	r4, [pc, #840]	@ (8009c94 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800994a:	42a0      	cmp	r0, r4
 800994c:	f171 0100 	sbcs.w	r1, r1, #0
 8009950:	f082 822c 	bcs.w	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009954:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009958:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 800995c:	4321      	orrs	r1, r4
 800995e:	f001 8751 	beq.w	800b804 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8009962:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009966:	4ccc      	ldr	r4, [pc, #816]	@ (8009c98 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8009968:	42a0      	cmp	r0, r4
 800996a:	f171 0100 	sbcs.w	r1, r1, #0
 800996e:	f082 821d 	bcs.w	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009972:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009976:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 800997a:	4321      	orrs	r1, r4
 800997c:	f001 869a 	beq.w	800b6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8009980:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009984:	4cc5      	ldr	r4, [pc, #788]	@ (8009c9c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8009986:	42a0      	cmp	r0, r4
 8009988:	f171 0100 	sbcs.w	r1, r1, #0
 800998c:	f082 820e 	bcs.w	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009990:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009994:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8009998:	4321      	orrs	r1, r4
 800999a:	f001 8612 	beq.w	800b5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 800999e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80099a2:	4cbf      	ldr	r4, [pc, #764]	@ (8009ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 80099a4:	42a0      	cmp	r0, r4
 80099a6:	f171 0100 	sbcs.w	r1, r1, #0
 80099aa:	f082 81ff 	bcs.w	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80099ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80099b2:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 80099b6:	4321      	orrs	r1, r4
 80099b8:	f002 817e 	beq.w	800bcb8 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 80099bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80099c0:	4cb8      	ldr	r4, [pc, #736]	@ (8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80099c2:	42a0      	cmp	r0, r4
 80099c4:	f171 0100 	sbcs.w	r1, r1, #0
 80099c8:	f082 81f0 	bcs.w	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80099cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80099d0:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 80099d4:	4321      	orrs	r1, r4
 80099d6:	f000 829e 	beq.w	8009f16 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 80099da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80099de:	4cb2      	ldr	r4, [pc, #712]	@ (8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80099e0:	42a0      	cmp	r0, r4
 80099e2:	f171 0100 	sbcs.w	r1, r1, #0
 80099e6:	f082 81e1 	bcs.w	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80099ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80099ee:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 80099f2:	4321      	orrs	r1, r4
 80099f4:	f000 826d 	beq.w	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 80099f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80099fc:	4cab      	ldr	r4, [pc, #684]	@ (8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80099fe:	42a0      	cmp	r0, r4
 8009a00:	f171 0100 	sbcs.w	r1, r1, #0
 8009a04:	f082 81d2 	bcs.w	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009a08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009a0c:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8009a10:	4321      	orrs	r1, r4
 8009a12:	f001 800d 	beq.w	800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8009a16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009a1a:	4ca5      	ldr	r4, [pc, #660]	@ (8009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009a1c:	42a0      	cmp	r0, r4
 8009a1e:	f171 0100 	sbcs.w	r1, r1, #0
 8009a22:	f082 81c3 	bcs.w	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009a26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009a2a:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 8009a2e:	4321      	orrs	r1, r4
 8009a30:	f000 81d0 	beq.w	8009dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8009a34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009a38:	4c9e      	ldr	r4, [pc, #632]	@ (8009cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8009a3a:	42a0      	cmp	r0, r4
 8009a3c:	f171 0100 	sbcs.w	r1, r1, #0
 8009a40:	f082 81b4 	bcs.w	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009a44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009a48:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 8009a4c:	4321      	orrs	r1, r4
 8009a4e:	f000 8142 	beq.w	8009cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8009a52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009a56:	4c98      	ldr	r4, [pc, #608]	@ (8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009a58:	42a0      	cmp	r0, r4
 8009a5a:	f171 0100 	sbcs.w	r1, r1, #0
 8009a5e:	f082 81a5 	bcs.w	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009a62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009a66:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8009a6a:	4321      	orrs	r1, r4
 8009a6c:	f001 824e 	beq.w	800af0c <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8009a70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009a74:	4c91      	ldr	r4, [pc, #580]	@ (8009cbc <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8009a76:	42a0      	cmp	r0, r4
 8009a78:	f171 0100 	sbcs.w	r1, r1, #0
 8009a7c:	f082 8196 	bcs.w	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009a80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009a84:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8009a88:	4321      	orrs	r1, r4
 8009a8a:	f001 8197 	beq.w	800adbc <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8009a8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009a92:	4c8b      	ldr	r4, [pc, #556]	@ (8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8009a94:	42a0      	cmp	r0, r4
 8009a96:	f171 0100 	sbcs.w	r1, r1, #0
 8009a9a:	f082 8187 	bcs.w	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009a9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009aa2:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8009aa6:	4321      	orrs	r1, r4
 8009aa8:	f001 8154 	beq.w	800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8009aac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ab0:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8009ab4:	f171 0100 	sbcs.w	r1, r1, #0
 8009ab8:	f082 8178 	bcs.w	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009abc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ac0:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8009ac4:	4321      	orrs	r1, r4
 8009ac6:	f001 80b7 	beq.w	800ac38 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8009aca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ace:	f248 0401 	movw	r4, #32769	@ 0x8001
 8009ad2:	42a0      	cmp	r0, r4
 8009ad4:	f171 0100 	sbcs.w	r1, r1, #0
 8009ad8:	f082 8168 	bcs.w	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009adc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ae0:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8009ae4:	4321      	orrs	r1, r4
 8009ae6:	f001 8064 	beq.w	800abb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8009aea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009aee:	f244 0401 	movw	r4, #16385	@ 0x4001
 8009af2:	42a0      	cmp	r0, r4
 8009af4:	f171 0100 	sbcs.w	r1, r1, #0
 8009af8:	f082 8158 	bcs.w	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009afc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009b00:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8009b04:	4321      	orrs	r1, r4
 8009b06:	f001 8011 	beq.w	800ab2c <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8009b0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009b0e:	f242 0401 	movw	r4, #8193	@ 0x2001
 8009b12:	42a0      	cmp	r0, r4
 8009b14:	f171 0100 	sbcs.w	r1, r1, #0
 8009b18:	f082 8148 	bcs.w	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009b1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009b20:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 8009b24:	4321      	orrs	r1, r4
 8009b26:	f000 871e 	beq.w	800a966 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8009b2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009b2e:	f241 0401 	movw	r4, #4097	@ 0x1001
 8009b32:	42a0      	cmp	r0, r4
 8009b34:	f171 0100 	sbcs.w	r1, r1, #0
 8009b38:	f082 8138 	bcs.w	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009b3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009b40:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 8009b44:	4321      	orrs	r1, r4
 8009b46:	f000 86a8 	beq.w	800a89a <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8009b4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009b4e:	f640 0401 	movw	r4, #2049	@ 0x801
 8009b52:	42a0      	cmp	r0, r4
 8009b54:	f171 0100 	sbcs.w	r1, r1, #0
 8009b58:	f082 8128 	bcs.w	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009b5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009b60:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 8009b64:	4321      	orrs	r1, r4
 8009b66:	f000 8632 	beq.w	800a7ce <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8009b6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009b6e:	f240 4401 	movw	r4, #1025	@ 0x401
 8009b72:	42a0      	cmp	r0, r4
 8009b74:	f171 0100 	sbcs.w	r1, r1, #0
 8009b78:	f082 8118 	bcs.w	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009b7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009b80:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 8009b84:	4321      	orrs	r1, r4
 8009b86:	f000 85b0 	beq.w	800a6ea <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8009b8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009b8e:	f240 2401 	movw	r4, #513	@ 0x201
 8009b92:	42a0      	cmp	r0, r4
 8009b94:	f171 0100 	sbcs.w	r1, r1, #0
 8009b98:	f082 8108 	bcs.w	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009b9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ba0:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 8009ba4:	4321      	orrs	r1, r4
 8009ba6:	f000 8535 	beq.w	800a614 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8009baa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009bae:	f240 1401 	movw	r4, #257	@ 0x101
 8009bb2:	42a0      	cmp	r0, r4
 8009bb4:	f171 0100 	sbcs.w	r1, r1, #0
 8009bb8:	f082 80f8 	bcs.w	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009bbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009bc0:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 8009bc4:	4321      	orrs	r1, r4
 8009bc6:	f000 84ba 	beq.w	800a53e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8009bca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009bce:	2881      	cmp	r0, #129	@ 0x81
 8009bd0:	f171 0100 	sbcs.w	r1, r1, #0
 8009bd4:	f082 80ea 	bcs.w	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009bd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009bdc:	2821      	cmp	r0, #33	@ 0x21
 8009bde:	f171 0100 	sbcs.w	r1, r1, #0
 8009be2:	d26f      	bcs.n	8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8009be4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009be8:	4301      	orrs	r1, r0
 8009bea:	f002 80df 	beq.w	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009bee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009bf2:	1e42      	subs	r2, r0, #1
 8009bf4:	f141 33ff 	adc.w	r3, r1, #4294967295
 8009bf8:	2a20      	cmp	r2, #32
 8009bfa:	f173 0100 	sbcs.w	r1, r3, #0
 8009bfe:	f082 80d5 	bcs.w	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009c02:	2a1f      	cmp	r2, #31
 8009c04:	f202 80d2 	bhi.w	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009c08:	a101      	add	r1, pc, #4	@ (adr r1, 8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8009c0a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009c0e:	bf00      	nop
 8009c10:	08009f71 	.word	0x08009f71
 8009c14:	0800a03d 	.word	0x0800a03d
 8009c18:	0800bdad 	.word	0x0800bdad
 8009c1c:	0800a0fd 	.word	0x0800a0fd
 8009c20:	0800bdad 	.word	0x0800bdad
 8009c24:	0800bdad 	.word	0x0800bdad
 8009c28:	0800bdad 	.word	0x0800bdad
 8009c2c:	0800a1cd 	.word	0x0800a1cd
 8009c30:	0800bdad 	.word	0x0800bdad
 8009c34:	0800bdad 	.word	0x0800bdad
 8009c38:	0800bdad 	.word	0x0800bdad
 8009c3c:	0800bdad 	.word	0x0800bdad
 8009c40:	0800bdad 	.word	0x0800bdad
 8009c44:	0800bdad 	.word	0x0800bdad
 8009c48:	0800bdad 	.word	0x0800bdad
 8009c4c:	0800a2af 	.word	0x0800a2af
 8009c50:	0800bdad 	.word	0x0800bdad
 8009c54:	0800bdad 	.word	0x0800bdad
 8009c58:	0800bdad 	.word	0x0800bdad
 8009c5c:	0800bdad 	.word	0x0800bdad
 8009c60:	0800bdad 	.word	0x0800bdad
 8009c64:	0800bdad 	.word	0x0800bdad
 8009c68:	0800bdad 	.word	0x0800bdad
 8009c6c:	0800bdad 	.word	0x0800bdad
 8009c70:	0800bdad 	.word	0x0800bdad
 8009c74:	0800bdad 	.word	0x0800bdad
 8009c78:	0800bdad 	.word	0x0800bdad
 8009c7c:	0800bdad 	.word	0x0800bdad
 8009c80:	0800bdad 	.word	0x0800bdad
 8009c84:	0800bdad 	.word	0x0800bdad
 8009c88:	0800bdad 	.word	0x0800bdad
 8009c8c:	0800a385 	.word	0x0800a385
 8009c90:	80000001 	.word	0x80000001
 8009c94:	40000001 	.word	0x40000001
 8009c98:	20000001 	.word	0x20000001
 8009c9c:	10000001 	.word	0x10000001
 8009ca0:	08000001 	.word	0x08000001
 8009ca4:	04000001 	.word	0x04000001
 8009ca8:	00800001 	.word	0x00800001
 8009cac:	00400001 	.word	0x00400001
 8009cb0:	00200001 	.word	0x00200001
 8009cb4:	00100001 	.word	0x00100001
 8009cb8:	00080001 	.word	0x00080001
 8009cbc:	00040001 	.word	0x00040001
 8009cc0:	00020001 	.word	0x00020001
 8009cc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cc8:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8009ccc:	430b      	orrs	r3, r1
 8009cce:	f000 83c4 	beq.w	800a45a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8009cd2:	f002 b86b 	b.w	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8009cd6:	4ba1      	ldr	r3, [pc, #644]	@ (8009f5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009cd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009cdc:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009ce0:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ce4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009ce8:	d036      	beq.n	8009d58 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8009cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009cf0:	d86b      	bhi.n	8009dca <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8009cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cf4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009cf8:	d02b      	beq.n	8009d52 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8009cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cfc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009d00:	d863      	bhi.n	8009dca <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8009d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d08:	d01b      	beq.n	8009d42 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8009d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d10:	d85b      	bhi.n	8009dca <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8009d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d004      	beq.n	8009d22 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8009d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d1e:	d008      	beq.n	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8009d20:	e053      	b.n	8009dca <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d22:	f107 0320 	add.w	r3, r7, #32
 8009d26:	4618      	mov	r0, r3
 8009d28:	f7ff f8ba 	bl	8008ea0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d2e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009d30:	e04e      	b.n	8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d32:	f107 0314 	add.w	r3, r7, #20
 8009d36:	4618      	mov	r0, r3
 8009d38:	f7ff fa1c 	bl	8009174 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009d40:	e046      	b.n	8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d42:	f107 0308 	add.w	r3, r7, #8
 8009d46:	4618      	mov	r0, r3
 8009d48:	f7ff fb7e 	bl	8009448 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009d50:	e03e      	b.n	8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009d52:	4b83      	ldr	r3, [pc, #524]	@ (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8009d54:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009d56:	e03b      	b.n	8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009d58:	4b80      	ldr	r3, [pc, #512]	@ (8009f5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009d5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009d5e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009d62:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009d64:	4b7d      	ldr	r3, [pc, #500]	@ (8009f5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f003 0302 	and.w	r3, r3, #2
 8009d6c:	2b02      	cmp	r3, #2
 8009d6e:	d10c      	bne.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8009d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d109      	bne.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009d76:	4b79      	ldr	r3, [pc, #484]	@ (8009f5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	08db      	lsrs	r3, r3, #3
 8009d7c:	f003 0303 	and.w	r3, r3, #3
 8009d80:	4a78      	ldr	r2, [pc, #480]	@ (8009f64 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8009d82:	fa22 f303 	lsr.w	r3, r2, r3
 8009d86:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d88:	e01e      	b.n	8009dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009d8a:	4b74      	ldr	r3, [pc, #464]	@ (8009f5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009d92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d96:	d106      	bne.n	8009da6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d9e:	d102      	bne.n	8009da6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009da0:	4b71      	ldr	r3, [pc, #452]	@ (8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8009da2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009da4:	e010      	b.n	8009dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009da6:	4b6d      	ldr	r3, [pc, #436]	@ (8009f5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009dae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009db2:	d106      	bne.n	8009dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8009db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009db6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009dba:	d102      	bne.n	8009dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009dbc:	4b6b      	ldr	r3, [pc, #428]	@ (8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8009dbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dc0:	e002      	b.n	8009dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009dc6:	e003      	b.n	8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8009dc8:	e002      	b.n	8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009dce:	bf00      	nop
          }
        }
        break;
 8009dd0:	f001 bfef 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8009dd4:	4b61      	ldr	r3, [pc, #388]	@ (8009f5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009dd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009dda:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 8009dde:	633b      	str	r3, [r7, #48]	@ 0x30
 8009de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009de6:	d036      	beq.n	8009e56 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8009de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009dee:	d86b      	bhi.n	8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8009df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009df2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8009df6:	d02b      	beq.n	8009e50 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8009df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dfa:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8009dfe:	d863      	bhi.n	8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8009e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e06:	d01b      	beq.n	8009e40 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e0e:	d85b      	bhi.n	8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8009e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d004      	beq.n	8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8009e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e18:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009e1c:	d008      	beq.n	8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8009e1e:	e053      	b.n	8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e20:	f107 0320 	add.w	r3, r7, #32
 8009e24:	4618      	mov	r0, r3
 8009e26:	f7ff f83b 	bl	8008ea0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e2c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009e2e:	e04e      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e30:	f107 0314 	add.w	r3, r7, #20
 8009e34:	4618      	mov	r0, r3
 8009e36:	f7ff f99d 	bl	8009174 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009e3e:	e046      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e40:	f107 0308 	add.w	r3, r7, #8
 8009e44:	4618      	mov	r0, r3
 8009e46:	f7ff faff 	bl	8009448 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009e4e:	e03e      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009e50:	4b43      	ldr	r3, [pc, #268]	@ (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8009e52:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009e54:	e03b      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009e56:	4b41      	ldr	r3, [pc, #260]	@ (8009f5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009e58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009e5c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009e60:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009e62:	4b3e      	ldr	r3, [pc, #248]	@ (8009f5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f003 0302 	and.w	r3, r3, #2
 8009e6a:	2b02      	cmp	r3, #2
 8009e6c:	d10c      	bne.n	8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8009e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d109      	bne.n	8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009e74:	4b39      	ldr	r3, [pc, #228]	@ (8009f5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	08db      	lsrs	r3, r3, #3
 8009e7a:	f003 0303 	and.w	r3, r3, #3
 8009e7e:	4a39      	ldr	r2, [pc, #228]	@ (8009f64 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8009e80:	fa22 f303 	lsr.w	r3, r2, r3
 8009e84:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e86:	e01e      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009e88:	4b34      	ldr	r3, [pc, #208]	@ (8009f5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009e90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e94:	d106      	bne.n	8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8009e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e9c:	d102      	bne.n	8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009e9e:	4b32      	ldr	r3, [pc, #200]	@ (8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8009ea0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ea2:	e010      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009ea4:	4b2d      	ldr	r3, [pc, #180]	@ (8009f5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009eac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009eb0:	d106      	bne.n	8009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8009eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eb4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009eb8:	d102      	bne.n	8009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009eba:	4b2c      	ldr	r3, [pc, #176]	@ (8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8009ebc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ebe:	e002      	b.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009ec4:	e003      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8009ec6:	e002      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009ecc:	bf00      	nop
          }
        }
        break;
 8009ece:	f001 bf70 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8009ed2:	4b22      	ldr	r3, [pc, #136]	@ (8009f5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009ed4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009ed8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009edc:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8009ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d108      	bne.n	8009ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ee4:	f107 0320 	add.w	r3, r7, #32
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f7fe ffd9 	bl	8008ea0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ef0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009ef2:	f001 bf5e 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8009ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ef8:	2b40      	cmp	r3, #64	@ 0x40
 8009efa:	d108      	bne.n	8009f0e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009efc:	f107 0314 	add.w	r3, r7, #20
 8009f00:	4618      	mov	r0, r3
 8009f02:	f7ff f937 	bl	8009174 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009f06:	69fb      	ldr	r3, [r7, #28]
 8009f08:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009f0a:	f001 bf52 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009f12:	f001 bf4e 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8009f16:	4b11      	ldr	r3, [pc, #68]	@ (8009f5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009f18:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009f1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f20:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8009f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d108      	bne.n	8009f3a <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f28:	f107 0320 	add.w	r3, r7, #32
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f7fe ffb7 	bl	8008ea0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f34:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009f36:	f001 bf3c 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8009f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f3c:	2b80      	cmp	r3, #128	@ 0x80
 8009f3e:	d108      	bne.n	8009f52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f40:	f107 0314 	add.w	r3, r7, #20
 8009f44:	4618      	mov	r0, r3
 8009f46:	f7ff f915 	bl	8009174 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009f4a:	69fb      	ldr	r3, [r7, #28]
 8009f4c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009f4e:	f001 bf30 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8009f52:	2300      	movs	r3, #0
 8009f54:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009f56:	f001 bf2c 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009f5a:	bf00      	nop
 8009f5c:	44020c00 	.word	0x44020c00
 8009f60:	00bb8000 	.word	0x00bb8000
 8009f64:	03d09000 	.word	0x03d09000
 8009f68:	003d0900 	.word	0x003d0900
 8009f6c:	017d7840 	.word	0x017d7840
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8009f70:	4b9d      	ldr	r3, [pc, #628]	@ (800a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009f72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009f76:	f003 0307 	and.w	r3, r3, #7
 8009f7a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8009f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d104      	bne.n	8009f8c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8009f82:	f7fc ffd7 	bl	8006f34 <HAL_RCC_GetPCLK2Freq>
 8009f86:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8009f88:	f001 bf13 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8009f8c:	4b96      	ldr	r3, [pc, #600]	@ (800a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009f98:	d10a      	bne.n	8009fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8009f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d107      	bne.n	8009fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fa0:	f107 0314 	add.w	r3, r7, #20
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f7ff f8e5 	bl	8009174 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009faa:	69bb      	ldr	r3, [r7, #24]
 8009fac:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fae:	e043      	b.n	800a038 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8009fb0:	4b8d      	ldr	r3, [pc, #564]	@ (800a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009fb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fbc:	d10a      	bne.n	8009fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8009fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc0:	2b02      	cmp	r3, #2
 8009fc2:	d107      	bne.n	8009fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009fc4:	f107 0308 	add.w	r3, r7, #8
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f7ff fa3d 	bl	8009448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fd2:	e031      	b.n	800a038 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8009fd4:	4b84      	ldr	r3, [pc, #528]	@ (800a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f003 0302 	and.w	r3, r3, #2
 8009fdc:	2b02      	cmp	r3, #2
 8009fde:	d10c      	bne.n	8009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8009fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fe2:	2b03      	cmp	r3, #3
 8009fe4:	d109      	bne.n	8009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009fe6:	4b80      	ldr	r3, [pc, #512]	@ (800a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	08db      	lsrs	r3, r3, #3
 8009fec:	f003 0303 	and.w	r3, r3, #3
 8009ff0:	4a7e      	ldr	r2, [pc, #504]	@ (800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8009ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8009ff6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ff8:	e01e      	b.n	800a038 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8009ffa:	4b7b      	ldr	r3, [pc, #492]	@ (800a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a002:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a006:	d105      	bne.n	800a014 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 800a008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a00a:	2b04      	cmp	r3, #4
 800a00c:	d102      	bne.n	800a014 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 800a00e:	4b78      	ldr	r3, [pc, #480]	@ (800a1f0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800a010:	637b      	str	r3, [r7, #52]	@ 0x34
 800a012:	e011      	b.n	800a038 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800a014:	4b74      	ldr	r3, [pc, #464]	@ (800a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a016:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a01a:	f003 0302 	and.w	r3, r3, #2
 800a01e:	2b02      	cmp	r3, #2
 800a020:	d106      	bne.n	800a030 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800a022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a024:	2b05      	cmp	r3, #5
 800a026:	d103      	bne.n	800a030 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 800a028:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a02c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a02e:	e003      	b.n	800a038 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 800a030:	2300      	movs	r3, #0
 800a032:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a034:	f001 bebd 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a038:	f001 bebb 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800a03c:	4b6a      	ldr	r3, [pc, #424]	@ (800a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a03e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a042:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a046:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800a048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d104      	bne.n	800a058 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a04e:	f7fc ff5b 	bl	8006f08 <HAL_RCC_GetPCLK1Freq>
 800a052:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 800a054:	f001 bead 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 800a058:	4b63      	ldr	r3, [pc, #396]	@ (800a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a060:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a064:	d10a      	bne.n	800a07c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800a066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a068:	2b08      	cmp	r3, #8
 800a06a:	d107      	bne.n	800a07c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a06c:	f107 0314 	add.w	r3, r7, #20
 800a070:	4618      	mov	r0, r3
 800a072:	f7ff f87f 	bl	8009174 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a076:	69bb      	ldr	r3, [r7, #24]
 800a078:	637b      	str	r3, [r7, #52]	@ 0x34
 800a07a:	e03d      	b.n	800a0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 800a07c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a07e:	2b10      	cmp	r3, #16
 800a080:	d108      	bne.n	800a094 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a082:	f107 0308 	add.w	r3, r7, #8
 800a086:	4618      	mov	r0, r3
 800a088:	f7ff f9de 	bl	8009448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a090:	f001 be8f 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800a094:	4b54      	ldr	r3, [pc, #336]	@ (800a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f003 0302 	and.w	r3, r3, #2
 800a09c:	2b02      	cmp	r3, #2
 800a09e:	d10c      	bne.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800a0a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0a2:	2b18      	cmp	r3, #24
 800a0a4:	d109      	bne.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a0a6:	4b50      	ldr	r3, [pc, #320]	@ (800a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	08db      	lsrs	r3, r3, #3
 800a0ac:	f003 0303 	and.w	r3, r3, #3
 800a0b0:	4a4e      	ldr	r2, [pc, #312]	@ (800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800a0b2:	fa22 f303 	lsr.w	r3, r2, r3
 800a0b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0b8:	e01e      	b.n	800a0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800a0ba:	4b4b      	ldr	r3, [pc, #300]	@ (800a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a0c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0c6:	d105      	bne.n	800a0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a0c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ca:	2b20      	cmp	r3, #32
 800a0cc:	d102      	bne.n	800a0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 800a0ce:	4b48      	ldr	r3, [pc, #288]	@ (800a1f0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800a0d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0d2:	e011      	b.n	800a0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800a0d4:	4b44      	ldr	r3, [pc, #272]	@ (800a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a0d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a0da:	f003 0302 	and.w	r3, r3, #2
 800a0de:	2b02      	cmp	r3, #2
 800a0e0:	d106      	bne.n	800a0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 800a0e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0e4:	2b28      	cmp	r3, #40	@ 0x28
 800a0e6:	d103      	bne.n	800a0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 800a0e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a0ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0ee:	e003      	b.n	800a0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a0f4:	f001 be5d 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a0f8:	f001 be5b 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800a0fc:	4b3a      	ldr	r3, [pc, #232]	@ (800a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a0fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a102:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a106:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800a108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d104      	bne.n	800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a10e:	f7fc fefb 	bl	8006f08 <HAL_RCC_GetPCLK1Freq>
 800a112:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 800a114:	f001 be4d 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 800a118:	4b33      	ldr	r3, [pc, #204]	@ (800a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a120:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a124:	d10a      	bne.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800a126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a128:	2b40      	cmp	r3, #64	@ 0x40
 800a12a:	d107      	bne.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a12c:	f107 0314 	add.w	r3, r7, #20
 800a130:	4618      	mov	r0, r3
 800a132:	f7ff f81f 	bl	8009174 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a136:	69bb      	ldr	r3, [r7, #24]
 800a138:	637b      	str	r3, [r7, #52]	@ 0x34
 800a13a:	e045      	b.n	800a1c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 800a13c:	4b2a      	ldr	r3, [pc, #168]	@ (800a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a144:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a148:	d10a      	bne.n	800a160 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 800a14a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a14c:	2b80      	cmp	r3, #128	@ 0x80
 800a14e:	d107      	bne.n	800a160 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a150:	f107 0308 	add.w	r3, r7, #8
 800a154:	4618      	mov	r0, r3
 800a156:	f7ff f977 	bl	8009448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a15e:	e033      	b.n	800a1c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800a160:	4b21      	ldr	r3, [pc, #132]	@ (800a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f003 0302 	and.w	r3, r3, #2
 800a168:	2b02      	cmp	r3, #2
 800a16a:	d10c      	bne.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 800a16c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a16e:	2bc0      	cmp	r3, #192	@ 0xc0
 800a170:	d109      	bne.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a172:	4b1d      	ldr	r3, [pc, #116]	@ (800a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	08db      	lsrs	r3, r3, #3
 800a178:	f003 0303 	and.w	r3, r3, #3
 800a17c:	4a1b      	ldr	r2, [pc, #108]	@ (800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800a17e:	fa22 f303 	lsr.w	r3, r2, r3
 800a182:	637b      	str	r3, [r7, #52]	@ 0x34
 800a184:	e020      	b.n	800a1c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800a186:	4b18      	ldr	r3, [pc, #96]	@ (800a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a18e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a192:	d106      	bne.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 800a194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a196:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a19a:	d102      	bne.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 800a19c:	4b14      	ldr	r3, [pc, #80]	@ (800a1f0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800a19e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1a0:	e012      	b.n	800a1c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800a1a2:	4b11      	ldr	r3, [pc, #68]	@ (800a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a1a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a1a8:	f003 0302 	and.w	r3, r3, #2
 800a1ac:	2b02      	cmp	r3, #2
 800a1ae:	d107      	bne.n	800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 800a1b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1b2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800a1b6:	d103      	bne.n	800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 800a1b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a1bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1be:	e003      	b.n	800a1c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a1c4:	f001 bdf5 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a1c8:	f001 bdf3 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800a1cc:	4b06      	ldr	r3, [pc, #24]	@ (800a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a1ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a1d2:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800a1d6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800a1d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d10a      	bne.n	800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a1de:	f7fc fe93 	bl	8006f08 <HAL_RCC_GetPCLK1Freq>
 800a1e2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 800a1e4:	f001 bde5 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a1e8:	44020c00 	.word	0x44020c00
 800a1ec:	03d09000 	.word	0x03d09000
 800a1f0:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 800a1f4:	4ba0      	ldr	r3, [pc, #640]	@ (800a478 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a1fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a200:	d10b      	bne.n	800a21a <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 800a202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a204:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a208:	d107      	bne.n	800a21a <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a20a:	f107 0314 	add.w	r3, r7, #20
 800a20e:	4618      	mov	r0, r3
 800a210:	f7fe ffb0 	bl	8009174 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a214:	69bb      	ldr	r3, [r7, #24]
 800a216:	637b      	str	r3, [r7, #52]	@ 0x34
 800a218:	e047      	b.n	800a2aa <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800a21a:	4b97      	ldr	r3, [pc, #604]	@ (800a478 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a222:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a226:	d10b      	bne.n	800a240 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 800a228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a22a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a22e:	d107      	bne.n	800a240 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a230:	f107 0308 	add.w	r3, r7, #8
 800a234:	4618      	mov	r0, r3
 800a236:	f7ff f907 	bl	8009448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a23e:	e034      	b.n	800a2aa <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800a240:	4b8d      	ldr	r3, [pc, #564]	@ (800a478 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f003 0302 	and.w	r3, r3, #2
 800a248:	2b02      	cmp	r3, #2
 800a24a:	d10d      	bne.n	800a268 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 800a24c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a24e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a252:	d109      	bne.n	800a268 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a254:	4b88      	ldr	r3, [pc, #544]	@ (800a478 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	08db      	lsrs	r3, r3, #3
 800a25a:	f003 0303 	and.w	r3, r3, #3
 800a25e:	4a87      	ldr	r2, [pc, #540]	@ (800a47c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800a260:	fa22 f303 	lsr.w	r3, r2, r3
 800a264:	637b      	str	r3, [r7, #52]	@ 0x34
 800a266:	e020      	b.n	800a2aa <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 800a268:	4b83      	ldr	r3, [pc, #524]	@ (800a478 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a270:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a274:	d106      	bne.n	800a284 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800a276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a278:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a27c:	d102      	bne.n	800a284 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 800a27e:	4b80      	ldr	r3, [pc, #512]	@ (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800a280:	637b      	str	r3, [r7, #52]	@ 0x34
 800a282:	e012      	b.n	800a2aa <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800a284:	4b7c      	ldr	r3, [pc, #496]	@ (800a478 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a286:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a28a:	f003 0302 	and.w	r3, r3, #2
 800a28e:	2b02      	cmp	r3, #2
 800a290:	d107      	bne.n	800a2a2 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800a292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a294:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800a298:	d103      	bne.n	800a2a2 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 800a29a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a29e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2a0:	e003      	b.n	800a2aa <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a2a6:	f001 bd84 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a2aa:	f001 bd82 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800a2ae:	4b72      	ldr	r3, [pc, #456]	@ (800a478 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a2b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a2b4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a2b8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800a2ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d104      	bne.n	800a2ca <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a2c0:	f7fc fe22 	bl	8006f08 <HAL_RCC_GetPCLK1Freq>
 800a2c4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 800a2c6:	f001 bd74 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 800a2ca:	4b6b      	ldr	r3, [pc, #428]	@ (800a478 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a2d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a2d6:	d10b      	bne.n	800a2f0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800a2d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2de:	d107      	bne.n	800a2f0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2e0:	f107 0314 	add.w	r3, r7, #20
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f7fe ff45 	bl	8009174 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a2ea:	69bb      	ldr	r3, [r7, #24]
 800a2ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2ee:	e047      	b.n	800a380 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 800a2f0:	4b61      	ldr	r3, [pc, #388]	@ (800a478 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a2f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2fc:	d10b      	bne.n	800a316 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800a2fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a300:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a304:	d107      	bne.n	800a316 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a306:	f107 0308 	add.w	r3, r7, #8
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7ff f89c 	bl	8009448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	637b      	str	r3, [r7, #52]	@ 0x34
 800a314:	e034      	b.n	800a380 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800a316:	4b58      	ldr	r3, [pc, #352]	@ (800a478 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f003 0302 	and.w	r3, r3, #2
 800a31e:	2b02      	cmp	r3, #2
 800a320:	d10d      	bne.n	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800a322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a324:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a328:	d109      	bne.n	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a32a:	4b53      	ldr	r3, [pc, #332]	@ (800a478 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	08db      	lsrs	r3, r3, #3
 800a330:	f003 0303 	and.w	r3, r3, #3
 800a334:	4a51      	ldr	r2, [pc, #324]	@ (800a47c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800a336:	fa22 f303 	lsr.w	r3, r2, r3
 800a33a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a33c:	e020      	b.n	800a380 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800a33e:	4b4e      	ldr	r3, [pc, #312]	@ (800a478 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a346:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a34a:	d106      	bne.n	800a35a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800a34c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a34e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a352:	d102      	bne.n	800a35a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 800a354:	4b4a      	ldr	r3, [pc, #296]	@ (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800a356:	637b      	str	r3, [r7, #52]	@ 0x34
 800a358:	e012      	b.n	800a380 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800a35a:	4b47      	ldr	r3, [pc, #284]	@ (800a478 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a35c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a360:	f003 0302 	and.w	r3, r3, #2
 800a364:	2b02      	cmp	r3, #2
 800a366:	d107      	bne.n	800a378 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800a368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a36a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800a36e:	d103      	bne.n	800a378 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 800a370:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a374:	637b      	str	r3, [r7, #52]	@ 0x34
 800a376:	e003      	b.n	800a380 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 800a378:	2300      	movs	r3, #0
 800a37a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a37c:	f001 bd19 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a380:	f001 bd17 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800a384:	4b3c      	ldr	r3, [pc, #240]	@ (800a478 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a386:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a38a:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800a38e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800a390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a392:	2b00      	cmp	r3, #0
 800a394:	d104      	bne.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a396:	f7fc fdb7 	bl	8006f08 <HAL_RCC_GetPCLK1Freq>
 800a39a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 800a39c:	f001 bd09 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 800a3a0:	4b35      	ldr	r3, [pc, #212]	@ (800a478 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a3a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a3ac:	d10b      	bne.n	800a3c6 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800a3ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a3b4:	d107      	bne.n	800a3c6 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3b6:	f107 0314 	add.w	r3, r7, #20
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f7fe feda 	bl	8009174 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a3c0:	69bb      	ldr	r3, [r7, #24]
 800a3c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3c4:	e047      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 800a3c6:	4b2c      	ldr	r3, [pc, #176]	@ (800a478 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a3ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3d2:	d10b      	bne.n	800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 800a3d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3da:	d107      	bne.n	800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3dc:	f107 0308 	add.w	r3, r7, #8
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f7ff f831 	bl	8009448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3ea:	e034      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800a3ec:	4b22      	ldr	r3, [pc, #136]	@ (800a478 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f003 0302 	and.w	r3, r3, #2
 800a3f4:	2b02      	cmp	r3, #2
 800a3f6:	d10d      	bne.n	800a414 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 800a3f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3fa:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800a3fe:	d109      	bne.n	800a414 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a400:	4b1d      	ldr	r3, [pc, #116]	@ (800a478 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	08db      	lsrs	r3, r3, #3
 800a406:	f003 0303 	and.w	r3, r3, #3
 800a40a:	4a1c      	ldr	r2, [pc, #112]	@ (800a47c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800a40c:	fa22 f303 	lsr.w	r3, r2, r3
 800a410:	637b      	str	r3, [r7, #52]	@ 0x34
 800a412:	e020      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 800a414:	4b18      	ldr	r3, [pc, #96]	@ (800a478 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a41c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a420:	d106      	bne.n	800a430 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800a422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a424:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a428:	d102      	bne.n	800a430 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 800a42a:	4b15      	ldr	r3, [pc, #84]	@ (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800a42c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a42e:	e012      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800a430:	4b11      	ldr	r3, [pc, #68]	@ (800a478 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a432:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a436:	f003 0302 	and.w	r3, r3, #2
 800a43a:	2b02      	cmp	r3, #2
 800a43c:	d107      	bne.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800a43e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a440:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800a444:	d103      	bne.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 800a446:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a44a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a44c:	e003      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 800a44e:	2300      	movs	r3, #0
 800a450:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a452:	f001 bcae 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a456:	f001 bcac 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 800a45a:	4b07      	ldr	r3, [pc, #28]	@ (800a478 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a45c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a460:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 800a464:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 800a466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d10b      	bne.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a46c:	f7fc fd4c 	bl	8006f08 <HAL_RCC_GetPCLK1Freq>
 800a470:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800a472:	f001 bc9e 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a476:	bf00      	nop
 800a478:	44020c00 	.word	0x44020c00
 800a47c:	03d09000 	.word	0x03d09000
 800a480:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 800a484:	4ba0      	ldr	r3, [pc, #640]	@ (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a48c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a490:	d10b      	bne.n	800a4aa <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 800a492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a494:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a498:	d107      	bne.n	800a4aa <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a49a:	f107 0314 	add.w	r3, r7, #20
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f7fe fe68 	bl	8009174 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a4a4:	69bb      	ldr	r3, [r7, #24]
 800a4a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4a8:	e047      	b.n	800a53a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800a4aa:	4b97      	ldr	r3, [pc, #604]	@ (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a4b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4b6:	d10b      	bne.n	800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800a4b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ba:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a4be:	d107      	bne.n	800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4c0:	f107 0308 	add.w	r3, r7, #8
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f7fe ffbf 	bl	8009448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4ce:	e034      	b.n	800a53a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 800a4d0:	4b8d      	ldr	r3, [pc, #564]	@ (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f003 0302 	and.w	r3, r3, #2
 800a4d8:	2b02      	cmp	r3, #2
 800a4da:	d10d      	bne.n	800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 800a4dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4de:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a4e2:	d109      	bne.n	800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a4e4:	4b88      	ldr	r3, [pc, #544]	@ (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	08db      	lsrs	r3, r3, #3
 800a4ea:	f003 0303 	and.w	r3, r3, #3
 800a4ee:	4a87      	ldr	r2, [pc, #540]	@ (800a70c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800a4f0:	fa22 f303 	lsr.w	r3, r2, r3
 800a4f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4f6:	e020      	b.n	800a53a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 800a4f8:	4b83      	ldr	r3, [pc, #524]	@ (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a500:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a504:	d106      	bne.n	800a514 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800a506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a508:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a50c:	d102      	bne.n	800a514 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 800a50e:	4b80      	ldr	r3, [pc, #512]	@ (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800a510:	637b      	str	r3, [r7, #52]	@ 0x34
 800a512:	e012      	b.n	800a53a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 800a514:	4b7c      	ldr	r3, [pc, #496]	@ (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a516:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a51a:	f003 0302 	and.w	r3, r3, #2
 800a51e:	2b02      	cmp	r3, #2
 800a520:	d107      	bne.n	800a532 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 800a522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a524:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800a528:	d103      	bne.n	800a532 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 800a52a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a52e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a530:	e003      	b.n	800a53a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 800a532:	2300      	movs	r3, #0
 800a534:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a536:	f001 bc3c 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a53a:	f001 bc3a 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 800a53e:	4b72      	ldr	r3, [pc, #456]	@ (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a540:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a544:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a548:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 800a54a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d104      	bne.n	800a55a <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a550:	f7fc fcda 	bl	8006f08 <HAL_RCC_GetPCLK1Freq>
 800a554:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 800a556:	f001 bc2c 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 800a55a:	4b6b      	ldr	r3, [pc, #428]	@ (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a562:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a566:	d10b      	bne.n	800a580 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800a568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a56a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a56e:	d107      	bne.n	800a580 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a570:	f107 0314 	add.w	r3, r7, #20
 800a574:	4618      	mov	r0, r3
 800a576:	f7fe fdfd 	bl	8009174 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a57a:	69bb      	ldr	r3, [r7, #24]
 800a57c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a57e:	e047      	b.n	800a610 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 800a580:	4b61      	ldr	r3, [pc, #388]	@ (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a588:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a58c:	d10b      	bne.n	800a5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 800a58e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a590:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a594:	d107      	bne.n	800a5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a596:	f107 0308 	add.w	r3, r7, #8
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7fe ff54 	bl	8009448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5a4:	e034      	b.n	800a610 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800a5a6:	4b58      	ldr	r3, [pc, #352]	@ (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f003 0302 	and.w	r3, r3, #2
 800a5ae:	2b02      	cmp	r3, #2
 800a5b0:	d10d      	bne.n	800a5ce <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 800a5b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5b4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a5b8:	d109      	bne.n	800a5ce <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a5ba:	4b53      	ldr	r3, [pc, #332]	@ (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	08db      	lsrs	r3, r3, #3
 800a5c0:	f003 0303 	and.w	r3, r3, #3
 800a5c4:	4a51      	ldr	r2, [pc, #324]	@ (800a70c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800a5c6:	fa22 f303 	lsr.w	r3, r2, r3
 800a5ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5cc:	e020      	b.n	800a610 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 800a5ce:	4b4e      	ldr	r3, [pc, #312]	@ (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a5d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a5da:	d106      	bne.n	800a5ea <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 800a5dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a5e2:	d102      	bne.n	800a5ea <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 800a5e4:	4b4a      	ldr	r3, [pc, #296]	@ (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800a5e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5e8:	e012      	b.n	800a610 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 800a5ea:	4b47      	ldr	r3, [pc, #284]	@ (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a5ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a5f0:	f003 0302 	and.w	r3, r3, #2
 800a5f4:	2b02      	cmp	r3, #2
 800a5f6:	d107      	bne.n	800a608 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 800a5f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5fa:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800a5fe:	d103      	bne.n	800a608 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 800a600:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a604:	637b      	str	r3, [r7, #52]	@ 0x34
 800a606:	e003      	b.n	800a610 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 800a608:	2300      	movs	r3, #0
 800a60a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a60c:	f001 bbd1 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a610:	f001 bbcf 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 800a614:	4b3c      	ldr	r3, [pc, #240]	@ (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a616:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a61a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a61e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 800a620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a622:	2b00      	cmp	r3, #0
 800a624:	d104      	bne.n	800a630 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a626:	f7fc fc6f 	bl	8006f08 <HAL_RCC_GetPCLK1Freq>
 800a62a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 800a62c:	f001 bbc1 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 800a630:	4b35      	ldr	r3, [pc, #212]	@ (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a638:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a63c:	d10b      	bne.n	800a656 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 800a63e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a640:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a644:	d107      	bne.n	800a656 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a646:	f107 0314 	add.w	r3, r7, #20
 800a64a:	4618      	mov	r0, r3
 800a64c:	f7fe fd92 	bl	8009174 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a650:	69bb      	ldr	r3, [r7, #24]
 800a652:	637b      	str	r3, [r7, #52]	@ 0x34
 800a654:	e047      	b.n	800a6e6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 800a656:	4b2c      	ldr	r3, [pc, #176]	@ (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a65e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a662:	d10b      	bne.n	800a67c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 800a664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a666:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a66a:	d107      	bne.n	800a67c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a66c:	f107 0308 	add.w	r3, r7, #8
 800a670:	4618      	mov	r0, r3
 800a672:	f7fe fee9 	bl	8009448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	637b      	str	r3, [r7, #52]	@ 0x34
 800a67a:	e034      	b.n	800a6e6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 800a67c:	4b22      	ldr	r3, [pc, #136]	@ (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f003 0302 	and.w	r3, r3, #2
 800a684:	2b02      	cmp	r3, #2
 800a686:	d10d      	bne.n	800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 800a688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a68a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a68e:	d109      	bne.n	800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a690:	4b1d      	ldr	r3, [pc, #116]	@ (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	08db      	lsrs	r3, r3, #3
 800a696:	f003 0303 	and.w	r3, r3, #3
 800a69a:	4a1c      	ldr	r2, [pc, #112]	@ (800a70c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800a69c:	fa22 f303 	lsr.w	r3, r2, r3
 800a6a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6a2:	e020      	b.n	800a6e6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 800a6a4:	4b18      	ldr	r3, [pc, #96]	@ (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a6ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a6b0:	d106      	bne.n	800a6c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 800a6b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a6b8:	d102      	bne.n	800a6c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 800a6ba:	4b15      	ldr	r3, [pc, #84]	@ (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800a6bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6be:	e012      	b.n	800a6e6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 800a6c0:	4b11      	ldr	r3, [pc, #68]	@ (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a6c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a6c6:	f003 0302 	and.w	r3, r3, #2
 800a6ca:	2b02      	cmp	r3, #2
 800a6cc:	d107      	bne.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 800a6ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6d0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a6d4:	d103      	bne.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 800a6d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a6da:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6dc:	e003      	b.n	800a6e6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a6e2:	f001 bb66 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a6e6:	f001 bb64 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 800a6ea:	4b07      	ldr	r3, [pc, #28]	@ (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a6ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a6f0:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 800a6f4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 800a6f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d10b      	bne.n	800a714 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a6fc:	f7fc fc04 	bl	8006f08 <HAL_RCC_GetPCLK1Freq>
 800a700:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 800a702:	f001 bb56 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a706:	bf00      	nop
 800a708:	44020c00 	.word	0x44020c00
 800a70c:	03d09000 	.word	0x03d09000
 800a710:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 800a714:	4ba1      	ldr	r3, [pc, #644]	@ (800a99c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a71c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a720:	d10b      	bne.n	800a73a <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800a722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a724:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a728:	d107      	bne.n	800a73a <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a72a:	f107 0314 	add.w	r3, r7, #20
 800a72e:	4618      	mov	r0, r3
 800a730:	f7fe fd20 	bl	8009174 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a734:	69bb      	ldr	r3, [r7, #24]
 800a736:	637b      	str	r3, [r7, #52]	@ 0x34
 800a738:	e047      	b.n	800a7ca <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 800a73a:	4b98      	ldr	r3, [pc, #608]	@ (800a99c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a742:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a746:	d10b      	bne.n	800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 800a748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a74a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a74e:	d107      	bne.n	800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a750:	f107 0308 	add.w	r3, r7, #8
 800a754:	4618      	mov	r0, r3
 800a756:	f7fe fe77 	bl	8009448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a75e:	e034      	b.n	800a7ca <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 800a760:	4b8e      	ldr	r3, [pc, #568]	@ (800a99c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f003 0302 	and.w	r3, r3, #2
 800a768:	2b02      	cmp	r3, #2
 800a76a:	d10d      	bne.n	800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 800a76c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a76e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800a772:	d109      	bne.n	800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a774:	4b89      	ldr	r3, [pc, #548]	@ (800a99c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	08db      	lsrs	r3, r3, #3
 800a77a:	f003 0303 	and.w	r3, r3, #3
 800a77e:	4a88      	ldr	r2, [pc, #544]	@ (800a9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800a780:	fa22 f303 	lsr.w	r3, r2, r3
 800a784:	637b      	str	r3, [r7, #52]	@ 0x34
 800a786:	e020      	b.n	800a7ca <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 800a788:	4b84      	ldr	r3, [pc, #528]	@ (800a99c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a790:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a794:	d106      	bne.n	800a7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 800a796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a798:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a79c:	d102      	bne.n	800a7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 800a79e:	4b81      	ldr	r3, [pc, #516]	@ (800a9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800a7a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7a2:	e012      	b.n	800a7ca <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 800a7a4:	4b7d      	ldr	r3, [pc, #500]	@ (800a99c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a7a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a7aa:	f003 0302 	and.w	r3, r3, #2
 800a7ae:	2b02      	cmp	r3, #2
 800a7b0:	d107      	bne.n	800a7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800a7b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b4:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800a7b8:	d103      	bne.n	800a7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 800a7ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a7be:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7c0:	e003      	b.n	800a7ca <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a7c6:	f001 baf4 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a7ca:	f001 baf2 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 800a7ce:	4b73      	ldr	r3, [pc, #460]	@ (800a99c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a7d0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a7d4:	f003 0307 	and.w	r3, r3, #7
 800a7d8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 800a7da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d104      	bne.n	800a7ea <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a7e0:	f7fc fb92 	bl	8006f08 <HAL_RCC_GetPCLK1Freq>
 800a7e4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 800a7e6:	f001 bae4 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 800a7ea:	4b6c      	ldr	r3, [pc, #432]	@ (800a99c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a7f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a7f6:	d10a      	bne.n	800a80e <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 800a7f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7fa:	2b01      	cmp	r3, #1
 800a7fc:	d107      	bne.n	800a80e <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7fe:	f107 0314 	add.w	r3, r7, #20
 800a802:	4618      	mov	r0, r3
 800a804:	f7fe fcb6 	bl	8009174 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a808:	69bb      	ldr	r3, [r7, #24]
 800a80a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a80c:	e043      	b.n	800a896 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 800a80e:	4b63      	ldr	r3, [pc, #396]	@ (800a99c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a816:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a81a:	d10a      	bne.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 800a81c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a81e:	2b02      	cmp	r3, #2
 800a820:	d107      	bne.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a822:	f107 0308 	add.w	r3, r7, #8
 800a826:	4618      	mov	r0, r3
 800a828:	f7fe fe0e 	bl	8009448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a830:	e031      	b.n	800a896 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800a832:	4b5a      	ldr	r3, [pc, #360]	@ (800a99c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f003 0302 	and.w	r3, r3, #2
 800a83a:	2b02      	cmp	r3, #2
 800a83c:	d10c      	bne.n	800a858 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 800a83e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a840:	2b03      	cmp	r3, #3
 800a842:	d109      	bne.n	800a858 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a844:	4b55      	ldr	r3, [pc, #340]	@ (800a99c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	08db      	lsrs	r3, r3, #3
 800a84a:	f003 0303 	and.w	r3, r3, #3
 800a84e:	4a54      	ldr	r2, [pc, #336]	@ (800a9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800a850:	fa22 f303 	lsr.w	r3, r2, r3
 800a854:	637b      	str	r3, [r7, #52]	@ 0x34
 800a856:	e01e      	b.n	800a896 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 800a858:	4b50      	ldr	r3, [pc, #320]	@ (800a99c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a860:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a864:	d105      	bne.n	800a872 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 800a866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a868:	2b04      	cmp	r3, #4
 800a86a:	d102      	bne.n	800a872 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 800a86c:	4b4d      	ldr	r3, [pc, #308]	@ (800a9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800a86e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a870:	e011      	b.n	800a896 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800a872:	4b4a      	ldr	r3, [pc, #296]	@ (800a99c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a874:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a878:	f003 0302 	and.w	r3, r3, #2
 800a87c:	2b02      	cmp	r3, #2
 800a87e:	d106      	bne.n	800a88e <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 800a880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a882:	2b05      	cmp	r3, #5
 800a884:	d103      	bne.n	800a88e <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 800a886:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a88a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a88c:	e003      	b.n	800a896 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 800a88e:	2300      	movs	r3, #0
 800a890:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a892:	f001 ba8e 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a896:	f001 ba8c 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 800a89a:	4b40      	ldr	r3, [pc, #256]	@ (800a99c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a89c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a8a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a8a4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800a8a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d104      	bne.n	800a8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a8ac:	f7fc fb2c 	bl	8006f08 <HAL_RCC_GetPCLK1Freq>
 800a8b0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 800a8b2:	f001 ba7e 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800a8b6:	4b39      	ldr	r3, [pc, #228]	@ (800a99c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a8c2:	d10a      	bne.n	800a8da <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 800a8c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8c6:	2b10      	cmp	r3, #16
 800a8c8:	d107      	bne.n	800a8da <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8ca:	f107 0314 	add.w	r3, r7, #20
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f7fe fc50 	bl	8009174 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a8d4:	69bb      	ldr	r3, [r7, #24]
 800a8d6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8d8:	e043      	b.n	800a962 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 800a8da:	4b30      	ldr	r3, [pc, #192]	@ (800a99c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a8e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8e6:	d10a      	bne.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800a8e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ea:	2b20      	cmp	r3, #32
 800a8ec:	d107      	bne.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8ee:	f107 0308 	add.w	r3, r7, #8
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f7fe fda8 	bl	8009448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8fc:	e031      	b.n	800a962 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 800a8fe:	4b27      	ldr	r3, [pc, #156]	@ (800a99c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f003 0302 	and.w	r3, r3, #2
 800a906:	2b02      	cmp	r3, #2
 800a908:	d10c      	bne.n	800a924 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800a90a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a90c:	2b30      	cmp	r3, #48	@ 0x30
 800a90e:	d109      	bne.n	800a924 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a910:	4b22      	ldr	r3, [pc, #136]	@ (800a99c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	08db      	lsrs	r3, r3, #3
 800a916:	f003 0303 	and.w	r3, r3, #3
 800a91a:	4a21      	ldr	r2, [pc, #132]	@ (800a9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800a91c:	fa22 f303 	lsr.w	r3, r2, r3
 800a920:	637b      	str	r3, [r7, #52]	@ 0x34
 800a922:	e01e      	b.n	800a962 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 800a924:	4b1d      	ldr	r3, [pc, #116]	@ (800a99c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a92c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a930:	d105      	bne.n	800a93e <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 800a932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a934:	2b40      	cmp	r3, #64	@ 0x40
 800a936:	d102      	bne.n	800a93e <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 800a938:	4b1a      	ldr	r3, [pc, #104]	@ (800a9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800a93a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a93c:	e011      	b.n	800a962 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 800a93e:	4b17      	ldr	r3, [pc, #92]	@ (800a99c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a940:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a944:	f003 0302 	and.w	r3, r3, #2
 800a948:	2b02      	cmp	r3, #2
 800a94a:	d106      	bne.n	800a95a <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 800a94c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a94e:	2b50      	cmp	r3, #80	@ 0x50
 800a950:	d103      	bne.n	800a95a <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 800a952:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a956:	637b      	str	r3, [r7, #52]	@ 0x34
 800a958:	e003      	b.n	800a962 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 800a95a:	2300      	movs	r3, #0
 800a95c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a95e:	f001 ba28 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a962:	f001 ba26 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800a966:	4b0d      	ldr	r3, [pc, #52]	@ (800a99c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a96c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a970:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800a972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a974:	2b00      	cmp	r3, #0
 800a976:	d104      	bne.n	800a982 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800a978:	f7fc faf2 	bl	8006f60 <HAL_RCC_GetPCLK3Freq>
 800a97c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800a97e:	f001 ba18 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 800a982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a984:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a988:	d10e      	bne.n	800a9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a98a:	f107 0314 	add.w	r3, r7, #20
 800a98e:	4618      	mov	r0, r3
 800a990:	f7fe fbf0 	bl	8009174 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a994:	69bb      	ldr	r3, [r7, #24]
 800a996:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a998:	f001 ba0b 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a99c:	44020c00 	.word	0x44020c00
 800a9a0:	03d09000 	.word	0x03d09000
 800a9a4:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 800a9a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a9ae:	d108      	bne.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9b0:	f107 0308 	add.w	r3, r7, #8
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f7fe fd47 	bl	8009448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a9be:	f001 b9f8 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800a9c2:	4ba4      	ldr	r3, [pc, #656]	@ (800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f003 0302 	and.w	r3, r3, #2
 800a9ca:	2b02      	cmp	r3, #2
 800a9cc:	d10d      	bne.n	800a9ea <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800a9ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9d0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a9d4:	d109      	bne.n	800a9ea <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a9d6:	4b9f      	ldr	r3, [pc, #636]	@ (800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	08db      	lsrs	r3, r3, #3
 800a9dc:	f003 0303 	and.w	r3, r3, #3
 800a9e0:	4a9d      	ldr	r2, [pc, #628]	@ (800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800a9e2:	fa22 f303 	lsr.w	r3, r2, r3
 800a9e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9e8:	e020      	b.n	800aa2c <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800a9ea:	4b9a      	ldr	r3, [pc, #616]	@ (800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a9f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9f6:	d106      	bne.n	800aa06 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 800a9f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a9fe:	d102      	bne.n	800aa06 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 800aa00:	4b96      	ldr	r3, [pc, #600]	@ (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800aa02:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa04:	e012      	b.n	800aa2c <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800aa06:	4b93      	ldr	r3, [pc, #588]	@ (800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800aa08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aa0c:	f003 0302 	and.w	r3, r3, #2
 800aa10:	2b02      	cmp	r3, #2
 800aa12:	d107      	bne.n	800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 800aa14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa16:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800aa1a:	d103      	bne.n	800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 800aa1c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aa20:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa22:	e003      	b.n	800aa2c <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 800aa24:	2300      	movs	r3, #0
 800aa26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aa28:	f001 b9c3 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800aa2c:	f001 b9c1 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800aa30:	4b88      	ldr	r3, [pc, #544]	@ (800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800aa32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800aa36:	f003 0307 	and.w	r3, r3, #7
 800aa3a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800aa3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d104      	bne.n	800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800aa42:	f7fc fa45 	bl	8006ed0 <HAL_RCC_GetHCLKFreq>
 800aa46:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 800aa48:	f001 b9b3 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800aa4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa4e:	2b01      	cmp	r3, #1
 800aa50:	d104      	bne.n	800aa5c <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 800aa52:	f7fc f911 	bl	8006c78 <HAL_RCC_GetSysClockFreq>
 800aa56:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800aa58:	f001 b9ab 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 800aa5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa5e:	2b02      	cmp	r3, #2
 800aa60:	d108      	bne.n	800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa62:	f107 0314 	add.w	r3, r7, #20
 800aa66:	4618      	mov	r0, r3
 800aa68:	f7fe fb84 	bl	8009174 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800aa6c:	69fb      	ldr	r3, [r7, #28]
 800aa6e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aa70:	f001 b99f 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800aa74:	4b77      	ldr	r3, [pc, #476]	@ (800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa80:	d105      	bne.n	800aa8e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 800aa82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa84:	2b03      	cmp	r3, #3
 800aa86:	d102      	bne.n	800aa8e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 800aa88:	4b75      	ldr	r3, [pc, #468]	@ (800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 800aa8a:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa8c:	e023      	b.n	800aad6 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800aa8e:	4b71      	ldr	r3, [pc, #452]	@ (800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f003 0302 	and.w	r3, r3, #2
 800aa96:	2b02      	cmp	r3, #2
 800aa98:	d10c      	bne.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 800aa9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa9c:	2b04      	cmp	r3, #4
 800aa9e:	d109      	bne.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800aaa0:	4b6c      	ldr	r3, [pc, #432]	@ (800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	08db      	lsrs	r3, r3, #3
 800aaa6:	f003 0303 	and.w	r3, r3, #3
 800aaaa:	4a6b      	ldr	r2, [pc, #428]	@ (800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800aaac:	fa22 f303 	lsr.w	r3, r2, r3
 800aab0:	637b      	str	r3, [r7, #52]	@ 0x34
 800aab2:	e010      	b.n	800aad6 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800aab4:	4b67      	ldr	r3, [pc, #412]	@ (800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aabc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aac0:	d105      	bne.n	800aace <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 800aac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aac4:	2b05      	cmp	r3, #5
 800aac6:	d102      	bne.n	800aace <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 800aac8:	4b64      	ldr	r3, [pc, #400]	@ (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800aaca:	637b      	str	r3, [r7, #52]	@ 0x34
 800aacc:	e003      	b.n	800aad6 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 800aace:	2300      	movs	r3, #0
 800aad0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aad2:	f001 b96e 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800aad6:	f001 b96c 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800aada:	4b5e      	ldr	r3, [pc, #376]	@ (800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800aadc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800aae0:	f003 0308 	and.w	r3, r3, #8
 800aae4:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800aae6:	4b5b      	ldr	r3, [pc, #364]	@ (800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800aae8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aaec:	f003 0302 	and.w	r3, r3, #2
 800aaf0:	2b02      	cmp	r3, #2
 800aaf2:	d106      	bne.n	800ab02 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 800aaf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d103      	bne.n	800ab02 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 800aafa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aafe:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab00:	e012      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800ab02:	4b54      	ldr	r3, [pc, #336]	@ (800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ab04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ab08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab10:	d106      	bne.n	800ab20 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 800ab12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab14:	2b08      	cmp	r3, #8
 800ab16:	d103      	bne.n	800ab20 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 800ab18:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800ab1c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab1e:	e003      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 800ab20:	2300      	movs	r3, #0
 800ab22:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800ab24:	f001 b945 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ab28:	f001 b943 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800ab2c:	4b49      	ldr	r3, [pc, #292]	@ (800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ab2e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ab32:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ab36:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800ab38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d104      	bne.n	800ab48 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800ab3e:	f7fc f9e3 	bl	8006f08 <HAL_RCC_GetPCLK1Freq>
 800ab42:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800ab44:	f001 b935 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 800ab48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab4e:	d108      	bne.n	800ab62 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab50:	f107 0308 	add.w	r3, r7, #8
 800ab54:	4618      	mov	r0, r3
 800ab56:	f7fe fc77 	bl	8009448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ab5a:	693b      	ldr	r3, [r7, #16]
 800ab5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ab5e:	f001 b928 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800ab62:	4b3c      	ldr	r3, [pc, #240]	@ (800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f003 0302 	and.w	r3, r3, #2
 800ab6a:	2b02      	cmp	r3, #2
 800ab6c:	d10d      	bne.n	800ab8a <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 800ab6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab74:	d109      	bne.n	800ab8a <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ab76:	4b37      	ldr	r3, [pc, #220]	@ (800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	08db      	lsrs	r3, r3, #3
 800ab7c:	f003 0303 	and.w	r3, r3, #3
 800ab80:	4a35      	ldr	r2, [pc, #212]	@ (800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800ab82:	fa22 f303 	lsr.w	r3, r2, r3
 800ab86:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab88:	e011      	b.n	800abae <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800ab8a:	4b32      	ldr	r3, [pc, #200]	@ (800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ab92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab96:	d106      	bne.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 800ab98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab9a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ab9e:	d102      	bne.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 800aba0:	4b2e      	ldr	r3, [pc, #184]	@ (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800aba2:	637b      	str	r3, [r7, #52]	@ 0x34
 800aba4:	e003      	b.n	800abae <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 800aba6:	2300      	movs	r3, #0
 800aba8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800abaa:	f001 b902 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800abae:	f001 b900 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800abb2:	4b28      	ldr	r3, [pc, #160]	@ (800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800abb4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800abb8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800abbc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800abbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d104      	bne.n	800abce <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800abc4:	f7fc f9a0 	bl	8006f08 <HAL_RCC_GetPCLK1Freq>
 800abc8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800abca:	f001 b8f2 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 800abce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800abd4:	d108      	bne.n	800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abd6:	f107 0308 	add.w	r3, r7, #8
 800abda:	4618      	mov	r0, r3
 800abdc:	f7fe fc34 	bl	8009448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800abe4:	f001 b8e5 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800abe8:	4b1a      	ldr	r3, [pc, #104]	@ (800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f003 0302 	and.w	r3, r3, #2
 800abf0:	2b02      	cmp	r3, #2
 800abf2:	d10d      	bne.n	800ac10 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 800abf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abf6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800abfa:	d109      	bne.n	800ac10 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800abfc:	4b15      	ldr	r3, [pc, #84]	@ (800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	08db      	lsrs	r3, r3, #3
 800ac02:	f003 0303 	and.w	r3, r3, #3
 800ac06:	4a14      	ldr	r2, [pc, #80]	@ (800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800ac08:	fa22 f303 	lsr.w	r3, r2, r3
 800ac0c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac0e:	e011      	b.n	800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800ac10:	4b10      	ldr	r3, [pc, #64]	@ (800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ac18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac1c:	d106      	bne.n	800ac2c <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 800ac1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac20:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800ac24:	d102      	bne.n	800ac2c <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 800ac26:	4b0d      	ldr	r3, [pc, #52]	@ (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800ac28:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac2a:	e003      	b.n	800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ac30:	f001 b8bf 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ac34:	f001 b8bd 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800ac38:	4b06      	ldr	r3, [pc, #24]	@ (800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ac3a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ac3e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800ac42:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 800ac44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d10c      	bne.n	800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800ac4a:	f7fc f989 	bl	8006f60 <HAL_RCC_GetPCLK3Freq>
 800ac4e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 800ac50:	f001 b8af 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ac54:	44020c00 	.word	0x44020c00
 800ac58:	03d09000 	.word	0x03d09000
 800ac5c:	003d0900 	.word	0x003d0900
 800ac60:	017d7840 	.word	0x017d7840
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 800ac64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac6a:	d108      	bne.n	800ac7e <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac6c:	f107 0308 	add.w	r3, r7, #8
 800ac70:	4618      	mov	r0, r3
 800ac72:	f7fe fbe9 	bl	8009448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ac7a:	f001 b89a 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800ac7e:	4b9f      	ldr	r3, [pc, #636]	@ (800aefc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f003 0302 	and.w	r3, r3, #2
 800ac86:	2b02      	cmp	r3, #2
 800ac88:	d10d      	bne.n	800aca6 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 800ac8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ac90:	d109      	bne.n	800aca6 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ac92:	4b9a      	ldr	r3, [pc, #616]	@ (800aefc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	08db      	lsrs	r3, r3, #3
 800ac98:	f003 0303 	and.w	r3, r3, #3
 800ac9c:	4a98      	ldr	r2, [pc, #608]	@ (800af00 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800ac9e:	fa22 f303 	lsr.w	r3, r2, r3
 800aca2:	637b      	str	r3, [r7, #52]	@ 0x34
 800aca4:	e011      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800aca6:	4b95      	ldr	r3, [pc, #596]	@ (800aefc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800acae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800acb2:	d106      	bne.n	800acc2 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 800acb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acb6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800acba:	d102      	bne.n	800acc2 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 800acbc:	4b91      	ldr	r3, [pc, #580]	@ (800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800acbe:	637b      	str	r3, [r7, #52]	@ 0x34
 800acc0:	e003      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 800acc2:	2300      	movs	r3, #0
 800acc4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800acc6:	f001 b874 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800acca:	f001 b872 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800acce:	4b8b      	ldr	r3, [pc, #556]	@ (800aefc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800acd0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800acd4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800acd8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 800acda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d104      	bne.n	800acea <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800ace0:	f7fc f93e 	bl	8006f60 <HAL_RCC_GetPCLK3Freq>
 800ace4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 800ace6:	f001 b864 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 800acea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800acf0:	d108      	bne.n	800ad04 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acf2:	f107 0308 	add.w	r3, r7, #8
 800acf6:	4618      	mov	r0, r3
 800acf8:	f7fe fba6 	bl	8009448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ad00:	f001 b857 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800ad04:	4b7d      	ldr	r3, [pc, #500]	@ (800aefc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f003 0302 	and.w	r3, r3, #2
 800ad0c:	2b02      	cmp	r3, #2
 800ad0e:	d10d      	bne.n	800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 800ad10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad12:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ad16:	d109      	bne.n	800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ad18:	4b78      	ldr	r3, [pc, #480]	@ (800aefc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	08db      	lsrs	r3, r3, #3
 800ad1e:	f003 0303 	and.w	r3, r3, #3
 800ad22:	4a77      	ldr	r2, [pc, #476]	@ (800af00 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800ad24:	fa22 f303 	lsr.w	r3, r2, r3
 800ad28:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad2a:	e011      	b.n	800ad50 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 800ad2c:	4b73      	ldr	r3, [pc, #460]	@ (800aefc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ad34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad38:	d106      	bne.n	800ad48 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 800ad3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad3c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800ad40:	d102      	bne.n	800ad48 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 800ad42:	4b70      	ldr	r3, [pc, #448]	@ (800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800ad44:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad46:	e003      	b.n	800ad50 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ad4c:	f001 b831 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ad50:	f001 b82f 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 800ad54:	4b69      	ldr	r3, [pc, #420]	@ (800aefc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ad56:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ad5a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800ad5e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800ad60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d104      	bne.n	800ad70 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800ad66:	f7fc f8cf 	bl	8006f08 <HAL_RCC_GetPCLK1Freq>
 800ad6a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800ad6c:	f001 b821 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 800ad70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ad76:	d108      	bne.n	800ad8a <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad78:	f107 0308 	add.w	r3, r7, #8
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f7fe fb63 	bl	8009448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ad86:	f001 b814 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800ad8a:	4b5c      	ldr	r3, [pc, #368]	@ (800aefc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f003 0302 	and.w	r3, r3, #2
 800ad92:	2b02      	cmp	r3, #2
 800ad94:	d10e      	bne.n	800adb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 800ad96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad98:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ad9c:	d10a      	bne.n	800adb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ad9e:	4b57      	ldr	r3, [pc, #348]	@ (800aefc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	08db      	lsrs	r3, r3, #3
 800ada4:	f003 0303 	and.w	r3, r3, #3
 800ada8:	4a55      	ldr	r2, [pc, #340]	@ (800af00 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800adaa:	fa22 f303 	lsr.w	r3, r2, r3
 800adae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800adb0:	f000 bfff 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800adb4:	2300      	movs	r3, #0
 800adb6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800adb8:	f000 bffb 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800adbc:	4b4f      	ldr	r3, [pc, #316]	@ (800aefc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800adbe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800adc2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800adc6:	633b      	str	r3, [r7, #48]	@ 0x30
 800adc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adca:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800adce:	d056      	beq.n	800ae7e <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 800add0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800add2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800add6:	f200 808b 	bhi.w	800aef0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800adda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800addc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ade0:	d03e      	beq.n	800ae60 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 800ade2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ade4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ade8:	f200 8082 	bhi.w	800aef0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800adec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800adf2:	d027      	beq.n	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 800adf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adf6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800adfa:	d879      	bhi.n	800aef0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800adfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae02:	d017      	beq.n	800ae34 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 800ae04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae0a:	d871      	bhi.n	800aef0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800ae0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d004      	beq.n	800ae1c <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 800ae12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae18:	d004      	beq.n	800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 800ae1a:	e069      	b.n	800aef0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800ae1c:	f7fc f8a0 	bl	8006f60 <HAL_RCC_GetPCLK3Freq>
 800ae20:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800ae22:	e068      	b.n	800aef6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae24:	f107 0314 	add.w	r3, r7, #20
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f7fe f9a3 	bl	8009174 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ae32:	e060      	b.n	800aef6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae34:	f107 0308 	add.w	r3, r7, #8
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f7fe fb05 	bl	8009448 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ae42:	e058      	b.n	800aef6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ae44:	4b2d      	ldr	r3, [pc, #180]	@ (800aefc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ae46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ae4a:	f003 0302 	and.w	r3, r3, #2
 800ae4e:	2b02      	cmp	r3, #2
 800ae50:	d103      	bne.n	800ae5a <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 800ae52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ae56:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800ae58:	e04d      	b.n	800aef6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ae5e:	e04a      	b.n	800aef6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800ae60:	4b26      	ldr	r3, [pc, #152]	@ (800aefc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ae62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ae66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ae6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ae6e:	d103      	bne.n	800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 800ae70:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800ae74:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800ae76:	e03e      	b.n	800aef6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ae7c:	e03b      	b.n	800aef6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ae7e:	4b1f      	ldr	r3, [pc, #124]	@ (800aefc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ae80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ae84:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800ae88:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ae8a:	4b1c      	ldr	r3, [pc, #112]	@ (800aefc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f003 0302 	and.w	r3, r3, #2
 800ae92:	2b02      	cmp	r3, #2
 800ae94:	d10c      	bne.n	800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 800ae96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d109      	bne.n	800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ae9c:	4b17      	ldr	r3, [pc, #92]	@ (800aefc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	08db      	lsrs	r3, r3, #3
 800aea2:	f003 0303 	and.w	r3, r3, #3
 800aea6:	4a16      	ldr	r2, [pc, #88]	@ (800af00 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800aea8:	fa22 f303 	lsr.w	r3, r2, r3
 800aeac:	637b      	str	r3, [r7, #52]	@ 0x34
 800aeae:	e01e      	b.n	800aeee <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aeb0:	4b12      	ldr	r3, [pc, #72]	@ (800aefc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aeb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aebc:	d106      	bne.n	800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 800aebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aec0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aec4:	d102      	bne.n	800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800aec6:	4b0f      	ldr	r3, [pc, #60]	@ (800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800aec8:	637b      	str	r3, [r7, #52]	@ 0x34
 800aeca:	e010      	b.n	800aeee <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aecc:	4b0b      	ldr	r3, [pc, #44]	@ (800aefc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aed4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aed8:	d106      	bne.n	800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 800aeda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aedc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aee0:	d102      	bne.n	800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800aee2:	4b09      	ldr	r3, [pc, #36]	@ (800af08 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 800aee4:	637b      	str	r3, [r7, #52]	@ 0x34
 800aee6:	e002      	b.n	800aeee <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800aee8:	2300      	movs	r3, #0
 800aeea:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800aeec:	e003      	b.n	800aef6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 800aeee:	e002      	b.n	800aef6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 800aef0:	2300      	movs	r3, #0
 800aef2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800aef4:	bf00      	nop
          }
        }
        break;
 800aef6:	f000 bf5c 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800aefa:	bf00      	nop
 800aefc:	44020c00 	.word	0x44020c00
 800af00:	03d09000 	.word	0x03d09000
 800af04:	003d0900 	.word	0x003d0900
 800af08:	017d7840 	.word	0x017d7840

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800af0c:	4b9e      	ldr	r3, [pc, #632]	@ (800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800af0e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800af12:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800af16:	633b      	str	r3, [r7, #48]	@ 0x30
 800af18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af1a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800af1e:	d056      	beq.n	800afce <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 800af20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af22:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800af26:	f200 808b 	bhi.w	800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800af2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800af30:	d03e      	beq.n	800afb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 800af32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800af38:	f200 8082 	bhi.w	800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800af3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af3e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800af42:	d027      	beq.n	800af94 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 800af44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af46:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800af4a:	d879      	bhi.n	800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800af4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af52:	d017      	beq.n	800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 800af54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af5a:	d871      	bhi.n	800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800af5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d004      	beq.n	800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 800af62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af68:	d004      	beq.n	800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 800af6a:	e069      	b.n	800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 800af6c:	f7fb ffcc 	bl	8006f08 <HAL_RCC_GetPCLK1Freq>
 800af70:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800af72:	e068      	b.n	800b046 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af74:	f107 0314 	add.w	r3, r7, #20
 800af78:	4618      	mov	r0, r3
 800af7a:	f7fe f8fb 	bl	8009174 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800af82:	e060      	b.n	800b046 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af84:	f107 0308 	add.w	r3, r7, #8
 800af88:	4618      	mov	r0, r3
 800af8a:	f7fe fa5d 	bl	8009448 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800af92:	e058      	b.n	800b046 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800af94:	4b7c      	ldr	r3, [pc, #496]	@ (800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800af96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800af9a:	f003 0302 	and.w	r3, r3, #2
 800af9e:	2b02      	cmp	r3, #2
 800afa0:	d103      	bne.n	800afaa <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 800afa2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800afa6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800afa8:	e04d      	b.n	800b046 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800afaa:	2300      	movs	r3, #0
 800afac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800afae:	e04a      	b.n	800b046 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800afb0:	4b75      	ldr	r3, [pc, #468]	@ (800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800afb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800afb6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800afba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800afbe:	d103      	bne.n	800afc8 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 800afc0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800afc4:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800afc6:	e03e      	b.n	800b046 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800afc8:	2300      	movs	r3, #0
 800afca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800afcc:	e03b      	b.n	800b046 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800afce:	4b6e      	ldr	r3, [pc, #440]	@ (800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800afd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800afd4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800afd8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800afda:	4b6b      	ldr	r3, [pc, #428]	@ (800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f003 0302 	and.w	r3, r3, #2
 800afe2:	2b02      	cmp	r3, #2
 800afe4:	d10c      	bne.n	800b000 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 800afe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d109      	bne.n	800b000 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800afec:	4b66      	ldr	r3, [pc, #408]	@ (800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	08db      	lsrs	r3, r3, #3
 800aff2:	f003 0303 	and.w	r3, r3, #3
 800aff6:	4a65      	ldr	r2, [pc, #404]	@ (800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800aff8:	fa22 f303 	lsr.w	r3, r2, r3
 800affc:	637b      	str	r3, [r7, #52]	@ 0x34
 800affe:	e01e      	b.n	800b03e <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b000:	4b61      	ldr	r3, [pc, #388]	@ (800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b008:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b00c:	d106      	bne.n	800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 800b00e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b010:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b014:	d102      	bne.n	800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b016:	4b5e      	ldr	r3, [pc, #376]	@ (800b190 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800b018:	637b      	str	r3, [r7, #52]	@ 0x34
 800b01a:	e010      	b.n	800b03e <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b01c:	4b5a      	ldr	r3, [pc, #360]	@ (800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b024:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b028:	d106      	bne.n	800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 800b02a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b02c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b030:	d102      	bne.n	800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b032:	4b58      	ldr	r3, [pc, #352]	@ (800b194 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800b034:	637b      	str	r3, [r7, #52]	@ 0x34
 800b036:	e002      	b.n	800b03e <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b038:	2300      	movs	r3, #0
 800b03a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b03c:	e003      	b.n	800b046 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 800b03e:	e002      	b.n	800b046 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 800b040:	2300      	movs	r3, #0
 800b042:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b044:	bf00      	nop
          }
        }
        break;
 800b046:	f000 beb4 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800b04a:	4b4f      	ldr	r3, [pc, #316]	@ (800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b04c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b050:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b054:	633b      	str	r3, [r7, #48]	@ 0x30
 800b056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b058:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b05c:	d056      	beq.n	800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 800b05e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b060:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b064:	f200 808b 	bhi.w	800b17e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800b068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b06a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b06e:	d03e      	beq.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 800b070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b072:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b076:	f200 8082 	bhi.w	800b17e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800b07a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b07c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b080:	d027      	beq.n	800b0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800b082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b084:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b088:	d879      	bhi.n	800b17e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800b08a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b08c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b090:	d017      	beq.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 800b092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b094:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b098:	d871      	bhi.n	800b17e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800b09a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d004      	beq.n	800b0aa <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 800b0a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b0a6:	d004      	beq.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 800b0a8:	e069      	b.n	800b17e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800b0aa:	f7fb ff59 	bl	8006f60 <HAL_RCC_GetPCLK3Freq>
 800b0ae:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800b0b0:	e068      	b.n	800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0b2:	f107 0314 	add.w	r3, r7, #20
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f7fe f85c 	bl	8009174 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b0c0:	e060      	b.n	800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0c2:	f107 0308 	add.w	r3, r7, #8
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f7fe f9be 	bl	8009448 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b0d0:	e058      	b.n	800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b0d2:	4b2d      	ldr	r3, [pc, #180]	@ (800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b0d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b0d8:	f003 0302 	and.w	r3, r3, #2
 800b0dc:	2b02      	cmp	r3, #2
 800b0de:	d103      	bne.n	800b0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 800b0e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b0e4:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b0e6:	e04d      	b.n	800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b0ec:	e04a      	b.n	800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800b0ee:	4b26      	ldr	r3, [pc, #152]	@ (800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b0f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b0f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b0f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b0fc:	d103      	bne.n	800b106 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 800b0fe:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b102:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b104:	e03e      	b.n	800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800b106:	2300      	movs	r3, #0
 800b108:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b10a:	e03b      	b.n	800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b10c:	4b1e      	ldr	r3, [pc, #120]	@ (800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b10e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b112:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b116:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b118:	4b1b      	ldr	r3, [pc, #108]	@ (800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f003 0302 	and.w	r3, r3, #2
 800b120:	2b02      	cmp	r3, #2
 800b122:	d10c      	bne.n	800b13e <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 800b124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b126:	2b00      	cmp	r3, #0
 800b128:	d109      	bne.n	800b13e <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b12a:	4b17      	ldr	r3, [pc, #92]	@ (800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	08db      	lsrs	r3, r3, #3
 800b130:	f003 0303 	and.w	r3, r3, #3
 800b134:	4a15      	ldr	r2, [pc, #84]	@ (800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800b136:	fa22 f303 	lsr.w	r3, r2, r3
 800b13a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b13c:	e01e      	b.n	800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b13e:	4b12      	ldr	r3, [pc, #72]	@ (800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b146:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b14a:	d106      	bne.n	800b15a <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 800b14c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b14e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b152:	d102      	bne.n	800b15a <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b154:	4b0e      	ldr	r3, [pc, #56]	@ (800b190 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800b156:	637b      	str	r3, [r7, #52]	@ 0x34
 800b158:	e010      	b.n	800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b15a:	4b0b      	ldr	r3, [pc, #44]	@ (800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b162:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b166:	d106      	bne.n	800b176 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 800b168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b16a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b16e:	d102      	bne.n	800b176 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b170:	4b08      	ldr	r3, [pc, #32]	@ (800b194 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800b172:	637b      	str	r3, [r7, #52]	@ 0x34
 800b174:	e002      	b.n	800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b176:	2300      	movs	r3, #0
 800b178:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b17a:	e003      	b.n	800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 800b17c:	e002      	b.n	800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800b17e:	2300      	movs	r3, #0
 800b180:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b182:	bf00      	nop
          }
        }
        break;
 800b184:	f000 be15 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b188:	44020c00 	.word	0x44020c00
 800b18c:	03d09000 	.word	0x03d09000
 800b190:	003d0900 	.word	0x003d0900
 800b194:	017d7840 	.word	0x017d7840
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 800b198:	4b9e      	ldr	r3, [pc, #632]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b19a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b19e:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 800b1a2:	633b      	str	r3, [r7, #48]	@ 0x30
 800b1a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1a6:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800b1aa:	d056      	beq.n	800b25a <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 800b1ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1ae:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800b1b2:	f200 808b 	bhi.w	800b2cc <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800b1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b1bc:	d03e      	beq.n	800b23c <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 800b1be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b1c4:	f200 8082 	bhi.w	800b2cc <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800b1c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b1ce:	d027      	beq.n	800b220 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 800b1d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b1d6:	d879      	bhi.n	800b2cc <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800b1d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b1de:	d017      	beq.n	800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 800b1e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b1e6:	d871      	bhi.n	800b2cc <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800b1e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d004      	beq.n	800b1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 800b1ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b1f4:	d004      	beq.n	800b200 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 800b1f6:	e069      	b.n	800b2cc <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800b1f8:	f7fb feb2 	bl	8006f60 <HAL_RCC_GetPCLK3Freq>
 800b1fc:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800b1fe:	e068      	b.n	800b2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b200:	f107 0314 	add.w	r3, r7, #20
 800b204:	4618      	mov	r0, r3
 800b206:	f7fd ffb5 	bl	8009174 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b20e:	e060      	b.n	800b2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b210:	f107 0308 	add.w	r3, r7, #8
 800b214:	4618      	mov	r0, r3
 800b216:	f7fe f917 	bl	8009448 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b21e:	e058      	b.n	800b2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b220:	4b7c      	ldr	r3, [pc, #496]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b222:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b226:	f003 0302 	and.w	r3, r3, #2
 800b22a:	2b02      	cmp	r3, #2
 800b22c:	d103      	bne.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 800b22e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b232:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b234:	e04d      	b.n	800b2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800b236:	2300      	movs	r3, #0
 800b238:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b23a:	e04a      	b.n	800b2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800b23c:	4b75      	ldr	r3, [pc, #468]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b23e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b242:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b246:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b24a:	d103      	bne.n	800b254 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 800b24c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b250:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b252:	e03e      	b.n	800b2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800b254:	2300      	movs	r3, #0
 800b256:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b258:	e03b      	b.n	800b2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b25a:	4b6e      	ldr	r3, [pc, #440]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b25c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b260:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b264:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b266:	4b6b      	ldr	r3, [pc, #428]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f003 0302 	and.w	r3, r3, #2
 800b26e:	2b02      	cmp	r3, #2
 800b270:	d10c      	bne.n	800b28c <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 800b272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b274:	2b00      	cmp	r3, #0
 800b276:	d109      	bne.n	800b28c <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b278:	4b66      	ldr	r3, [pc, #408]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	08db      	lsrs	r3, r3, #3
 800b27e:	f003 0303 	and.w	r3, r3, #3
 800b282:	4a65      	ldr	r2, [pc, #404]	@ (800b418 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800b284:	fa22 f303 	lsr.w	r3, r2, r3
 800b288:	637b      	str	r3, [r7, #52]	@ 0x34
 800b28a:	e01e      	b.n	800b2ca <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b28c:	4b61      	ldr	r3, [pc, #388]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b294:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b298:	d106      	bne.n	800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 800b29a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b29c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2a0:	d102      	bne.n	800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b2a2:	4b5e      	ldr	r3, [pc, #376]	@ (800b41c <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800b2a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2a6:	e010      	b.n	800b2ca <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b2a8:	4b5a      	ldr	r3, [pc, #360]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b2b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b2b4:	d106      	bne.n	800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 800b2b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b2bc:	d102      	bne.n	800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b2be:	4b58      	ldr	r3, [pc, #352]	@ (800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800b2c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2c2:	e002      	b.n	800b2ca <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b2c8:	e003      	b.n	800b2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 800b2ca:	e002      	b.n	800b2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b2d0:	bf00      	nop
          }
        }
        break;
 800b2d2:	f000 bd6e 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 800b2d6:	4b4f      	ldr	r3, [pc, #316]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b2d8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b2dc:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800b2e0:	633b      	str	r3, [r7, #48]	@ 0x30
 800b2e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2e4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800b2e8:	d056      	beq.n	800b398 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 800b2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ec:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800b2f0:	f200 808b 	bhi.w	800b40a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800b2f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b2fa:	d03e      	beq.n	800b37a <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 800b2fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2fe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b302:	f200 8082 	bhi.w	800b40a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800b306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b308:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b30c:	d027      	beq.n	800b35e <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 800b30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b310:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b314:	d879      	bhi.n	800b40a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800b316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b318:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b31c:	d017      	beq.n	800b34e <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 800b31e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b320:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b324:	d871      	bhi.n	800b40a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800b326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d004      	beq.n	800b336 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 800b32c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b32e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b332:	d004      	beq.n	800b33e <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 800b334:	e069      	b.n	800b40a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800b336:	f7fb fe13 	bl	8006f60 <HAL_RCC_GetPCLK3Freq>
 800b33a:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800b33c:	e068      	b.n	800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b33e:	f107 0314 	add.w	r3, r7, #20
 800b342:	4618      	mov	r0, r3
 800b344:	f7fd ff16 	bl	8009174 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b34c:	e060      	b.n	800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b34e:	f107 0308 	add.w	r3, r7, #8
 800b352:	4618      	mov	r0, r3
 800b354:	f7fe f878 	bl	8009448 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b35c:	e058      	b.n	800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b35e:	4b2d      	ldr	r3, [pc, #180]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b360:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b364:	f003 0302 	and.w	r3, r3, #2
 800b368:	2b02      	cmp	r3, #2
 800b36a:	d103      	bne.n	800b374 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 800b36c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b370:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b372:	e04d      	b.n	800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800b374:	2300      	movs	r3, #0
 800b376:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b378:	e04a      	b.n	800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800b37a:	4b26      	ldr	r3, [pc, #152]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b37c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b380:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b384:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b388:	d103      	bne.n	800b392 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800b38a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b38e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b390:	e03e      	b.n	800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800b392:	2300      	movs	r3, #0
 800b394:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b396:	e03b      	b.n	800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b398:	4b1e      	ldr	r3, [pc, #120]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b39a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b39e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b3a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b3a4:	4b1b      	ldr	r3, [pc, #108]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f003 0302 	and.w	r3, r3, #2
 800b3ac:	2b02      	cmp	r3, #2
 800b3ae:	d10c      	bne.n	800b3ca <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 800b3b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d109      	bne.n	800b3ca <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b3b6:	4b17      	ldr	r3, [pc, #92]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	08db      	lsrs	r3, r3, #3
 800b3bc:	f003 0303 	and.w	r3, r3, #3
 800b3c0:	4a15      	ldr	r2, [pc, #84]	@ (800b418 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800b3c2:	fa22 f303 	lsr.w	r3, r2, r3
 800b3c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3c8:	e01e      	b.n	800b408 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b3ca:	4b12      	ldr	r3, [pc, #72]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b3d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b3d6:	d106      	bne.n	800b3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 800b3d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b3de:	d102      	bne.n	800b3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b3e0:	4b0e      	ldr	r3, [pc, #56]	@ (800b41c <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800b3e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3e4:	e010      	b.n	800b408 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b3e6:	4b0b      	ldr	r3, [pc, #44]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b3ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b3f2:	d106      	bne.n	800b402 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 800b3f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b3fa:	d102      	bne.n	800b402 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b3fc:	4b08      	ldr	r3, [pc, #32]	@ (800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800b3fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800b400:	e002      	b.n	800b408 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b402:	2300      	movs	r3, #0
 800b404:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b406:	e003      	b.n	800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 800b408:	e002      	b.n	800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 800b40a:	2300      	movs	r3, #0
 800b40c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b40e:	bf00      	nop
          }
        }
        break;
 800b410:	f000 bccf 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b414:	44020c00 	.word	0x44020c00
 800b418:	03d09000 	.word	0x03d09000
 800b41c:	003d0900 	.word	0x003d0900
 800b420:	017d7840 	.word	0x017d7840
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 800b424:	4b9e      	ldr	r3, [pc, #632]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b426:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b42a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800b42e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b432:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b436:	d056      	beq.n	800b4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 800b438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b43a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b43e:	f200 808b 	bhi.w	800b558 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800b442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b444:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b448:	d03e      	beq.n	800b4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 800b44a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b44c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b450:	f200 8082 	bhi.w	800b558 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800b454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b456:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b45a:	d027      	beq.n	800b4ac <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 800b45c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b45e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b462:	d879      	bhi.n	800b558 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800b464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b466:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b46a:	d017      	beq.n	800b49c <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 800b46c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b46e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b472:	d871      	bhi.n	800b558 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800b474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b476:	2b00      	cmp	r3, #0
 800b478:	d004      	beq.n	800b484 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800b47a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b47c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b480:	d004      	beq.n	800b48c <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800b482:	e069      	b.n	800b558 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800b484:	f7fb fd6c 	bl	8006f60 <HAL_RCC_GetPCLK3Freq>
 800b488:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800b48a:	e068      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b48c:	f107 0314 	add.w	r3, r7, #20
 800b490:	4618      	mov	r0, r3
 800b492:	f7fd fe6f 	bl	8009174 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b49a:	e060      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b49c:	f107 0308 	add.w	r3, r7, #8
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f7fd ffd1 	bl	8009448 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800b4a6:	693b      	ldr	r3, [r7, #16]
 800b4a8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b4aa:	e058      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b4ac:	4b7c      	ldr	r3, [pc, #496]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b4ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b4b2:	f003 0302 	and.w	r3, r3, #2
 800b4b6:	2b02      	cmp	r3, #2
 800b4b8:	d103      	bne.n	800b4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800b4ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b4be:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b4c0:	e04d      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b4c6:	e04a      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800b4c8:	4b75      	ldr	r3, [pc, #468]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b4ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b4ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b4d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b4d6:	d103      	bne.n	800b4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 800b4d8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b4dc:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b4de:	e03e      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b4e4:	e03b      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b4e6:	4b6e      	ldr	r3, [pc, #440]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b4e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b4ec:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b4f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b4f2:	4b6b      	ldr	r3, [pc, #428]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f003 0302 	and.w	r3, r3, #2
 800b4fa:	2b02      	cmp	r3, #2
 800b4fc:	d10c      	bne.n	800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 800b4fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b500:	2b00      	cmp	r3, #0
 800b502:	d109      	bne.n	800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b504:	4b66      	ldr	r3, [pc, #408]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	08db      	lsrs	r3, r3, #3
 800b50a:	f003 0303 	and.w	r3, r3, #3
 800b50e:	4a65      	ldr	r2, [pc, #404]	@ (800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800b510:	fa22 f303 	lsr.w	r3, r2, r3
 800b514:	637b      	str	r3, [r7, #52]	@ 0x34
 800b516:	e01e      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b518:	4b61      	ldr	r3, [pc, #388]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b520:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b524:	d106      	bne.n	800b534 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 800b526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b528:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b52c:	d102      	bne.n	800b534 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b52e:	4b5e      	ldr	r3, [pc, #376]	@ (800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800b530:	637b      	str	r3, [r7, #52]	@ 0x34
 800b532:	e010      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b534:	4b5a      	ldr	r3, [pc, #360]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b53c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b540:	d106      	bne.n	800b550 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 800b542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b544:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b548:	d102      	bne.n	800b550 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b54a:	4b58      	ldr	r3, [pc, #352]	@ (800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800b54c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b54e:	e002      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b550:	2300      	movs	r3, #0
 800b552:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b554:	e003      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800b556:	e002      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 800b558:	2300      	movs	r3, #0
 800b55a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b55c:	bf00      	nop
          }
        }
        break;
 800b55e:	f000 bc28 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b562:	4b4f      	ldr	r3, [pc, #316]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b564:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b568:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b56c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800b56e:	4b4c      	ldr	r3, [pc, #304]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b576:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b57a:	d106      	bne.n	800b58a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 800b57c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d103      	bne.n	800b58a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 800b582:	4b4a      	ldr	r3, [pc, #296]	@ (800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800b584:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800b586:	f000 bc14 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800b58a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b58c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b590:	d108      	bne.n	800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b592:	f107 0320 	add.w	r3, r7, #32
 800b596:	4618      	mov	r0, r3
 800b598:	f7fd fc82 	bl	8008ea0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b59c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b59e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b5a0:	f000 bc07 	b.w	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800b5a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b5aa:	d107      	bne.n	800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5ac:	f107 0314 	add.w	r3, r7, #20
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f7fd fddf 	bl	8009174 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b5b6:	69bb      	ldr	r3, [r7, #24]
 800b5b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b5ba:	e3fa      	b.n	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b5c0:	e3f7      	b.n	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800b5c2:	4b37      	ldr	r3, [pc, #220]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b5c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b5c8:	f003 0307 	and.w	r3, r3, #7
 800b5cc:	633b      	str	r3, [r7, #48]	@ 0x30
 800b5ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5d0:	2b04      	cmp	r3, #4
 800b5d2:	d861      	bhi.n	800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 800b5d4:	a201      	add	r2, pc, #4	@ (adr r2, 800b5dc <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 800b5d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5da:	bf00      	nop
 800b5dc:	0800b5f1 	.word	0x0800b5f1
 800b5e0:	0800b601 	.word	0x0800b601
 800b5e4:	0800b611 	.word	0x0800b611
 800b5e8:	0800b621 	.word	0x0800b621
 800b5ec:	0800b627 	.word	0x0800b627
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b5f0:	f107 0320 	add.w	r3, r7, #32
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f7fd fc53 	bl	8008ea0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800b5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5fc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b5fe:	e04e      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b600:	f107 0314 	add.w	r3, r7, #20
 800b604:	4618      	mov	r0, r3
 800b606:	f7fd fdb5 	bl	8009174 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b60e:	e046      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b610:	f107 0308 	add.w	r3, r7, #8
 800b614:	4618      	mov	r0, r3
 800b616:	f7fd ff17 	bl	8009448 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b61e:	e03e      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800b620:	4b23      	ldr	r3, [pc, #140]	@ (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 800b622:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b624:	e03b      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b626:	4b1e      	ldr	r3, [pc, #120]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b628:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b62c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b630:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b632:	4b1b      	ldr	r3, [pc, #108]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f003 0302 	and.w	r3, r3, #2
 800b63a:	2b02      	cmp	r3, #2
 800b63c:	d10c      	bne.n	800b658 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 800b63e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b640:	2b00      	cmp	r3, #0
 800b642:	d109      	bne.n	800b658 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b644:	4b16      	ldr	r3, [pc, #88]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	08db      	lsrs	r3, r3, #3
 800b64a:	f003 0303 	and.w	r3, r3, #3
 800b64e:	4a15      	ldr	r2, [pc, #84]	@ (800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800b650:	fa22 f303 	lsr.w	r3, r2, r3
 800b654:	637b      	str	r3, [r7, #52]	@ 0x34
 800b656:	e01e      	b.n	800b696 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b658:	4b11      	ldr	r3, [pc, #68]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b660:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b664:	d106      	bne.n	800b674 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 800b666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b668:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b66c:	d102      	bne.n	800b674 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b66e:	4b0e      	ldr	r3, [pc, #56]	@ (800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800b670:	637b      	str	r3, [r7, #52]	@ 0x34
 800b672:	e010      	b.n	800b696 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b674:	4b0a      	ldr	r3, [pc, #40]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b67c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b680:	d106      	bne.n	800b690 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800b682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b684:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b688:	d102      	bne.n	800b690 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b68a:	4b08      	ldr	r3, [pc, #32]	@ (800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800b68c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b68e:	e002      	b.n	800b696 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b690:	2300      	movs	r3, #0
 800b692:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b694:	e003      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800b696:	e002      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 800b698:	2300      	movs	r3, #0
 800b69a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b69c:	bf00      	nop
          }
        }
        break;
 800b69e:	e388      	b.n	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b6a0:	44020c00 	.word	0x44020c00
 800b6a4:	03d09000 	.word	0x03d09000
 800b6a8:	003d0900 	.word	0x003d0900
 800b6ac:	017d7840 	.word	0x017d7840
 800b6b0:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800b6b4:	4ba9      	ldr	r3, [pc, #676]	@ (800b95c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b6b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b6ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b6be:	633b      	str	r3, [r7, #48]	@ 0x30
 800b6c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6c2:	2b20      	cmp	r3, #32
 800b6c4:	f200 809a 	bhi.w	800b7fc <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 800b6c8:	a201      	add	r2, pc, #4	@ (adr r2, 800b6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800b6ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6ce:	bf00      	nop
 800b6d0:	0800b755 	.word	0x0800b755
 800b6d4:	0800b7fd 	.word	0x0800b7fd
 800b6d8:	0800b7fd 	.word	0x0800b7fd
 800b6dc:	0800b7fd 	.word	0x0800b7fd
 800b6e0:	0800b7fd 	.word	0x0800b7fd
 800b6e4:	0800b7fd 	.word	0x0800b7fd
 800b6e8:	0800b7fd 	.word	0x0800b7fd
 800b6ec:	0800b7fd 	.word	0x0800b7fd
 800b6f0:	0800b765 	.word	0x0800b765
 800b6f4:	0800b7fd 	.word	0x0800b7fd
 800b6f8:	0800b7fd 	.word	0x0800b7fd
 800b6fc:	0800b7fd 	.word	0x0800b7fd
 800b700:	0800b7fd 	.word	0x0800b7fd
 800b704:	0800b7fd 	.word	0x0800b7fd
 800b708:	0800b7fd 	.word	0x0800b7fd
 800b70c:	0800b7fd 	.word	0x0800b7fd
 800b710:	0800b775 	.word	0x0800b775
 800b714:	0800b7fd 	.word	0x0800b7fd
 800b718:	0800b7fd 	.word	0x0800b7fd
 800b71c:	0800b7fd 	.word	0x0800b7fd
 800b720:	0800b7fd 	.word	0x0800b7fd
 800b724:	0800b7fd 	.word	0x0800b7fd
 800b728:	0800b7fd 	.word	0x0800b7fd
 800b72c:	0800b7fd 	.word	0x0800b7fd
 800b730:	0800b785 	.word	0x0800b785
 800b734:	0800b7fd 	.word	0x0800b7fd
 800b738:	0800b7fd 	.word	0x0800b7fd
 800b73c:	0800b7fd 	.word	0x0800b7fd
 800b740:	0800b7fd 	.word	0x0800b7fd
 800b744:	0800b7fd 	.word	0x0800b7fd
 800b748:	0800b7fd 	.word	0x0800b7fd
 800b74c:	0800b7fd 	.word	0x0800b7fd
 800b750:	0800b78b 	.word	0x0800b78b
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b754:	f107 0320 	add.w	r3, r7, #32
 800b758:	4618      	mov	r0, r3
 800b75a:	f7fd fba1 	bl	8008ea0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800b75e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b760:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b762:	e04e      	b.n	800b802 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b764:	f107 0314 	add.w	r3, r7, #20
 800b768:	4618      	mov	r0, r3
 800b76a:	f7fd fd03 	bl	8009174 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b772:	e046      	b.n	800b802 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b774:	f107 0308 	add.w	r3, r7, #8
 800b778:	4618      	mov	r0, r3
 800b77a:	f7fd fe65 	bl	8009448 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b782:	e03e      	b.n	800b802 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800b784:	4b76      	ldr	r3, [pc, #472]	@ (800b960 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800b786:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b788:	e03b      	b.n	800b802 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b78a:	4b74      	ldr	r3, [pc, #464]	@ (800b95c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b78c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b790:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b794:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b796:	4b71      	ldr	r3, [pc, #452]	@ (800b95c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f003 0302 	and.w	r3, r3, #2
 800b79e:	2b02      	cmp	r3, #2
 800b7a0:	d10c      	bne.n	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800b7a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d109      	bne.n	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b7a8:	4b6c      	ldr	r3, [pc, #432]	@ (800b95c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	08db      	lsrs	r3, r3, #3
 800b7ae:	f003 0303 	and.w	r3, r3, #3
 800b7b2:	4a6c      	ldr	r2, [pc, #432]	@ (800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800b7b4:	fa22 f303 	lsr.w	r3, r2, r3
 800b7b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7ba:	e01e      	b.n	800b7fa <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b7bc:	4b67      	ldr	r3, [pc, #412]	@ (800b95c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b7c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b7c8:	d106      	bne.n	800b7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800b7ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b7d0:	d102      	bne.n	800b7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b7d2:	4b65      	ldr	r3, [pc, #404]	@ (800b968 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800b7d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7d6:	e010      	b.n	800b7fa <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b7d8:	4b60      	ldr	r3, [pc, #384]	@ (800b95c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b7e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b7e4:	d106      	bne.n	800b7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800b7e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b7ec:	d102      	bne.n	800b7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b7ee:	4b5f      	ldr	r3, [pc, #380]	@ (800b96c <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800b7f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7f2:	e002      	b.n	800b7fa <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b7f8:	e003      	b.n	800b802 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800b7fa:	e002      	b.n	800b802 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b800:	bf00      	nop
          }
        }
        break;
 800b802:	e2d6      	b.n	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800b804:	4b55      	ldr	r3, [pc, #340]	@ (800b95c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b80a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800b80e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b812:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b816:	d031      	beq.n	800b87c <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 800b818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b81a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b81e:	d866      	bhi.n	800b8ee <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800b820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b822:	2bc0      	cmp	r3, #192	@ 0xc0
 800b824:	d027      	beq.n	800b876 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800b826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b828:	2bc0      	cmp	r3, #192	@ 0xc0
 800b82a:	d860      	bhi.n	800b8ee <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800b82c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b82e:	2b80      	cmp	r3, #128	@ 0x80
 800b830:	d019      	beq.n	800b866 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800b832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b834:	2b80      	cmp	r3, #128	@ 0x80
 800b836:	d85a      	bhi.n	800b8ee <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800b838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d003      	beq.n	800b846 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800b83e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b840:	2b40      	cmp	r3, #64	@ 0x40
 800b842:	d008      	beq.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 800b844:	e053      	b.n	800b8ee <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b846:	f107 0320 	add.w	r3, r7, #32
 800b84a:	4618      	mov	r0, r3
 800b84c:	f7fd fb28 	bl	8008ea0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800b850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b852:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b854:	e04e      	b.n	800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b856:	f107 0314 	add.w	r3, r7, #20
 800b85a:	4618      	mov	r0, r3
 800b85c:	f7fd fc8a 	bl	8009174 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b864:	e046      	b.n	800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b866:	f107 0308 	add.w	r3, r7, #8
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7fd fdec 	bl	8009448 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b874:	e03e      	b.n	800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800b876:	4b3a      	ldr	r3, [pc, #232]	@ (800b960 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800b878:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b87a:	e03b      	b.n	800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b87c:	4b37      	ldr	r3, [pc, #220]	@ (800b95c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b87e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b882:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b886:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b888:	4b34      	ldr	r3, [pc, #208]	@ (800b95c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f003 0302 	and.w	r3, r3, #2
 800b890:	2b02      	cmp	r3, #2
 800b892:	d10c      	bne.n	800b8ae <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 800b894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b896:	2b00      	cmp	r3, #0
 800b898:	d109      	bne.n	800b8ae <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b89a:	4b30      	ldr	r3, [pc, #192]	@ (800b95c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	08db      	lsrs	r3, r3, #3
 800b8a0:	f003 0303 	and.w	r3, r3, #3
 800b8a4:	4a2f      	ldr	r2, [pc, #188]	@ (800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800b8a6:	fa22 f303 	lsr.w	r3, r2, r3
 800b8aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8ac:	e01e      	b.n	800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b8ae:	4b2b      	ldr	r3, [pc, #172]	@ (800b95c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b8b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b8ba:	d106      	bne.n	800b8ca <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 800b8bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b8c2:	d102      	bne.n	800b8ca <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b8c4:	4b28      	ldr	r3, [pc, #160]	@ (800b968 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800b8c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8c8:	e010      	b.n	800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b8ca:	4b24      	ldr	r3, [pc, #144]	@ (800b95c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b8d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b8d6:	d106      	bne.n	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 800b8d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b8de:	d102      	bne.n	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b8e0:	4b22      	ldr	r3, [pc, #136]	@ (800b96c <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800b8e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8e4:	e002      	b.n	800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b8ea:	e003      	b.n	800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 800b8ec:	e002      	b.n	800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b8f2:	bf00      	nop
          }
        }
        break;
 800b8f4:	e25d      	b.n	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800b8f6:	4b19      	ldr	r3, [pc, #100]	@ (800b95c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b8f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b8fc:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800b900:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800b902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b904:	2b00      	cmp	r3, #0
 800b906:	d103      	bne.n	800b910 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800b908:	f7fb fb14 	bl	8006f34 <HAL_RCC_GetPCLK2Freq>
 800b90c:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800b90e:	e250      	b.n	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800b910:	4b12      	ldr	r3, [pc, #72]	@ (800b95c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b918:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b91c:	d10b      	bne.n	800b936 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 800b91e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b920:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b924:	d107      	bne.n	800b936 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b926:	f107 0314 	add.w	r3, r7, #20
 800b92a:	4618      	mov	r0, r3
 800b92c:	f7fd fc22 	bl	8009174 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b930:	69bb      	ldr	r3, [r7, #24]
 800b932:	637b      	str	r3, [r7, #52]	@ 0x34
 800b934:	e04f      	b.n	800b9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800b936:	4b09      	ldr	r3, [pc, #36]	@ (800b95c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b93e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b942:	d115      	bne.n	800b970 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800b944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b946:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b94a:	d111      	bne.n	800b970 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b94c:	f107 0308 	add.w	r3, r7, #8
 800b950:	4618      	mov	r0, r3
 800b952:	f7fd fd79 	bl	8009448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	637b      	str	r3, [r7, #52]	@ 0x34
 800b95a:	e03c      	b.n	800b9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 800b95c:	44020c00 	.word	0x44020c00
 800b960:	00bb8000 	.word	0x00bb8000
 800b964:	03d09000 	.word	0x03d09000
 800b968:	003d0900 	.word	0x003d0900
 800b96c:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800b970:	4b94      	ldr	r3, [pc, #592]	@ (800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f003 0302 	and.w	r3, r3, #2
 800b978:	2b02      	cmp	r3, #2
 800b97a:	d10d      	bne.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 800b97c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b97e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800b982:	d109      	bne.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b984:	4b8f      	ldr	r3, [pc, #572]	@ (800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	08db      	lsrs	r3, r3, #3
 800b98a:	f003 0303 	and.w	r3, r3, #3
 800b98e:	4a8e      	ldr	r2, [pc, #568]	@ (800bbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800b990:	fa22 f303 	lsr.w	r3, r2, r3
 800b994:	637b      	str	r3, [r7, #52]	@ 0x34
 800b996:	e01e      	b.n	800b9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800b998:	4b8a      	ldr	r3, [pc, #552]	@ (800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b9a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b9a4:	d106      	bne.n	800b9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800b9a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b9ac:	d102      	bne.n	800b9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 800b9ae:	4b87      	ldr	r3, [pc, #540]	@ (800bbcc <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800b9b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9b2:	e010      	b.n	800b9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800b9b4:	4b83      	ldr	r3, [pc, #524]	@ (800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b9bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b9c0:	d106      	bne.n	800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800b9c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9c4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800b9c8:	d102      	bne.n	800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800b9ca:	4b81      	ldr	r3, [pc, #516]	@ (800bbd0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800b9cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9ce:	e002      	b.n	800b9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b9d4:	e1ed      	b.n	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b9d6:	e1ec      	b.n	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 800b9d8:	4b7a      	ldr	r3, [pc, #488]	@ (800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b9da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b9de:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b9e2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800b9e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d103      	bne.n	800b9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800b9ea:	f7fb fab9 	bl	8006f60 <HAL_RCC_GetPCLK3Freq>
 800b9ee:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800b9f0:	e1df      	b.n	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800b9f2:	4b74      	ldr	r3, [pc, #464]	@ (800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b9fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b9fe:	d10b      	bne.n	800ba18 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 800ba00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba06:	d107      	bne.n	800ba18 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba08:	f107 0314 	add.w	r3, r7, #20
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f7fd fbb1 	bl	8009174 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ba12:	69bb      	ldr	r3, [r7, #24]
 800ba14:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba16:	e045      	b.n	800baa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 800ba18:	4b6a      	ldr	r3, [pc, #424]	@ (800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ba20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba24:	d10b      	bne.n	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800ba26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ba2c:	d107      	bne.n	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba2e:	f107 0308 	add.w	r3, r7, #8
 800ba32:	4618      	mov	r0, r3
 800ba34:	f7fd fd08 	bl	8009448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba3c:	e032      	b.n	800baa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800ba3e:	4b61      	ldr	r3, [pc, #388]	@ (800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	f003 0302 	and.w	r3, r3, #2
 800ba46:	2b02      	cmp	r3, #2
 800ba48:	d10d      	bne.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 800ba4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba4c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ba50:	d109      	bne.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ba52:	4b5c      	ldr	r3, [pc, #368]	@ (800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	08db      	lsrs	r3, r3, #3
 800ba58:	f003 0303 	and.w	r3, r3, #3
 800ba5c:	4a5a      	ldr	r2, [pc, #360]	@ (800bbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800ba5e:	fa22 f303 	lsr.w	r3, r2, r3
 800ba62:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba64:	e01e      	b.n	800baa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800ba66:	4b57      	ldr	r3, [pc, #348]	@ (800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ba6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba72:	d106      	bne.n	800ba82 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 800ba74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ba7a:	d102      	bne.n	800ba82 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 800ba7c:	4b53      	ldr	r3, [pc, #332]	@ (800bbcc <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800ba7e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba80:	e010      	b.n	800baa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800ba82:	4b50      	ldr	r3, [pc, #320]	@ (800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba8e:	d106      	bne.n	800ba9e <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 800ba90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba92:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800ba96:	d102      	bne.n	800ba9e <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 800ba98:	4b4d      	ldr	r3, [pc, #308]	@ (800bbd0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800ba9a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba9c:	e002      	b.n	800baa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800baa2:	e186      	b.n	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800baa4:	e185      	b.n	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800baa6:	4b47      	ldr	r3, [pc, #284]	@ (800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800baa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800baac:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800bab0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800bab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d103      	bne.n	800bac0 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800bab8:	f7fb fa3c 	bl	8006f34 <HAL_RCC_GetPCLK2Freq>
 800babc:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800babe:	e178      	b.n	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 800bac0:	4b40      	ldr	r3, [pc, #256]	@ (800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bac8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bacc:	d10b      	bne.n	800bae6 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 800bace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bad0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bad4:	d107      	bne.n	800bae6 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bad6:	f107 0314 	add.w	r3, r7, #20
 800bada:	4618      	mov	r0, r3
 800badc:	f7fd fb4a 	bl	8009174 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bae0:	69bb      	ldr	r3, [r7, #24]
 800bae2:	637b      	str	r3, [r7, #52]	@ 0x34
 800bae4:	e045      	b.n	800bb72 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800bae6:	4b37      	ldr	r3, [pc, #220]	@ (800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800baee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800baf2:	d10b      	bne.n	800bb0c <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 800baf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baf6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bafa:	d107      	bne.n	800bb0c <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bafc:	f107 0308 	add.w	r3, r7, #8
 800bb00:	4618      	mov	r0, r3
 800bb02:	f7fd fca1 	bl	8009448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb0a:	e032      	b.n	800bb72 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 800bb0c:	4b2d      	ldr	r3, [pc, #180]	@ (800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f003 0302 	and.w	r3, r3, #2
 800bb14:	2b02      	cmp	r3, #2
 800bb16:	d10d      	bne.n	800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 800bb18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb1a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800bb1e:	d109      	bne.n	800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bb20:	4b28      	ldr	r3, [pc, #160]	@ (800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	08db      	lsrs	r3, r3, #3
 800bb26:	f003 0303 	and.w	r3, r3, #3
 800bb2a:	4a27      	ldr	r2, [pc, #156]	@ (800bbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800bb2c:	fa22 f303 	lsr.w	r3, r2, r3
 800bb30:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb32:	e01e      	b.n	800bb72 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800bb34:	4b23      	ldr	r3, [pc, #140]	@ (800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bb3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bb40:	d106      	bne.n	800bb50 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800bb42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bb48:	d102      	bne.n	800bb50 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800bb4a:	4b20      	ldr	r3, [pc, #128]	@ (800bbcc <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800bb4c:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb4e:	e010      	b.n	800bb72 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 800bb50:	4b1c      	ldr	r3, [pc, #112]	@ (800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bb5c:	d106      	bne.n	800bb6c <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 800bb5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb60:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800bb64:	d102      	bne.n	800bb6c <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800bb66:	4b1a      	ldr	r3, [pc, #104]	@ (800bbd0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800bb68:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb6a:	e002      	b.n	800bb72 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bb70:	e11f      	b.n	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bb72:	e11e      	b.n	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800bb74:	4b13      	ldr	r3, [pc, #76]	@ (800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bb76:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bb7a:	f003 0303 	and.w	r3, r3, #3
 800bb7e:	633b      	str	r3, [r7, #48]	@ 0x30
 800bb80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb82:	2b03      	cmp	r3, #3
 800bb84:	d85f      	bhi.n	800bc46 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800bb86:	a201      	add	r2, pc, #4	@ (adr r2, 800bb8c <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 800bb88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb8c:	0800bb9d 	.word	0x0800bb9d
 800bb90:	0800bba5 	.word	0x0800bba5
 800bb94:	0800bbb5 	.word	0x0800bbb5
 800bb98:	0800bbd5 	.word	0x0800bbd5

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800bb9c:	f7fb f998 	bl	8006ed0 <HAL_RCC_GetHCLKFreq>
 800bba0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800bba2:	e053      	b.n	800bc4c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bba4:	f107 0320 	add.w	r3, r7, #32
 800bba8:	4618      	mov	r0, r3
 800bbaa:	f7fd f979 	bl	8008ea0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800bbae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbb0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bbb2:	e04b      	b.n	800bc4c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bbb4:	f107 0314 	add.w	r3, r7, #20
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f7fd fadb 	bl	8009174 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800bbbe:	69fb      	ldr	r3, [r7, #28]
 800bbc0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bbc2:	e043      	b.n	800bc4c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800bbc4:	44020c00 	.word	0x44020c00
 800bbc8:	03d09000 	.word	0x03d09000
 800bbcc:	003d0900 	.word	0x003d0900
 800bbd0:	017d7840 	.word	0x017d7840
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bbd4:	4b79      	ldr	r3, [pc, #484]	@ (800bdbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800bbd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bbda:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800bbde:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bbe0:	4b76      	ldr	r3, [pc, #472]	@ (800bdbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f003 0302 	and.w	r3, r3, #2
 800bbe8:	2b02      	cmp	r3, #2
 800bbea:	d10c      	bne.n	800bc06 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 800bbec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d109      	bne.n	800bc06 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bbf2:	4b72      	ldr	r3, [pc, #456]	@ (800bdbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	08db      	lsrs	r3, r3, #3
 800bbf8:	f003 0303 	and.w	r3, r3, #3
 800bbfc:	4a70      	ldr	r2, [pc, #448]	@ (800bdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 800bbfe:	fa22 f303 	lsr.w	r3, r2, r3
 800bc02:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc04:	e01e      	b.n	800bc44 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bc06:	4b6d      	ldr	r3, [pc, #436]	@ (800bdbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bc0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc12:	d106      	bne.n	800bc22 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 800bc14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc1a:	d102      	bne.n	800bc22 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800bc1c:	4b69      	ldr	r3, [pc, #420]	@ (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 800bc1e:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc20:	e010      	b.n	800bc44 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bc22:	4b66      	ldr	r3, [pc, #408]	@ (800bdbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bc2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bc2e:	d106      	bne.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 800bc30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc32:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bc36:	d102      	bne.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800bc38:	4b63      	ldr	r3, [pc, #396]	@ (800bdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800bc3a:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc3c:	e002      	b.n	800bc44 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800bc42:	e003      	b.n	800bc4c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800bc44:	e002      	b.n	800bc4c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800bc46:	2300      	movs	r3, #0
 800bc48:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bc4a:	bf00      	nop
          }
        }
        break;
 800bc4c:	e0b1      	b.n	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800bc4e:	4b5b      	ldr	r3, [pc, #364]	@ (800bdbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800bc50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bc54:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800bc58:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800bc5a:	4b58      	ldr	r3, [pc, #352]	@ (800bdbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800bc5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bc60:	f003 0302 	and.w	r3, r3, #2
 800bc64:	2b02      	cmp	r3, #2
 800bc66:	d106      	bne.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800bc68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d103      	bne.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 800bc6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bc72:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc74:	e01f      	b.n	800bcb6 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800bc76:	4b51      	ldr	r3, [pc, #324]	@ (800bdbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800bc78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bc7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bc80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bc84:	d106      	bne.n	800bc94 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800bc86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc88:	2b40      	cmp	r3, #64	@ 0x40
 800bc8a:	d103      	bne.n	800bc94 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 800bc8c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800bc90:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc92:	e010      	b.n	800bcb6 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800bc94:	4b49      	ldr	r3, [pc, #292]	@ (800bdbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bc9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bca0:	d106      	bne.n	800bcb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 800bca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bca4:	2b80      	cmp	r3, #128	@ 0x80
 800bca6:	d103      	bne.n	800bcb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800bca8:	f248 0312 	movw	r3, #32786	@ 0x8012
 800bcac:	637b      	str	r3, [r7, #52]	@ 0x34
 800bcae:	e002      	b.n	800bcb6 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800bcb4:	e07d      	b.n	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bcb6:	e07c      	b.n	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800bcb8:	4b40      	ldr	r3, [pc, #256]	@ (800bdbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800bcba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bcbe:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800bcc2:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800bcc4:	4b3d      	ldr	r3, [pc, #244]	@ (800bdbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bccc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bcd0:	d105      	bne.n	800bcde <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800bcd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d102      	bne.n	800bcde <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 800bcd8:	4b3c      	ldr	r3, [pc, #240]	@ (800bdcc <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800bcda:	637b      	str	r3, [r7, #52]	@ 0x34
 800bcdc:	e031      	b.n	800bd42 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800bcde:	4b37      	ldr	r3, [pc, #220]	@ (800bdbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bce6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bcea:	d10a      	bne.n	800bd02 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 800bcec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcee:	2b10      	cmp	r3, #16
 800bcf0:	d107      	bne.n	800bd02 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bcf2:	f107 0320 	add.w	r3, r7, #32
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7fd f8d2 	bl	8008ea0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bcfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcfe:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd00:	e01f      	b.n	800bd42 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800bd02:	4b2e      	ldr	r3, [pc, #184]	@ (800bdbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800bd04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bd08:	f003 0302 	and.w	r3, r3, #2
 800bd0c:	2b02      	cmp	r3, #2
 800bd0e:	d106      	bne.n	800bd1e <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 800bd10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd12:	2b20      	cmp	r3, #32
 800bd14:	d103      	bne.n	800bd1e <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800bd16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bd1a:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd1c:	e011      	b.n	800bd42 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800bd1e:	4b27      	ldr	r3, [pc, #156]	@ (800bdbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800bd20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bd24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bd28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bd2c:	d106      	bne.n	800bd3c <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800bd2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd30:	2b30      	cmp	r3, #48	@ 0x30
 800bd32:	d103      	bne.n	800bd3c <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800bd34:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800bd38:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd3a:	e002      	b.n	800bd42 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800bd40:	e037      	b.n	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bd42:	e036      	b.n	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800bd44:	4b1d      	ldr	r3, [pc, #116]	@ (800bdbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800bd46:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bd4a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800bd4e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800bd50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd52:	2b10      	cmp	r3, #16
 800bd54:	d107      	bne.n	800bd66 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bd56:	f107 0320 	add.w	r3, r7, #32
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f7fd f8a0 	bl	8008ea0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bd60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd62:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800bd64:	e025      	b.n	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800bd66:	4b15      	ldr	r3, [pc, #84]	@ (800bdbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bd6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bd72:	d10a      	bne.n	800bd8a <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 800bd74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd76:	2b20      	cmp	r3, #32
 800bd78:	d107      	bne.n	800bd8a <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd7a:	f107 0308 	add.w	r3, r7, #8
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f7fd fb62 	bl	8009448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd88:	e00f      	b.n	800bdaa <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800bd8a:	4b0c      	ldr	r3, [pc, #48]	@ (800bdbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bd92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bd96:	d105      	bne.n	800bda4 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 800bd98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd9a:	2b30      	cmp	r3, #48	@ 0x30
 800bd9c:	d102      	bne.n	800bda4 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800bd9e:	4b0b      	ldr	r3, [pc, #44]	@ (800bdcc <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800bda0:	637b      	str	r3, [r7, #52]	@ 0x34
 800bda2:	e002      	b.n	800bdaa <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800bda4:	2300      	movs	r3, #0
 800bda6:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 800bda8:	e003      	b.n	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bdaa:	e002      	b.n	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 800bdac:	2300      	movs	r3, #0
 800bdae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bdb0:	bf00      	nop
        }
        break;
#endif /* RCC_CCIPR4_ETHCLKSEL */
    }
  }
  return (frequency);
 800bdb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	373c      	adds	r7, #60	@ 0x3c
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd90      	pop	{r4, r7, pc}
 800bdbc:	44020c00 	.word	0x44020c00
 800bdc0:	03d09000 	.word	0x03d09000
 800bdc4:	003d0900 	.word	0x003d0900
 800bdc8:	017d7840 	.word	0x017d7840
 800bdcc:	02dc6c00 	.word	0x02dc6c00

0800bdd0 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b084      	sub	sp, #16
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800bdd8:	4b48      	ldr	r3, [pc, #288]	@ (800befc <RCCEx_PLL2_Config+0x12c>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	4a47      	ldr	r2, [pc, #284]	@ (800befc <RCCEx_PLL2_Config+0x12c>)
 800bdde:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bde2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bde4:	f7f8 fe38 	bl	8004a58 <HAL_GetTick>
 800bde8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bdea:	e008      	b.n	800bdfe <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bdec:	f7f8 fe34 	bl	8004a58 <HAL_GetTick>
 800bdf0:	4602      	mov	r2, r0
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	1ad3      	subs	r3, r2, r3
 800bdf6:	2b02      	cmp	r3, #2
 800bdf8:	d901      	bls.n	800bdfe <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800bdfa:	2303      	movs	r3, #3
 800bdfc:	e07a      	b.n	800bef4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bdfe:	4b3f      	ldr	r3, [pc, #252]	@ (800befc <RCCEx_PLL2_Config+0x12c>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800be06:	2b00      	cmp	r3, #0
 800be08:	d1f0      	bne.n	800bdec <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800be0a:	4b3c      	ldr	r3, [pc, #240]	@ (800befc <RCCEx_PLL2_Config+0x12c>)
 800be0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be0e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800be12:	f023 0303 	bic.w	r3, r3, #3
 800be16:	687a      	ldr	r2, [r7, #4]
 800be18:	6811      	ldr	r1, [r2, #0]
 800be1a:	687a      	ldr	r2, [r7, #4]
 800be1c:	6852      	ldr	r2, [r2, #4]
 800be1e:	0212      	lsls	r2, r2, #8
 800be20:	430a      	orrs	r2, r1
 800be22:	4936      	ldr	r1, [pc, #216]	@ (800befc <RCCEx_PLL2_Config+0x12c>)
 800be24:	4313      	orrs	r3, r2
 800be26:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	689b      	ldr	r3, [r3, #8]
 800be2c:	3b01      	subs	r3, #1
 800be2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	68db      	ldr	r3, [r3, #12]
 800be36:	3b01      	subs	r3, #1
 800be38:	025b      	lsls	r3, r3, #9
 800be3a:	b29b      	uxth	r3, r3
 800be3c:	431a      	orrs	r2, r3
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	691b      	ldr	r3, [r3, #16]
 800be42:	3b01      	subs	r3, #1
 800be44:	041b      	lsls	r3, r3, #16
 800be46:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800be4a:	431a      	orrs	r2, r3
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	695b      	ldr	r3, [r3, #20]
 800be50:	3b01      	subs	r3, #1
 800be52:	061b      	lsls	r3, r3, #24
 800be54:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800be58:	4928      	ldr	r1, [pc, #160]	@ (800befc <RCCEx_PLL2_Config+0x12c>)
 800be5a:	4313      	orrs	r3, r2
 800be5c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800be5e:	4b27      	ldr	r3, [pc, #156]	@ (800befc <RCCEx_PLL2_Config+0x12c>)
 800be60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be62:	f023 020c 	bic.w	r2, r3, #12
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	699b      	ldr	r3, [r3, #24]
 800be6a:	4924      	ldr	r1, [pc, #144]	@ (800befc <RCCEx_PLL2_Config+0x12c>)
 800be6c:	4313      	orrs	r3, r2
 800be6e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800be70:	4b22      	ldr	r3, [pc, #136]	@ (800befc <RCCEx_PLL2_Config+0x12c>)
 800be72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be74:	f023 0220 	bic.w	r2, r3, #32
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	69db      	ldr	r3, [r3, #28]
 800be7c:	491f      	ldr	r1, [pc, #124]	@ (800befc <RCCEx_PLL2_Config+0x12c>)
 800be7e:	4313      	orrs	r3, r2
 800be80:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800be82:	4b1e      	ldr	r3, [pc, #120]	@ (800befc <RCCEx_PLL2_Config+0x12c>)
 800be84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be8a:	491c      	ldr	r1, [pc, #112]	@ (800befc <RCCEx_PLL2_Config+0x12c>)
 800be8c:	4313      	orrs	r3, r2
 800be8e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800be90:	4b1a      	ldr	r3, [pc, #104]	@ (800befc <RCCEx_PLL2_Config+0x12c>)
 800be92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be94:	4a19      	ldr	r2, [pc, #100]	@ (800befc <RCCEx_PLL2_Config+0x12c>)
 800be96:	f023 0310 	bic.w	r3, r3, #16
 800be9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800be9c:	4b17      	ldr	r3, [pc, #92]	@ (800befc <RCCEx_PLL2_Config+0x12c>)
 800be9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bea0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bea4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800bea8:	687a      	ldr	r2, [r7, #4]
 800beaa:	6a12      	ldr	r2, [r2, #32]
 800beac:	00d2      	lsls	r2, r2, #3
 800beae:	4913      	ldr	r1, [pc, #76]	@ (800befc <RCCEx_PLL2_Config+0x12c>)
 800beb0:	4313      	orrs	r3, r2
 800beb2:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800beb4:	4b11      	ldr	r3, [pc, #68]	@ (800befc <RCCEx_PLL2_Config+0x12c>)
 800beb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800beb8:	4a10      	ldr	r2, [pc, #64]	@ (800befc <RCCEx_PLL2_Config+0x12c>)
 800beba:	f043 0310 	orr.w	r3, r3, #16
 800bebe:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800bec0:	4b0e      	ldr	r3, [pc, #56]	@ (800befc <RCCEx_PLL2_Config+0x12c>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	4a0d      	ldr	r2, [pc, #52]	@ (800befc <RCCEx_PLL2_Config+0x12c>)
 800bec6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800beca:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800becc:	f7f8 fdc4 	bl	8004a58 <HAL_GetTick>
 800bed0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bed2:	e008      	b.n	800bee6 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bed4:	f7f8 fdc0 	bl	8004a58 <HAL_GetTick>
 800bed8:	4602      	mov	r2, r0
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	1ad3      	subs	r3, r2, r3
 800bede:	2b02      	cmp	r3, #2
 800bee0:	d901      	bls.n	800bee6 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800bee2:	2303      	movs	r3, #3
 800bee4:	e006      	b.n	800bef4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bee6:	4b05      	ldr	r3, [pc, #20]	@ (800befc <RCCEx_PLL2_Config+0x12c>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d0f0      	beq.n	800bed4 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800bef2:	2300      	movs	r3, #0

}
 800bef4:	4618      	mov	r0, r3
 800bef6:	3710      	adds	r7, #16
 800bef8:	46bd      	mov	sp, r7
 800befa:	bd80      	pop	{r7, pc}
 800befc:	44020c00 	.word	0x44020c00

0800bf00 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b084      	sub	sp, #16
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800bf08:	4b48      	ldr	r3, [pc, #288]	@ (800c02c <RCCEx_PLL3_Config+0x12c>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	4a47      	ldr	r2, [pc, #284]	@ (800c02c <RCCEx_PLL3_Config+0x12c>)
 800bf0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bf12:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bf14:	f7f8 fda0 	bl	8004a58 <HAL_GetTick>
 800bf18:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bf1a:	e008      	b.n	800bf2e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bf1c:	f7f8 fd9c 	bl	8004a58 <HAL_GetTick>
 800bf20:	4602      	mov	r2, r0
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	1ad3      	subs	r3, r2, r3
 800bf26:	2b02      	cmp	r3, #2
 800bf28:	d901      	bls.n	800bf2e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800bf2a:	2303      	movs	r3, #3
 800bf2c:	e07a      	b.n	800c024 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bf2e:	4b3f      	ldr	r3, [pc, #252]	@ (800c02c <RCCEx_PLL3_Config+0x12c>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d1f0      	bne.n	800bf1c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800bf3a:	4b3c      	ldr	r3, [pc, #240]	@ (800c02c <RCCEx_PLL3_Config+0x12c>)
 800bf3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf3e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800bf42:	f023 0303 	bic.w	r3, r3, #3
 800bf46:	687a      	ldr	r2, [r7, #4]
 800bf48:	6811      	ldr	r1, [r2, #0]
 800bf4a:	687a      	ldr	r2, [r7, #4]
 800bf4c:	6852      	ldr	r2, [r2, #4]
 800bf4e:	0212      	lsls	r2, r2, #8
 800bf50:	430a      	orrs	r2, r1
 800bf52:	4936      	ldr	r1, [pc, #216]	@ (800c02c <RCCEx_PLL3_Config+0x12c>)
 800bf54:	4313      	orrs	r3, r2
 800bf56:	630b      	str	r3, [r1, #48]	@ 0x30
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	689b      	ldr	r3, [r3, #8]
 800bf5c:	3b01      	subs	r3, #1
 800bf5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	68db      	ldr	r3, [r3, #12]
 800bf66:	3b01      	subs	r3, #1
 800bf68:	025b      	lsls	r3, r3, #9
 800bf6a:	b29b      	uxth	r3, r3
 800bf6c:	431a      	orrs	r2, r3
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	691b      	ldr	r3, [r3, #16]
 800bf72:	3b01      	subs	r3, #1
 800bf74:	041b      	lsls	r3, r3, #16
 800bf76:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bf7a:	431a      	orrs	r2, r3
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	695b      	ldr	r3, [r3, #20]
 800bf80:	3b01      	subs	r3, #1
 800bf82:	061b      	lsls	r3, r3, #24
 800bf84:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bf88:	4928      	ldr	r1, [pc, #160]	@ (800c02c <RCCEx_PLL3_Config+0x12c>)
 800bf8a:	4313      	orrs	r3, r2
 800bf8c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bf8e:	4b27      	ldr	r3, [pc, #156]	@ (800c02c <RCCEx_PLL3_Config+0x12c>)
 800bf90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf92:	f023 020c 	bic.w	r2, r3, #12
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	699b      	ldr	r3, [r3, #24]
 800bf9a:	4924      	ldr	r1, [pc, #144]	@ (800c02c <RCCEx_PLL3_Config+0x12c>)
 800bf9c:	4313      	orrs	r3, r2
 800bf9e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800bfa0:	4b22      	ldr	r3, [pc, #136]	@ (800c02c <RCCEx_PLL3_Config+0x12c>)
 800bfa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfa4:	f023 0220 	bic.w	r2, r3, #32
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	69db      	ldr	r3, [r3, #28]
 800bfac:	491f      	ldr	r1, [pc, #124]	@ (800c02c <RCCEx_PLL3_Config+0x12c>)
 800bfae:	4313      	orrs	r3, r2
 800bfb0:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800bfb2:	4b1e      	ldr	r3, [pc, #120]	@ (800c02c <RCCEx_PLL3_Config+0x12c>)
 800bfb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfba:	491c      	ldr	r1, [pc, #112]	@ (800c02c <RCCEx_PLL3_Config+0x12c>)
 800bfbc:	4313      	orrs	r3, r2
 800bfbe:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800bfc0:	4b1a      	ldr	r3, [pc, #104]	@ (800c02c <RCCEx_PLL3_Config+0x12c>)
 800bfc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfc4:	4a19      	ldr	r2, [pc, #100]	@ (800c02c <RCCEx_PLL3_Config+0x12c>)
 800bfc6:	f023 0310 	bic.w	r3, r3, #16
 800bfca:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800bfcc:	4b17      	ldr	r3, [pc, #92]	@ (800c02c <RCCEx_PLL3_Config+0x12c>)
 800bfce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bfd0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bfd4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800bfd8:	687a      	ldr	r2, [r7, #4]
 800bfda:	6a12      	ldr	r2, [r2, #32]
 800bfdc:	00d2      	lsls	r2, r2, #3
 800bfde:	4913      	ldr	r1, [pc, #76]	@ (800c02c <RCCEx_PLL3_Config+0x12c>)
 800bfe0:	4313      	orrs	r3, r2
 800bfe2:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800bfe4:	4b11      	ldr	r3, [pc, #68]	@ (800c02c <RCCEx_PLL3_Config+0x12c>)
 800bfe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfe8:	4a10      	ldr	r2, [pc, #64]	@ (800c02c <RCCEx_PLL3_Config+0x12c>)
 800bfea:	f043 0310 	orr.w	r3, r3, #16
 800bfee:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800bff0:	4b0e      	ldr	r3, [pc, #56]	@ (800c02c <RCCEx_PLL3_Config+0x12c>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	4a0d      	ldr	r2, [pc, #52]	@ (800c02c <RCCEx_PLL3_Config+0x12c>)
 800bff6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bffa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bffc:	f7f8 fd2c 	bl	8004a58 <HAL_GetTick>
 800c000:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c002:	e008      	b.n	800c016 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c004:	f7f8 fd28 	bl	8004a58 <HAL_GetTick>
 800c008:	4602      	mov	r2, r0
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	1ad3      	subs	r3, r2, r3
 800c00e:	2b02      	cmp	r3, #2
 800c010:	d901      	bls.n	800c016 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800c012:	2303      	movs	r3, #3
 800c014:	e006      	b.n	800c024 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c016:	4b05      	ldr	r3, [pc, #20]	@ (800c02c <RCCEx_PLL3_Config+0x12c>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d0f0      	beq.n	800c004 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800c022:	2300      	movs	r3, #0
}
 800c024:	4618      	mov	r0, r3
 800c026:	3710      	adds	r7, #16
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}
 800c02c:	44020c00 	.word	0x44020c00

0800c030 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b084      	sub	sp, #16
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d101      	bne.n	800c042 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c03e:	2301      	movs	r3, #1
 800c040:	e162      	b.n	800c308 <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	4a70      	ldr	r2, [pc, #448]	@ (800c208 <HAL_SPI_Init+0x1d8>)
 800c048:	4293      	cmp	r3, r2
 800c04a:	d018      	beq.n	800c07e <HAL_SPI_Init+0x4e>
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	4a6e      	ldr	r2, [pc, #440]	@ (800c20c <HAL_SPI_Init+0x1dc>)
 800c052:	4293      	cmp	r3, r2
 800c054:	d013      	beq.n	800c07e <HAL_SPI_Init+0x4e>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	4a6d      	ldr	r2, [pc, #436]	@ (800c210 <HAL_SPI_Init+0x1e0>)
 800c05c:	4293      	cmp	r3, r2
 800c05e:	d00e      	beq.n	800c07e <HAL_SPI_Init+0x4e>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	4a6b      	ldr	r2, [pc, #428]	@ (800c214 <HAL_SPI_Init+0x1e4>)
 800c066:	4293      	cmp	r3, r2
 800c068:	d009      	beq.n	800c07e <HAL_SPI_Init+0x4e>
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	4a6a      	ldr	r2, [pc, #424]	@ (800c218 <HAL_SPI_Init+0x1e8>)
 800c070:	4293      	cmp	r3, r2
 800c072:	d004      	beq.n	800c07e <HAL_SPI_Init+0x4e>
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	4a68      	ldr	r2, [pc, #416]	@ (800c21c <HAL_SPI_Init+0x1ec>)
 800c07a:	4293      	cmp	r3, r2
 800c07c:	e000      	b.n	800c080 <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800c07e:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2200      	movs	r2, #0
 800c084:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	4a5f      	ldr	r2, [pc, #380]	@ (800c208 <HAL_SPI_Init+0x1d8>)
 800c08c:	4293      	cmp	r3, r2
 800c08e:	d018      	beq.n	800c0c2 <HAL_SPI_Init+0x92>
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	4a5d      	ldr	r2, [pc, #372]	@ (800c20c <HAL_SPI_Init+0x1dc>)
 800c096:	4293      	cmp	r3, r2
 800c098:	d013      	beq.n	800c0c2 <HAL_SPI_Init+0x92>
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	4a5c      	ldr	r2, [pc, #368]	@ (800c210 <HAL_SPI_Init+0x1e0>)
 800c0a0:	4293      	cmp	r3, r2
 800c0a2:	d00e      	beq.n	800c0c2 <HAL_SPI_Init+0x92>
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	4a5a      	ldr	r2, [pc, #360]	@ (800c214 <HAL_SPI_Init+0x1e4>)
 800c0aa:	4293      	cmp	r3, r2
 800c0ac:	d009      	beq.n	800c0c2 <HAL_SPI_Init+0x92>
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	4a59      	ldr	r2, [pc, #356]	@ (800c218 <HAL_SPI_Init+0x1e8>)
 800c0b4:	4293      	cmp	r3, r2
 800c0b6:	d004      	beq.n	800c0c2 <HAL_SPI_Init+0x92>
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	4a57      	ldr	r2, [pc, #348]	@ (800c21c <HAL_SPI_Init+0x1ec>)
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	d105      	bne.n	800c0ce <HAL_SPI_Init+0x9e>
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	68db      	ldr	r3, [r3, #12]
 800c0c6:	2b0f      	cmp	r3, #15
 800c0c8:	d901      	bls.n	800c0ce <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	e11c      	b.n	800c308 <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f000 fdac 	bl	800cc2c <SPI_GetPacketSize>
 800c0d4:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	4a4b      	ldr	r2, [pc, #300]	@ (800c208 <HAL_SPI_Init+0x1d8>)
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	d018      	beq.n	800c112 <HAL_SPI_Init+0xe2>
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	4a49      	ldr	r2, [pc, #292]	@ (800c20c <HAL_SPI_Init+0x1dc>)
 800c0e6:	4293      	cmp	r3, r2
 800c0e8:	d013      	beq.n	800c112 <HAL_SPI_Init+0xe2>
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	4a48      	ldr	r2, [pc, #288]	@ (800c210 <HAL_SPI_Init+0x1e0>)
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	d00e      	beq.n	800c112 <HAL_SPI_Init+0xe2>
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	4a46      	ldr	r2, [pc, #280]	@ (800c214 <HAL_SPI_Init+0x1e4>)
 800c0fa:	4293      	cmp	r3, r2
 800c0fc:	d009      	beq.n	800c112 <HAL_SPI_Init+0xe2>
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	4a45      	ldr	r2, [pc, #276]	@ (800c218 <HAL_SPI_Init+0x1e8>)
 800c104:	4293      	cmp	r3, r2
 800c106:	d004      	beq.n	800c112 <HAL_SPI_Init+0xe2>
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4a43      	ldr	r2, [pc, #268]	@ (800c21c <HAL_SPI_Init+0x1ec>)
 800c10e:	4293      	cmp	r3, r2
 800c110:	d102      	bne.n	800c118 <HAL_SPI_Init+0xe8>
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	2b08      	cmp	r3, #8
 800c116:	d820      	bhi.n	800c15a <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c11c:	4a40      	ldr	r2, [pc, #256]	@ (800c220 <HAL_SPI_Init+0x1f0>)
 800c11e:	4293      	cmp	r3, r2
 800c120:	d018      	beq.n	800c154 <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	4a3f      	ldr	r2, [pc, #252]	@ (800c224 <HAL_SPI_Init+0x1f4>)
 800c128:	4293      	cmp	r3, r2
 800c12a:	d013      	beq.n	800c154 <HAL_SPI_Init+0x124>
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	4a3d      	ldr	r2, [pc, #244]	@ (800c228 <HAL_SPI_Init+0x1f8>)
 800c132:	4293      	cmp	r3, r2
 800c134:	d00e      	beq.n	800c154 <HAL_SPI_Init+0x124>
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	4a3c      	ldr	r2, [pc, #240]	@ (800c22c <HAL_SPI_Init+0x1fc>)
 800c13c:	4293      	cmp	r3, r2
 800c13e:	d009      	beq.n	800c154 <HAL_SPI_Init+0x124>
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	4a3a      	ldr	r2, [pc, #232]	@ (800c230 <HAL_SPI_Init+0x200>)
 800c146:	4293      	cmp	r3, r2
 800c148:	d004      	beq.n	800c154 <HAL_SPI_Init+0x124>
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	4a39      	ldr	r2, [pc, #228]	@ (800c234 <HAL_SPI_Init+0x204>)
 800c150:	4293      	cmp	r3, r2
 800c152:	d104      	bne.n	800c15e <HAL_SPI_Init+0x12e>
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2b10      	cmp	r3, #16
 800c158:	d901      	bls.n	800c15e <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 800c15a:	2301      	movs	r3, #1
 800c15c:	e0d4      	b.n	800c308 <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800c164:	b2db      	uxtb	r3, r3
 800c166:	2b00      	cmp	r3, #0
 800c168:	d106      	bne.n	800c178 <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2200      	movs	r2, #0
 800c16e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f7f7 fdd6 	bl	8003d24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2202      	movs	r2, #2
 800c17c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	681a      	ldr	r2, [r3, #0]
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	f022 0201 	bic.w	r2, r2, #1
 800c18e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	689b      	ldr	r3, [r3, #8]
 800c196:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800c19a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	699b      	ldr	r3, [r3, #24]
 800c1a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c1a4:	d119      	bne.n	800c1da <HAL_SPI_Init+0x1aa>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	685b      	ldr	r3, [r3, #4]
 800c1aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c1ae:	d103      	bne.n	800c1b8 <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d008      	beq.n	800c1ca <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d10c      	bne.n	800c1da <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c1c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c1c8:	d107      	bne.n	800c1da <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	681a      	ldr	r2, [r3, #0]
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c1d8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	685b      	ldr	r3, [r3, #4]
 800c1de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d028      	beq.n	800c238 <HAL_SPI_Init+0x208>
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	68db      	ldr	r3, [r3, #12]
 800c1ea:	2b06      	cmp	r3, #6
 800c1ec:	d924      	bls.n	800c238 <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	430a      	orrs	r2, r1
 800c202:	601a      	str	r2, [r3, #0]
 800c204:	e020      	b.n	800c248 <HAL_SPI_Init+0x218>
 800c206:	bf00      	nop
 800c208:	40014c00 	.word	0x40014c00
 800c20c:	50014c00 	.word	0x50014c00
 800c210:	44002000 	.word	0x44002000
 800c214:	54002000 	.word	0x54002000
 800c218:	40015000 	.word	0x40015000
 800c21c:	50015000 	.word	0x50015000
 800c220:	40013000 	.word	0x40013000
 800c224:	50013000 	.word	0x50013000
 800c228:	40003800 	.word	0x40003800
 800c22c:	50003800 	.word	0x50003800
 800c230:	40003c00 	.word	0x40003c00
 800c234:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	681a      	ldr	r2, [r3, #0]
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c246:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	69da      	ldr	r2, [r3, #28]
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c250:	431a      	orrs	r2, r3
 800c252:	68bb      	ldr	r3, [r7, #8]
 800c254:	431a      	orrs	r2, r3
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c25a:	ea42 0103 	orr.w	r1, r2, r3
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	68da      	ldr	r2, [r3, #12]
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	430a      	orrs	r2, r1
 800c268:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c272:	431a      	orrs	r2, r3
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c278:	431a      	orrs	r2, r3
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	699b      	ldr	r3, [r3, #24]
 800c27e:	431a      	orrs	r2, r3
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	691b      	ldr	r3, [r3, #16]
 800c284:	431a      	orrs	r2, r3
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	695b      	ldr	r3, [r3, #20]
 800c28a:	431a      	orrs	r2, r3
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	6a1b      	ldr	r3, [r3, #32]
 800c290:	431a      	orrs	r2, r3
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	685b      	ldr	r3, [r3, #4]
 800c296:	431a      	orrs	r2, r3
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c29c:	431a      	orrs	r2, r3
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	689b      	ldr	r3, [r3, #8]
 800c2a2:	431a      	orrs	r2, r3
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c2a8:	431a      	orrs	r2, r3
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c2ae:	431a      	orrs	r2, r3
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c2b4:	ea42 0103 	orr.w	r1, r2, r3
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	430a      	orrs	r2, r1
 800c2c2:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f022 0201 	bic.w	r2, r2, #1
 800c2d2:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	685b      	ldr	r3, [r3, #4]
 800c2d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d00a      	beq.n	800c2f6 <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	68db      	ldr	r3, [r3, #12]
 800c2e6:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	430a      	orrs	r2, r1
 800c2f4:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2201      	movs	r2, #1
 800c302:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800c306:	2300      	movs	r3, #0
}
 800c308:	4618      	mov	r0, r3
 800c30a:	3710      	adds	r7, #16
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}

0800c310 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b088      	sub	sp, #32
 800c314:	af02      	add	r7, sp, #8
 800c316:	60f8      	str	r0, [r7, #12]
 800c318:	60b9      	str	r1, [r7, #8]
 800c31a:	603b      	str	r3, [r7, #0]
 800c31c:	4613      	mov	r3, r2
 800c31e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	3320      	adds	r3, #32
 800c326:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c328:	f7f8 fb96 	bl	8004a58 <HAL_GetTick>
 800c32c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800c334:	b2db      	uxtb	r3, r3
 800c336:	2b01      	cmp	r3, #1
 800c338:	d001      	beq.n	800c33e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800c33a:	2302      	movs	r3, #2
 800c33c:	e1f9      	b.n	800c732 <HAL_SPI_Transmit+0x422>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d002      	beq.n	800c34a <HAL_SPI_Transmit+0x3a>
 800c344:	88fb      	ldrh	r3, [r7, #6]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d101      	bne.n	800c34e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800c34a:	2301      	movs	r3, #1
 800c34c:	e1f1      	b.n	800c732 <HAL_SPI_Transmit+0x422>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800c354:	2b01      	cmp	r3, #1
 800c356:	d101      	bne.n	800c35c <HAL_SPI_Transmit+0x4c>
 800c358:	2302      	movs	r3, #2
 800c35a:	e1ea      	b.n	800c732 <HAL_SPI_Transmit+0x422>
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	2201      	movs	r2, #1
 800c360:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	2203      	movs	r2, #3
 800c368:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	2200      	movs	r2, #0
 800c370:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	68ba      	ldr	r2, [r7, #8]
 800c378:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	88fa      	ldrh	r2, [r7, #6]
 800c37e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	88fa      	ldrh	r2, [r7, #6]
 800c386:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	2200      	movs	r2, #0
 800c38e:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	2200      	movs	r2, #0
 800c394:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	2200      	movs	r2, #0
 800c39c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	689b      	ldr	r3, [r3, #8]
 800c3b0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800c3b4:	d108      	bne.n	800c3c8 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	681a      	ldr	r2, [r3, #0]
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c3c4:	601a      	str	r2, [r3, #0]
 800c3c6:	e009      	b.n	800c3dc <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	68db      	ldr	r3, [r3, #12]
 800c3ce:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800c3da:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	685b      	ldr	r3, [r3, #4]
 800c3e2:	0c1b      	lsrs	r3, r3, #16
 800c3e4:	041b      	lsls	r3, r3, #16
 800c3e6:	88f9      	ldrh	r1, [r7, #6]
 800c3e8:	68fa      	ldr	r2, [r7, #12]
 800c3ea:	6812      	ldr	r2, [r2, #0]
 800c3ec:	430b      	orrs	r3, r1
 800c3ee:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	681a      	ldr	r2, [r3, #0]
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f042 0201 	orr.w	r2, r2, #1
 800c3fe:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	685b      	ldr	r3, [r3, #4]
 800c404:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c408:	d107      	bne.n	800c41a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	681a      	ldr	r2, [r3, #0]
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c418:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	68db      	ldr	r3, [r3, #12]
 800c41e:	2b0f      	cmp	r3, #15
 800c420:	d965      	bls.n	800c4ee <HAL_SPI_Transmit+0x1de>
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	4a94      	ldr	r2, [pc, #592]	@ (800c678 <HAL_SPI_Transmit+0x368>)
 800c428:	4293      	cmp	r3, r2
 800c42a:	d059      	beq.n	800c4e0 <HAL_SPI_Transmit+0x1d0>
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	4a92      	ldr	r2, [pc, #584]	@ (800c67c <HAL_SPI_Transmit+0x36c>)
 800c432:	4293      	cmp	r3, r2
 800c434:	d054      	beq.n	800c4e0 <HAL_SPI_Transmit+0x1d0>
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	4a91      	ldr	r2, [pc, #580]	@ (800c680 <HAL_SPI_Transmit+0x370>)
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d04f      	beq.n	800c4e0 <HAL_SPI_Transmit+0x1d0>
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	4a8f      	ldr	r2, [pc, #572]	@ (800c684 <HAL_SPI_Transmit+0x374>)
 800c446:	4293      	cmp	r3, r2
 800c448:	d04a      	beq.n	800c4e0 <HAL_SPI_Transmit+0x1d0>
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	4a8e      	ldr	r2, [pc, #568]	@ (800c688 <HAL_SPI_Transmit+0x378>)
 800c450:	4293      	cmp	r3, r2
 800c452:	d045      	beq.n	800c4e0 <HAL_SPI_Transmit+0x1d0>
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	4a8c      	ldr	r2, [pc, #560]	@ (800c68c <HAL_SPI_Transmit+0x37c>)
 800c45a:	4293      	cmp	r3, r2
 800c45c:	d147      	bne.n	800c4ee <HAL_SPI_Transmit+0x1de>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c45e:	e03f      	b.n	800c4e0 <HAL_SPI_Transmit+0x1d0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	695b      	ldr	r3, [r3, #20]
 800c466:	f003 0302 	and.w	r3, r3, #2
 800c46a:	2b02      	cmp	r3, #2
 800c46c:	d114      	bne.n	800c498 <HAL_SPI_Transmit+0x188>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	6812      	ldr	r2, [r2, #0]
 800c478:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c47e:	1d1a      	adds	r2, r3, #4
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c48a:	b29b      	uxth	r3, r3
 800c48c:	3b01      	subs	r3, #1
 800c48e:	b29a      	uxth	r2, r3
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c496:	e023      	b.n	800c4e0 <HAL_SPI_Transmit+0x1d0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c498:	f7f8 fade 	bl	8004a58 <HAL_GetTick>
 800c49c:	4602      	mov	r2, r0
 800c49e:	693b      	ldr	r3, [r7, #16]
 800c4a0:	1ad3      	subs	r3, r2, r3
 800c4a2:	683a      	ldr	r2, [r7, #0]
 800c4a4:	429a      	cmp	r2, r3
 800c4a6:	d803      	bhi.n	800c4b0 <HAL_SPI_Transmit+0x1a0>
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4ae:	d102      	bne.n	800c4b6 <HAL_SPI_Transmit+0x1a6>
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d114      	bne.n	800c4e0 <HAL_SPI_Transmit+0x1d0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c4b6:	68f8      	ldr	r0, [r7, #12]
 800c4b8:	f000 faea 	bl	800ca90 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c4c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	2201      	movs	r2, #1
 800c4d0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800c4dc:	2303      	movs	r3, #3
 800c4de:	e128      	b.n	800c732 <HAL_SPI_Transmit+0x422>
    while (hspi->TxXferCount > 0UL)
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c4e6:	b29b      	uxth	r3, r3
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d1b9      	bne.n	800c460 <HAL_SPI_Transmit+0x150>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800c4ec:	e0fb      	b.n	800c6e6 <HAL_SPI_Transmit+0x3d6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	68db      	ldr	r3, [r3, #12]
 800c4f2:	2b07      	cmp	r3, #7
 800c4f4:	f240 80f0 	bls.w	800c6d8 <HAL_SPI_Transmit+0x3c8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c4f8:	e05d      	b.n	800c5b6 <HAL_SPI_Transmit+0x2a6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	695b      	ldr	r3, [r3, #20]
 800c500:	f003 0302 	and.w	r3, r3, #2
 800c504:	2b02      	cmp	r3, #2
 800c506:	d132      	bne.n	800c56e <HAL_SPI_Transmit+0x25e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c50e:	b29b      	uxth	r3, r3
 800c510:	2b01      	cmp	r3, #1
 800c512:	d918      	bls.n	800c546 <HAL_SPI_Transmit+0x236>
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d014      	beq.n	800c546 <HAL_SPI_Transmit+0x236>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	6812      	ldr	r2, [r2, #0]
 800c526:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c52c:	1d1a      	adds	r2, r3, #4
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c538:	b29b      	uxth	r3, r3
 800c53a:	3b02      	subs	r3, #2
 800c53c:	b29a      	uxth	r2, r3
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c544:	e037      	b.n	800c5b6 <HAL_SPI_Transmit+0x2a6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c54a:	881a      	ldrh	r2, [r3, #0]
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c554:	1c9a      	adds	r2, r3, #2
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c560:	b29b      	uxth	r3, r3
 800c562:	3b01      	subs	r3, #1
 800c564:	b29a      	uxth	r2, r3
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c56c:	e023      	b.n	800c5b6 <HAL_SPI_Transmit+0x2a6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c56e:	f7f8 fa73 	bl	8004a58 <HAL_GetTick>
 800c572:	4602      	mov	r2, r0
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	1ad3      	subs	r3, r2, r3
 800c578:	683a      	ldr	r2, [r7, #0]
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d803      	bhi.n	800c586 <HAL_SPI_Transmit+0x276>
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c584:	d102      	bne.n	800c58c <HAL_SPI_Transmit+0x27c>
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d114      	bne.n	800c5b6 <HAL_SPI_Transmit+0x2a6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c58c:	68f8      	ldr	r0, [r7, #12]
 800c58e:	f000 fa7f 	bl	800ca90 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c598:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	2201      	movs	r2, #1
 800c5a6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800c5b2:	2303      	movs	r3, #3
 800c5b4:	e0bd      	b.n	800c732 <HAL_SPI_Transmit+0x422>
    while (hspi->TxXferCount > 0UL)
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c5bc:	b29b      	uxth	r3, r3
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d19b      	bne.n	800c4fa <HAL_SPI_Transmit+0x1ea>
 800c5c2:	e090      	b.n	800c6e6 <HAL_SPI_Transmit+0x3d6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	695b      	ldr	r3, [r3, #20]
 800c5ca:	f003 0302 	and.w	r3, r3, #2
 800c5ce:	2b02      	cmp	r3, #2
 800c5d0:	d15e      	bne.n	800c690 <HAL_SPI_Transmit+0x380>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c5d8:	b29b      	uxth	r3, r3
 800c5da:	2b03      	cmp	r3, #3
 800c5dc:	d918      	bls.n	800c610 <HAL_SPI_Transmit+0x300>
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c5e2:	2b40      	cmp	r3, #64	@ 0x40
 800c5e4:	d914      	bls.n	800c610 <HAL_SPI_Transmit+0x300>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	6812      	ldr	r2, [r2, #0]
 800c5f0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c5f6:	1d1a      	adds	r2, r3, #4
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c602:	b29b      	uxth	r3, r3
 800c604:	3b04      	subs	r3, #4
 800c606:	b29a      	uxth	r2, r3
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c60e:	e063      	b.n	800c6d8 <HAL_SPI_Transmit+0x3c8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c616:	b29b      	uxth	r3, r3
 800c618:	2b01      	cmp	r3, #1
 800c61a:	d917      	bls.n	800c64c <HAL_SPI_Transmit+0x33c>
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c620:	2b00      	cmp	r3, #0
 800c622:	d013      	beq.n	800c64c <HAL_SPI_Transmit+0x33c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c628:	881a      	ldrh	r2, [r3, #0]
 800c62a:	697b      	ldr	r3, [r7, #20]
 800c62c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c632:	1c9a      	adds	r2, r3, #2
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c63e:	b29b      	uxth	r3, r3
 800c640:	3b02      	subs	r3, #2
 800c642:	b29a      	uxth	r2, r3
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c64a:	e045      	b.n	800c6d8 <HAL_SPI_Transmit+0x3c8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	3320      	adds	r3, #32
 800c656:	7812      	ldrb	r2, [r2, #0]
 800c658:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c65e:	1c5a      	adds	r2, r3, #1
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c66a:	b29b      	uxth	r3, r3
 800c66c:	3b01      	subs	r3, #1
 800c66e:	b29a      	uxth	r2, r3
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c676:	e02f      	b.n	800c6d8 <HAL_SPI_Transmit+0x3c8>
 800c678:	40013000 	.word	0x40013000
 800c67c:	50013000 	.word	0x50013000
 800c680:	40003800 	.word	0x40003800
 800c684:	50003800 	.word	0x50003800
 800c688:	40003c00 	.word	0x40003c00
 800c68c:	50003c00 	.word	0x50003c00
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c690:	f7f8 f9e2 	bl	8004a58 <HAL_GetTick>
 800c694:	4602      	mov	r2, r0
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	1ad3      	subs	r3, r2, r3
 800c69a:	683a      	ldr	r2, [r7, #0]
 800c69c:	429a      	cmp	r2, r3
 800c69e:	d803      	bhi.n	800c6a8 <HAL_SPI_Transmit+0x398>
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6a6:	d102      	bne.n	800c6ae <HAL_SPI_Transmit+0x39e>
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d114      	bne.n	800c6d8 <HAL_SPI_Transmit+0x3c8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c6ae:	68f8      	ldr	r0, [r7, #12]
 800c6b0:	f000 f9ee 	bl	800ca90 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c6ba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	2201      	movs	r2, #1
 800c6c8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800c6d4:	2303      	movs	r3, #3
 800c6d6:	e02c      	b.n	800c732 <HAL_SPI_Transmit+0x422>
    while (hspi->TxXferCount > 0UL)
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c6de:	b29b      	uxth	r3, r3
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	f47f af6f 	bne.w	800c5c4 <HAL_SPI_Transmit+0x2b4>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800c6e6:	693b      	ldr	r3, [r7, #16]
 800c6e8:	9300      	str	r3, [sp, #0]
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	2108      	movs	r1, #8
 800c6f0:	68f8      	ldr	r0, [r7, #12]
 800c6f2:	f000 fa6d 	bl	800cbd0 <SPI_WaitOnFlagUntilTimeout>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d007      	beq.n	800c70c <HAL_SPI_Transmit+0x3fc>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c702:	f043 0220 	orr.w	r2, r3, #32
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c70c:	68f8      	ldr	r0, [r7, #12]
 800c70e:	f000 f9bf 	bl	800ca90 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	2201      	movs	r2, #1
 800c716:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	2200      	movs	r2, #0
 800c71e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d001      	beq.n	800c730 <HAL_SPI_Transmit+0x420>
  {
    return HAL_ERROR;
 800c72c:	2301      	movs	r3, #1
 800c72e:	e000      	b.n	800c732 <HAL_SPI_Transmit+0x422>
  }
  else
  {
    return HAL_OK;
 800c730:	2300      	movs	r3, #0
  }
}
 800c732:	4618      	mov	r0, r3
 800c734:	3718      	adds	r7, #24
 800c736:	46bd      	mov	sp, r7
 800c738:	bd80      	pop	{r7, pc}
 800c73a:	bf00      	nop

0800c73c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b086      	sub	sp, #24
 800c740:	af00      	add	r7, sp, #0
 800c742:	60f8      	str	r0, [r7, #12]
 800c744:	60b9      	str	r1, [r7, #8]
 800c746:	603b      	str	r3, [r7, #0]
 800c748:	4613      	mov	r3, r2
 800c74a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	3330      	adds	r3, #48	@ 0x30
 800c752:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c754:	f7f8 f980 	bl	8004a58 <HAL_GetTick>
 800c758:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800c760:	b2db      	uxtb	r3, r3
 800c762:	2b01      	cmp	r3, #1
 800c764:	d001      	beq.n	800c76a <HAL_SPI_Receive+0x2e>
  {
    return HAL_BUSY;
 800c766:	2302      	movs	r3, #2
 800c768:	e181      	b.n	800ca6e <HAL_SPI_Receive+0x332>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d002      	beq.n	800c776 <HAL_SPI_Receive+0x3a>
 800c770:	88fb      	ldrh	r3, [r7, #6]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d101      	bne.n	800c77a <HAL_SPI_Receive+0x3e>
  {
    return HAL_ERROR;
 800c776:	2301      	movs	r3, #1
 800c778:	e179      	b.n	800ca6e <HAL_SPI_Receive+0x332>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800c780:	2b01      	cmp	r3, #1
 800c782:	d101      	bne.n	800c788 <HAL_SPI_Receive+0x4c>
 800c784:	2302      	movs	r3, #2
 800c786:	e172      	b.n	800ca6e <HAL_SPI_Receive+0x332>
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	2201      	movs	r2, #1
 800c78c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	2204      	movs	r2, #4
 800c794:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	2200      	movs	r2, #0
 800c79c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	68ba      	ldr	r2, [r7, #8]
 800c7a4:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	88fa      	ldrh	r2, [r7, #6]
 800c7aa:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	88fa      	ldrh	r2, [r7, #6]
 800c7b2:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	2200      	movs	r2, #0
 800c7c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	689b      	ldr	r3, [r3, #8]
 800c7dc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800c7e0:	d108      	bne.n	800c7f4 <HAL_SPI_Receive+0xb8>
  {
    SPI_1LINE_RX(hspi);
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	681a      	ldr	r2, [r3, #0]
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c7f0:	601a      	str	r2, [r3, #0]
 800c7f2:	e009      	b.n	800c808 <HAL_SPI_Receive+0xcc>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	68db      	ldr	r3, [r3, #12]
 800c7fa:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800c806:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	685b      	ldr	r3, [r3, #4]
 800c80e:	0c1b      	lsrs	r3, r3, #16
 800c810:	041b      	lsls	r3, r3, #16
 800c812:	88f9      	ldrh	r1, [r7, #6]
 800c814:	68fa      	ldr	r2, [r7, #12]
 800c816:	6812      	ldr	r2, [r2, #0]
 800c818:	430b      	orrs	r3, r1
 800c81a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	681a      	ldr	r2, [r3, #0]
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f042 0201 	orr.w	r2, r2, #1
 800c82a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	685b      	ldr	r3, [r3, #4]
 800c830:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c834:	d107      	bne.n	800c846 <HAL_SPI_Receive+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	681a      	ldr	r2, [r3, #0]
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c844:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	68db      	ldr	r3, [r3, #12]
 800c84a:	2b0f      	cmp	r3, #15
 800c84c:	d966      	bls.n	800c91c <HAL_SPI_Receive+0x1e0>
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	4a89      	ldr	r2, [pc, #548]	@ (800ca78 <HAL_SPI_Receive+0x33c>)
 800c854:	4293      	cmp	r3, r2
 800c856:	d05a      	beq.n	800c90e <HAL_SPI_Receive+0x1d2>
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	4a87      	ldr	r2, [pc, #540]	@ (800ca7c <HAL_SPI_Receive+0x340>)
 800c85e:	4293      	cmp	r3, r2
 800c860:	d055      	beq.n	800c90e <HAL_SPI_Receive+0x1d2>
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	4a86      	ldr	r2, [pc, #536]	@ (800ca80 <HAL_SPI_Receive+0x344>)
 800c868:	4293      	cmp	r3, r2
 800c86a:	d050      	beq.n	800c90e <HAL_SPI_Receive+0x1d2>
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	4a84      	ldr	r2, [pc, #528]	@ (800ca84 <HAL_SPI_Receive+0x348>)
 800c872:	4293      	cmp	r3, r2
 800c874:	d04b      	beq.n	800c90e <HAL_SPI_Receive+0x1d2>
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	4a83      	ldr	r2, [pc, #524]	@ (800ca88 <HAL_SPI_Receive+0x34c>)
 800c87c:	4293      	cmp	r3, r2
 800c87e:	d046      	beq.n	800c90e <HAL_SPI_Receive+0x1d2>
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	4a81      	ldr	r2, [pc, #516]	@ (800ca8c <HAL_SPI_Receive+0x350>)
 800c886:	4293      	cmp	r3, r2
 800c888:	d148      	bne.n	800c91c <HAL_SPI_Receive+0x1e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c88a:	e040      	b.n	800c90e <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	695a      	ldr	r2, [r3, #20]
 800c892:	f248 0308 	movw	r3, #32776	@ 0x8008
 800c896:	4013      	ands	r3, r2
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d014      	beq.n	800c8c6 <HAL_SPI_Receive+0x18a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	681a      	ldr	r2, [r3, #0]
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c8a4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c8a6:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c8ac:	1d1a      	adds	r2, r3, #4
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800c8b8:	b29b      	uxth	r3, r3
 800c8ba:	3b01      	subs	r3, #1
 800c8bc:	b29a      	uxth	r2, r3
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800c8c4:	e023      	b.n	800c90e <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c8c6:	f7f8 f8c7 	bl	8004a58 <HAL_GetTick>
 800c8ca:	4602      	mov	r2, r0
 800c8cc:	693b      	ldr	r3, [r7, #16]
 800c8ce:	1ad3      	subs	r3, r2, r3
 800c8d0:	683a      	ldr	r2, [r7, #0]
 800c8d2:	429a      	cmp	r2, r3
 800c8d4:	d803      	bhi.n	800c8de <HAL_SPI_Receive+0x1a2>
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8dc:	d102      	bne.n	800c8e4 <HAL_SPI_Receive+0x1a8>
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d114      	bne.n	800c90e <HAL_SPI_Receive+0x1d2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c8e4:	68f8      	ldr	r0, [r7, #12]
 800c8e6:	f000 f8d3 	bl	800ca90 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c8f0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	2201      	movs	r2, #1
 800c8fe:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	2200      	movs	r2, #0
 800c906:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800c90a:	2303      	movs	r3, #3
 800c90c:	e0af      	b.n	800ca6e <HAL_SPI_Receive+0x332>
    while (hspi->RxXferCount > 0UL)
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800c914:	b29b      	uxth	r3, r3
 800c916:	2b00      	cmp	r3, #0
 800c918:	d1b8      	bne.n	800c88c <HAL_SPI_Receive+0x150>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800c91a:	e095      	b.n	800ca48 <HAL_SPI_Receive+0x30c>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	68db      	ldr	r3, [r3, #12]
 800c920:	2b07      	cmp	r3, #7
 800c922:	f240 808b 	bls.w	800ca3c <HAL_SPI_Receive+0x300>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c926:	e03f      	b.n	800c9a8 <HAL_SPI_Receive+0x26c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	695b      	ldr	r3, [r3, #20]
 800c92e:	f003 0301 	and.w	r3, r3, #1
 800c932:	2b01      	cmp	r3, #1
 800c934:	d114      	bne.n	800c960 <HAL_SPI_Receive+0x224>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c93a:	697a      	ldr	r2, [r7, #20]
 800c93c:	8812      	ldrh	r2, [r2, #0]
 800c93e:	b292      	uxth	r2, r2
 800c940:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c946:	1c9a      	adds	r2, r3, #2
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800c952:	b29b      	uxth	r3, r3
 800c954:	3b01      	subs	r3, #1
 800c956:	b29a      	uxth	r2, r3
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800c95e:	e023      	b.n	800c9a8 <HAL_SPI_Receive+0x26c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c960:	f7f8 f87a 	bl	8004a58 <HAL_GetTick>
 800c964:	4602      	mov	r2, r0
 800c966:	693b      	ldr	r3, [r7, #16]
 800c968:	1ad3      	subs	r3, r2, r3
 800c96a:	683a      	ldr	r2, [r7, #0]
 800c96c:	429a      	cmp	r2, r3
 800c96e:	d803      	bhi.n	800c978 <HAL_SPI_Receive+0x23c>
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c976:	d102      	bne.n	800c97e <HAL_SPI_Receive+0x242>
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d114      	bne.n	800c9a8 <HAL_SPI_Receive+0x26c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c97e:	68f8      	ldr	r0, [r7, #12]
 800c980:	f000 f886 	bl	800ca90 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c98a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	2201      	movs	r2, #1
 800c998:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	2200      	movs	r2, #0
 800c9a0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800c9a4:	2303      	movs	r3, #3
 800c9a6:	e062      	b.n	800ca6e <HAL_SPI_Receive+0x332>
    while (hspi->RxXferCount > 0UL)
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800c9ae:	b29b      	uxth	r3, r3
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d1b9      	bne.n	800c928 <HAL_SPI_Receive+0x1ec>
 800c9b4:	e048      	b.n	800ca48 <HAL_SPI_Receive+0x30c>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	695b      	ldr	r3, [r3, #20]
 800c9bc:	f003 0301 	and.w	r3, r3, #1
 800c9c0:	2b01      	cmp	r3, #1
 800c9c2:	d117      	bne.n	800c9f4 <HAL_SPI_Receive+0x2b8>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c9d0:	7812      	ldrb	r2, [r2, #0]
 800c9d2:	b2d2      	uxtb	r2, r2
 800c9d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c9da:	1c5a      	adds	r2, r3, #1
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800c9e6:	b29b      	uxth	r3, r3
 800c9e8:	3b01      	subs	r3, #1
 800c9ea:	b29a      	uxth	r2, r3
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800c9f2:	e023      	b.n	800ca3c <HAL_SPI_Receive+0x300>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c9f4:	f7f8 f830 	bl	8004a58 <HAL_GetTick>
 800c9f8:	4602      	mov	r2, r0
 800c9fa:	693b      	ldr	r3, [r7, #16]
 800c9fc:	1ad3      	subs	r3, r2, r3
 800c9fe:	683a      	ldr	r2, [r7, #0]
 800ca00:	429a      	cmp	r2, r3
 800ca02:	d803      	bhi.n	800ca0c <HAL_SPI_Receive+0x2d0>
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca0a:	d102      	bne.n	800ca12 <HAL_SPI_Receive+0x2d6>
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d114      	bne.n	800ca3c <HAL_SPI_Receive+0x300>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ca12:	68f8      	ldr	r0, [r7, #12]
 800ca14:	f000 f83c 	bl	800ca90 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ca1e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	2201      	movs	r2, #1
 800ca2c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	2200      	movs	r2, #0
 800ca34:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800ca38:	2303      	movs	r3, #3
 800ca3a:	e018      	b.n	800ca6e <HAL_SPI_Receive+0x332>
    while (hspi->RxXferCount > 0UL)
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800ca42:	b29b      	uxth	r3, r3
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d1b6      	bne.n	800c9b6 <HAL_SPI_Receive+0x27a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ca48:	68f8      	ldr	r0, [r7, #12]
 800ca4a:	f000 f821 	bl	800ca90 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	2201      	movs	r2, #1
 800ca52:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	2200      	movs	r2, #0
 800ca5a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d001      	beq.n	800ca6c <HAL_SPI_Receive+0x330>
  {
    return HAL_ERROR;
 800ca68:	2301      	movs	r3, #1
 800ca6a:	e000      	b.n	800ca6e <HAL_SPI_Receive+0x332>
  }
  else
  {
    return HAL_OK;
 800ca6c:	2300      	movs	r3, #0
  }
}
 800ca6e:	4618      	mov	r0, r3
 800ca70:	3718      	adds	r7, #24
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}
 800ca76:	bf00      	nop
 800ca78:	40013000 	.word	0x40013000
 800ca7c:	50013000 	.word	0x50013000
 800ca80:	40003800 	.word	0x40003800
 800ca84:	50003800 	.word	0x50003800
 800ca88:	40003c00 	.word	0x40003c00
 800ca8c:	50003c00 	.word	0x50003c00

0800ca90 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800ca90:	b480      	push	{r7}
 800ca92:	b085      	sub	sp, #20
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	695b      	ldr	r3, [r3, #20]
 800ca9e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	699a      	ldr	r2, [r3, #24]
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	f042 0208 	orr.w	r2, r2, #8
 800caae:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	699a      	ldr	r2, [r3, #24]
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	f042 0210 	orr.w	r2, r2, #16
 800cabe:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	681a      	ldr	r2, [r3, #0]
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	f022 0201 	bic.w	r2, r2, #1
 800cace:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	691b      	ldr	r3, [r3, #16]
 800cad6:	687a      	ldr	r2, [r7, #4]
 800cad8:	6812      	ldr	r2, [r2, #0]
 800cada:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 800cade:	f023 0303 	bic.w	r3, r3, #3
 800cae2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	689a      	ldr	r2, [r3, #8]
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800caf2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800cafa:	b2db      	uxtb	r3, r3
 800cafc:	2b04      	cmp	r3, #4
 800cafe:	d014      	beq.n	800cb2a <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	f003 0320 	and.w	r3, r3, #32
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d00f      	beq.n	800cb2a <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cb10:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	699a      	ldr	r2, [r3, #24]
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	f042 0220 	orr.w	r2, r2, #32
 800cb28:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800cb30:	b2db      	uxtb	r3, r3
 800cb32:	2b03      	cmp	r3, #3
 800cb34:	d014      	beq.n	800cb60 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d00f      	beq.n	800cb60 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cb46:	f043 0204 	orr.w	r2, r3, #4
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	699a      	ldr	r2, [r3, #24]
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cb5e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d00f      	beq.n	800cb8a <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cb70:	f043 0201 	orr.w	r2, r3, #1
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	699a      	ldr	r2, [r3, #24]
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cb88:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d00f      	beq.n	800cbb4 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cb9a:	f043 0208 	orr.w	r2, r3, #8
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	699a      	ldr	r2, [r3, #24]
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cbb2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800cbc4:	bf00      	nop
 800cbc6:	3714      	adds	r7, #20
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbce:	4770      	bx	lr

0800cbd0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b084      	sub	sp, #16
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	60f8      	str	r0, [r7, #12]
 800cbd8:	60b9      	str	r1, [r7, #8]
 800cbda:	603b      	str	r3, [r7, #0]
 800cbdc:	4613      	mov	r3, r2
 800cbde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800cbe0:	e010      	b.n	800cc04 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cbe2:	f7f7 ff39 	bl	8004a58 <HAL_GetTick>
 800cbe6:	4602      	mov	r2, r0
 800cbe8:	69bb      	ldr	r3, [r7, #24]
 800cbea:	1ad3      	subs	r3, r2, r3
 800cbec:	683a      	ldr	r2, [r7, #0]
 800cbee:	429a      	cmp	r2, r3
 800cbf0:	d803      	bhi.n	800cbfa <SPI_WaitOnFlagUntilTimeout+0x2a>
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbf8:	d102      	bne.n	800cc00 <SPI_WaitOnFlagUntilTimeout+0x30>
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d101      	bne.n	800cc04 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800cc00:	2303      	movs	r3, #3
 800cc02:	e00f      	b.n	800cc24 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	695a      	ldr	r2, [r3, #20]
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	4013      	ands	r3, r2
 800cc0e:	68ba      	ldr	r2, [r7, #8]
 800cc10:	429a      	cmp	r2, r3
 800cc12:	bf0c      	ite	eq
 800cc14:	2301      	moveq	r3, #1
 800cc16:	2300      	movne	r3, #0
 800cc18:	b2db      	uxtb	r3, r3
 800cc1a:	461a      	mov	r2, r3
 800cc1c:	79fb      	ldrb	r3, [r7, #7]
 800cc1e:	429a      	cmp	r2, r3
 800cc20:	d0df      	beq.n	800cbe2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800cc22:	2300      	movs	r3, #0
}
 800cc24:	4618      	mov	r0, r3
 800cc26:	3710      	adds	r7, #16
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	bd80      	pop	{r7, pc}

0800cc2c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800cc2c:	b480      	push	{r7}
 800cc2e:	b085      	sub	sp, #20
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc38:	095b      	lsrs	r3, r3, #5
 800cc3a:	3301      	adds	r3, #1
 800cc3c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	68db      	ldr	r3, [r3, #12]
 800cc42:	3301      	adds	r3, #1
 800cc44:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800cc46:	68bb      	ldr	r3, [r7, #8]
 800cc48:	3307      	adds	r3, #7
 800cc4a:	08db      	lsrs	r3, r3, #3
 800cc4c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	68fa      	ldr	r2, [r7, #12]
 800cc52:	fb02 f303 	mul.w	r3, r2, r3
}
 800cc56:	4618      	mov	r0, r3
 800cc58:	3714      	adds	r7, #20
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc60:	4770      	bx	lr
	...

0800cc64 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b084      	sub	sp, #16
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	60f8      	str	r0, [r7, #12]
 800cc6c:	60b9      	str	r1, [r7, #8]
 800cc6e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d101      	bne.n	800cc7a <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800cc76:	2301      	movs	r3, #1
 800cc78:	e03e      	b.n	800ccf8 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800cc80:	b2db      	uxtb	r3, r3
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d106      	bne.n	800cc94 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	2200      	movs	r2, #0
 800cc8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800cc8e:	68f8      	ldr	r0, [r7, #12]
 800cc90:	f7f7 fc42 	bl	8004518 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	681a      	ldr	r2, [r3, #0]
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	3308      	adds	r3, #8
 800cc9c:	4619      	mov	r1, r3
 800cc9e:	4610      	mov	r0, r2
 800cca0:	f002 fa90 	bl	800f1c4 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	6818      	ldr	r0, [r3, #0]
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	689b      	ldr	r3, [r3, #8]
 800ccac:	461a      	mov	r2, r3
 800ccae:	68b9      	ldr	r1, [r7, #8]
 800ccb0:	f002 fb56 	bl	800f360 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	6858      	ldr	r0, [r3, #4]
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	689a      	ldr	r2, [r3, #8]
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccc0:	6879      	ldr	r1, [r7, #4]
 800ccc2:	f002 fb9a 	bl	800f3fa <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	68fa      	ldr	r2, [r7, #12]
 800cccc:	6892      	ldr	r2, [r2, #8]
 800ccce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	68fa      	ldr	r2, [r7, #12]
 800ccd8:	6892      	ldr	r2, [r2, #8]
 800ccda:	f041 0101 	orr.w	r1, r1, #1
 800ccde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800cce2:	4b07      	ldr	r3, [pc, #28]	@ (800cd00 <HAL_SRAM_Init+0x9c>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	4a06      	ldr	r2, [pc, #24]	@ (800cd00 <HAL_SRAM_Init+0x9c>)
 800cce8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ccec:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	2201      	movs	r2, #1
 800ccf2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800ccf6:	2300      	movs	r3, #0
}
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	3710      	adds	r7, #16
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}
 800cd00:	47000400 	.word	0x47000400

0800cd04 <HAL_SRAM_Read_8b>:
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pDstBuffer,
                                   uint32_t BufferSize)
{
 800cd04:	b480      	push	{r7}
 800cd06:	b089      	sub	sp, #36	@ 0x24
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	60f8      	str	r0, [r7, #12]
 800cd0c:	60b9      	str	r1, [r7, #8]
 800cd0e:	607a      	str	r2, [r7, #4]
 800cd10:	603b      	str	r3, [r7, #0]
  uint32_t size;
  __IO uint8_t *psramaddress = (uint8_t *)pAddress;
 800cd12:	68bb      	ldr	r3, [r7, #8]
 800cd14:	61bb      	str	r3, [r7, #24]
  uint8_t *pdestbuff = pDstBuffer;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	617b      	str	r3, [r7, #20]
  HAL_SRAM_StateTypeDef state = hsram->State;
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800cd20:	74fb      	strb	r3, [r7, #19]

  /* Check the SRAM controller state */
  if ((state == HAL_SRAM_STATE_READY) || (state == HAL_SRAM_STATE_PROTECTED))
 800cd22:	7cfb      	ldrb	r3, [r7, #19]
 800cd24:	2b01      	cmp	r3, #1
 800cd26:	d002      	beq.n	800cd2e <HAL_SRAM_Read_8b+0x2a>
 800cd28:	7cfb      	ldrb	r3, [r7, #19]
 800cd2a:	2b04      	cmp	r3, #4
 800cd2c:	d12c      	bne.n	800cd88 <HAL_SRAM_Read_8b+0x84>
  {
    /* Process Locked */
    __HAL_LOCK(hsram);
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800cd34:	2b01      	cmp	r3, #1
 800cd36:	d101      	bne.n	800cd3c <HAL_SRAM_Read_8b+0x38>
 800cd38:	2302      	movs	r3, #2
 800cd3a:	e026      	b.n	800cd8a <HAL_SRAM_Read_8b+0x86>
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	2201      	movs	r2, #1
 800cd40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_BUSY;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	2202      	movs	r2, #2
 800cd48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Read data from memory */
    for (size = BufferSize; size != 0U; size--)
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	61fb      	str	r3, [r7, #28]
 800cd50:	e00d      	b.n	800cd6e <HAL_SRAM_Read_8b+0x6a>
    {
      *pdestbuff = *psramaddress;
 800cd52:	69bb      	ldr	r3, [r7, #24]
 800cd54:	781b      	ldrb	r3, [r3, #0]
 800cd56:	b2da      	uxtb	r2, r3
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	701a      	strb	r2, [r3, #0]
      pdestbuff++;
 800cd5c:	697b      	ldr	r3, [r7, #20]
 800cd5e:	3301      	adds	r3, #1
 800cd60:	617b      	str	r3, [r7, #20]
      psramaddress++;
 800cd62:	69bb      	ldr	r3, [r7, #24]
 800cd64:	3301      	adds	r3, #1
 800cd66:	61bb      	str	r3, [r7, #24]
    for (size = BufferSize; size != 0U; size--)
 800cd68:	69fb      	ldr	r3, [r7, #28]
 800cd6a:	3b01      	subs	r3, #1
 800cd6c:	61fb      	str	r3, [r7, #28]
 800cd6e:	69fb      	ldr	r3, [r7, #28]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d1ee      	bne.n	800cd52 <HAL_SRAM_Read_8b+0x4e>
    }

    /* Update the SRAM controller state */
    hsram->State = state;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	7cfa      	ldrb	r2, [r7, #19]
 800cd78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Process unlocked */
    __HAL_UNLOCK(hsram);
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	2200      	movs	r2, #0
 800cd80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800cd84:	2300      	movs	r3, #0
 800cd86:	e000      	b.n	800cd8a <HAL_SRAM_Read_8b+0x86>
    return HAL_ERROR;
 800cd88:	2301      	movs	r3, #1
}
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	3724      	adds	r7, #36	@ 0x24
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd94:	4770      	bx	lr

0800cd96 <HAL_SRAM_Write_8b>:
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pSrcBuffer,
                                    uint32_t BufferSize)
{
 800cd96:	b480      	push	{r7}
 800cd98:	b089      	sub	sp, #36	@ 0x24
 800cd9a:	af00      	add	r7, sp, #0
 800cd9c:	60f8      	str	r0, [r7, #12]
 800cd9e:	60b9      	str	r1, [r7, #8]
 800cda0:	607a      	str	r2, [r7, #4]
 800cda2:	603b      	str	r3, [r7, #0]
  uint32_t size;
  __IO uint8_t *psramaddress = (uint8_t *)pAddress;
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	61bb      	str	r3, [r7, #24]
  uint8_t *psrcbuff = pSrcBuffer;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	617b      	str	r3, [r7, #20]

  /* Check the SRAM controller state */
  if (hsram->State == HAL_SRAM_STATE_READY)
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800cdb2:	b2db      	uxtb	r3, r3
 800cdb4:	2b01      	cmp	r3, #1
 800cdb6:	d12b      	bne.n	800ce10 <HAL_SRAM_Write_8b+0x7a>
  {
    /* Process Locked */
    __HAL_LOCK(hsram);
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800cdbe:	2b01      	cmp	r3, #1
 800cdc0:	d101      	bne.n	800cdc6 <HAL_SRAM_Write_8b+0x30>
 800cdc2:	2302      	movs	r3, #2
 800cdc4:	e025      	b.n	800ce12 <HAL_SRAM_Write_8b+0x7c>
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	2201      	movs	r2, #1
 800cdca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_BUSY;
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	2202      	movs	r2, #2
 800cdd2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Write data to memory */
    for (size = BufferSize; size != 0U; size--)
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	61fb      	str	r3, [r7, #28]
 800cdda:	e00c      	b.n	800cdf6 <HAL_SRAM_Write_8b+0x60>
    {
      *psramaddress = *psrcbuff;
 800cddc:	697b      	ldr	r3, [r7, #20]
 800cdde:	781a      	ldrb	r2, [r3, #0]
 800cde0:	69bb      	ldr	r3, [r7, #24]
 800cde2:	701a      	strb	r2, [r3, #0]
      psrcbuff++;
 800cde4:	697b      	ldr	r3, [r7, #20]
 800cde6:	3301      	adds	r3, #1
 800cde8:	617b      	str	r3, [r7, #20]
      psramaddress++;
 800cdea:	69bb      	ldr	r3, [r7, #24]
 800cdec:	3301      	adds	r3, #1
 800cdee:	61bb      	str	r3, [r7, #24]
    for (size = BufferSize; size != 0U; size--)
 800cdf0:	69fb      	ldr	r3, [r7, #28]
 800cdf2:	3b01      	subs	r3, #1
 800cdf4:	61fb      	str	r3, [r7, #28]
 800cdf6:	69fb      	ldr	r3, [r7, #28]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d1ef      	bne.n	800cddc <HAL_SRAM_Write_8b+0x46>
    }

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_READY;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	2201      	movs	r2, #1
 800ce00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Process unlocked */
    __HAL_UNLOCK(hsram);
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	2200      	movs	r2, #0
 800ce08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	e000      	b.n	800ce12 <HAL_SRAM_Write_8b+0x7c>
    return HAL_ERROR;
 800ce10:	2301      	movs	r3, #1
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	3724      	adds	r7, #36	@ 0x24
 800ce16:	46bd      	mov	sp, r7
 800ce18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1c:	4770      	bx	lr

0800ce1e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ce1e:	b580      	push	{r7, lr}
 800ce20:	b082      	sub	sp, #8
 800ce22:	af00      	add	r7, sp, #0
 800ce24:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d101      	bne.n	800ce30 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	e042      	b.n	800ceb6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d106      	bne.n	800ce48 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	f7f7 f8d6 	bl	8003ff4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2224      	movs	r2, #36	@ 0x24
 800ce4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	681a      	ldr	r2, [r3, #0]
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	f022 0201 	bic.w	r2, r2, #1
 800ce5e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d002      	beq.n	800ce6e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ce68:	6878      	ldr	r0, [r7, #4]
 800ce6a:	f000 fe2b 	bl	800dac4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f000 fc3a 	bl	800d6e8 <UART_SetConfig>
 800ce74:	4603      	mov	r3, r0
 800ce76:	2b01      	cmp	r3, #1
 800ce78:	d101      	bne.n	800ce7e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ce7a:	2301      	movs	r3, #1
 800ce7c:	e01b      	b.n	800ceb6 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	685a      	ldr	r2, [r3, #4]
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ce8c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	689a      	ldr	r2, [r3, #8]
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ce9c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	681a      	ldr	r2, [r3, #0]
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	f042 0201 	orr.w	r2, r2, #1
 800ceac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ceae:	6878      	ldr	r0, [r7, #4]
 800ceb0:	f000 feaa 	bl	800dc08 <UART_CheckIdleState>
 800ceb4:	4603      	mov	r3, r0
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	3708      	adds	r7, #8
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}
	...

0800cec0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800cec0:	b480      	push	{r7}
 800cec2:	b091      	sub	sp, #68	@ 0x44
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	60f8      	str	r0, [r7, #12]
 800cec8:	60b9      	str	r1, [r7, #8]
 800ceca:	4613      	mov	r3, r2
 800cecc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ced4:	2b20      	cmp	r3, #32
 800ced6:	f040 8088 	bne.w	800cfea <HAL_UART_Transmit_IT+0x12a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d002      	beq.n	800cee6 <HAL_UART_Transmit_IT+0x26>
 800cee0:	88fb      	ldrh	r3, [r7, #6]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d101      	bne.n	800ceea <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800cee6:	2301      	movs	r3, #1
 800cee8:	e080      	b.n	800cfec <HAL_UART_Transmit_IT+0x12c>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	689b      	ldr	r3, [r3, #8]
 800cef0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cef4:	2b80      	cmp	r3, #128	@ 0x80
 800cef6:	d107      	bne.n	800cf08 <HAL_UART_Transmit_IT+0x48>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	689a      	ldr	r2, [r3, #8]
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cf06:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->pTxBuffPtr  = pData;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	68ba      	ldr	r2, [r7, #8]
 800cf0c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	88fa      	ldrh	r2, [r7, #6]
 800cf12:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	88fa      	ldrh	r2, [r7, #6]
 800cf1a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	2200      	movs	r2, #0
 800cf22:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	2200      	movs	r2, #0
 800cf28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	2221      	movs	r2, #33	@ 0x21
 800cf30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cf3c:	d12a      	bne.n	800cf94 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	689b      	ldr	r3, [r3, #8]
 800cf42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cf46:	d107      	bne.n	800cf58 <HAL_UART_Transmit_IT+0x98>
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	691b      	ldr	r3, [r3, #16]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d103      	bne.n	800cf58 <HAL_UART_Transmit_IT+0x98>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	4a29      	ldr	r2, [pc, #164]	@ (800cff8 <HAL_UART_Transmit_IT+0x138>)
 800cf54:	679a      	str	r2, [r3, #120]	@ 0x78
 800cf56:	e002      	b.n	800cf5e <HAL_UART_Transmit_IT+0x9e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	4a28      	ldr	r2, [pc, #160]	@ (800cffc <HAL_UART_Transmit_IT+0x13c>)
 800cf5c:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	3308      	adds	r3, #8
 800cf64:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf68:	e853 3f00 	ldrex	r3, [r3]
 800cf6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cf6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf70:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800cf74:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	3308      	adds	r3, #8
 800cf7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cf7e:	637a      	str	r2, [r7, #52]	@ 0x34
 800cf80:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf82:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cf84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cf86:	e841 2300 	strex	r3, r2, [r1]
 800cf8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800cf8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d1e5      	bne.n	800cf5e <HAL_UART_Transmit_IT+0x9e>
 800cf92:	e028      	b.n	800cfe6 <HAL_UART_Transmit_IT+0x126>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	689b      	ldr	r3, [r3, #8]
 800cf98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cf9c:	d107      	bne.n	800cfae <HAL_UART_Transmit_IT+0xee>
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	691b      	ldr	r3, [r3, #16]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d103      	bne.n	800cfae <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	4a15      	ldr	r2, [pc, #84]	@ (800d000 <HAL_UART_Transmit_IT+0x140>)
 800cfaa:	679a      	str	r2, [r3, #120]	@ 0x78
 800cfac:	e002      	b.n	800cfb4 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	4a14      	ldr	r2, [pc, #80]	@ (800d004 <HAL_UART_Transmit_IT+0x144>)
 800cfb2:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfba:	697b      	ldr	r3, [r7, #20]
 800cfbc:	e853 3f00 	ldrex	r3, [r3]
 800cfc0:	613b      	str	r3, [r7, #16]
   return(result);
 800cfc2:	693b      	ldr	r3, [r7, #16]
 800cfc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cfc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	461a      	mov	r2, r3
 800cfd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfd2:	623b      	str	r3, [r7, #32]
 800cfd4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfd6:	69f9      	ldr	r1, [r7, #28]
 800cfd8:	6a3a      	ldr	r2, [r7, #32]
 800cfda:	e841 2300 	strex	r3, r2, [r1]
 800cfde:	61bb      	str	r3, [r7, #24]
   return(result);
 800cfe0:	69bb      	ldr	r3, [r7, #24]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d1e6      	bne.n	800cfb4 <HAL_UART_Transmit_IT+0xf4>
    }

    return HAL_OK;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	e000      	b.n	800cfec <HAL_UART_Transmit_IT+0x12c>
  }
  else
  {
    return HAL_BUSY;
 800cfea:	2302      	movs	r3, #2
  }
}
 800cfec:	4618      	mov	r0, r3
 800cfee:	3744      	adds	r7, #68	@ 0x44
 800cff0:	46bd      	mov	sp, r7
 800cff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff6:	4770      	bx	lr
 800cff8:	0800e3cf 	.word	0x0800e3cf
 800cffc:	0800e2ef 	.word	0x0800e2ef
 800d000:	0800e22d 	.word	0x0800e22d
 800d004:	0800e175 	.word	0x0800e175

0800d008 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b08a      	sub	sp, #40	@ 0x28
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	60f8      	str	r0, [r7, #12]
 800d010:	60b9      	str	r1, [r7, #8]
 800d012:	4613      	mov	r3, r2
 800d014:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d01c:	2b20      	cmp	r3, #32
 800d01e:	d14b      	bne.n	800d0b8 <HAL_UART_Receive_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800d020:	68bb      	ldr	r3, [r7, #8]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d002      	beq.n	800d02c <HAL_UART_Receive_IT+0x24>
 800d026:	88fb      	ldrh	r3, [r7, #6]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d101      	bne.n	800d030 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800d02c:	2301      	movs	r3, #1
 800d02e:	e044      	b.n	800d0ba <HAL_UART_Receive_IT+0xb2>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	2200      	movs	r2, #0
 800d034:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	689b      	ldr	r3, [r3, #8]
 800d03c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d040:	2b40      	cmp	r3, #64	@ 0x40
 800d042:	d107      	bne.n	800d054 <HAL_UART_Receive_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	689a      	ldr	r2, [r3, #8]
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d052:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	4a1a      	ldr	r2, [pc, #104]	@ (800d0c4 <HAL_UART_Receive_IT+0xbc>)
 800d05a:	4293      	cmp	r3, r2
 800d05c:	d024      	beq.n	800d0a8 <HAL_UART_Receive_IT+0xa0>
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	4a19      	ldr	r2, [pc, #100]	@ (800d0c8 <HAL_UART_Receive_IT+0xc0>)
 800d064:	4293      	cmp	r3, r2
 800d066:	d01f      	beq.n	800d0a8 <HAL_UART_Receive_IT+0xa0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	685b      	ldr	r3, [r3, #4]
 800d06e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d072:	2b00      	cmp	r3, #0
 800d074:	d018      	beq.n	800d0a8 <HAL_UART_Receive_IT+0xa0>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d07c:	697b      	ldr	r3, [r7, #20]
 800d07e:	e853 3f00 	ldrex	r3, [r3]
 800d082:	613b      	str	r3, [r7, #16]
   return(result);
 800d084:	693b      	ldr	r3, [r7, #16]
 800d086:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d08a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	461a      	mov	r2, r3
 800d092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d094:	623b      	str	r3, [r7, #32]
 800d096:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d098:	69f9      	ldr	r1, [r7, #28]
 800d09a:	6a3a      	ldr	r2, [r7, #32]
 800d09c:	e841 2300 	strex	r3, r2, [r1]
 800d0a0:	61bb      	str	r3, [r7, #24]
   return(result);
 800d0a2:	69bb      	ldr	r3, [r7, #24]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d1e6      	bne.n	800d076 <HAL_UART_Receive_IT+0x6e>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d0a8:	88fb      	ldrh	r3, [r7, #6]
 800d0aa:	461a      	mov	r2, r3
 800d0ac:	68b9      	ldr	r1, [r7, #8]
 800d0ae:	68f8      	ldr	r0, [r7, #12]
 800d0b0:	f000 fec2 	bl	800de38 <UART_Start_Receive_IT>
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	e000      	b.n	800d0ba <HAL_UART_Receive_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800d0b8:	2302      	movs	r3, #2
  }
}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	3728      	adds	r7, #40	@ 0x28
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}
 800d0c2:	bf00      	nop
 800d0c4:	44002400 	.word	0x44002400
 800d0c8:	54002400 	.word	0x54002400

0800d0cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b0ae      	sub	sp, #184	@ 0xb8
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	69db      	ldr	r3, [r3, #28]
 800d0da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	689b      	ldr	r3, [r3, #8]
 800d0ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d0f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d0f6:	f640 030f 	movw	r3, #2063	@ 0x80f
 800d0fa:	4013      	ands	r3, r2
 800d0fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 800d100:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d104:	2b00      	cmp	r3, #0
 800d106:	d11b      	bne.n	800d140 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d108:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d10c:	f003 0320 	and.w	r3, r3, #32
 800d110:	2b00      	cmp	r3, #0
 800d112:	d015      	beq.n	800d140 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d114:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d118:	f003 0320 	and.w	r3, r3, #32
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d105      	bne.n	800d12c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d120:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d124:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d009      	beq.n	800d140 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d130:	2b00      	cmp	r3, #0
 800d132:	f000 82ac 	beq.w	800d68e <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d13a:	6878      	ldr	r0, [r7, #4]
 800d13c:	4798      	blx	r3
      }
      return;
 800d13e:	e2a6      	b.n	800d68e <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d140:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d144:	2b00      	cmp	r3, #0
 800d146:	f000 80fd 	beq.w	800d344 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d14a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800d14e:	4b7a      	ldr	r3, [pc, #488]	@ (800d338 <HAL_UART_IRQHandler+0x26c>)
 800d150:	4013      	ands	r3, r2
 800d152:	2b00      	cmp	r3, #0
 800d154:	d106      	bne.n	800d164 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d156:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d15a:	4b78      	ldr	r3, [pc, #480]	@ (800d33c <HAL_UART_IRQHandler+0x270>)
 800d15c:	4013      	ands	r3, r2
 800d15e:	2b00      	cmp	r3, #0
 800d160:	f000 80f0 	beq.w	800d344 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d164:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d168:	f003 0301 	and.w	r3, r3, #1
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d011      	beq.n	800d194 <HAL_UART_IRQHandler+0xc8>
 800d170:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d174:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d00b      	beq.n	800d194 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	2201      	movs	r2, #1
 800d182:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d18a:	f043 0201 	orr.w	r2, r3, #1
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d194:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d198:	f003 0302 	and.w	r3, r3, #2
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d011      	beq.n	800d1c4 <HAL_UART_IRQHandler+0xf8>
 800d1a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d1a4:	f003 0301 	and.w	r3, r3, #1
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d00b      	beq.n	800d1c4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	2202      	movs	r2, #2
 800d1b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1ba:	f043 0204 	orr.w	r2, r3, #4
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d1c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d1c8:	f003 0304 	and.w	r3, r3, #4
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d011      	beq.n	800d1f4 <HAL_UART_IRQHandler+0x128>
 800d1d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d1d4:	f003 0301 	and.w	r3, r3, #1
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d00b      	beq.n	800d1f4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	2204      	movs	r2, #4
 800d1e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1ea:	f043 0202 	orr.w	r2, r3, #2
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d1f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d1f8:	f003 0308 	and.w	r3, r3, #8
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d017      	beq.n	800d230 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d200:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d204:	f003 0320 	and.w	r3, r3, #32
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d105      	bne.n	800d218 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d20c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800d210:	4b49      	ldr	r3, [pc, #292]	@ (800d338 <HAL_UART_IRQHandler+0x26c>)
 800d212:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d214:	2b00      	cmp	r3, #0
 800d216:	d00b      	beq.n	800d230 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	2208      	movs	r2, #8
 800d21e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d226:	f043 0208 	orr.w	r2, r3, #8
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d230:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d234:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d012      	beq.n	800d262 <HAL_UART_IRQHandler+0x196>
 800d23c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d240:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d244:	2b00      	cmp	r3, #0
 800d246:	d00c      	beq.n	800d262 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d250:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d258:	f043 0220 	orr.w	r2, r3, #32
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d268:	2b00      	cmp	r3, #0
 800d26a:	f000 8212 	beq.w	800d692 <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d26e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d272:	f003 0320 	and.w	r3, r3, #32
 800d276:	2b00      	cmp	r3, #0
 800d278:	d013      	beq.n	800d2a2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d27a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d27e:	f003 0320 	and.w	r3, r3, #32
 800d282:	2b00      	cmp	r3, #0
 800d284:	d105      	bne.n	800d292 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d286:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d28a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d007      	beq.n	800d2a2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d296:	2b00      	cmp	r3, #0
 800d298:	d003      	beq.n	800d2a2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d29e:	6878      	ldr	r0, [r7, #4]
 800d2a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d2a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	689b      	ldr	r3, [r3, #8]
 800d2b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2b6:	2b40      	cmp	r3, #64	@ 0x40
 800d2b8:	d005      	beq.n	800d2c6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d2ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d2be:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d02e      	beq.n	800d324 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f000 fed8 	bl	800e07c <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	689b      	ldr	r3, [r3, #8]
 800d2d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2d6:	2b40      	cmp	r3, #64	@ 0x40
 800d2d8:	d120      	bne.n	800d31c <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d017      	beq.n	800d314 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2ea:	4a15      	ldr	r2, [pc, #84]	@ (800d340 <HAL_UART_IRQHandler+0x274>)
 800d2ec:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	f7f7 fdeb 	bl	8004ed0 <HAL_DMA_Abort_IT>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d019      	beq.n	800d334 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d306:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d308:	687a      	ldr	r2, [r7, #4]
 800d30a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800d30e:	4610      	mov	r0, r2
 800d310:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d312:	e00f      	b.n	800d334 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	f000 f9d1 	bl	800d6bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d31a:	e00b      	b.n	800d334 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d31c:	6878      	ldr	r0, [r7, #4]
 800d31e:	f000 f9cd 	bl	800d6bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d322:	e007      	b.n	800d334 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f000 f9c9 	bl	800d6bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	2200      	movs	r2, #0
 800d32e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800d332:	e1ae      	b.n	800d692 <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d334:	bf00      	nop
    return;
 800d336:	e1ac      	b.n	800d692 <HAL_UART_IRQHandler+0x5c6>
 800d338:	10000001 	.word	0x10000001
 800d33c:	04000120 	.word	0x04000120
 800d340:	0800e149 	.word	0x0800e149

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d348:	2b01      	cmp	r3, #1
 800d34a:	f040 8142 	bne.w	800d5d2 <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d34e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d352:	f003 0310 	and.w	r3, r3, #16
 800d356:	2b00      	cmp	r3, #0
 800d358:	f000 813b 	beq.w	800d5d2 <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d35c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d360:	f003 0310 	and.w	r3, r3, #16
 800d364:	2b00      	cmp	r3, #0
 800d366:	f000 8134 	beq.w	800d5d2 <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	2210      	movs	r2, #16
 800d370:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	689b      	ldr	r3, [r3, #8]
 800d378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d37c:	2b40      	cmp	r3, #64	@ 0x40
 800d37e:	f040 80aa 	bne.w	800d4d6 <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d38c:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 800d390:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800d394:	2b00      	cmp	r3, #0
 800d396:	f000 8084 	beq.w	800d4a2 <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d3a0:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800d3a4:	429a      	cmp	r2, r3
 800d3a6:	d27c      	bcs.n	800d4a2 <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800d3ae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d3ba:	2b81      	cmp	r3, #129	@ 0x81
 800d3bc:	d060      	beq.n	800d480 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d3c6:	e853 3f00 	ldrex	r3, [r3]
 800d3ca:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d3cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d3ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d3d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	461a      	mov	r2, r3
 800d3dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d3e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d3e4:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3e6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d3e8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d3ec:	e841 2300 	strex	r3, r2, [r1]
 800d3f0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d3f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d1e2      	bne.n	800d3be <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	3308      	adds	r3, #8
 800d3fe:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d400:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d402:	e853 3f00 	ldrex	r3, [r3]
 800d406:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d408:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d40a:	f023 0301 	bic.w	r3, r3, #1
 800d40e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	3308      	adds	r3, #8
 800d418:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d41c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d41e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d420:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d422:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d424:	e841 2300 	strex	r3, r2, [r1]
 800d428:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d42a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d1e3      	bne.n	800d3f8 <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2220      	movs	r2, #32
 800d434:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2200      	movs	r2, #0
 800d43c:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d444:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d446:	e853 3f00 	ldrex	r3, [r3]
 800d44a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d44c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d44e:	f023 0310 	bic.w	r3, r3, #16
 800d452:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	461a      	mov	r2, r3
 800d45c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d460:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d462:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d464:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d466:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d468:	e841 2300 	strex	r3, r2, [r1]
 800d46c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d46e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d470:	2b00      	cmp	r3, #0
 800d472:	d1e4      	bne.n	800d43e <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d47a:	4618      	mov	r0, r3
 800d47c:	f7f7 fcac 	bl	8004dd8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2202      	movs	r2, #2
 800d484:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d492:	b29b      	uxth	r3, r3
 800d494:	1ad3      	subs	r3, r2, r3
 800d496:	b29b      	uxth	r3, r3
 800d498:	4619      	mov	r1, r3
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	f000 f918 	bl	800d6d0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800d4a0:	e0f9      	b.n	800d696 <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d4a8:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800d4ac:	429a      	cmp	r2, r3
 800d4ae:	f040 80f2 	bne.w	800d696 <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d4b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d4ba:	2b81      	cmp	r3, #129	@ 0x81
 800d4bc:	f040 80eb 	bne.w	800d696 <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2202      	movs	r2, #2
 800d4c4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d4cc:	4619      	mov	r1, r3
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	f000 f8fe 	bl	800d6d0 <HAL_UARTEx_RxEventCallback>
      return;
 800d4d4:	e0df      	b.n	800d696 <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d4e2:	b29b      	uxth	r3, r3
 800d4e4:	1ad3      	subs	r3, r2, r3
 800d4e6:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d4f0:	b29b      	uxth	r3, r3
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	f000 80d1 	beq.w	800d69a <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 800d4f8:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	f000 80cc 	beq.w	800d69a <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d50a:	e853 3f00 	ldrex	r3, [r3]
 800d50e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d512:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d516:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	461a      	mov	r2, r3
 800d520:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d524:	647b      	str	r3, [r7, #68]	@ 0x44
 800d526:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d528:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d52a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d52c:	e841 2300 	strex	r3, r2, [r1]
 800d530:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d532:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d534:	2b00      	cmp	r3, #0
 800d536:	d1e4      	bne.n	800d502 <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	3308      	adds	r3, #8
 800d53e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d542:	e853 3f00 	ldrex	r3, [r3]
 800d546:	623b      	str	r3, [r7, #32]
   return(result);
 800d548:	6a3b      	ldr	r3, [r7, #32]
 800d54a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d54e:	f023 0301 	bic.w	r3, r3, #1
 800d552:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	3308      	adds	r3, #8
 800d55c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800d560:	633a      	str	r2, [r7, #48]	@ 0x30
 800d562:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d564:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d566:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d568:	e841 2300 	strex	r3, r2, [r1]
 800d56c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d56e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d570:	2b00      	cmp	r3, #0
 800d572:	d1e1      	bne.n	800d538 <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2220      	movs	r2, #32
 800d578:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2200      	movs	r2, #0
 800d580:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	2200      	movs	r2, #0
 800d586:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d58e:	693b      	ldr	r3, [r7, #16]
 800d590:	e853 3f00 	ldrex	r3, [r3]
 800d594:	60fb      	str	r3, [r7, #12]
   return(result);
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	f023 0310 	bic.w	r3, r3, #16
 800d59c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	461a      	mov	r2, r3
 800d5a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d5aa:	61fb      	str	r3, [r7, #28]
 800d5ac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5ae:	69b9      	ldr	r1, [r7, #24]
 800d5b0:	69fa      	ldr	r2, [r7, #28]
 800d5b2:	e841 2300 	strex	r3, r2, [r1]
 800d5b6:	617b      	str	r3, [r7, #20]
   return(result);
 800d5b8:	697b      	ldr	r3, [r7, #20]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d1e4      	bne.n	800d588 <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2202      	movs	r2, #2
 800d5c2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d5c4:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800d5c8:	4619      	mov	r1, r3
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	f000 f880 	bl	800d6d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d5d0:	e063      	b.n	800d69a <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d5d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d5d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d00e      	beq.n	800d5fc <HAL_UART_IRQHandler+0x530>
 800d5de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d5e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d008      	beq.n	800d5fc <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d5f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d5f4:	6878      	ldr	r0, [r7, #4]
 800d5f6:	f001 fcc3 	bl	800ef80 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d5fa:	e051      	b.n	800d6a0 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d5fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d600:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d604:	2b00      	cmp	r3, #0
 800d606:	d014      	beq.n	800d632 <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d608:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d60c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d610:	2b00      	cmp	r3, #0
 800d612:	d105      	bne.n	800d620 <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d614:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d618:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d008      	beq.n	800d632 <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d624:	2b00      	cmp	r3, #0
 800d626:	d03a      	beq.n	800d69e <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d62c:	6878      	ldr	r0, [r7, #4]
 800d62e:	4798      	blx	r3
    }
    return;
 800d630:	e035      	b.n	800d69e <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d632:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d009      	beq.n	800d652 <HAL_UART_IRQHandler+0x586>
 800d63e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d646:	2b00      	cmp	r3, #0
 800d648:	d003      	beq.n	800d652 <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 800d64a:	6878      	ldr	r0, [r7, #4]
 800d64c:	f000 ff34 	bl	800e4b8 <UART_EndTransmit_IT>
    return;
 800d650:	e026      	b.n	800d6a0 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d652:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d656:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d009      	beq.n	800d672 <HAL_UART_IRQHandler+0x5a6>
 800d65e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d662:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d666:	2b00      	cmp	r3, #0
 800d668:	d003      	beq.n	800d672 <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d66a:	6878      	ldr	r0, [r7, #4]
 800d66c:	f001 fc9c 	bl	800efa8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d670:	e016      	b.n	800d6a0 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d672:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d676:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d010      	beq.n	800d6a0 <HAL_UART_IRQHandler+0x5d4>
 800d67e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d682:	2b00      	cmp	r3, #0
 800d684:	da0c      	bge.n	800d6a0 <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f001 fc84 	bl	800ef94 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d68c:	e008      	b.n	800d6a0 <HAL_UART_IRQHandler+0x5d4>
      return;
 800d68e:	bf00      	nop
 800d690:	e006      	b.n	800d6a0 <HAL_UART_IRQHandler+0x5d4>
    return;
 800d692:	bf00      	nop
 800d694:	e004      	b.n	800d6a0 <HAL_UART_IRQHandler+0x5d4>
      return;
 800d696:	bf00      	nop
 800d698:	e002      	b.n	800d6a0 <HAL_UART_IRQHandler+0x5d4>
      return;
 800d69a:	bf00      	nop
 800d69c:	e000      	b.n	800d6a0 <HAL_UART_IRQHandler+0x5d4>
    return;
 800d69e:	bf00      	nop
  }
}
 800d6a0:	37b8      	adds	r7, #184	@ 0xb8
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}
 800d6a6:	bf00      	nop

0800d6a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d6a8:	b480      	push	{r7}
 800d6aa:	b083      	sub	sp, #12
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d6b0:	bf00      	nop
 800d6b2:	370c      	adds	r7, #12
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ba:	4770      	bx	lr

0800d6bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d6bc:	b480      	push	{r7}
 800d6be:	b083      	sub	sp, #12
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d6c4:	bf00      	nop
 800d6c6:	370c      	adds	r7, #12
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ce:	4770      	bx	lr

0800d6d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d6d0:	b480      	push	{r7}
 800d6d2:	b083      	sub	sp, #12
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
 800d6d8:	460b      	mov	r3, r1
 800d6da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d6dc:	bf00      	nop
 800d6de:	370c      	adds	r7, #12
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e6:	4770      	bx	lr

0800d6e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d6e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d6ec:	b094      	sub	sp, #80	@ 0x50
 800d6ee:	af00      	add	r7, sp, #0
 800d6f0:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800d6f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6fa:	681a      	ldr	r2, [r3, #0]
 800d6fc:	4b78      	ldr	r3, [pc, #480]	@ (800d8e0 <UART_SetConfig+0x1f8>)
 800d6fe:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d702:	689a      	ldr	r2, [r3, #8]
 800d704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d706:	691b      	ldr	r3, [r3, #16]
 800d708:	431a      	orrs	r2, r3
 800d70a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d70c:	695b      	ldr	r3, [r3, #20]
 800d70e:	431a      	orrs	r2, r3
 800d710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d712:	69db      	ldr	r3, [r3, #28]
 800d714:	4313      	orrs	r3, r2
 800d716:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	4971      	ldr	r1, [pc, #452]	@ (800d8e4 <UART_SetConfig+0x1fc>)
 800d720:	4019      	ands	r1, r3
 800d722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d724:	681a      	ldr	r2, [r3, #0]
 800d726:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d728:	430b      	orrs	r3, r1
 800d72a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d72c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	685b      	ldr	r3, [r3, #4]
 800d732:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800d736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d738:	68d9      	ldr	r1, [r3, #12]
 800d73a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d73c:	681a      	ldr	r2, [r3, #0]
 800d73e:	ea40 0301 	orr.w	r3, r0, r1
 800d742:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d746:	699b      	ldr	r3, [r3, #24]
 800d748:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d74a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d74c:	681a      	ldr	r2, [r3, #0]
 800d74e:	4b64      	ldr	r3, [pc, #400]	@ (800d8e0 <UART_SetConfig+0x1f8>)
 800d750:	429a      	cmp	r2, r3
 800d752:	d009      	beq.n	800d768 <UART_SetConfig+0x80>
 800d754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d756:	681a      	ldr	r2, [r3, #0]
 800d758:	4b63      	ldr	r3, [pc, #396]	@ (800d8e8 <UART_SetConfig+0x200>)
 800d75a:	429a      	cmp	r2, r3
 800d75c:	d004      	beq.n	800d768 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d75e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d760:	6a1a      	ldr	r2, [r3, #32]
 800d762:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d764:	4313      	orrs	r3, r2
 800d766:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	689b      	ldr	r3, [r3, #8]
 800d76e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800d772:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800d776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d778:	681a      	ldr	r2, [r3, #0]
 800d77a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d77c:	430b      	orrs	r3, r1
 800d77e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d786:	f023 000f 	bic.w	r0, r3, #15
 800d78a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d78c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800d78e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d790:	681a      	ldr	r2, [r3, #0]
 800d792:	ea40 0301 	orr.w	r3, r0, r1
 800d796:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d79a:	681a      	ldr	r2, [r3, #0]
 800d79c:	4b53      	ldr	r3, [pc, #332]	@ (800d8ec <UART_SetConfig+0x204>)
 800d79e:	429a      	cmp	r2, r3
 800d7a0:	d102      	bne.n	800d7a8 <UART_SetConfig+0xc0>
 800d7a2:	2301      	movs	r3, #1
 800d7a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d7a6:	e066      	b.n	800d876 <UART_SetConfig+0x18e>
 800d7a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7aa:	681a      	ldr	r2, [r3, #0]
 800d7ac:	4b50      	ldr	r3, [pc, #320]	@ (800d8f0 <UART_SetConfig+0x208>)
 800d7ae:	429a      	cmp	r2, r3
 800d7b0:	d102      	bne.n	800d7b8 <UART_SetConfig+0xd0>
 800d7b2:	2302      	movs	r3, #2
 800d7b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d7b6:	e05e      	b.n	800d876 <UART_SetConfig+0x18e>
 800d7b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7ba:	681a      	ldr	r2, [r3, #0]
 800d7bc:	4b4d      	ldr	r3, [pc, #308]	@ (800d8f4 <UART_SetConfig+0x20c>)
 800d7be:	429a      	cmp	r2, r3
 800d7c0:	d102      	bne.n	800d7c8 <UART_SetConfig+0xe0>
 800d7c2:	2304      	movs	r3, #4
 800d7c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d7c6:	e056      	b.n	800d876 <UART_SetConfig+0x18e>
 800d7c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7ca:	681a      	ldr	r2, [r3, #0]
 800d7cc:	4b4a      	ldr	r3, [pc, #296]	@ (800d8f8 <UART_SetConfig+0x210>)
 800d7ce:	429a      	cmp	r2, r3
 800d7d0:	d102      	bne.n	800d7d8 <UART_SetConfig+0xf0>
 800d7d2:	2308      	movs	r3, #8
 800d7d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d7d6:	e04e      	b.n	800d876 <UART_SetConfig+0x18e>
 800d7d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7da:	681a      	ldr	r2, [r3, #0]
 800d7dc:	4b47      	ldr	r3, [pc, #284]	@ (800d8fc <UART_SetConfig+0x214>)
 800d7de:	429a      	cmp	r2, r3
 800d7e0:	d102      	bne.n	800d7e8 <UART_SetConfig+0x100>
 800d7e2:	2310      	movs	r3, #16
 800d7e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d7e6:	e046      	b.n	800d876 <UART_SetConfig+0x18e>
 800d7e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7ea:	681a      	ldr	r2, [r3, #0]
 800d7ec:	4b44      	ldr	r3, [pc, #272]	@ (800d900 <UART_SetConfig+0x218>)
 800d7ee:	429a      	cmp	r2, r3
 800d7f0:	d102      	bne.n	800d7f8 <UART_SetConfig+0x110>
 800d7f2:	2320      	movs	r3, #32
 800d7f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d7f6:	e03e      	b.n	800d876 <UART_SetConfig+0x18e>
 800d7f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7fa:	681a      	ldr	r2, [r3, #0]
 800d7fc:	4b41      	ldr	r3, [pc, #260]	@ (800d904 <UART_SetConfig+0x21c>)
 800d7fe:	429a      	cmp	r2, r3
 800d800:	d102      	bne.n	800d808 <UART_SetConfig+0x120>
 800d802:	2340      	movs	r3, #64	@ 0x40
 800d804:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d806:	e036      	b.n	800d876 <UART_SetConfig+0x18e>
 800d808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d80a:	681a      	ldr	r2, [r3, #0]
 800d80c:	4b3e      	ldr	r3, [pc, #248]	@ (800d908 <UART_SetConfig+0x220>)
 800d80e:	429a      	cmp	r2, r3
 800d810:	d102      	bne.n	800d818 <UART_SetConfig+0x130>
 800d812:	2380      	movs	r3, #128	@ 0x80
 800d814:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d816:	e02e      	b.n	800d876 <UART_SetConfig+0x18e>
 800d818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d81a:	681a      	ldr	r2, [r3, #0]
 800d81c:	4b3b      	ldr	r3, [pc, #236]	@ (800d90c <UART_SetConfig+0x224>)
 800d81e:	429a      	cmp	r2, r3
 800d820:	d103      	bne.n	800d82a <UART_SetConfig+0x142>
 800d822:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d826:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d828:	e025      	b.n	800d876 <UART_SetConfig+0x18e>
 800d82a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d82c:	681a      	ldr	r2, [r3, #0]
 800d82e:	4b38      	ldr	r3, [pc, #224]	@ (800d910 <UART_SetConfig+0x228>)
 800d830:	429a      	cmp	r2, r3
 800d832:	d103      	bne.n	800d83c <UART_SetConfig+0x154>
 800d834:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d838:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d83a:	e01c      	b.n	800d876 <UART_SetConfig+0x18e>
 800d83c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d83e:	681a      	ldr	r2, [r3, #0]
 800d840:	4b34      	ldr	r3, [pc, #208]	@ (800d914 <UART_SetConfig+0x22c>)
 800d842:	429a      	cmp	r2, r3
 800d844:	d103      	bne.n	800d84e <UART_SetConfig+0x166>
 800d846:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d84a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d84c:	e013      	b.n	800d876 <UART_SetConfig+0x18e>
 800d84e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d850:	681a      	ldr	r2, [r3, #0]
 800d852:	4b31      	ldr	r3, [pc, #196]	@ (800d918 <UART_SetConfig+0x230>)
 800d854:	429a      	cmp	r2, r3
 800d856:	d103      	bne.n	800d860 <UART_SetConfig+0x178>
 800d858:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d85c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d85e:	e00a      	b.n	800d876 <UART_SetConfig+0x18e>
 800d860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d862:	681a      	ldr	r2, [r3, #0]
 800d864:	4b1e      	ldr	r3, [pc, #120]	@ (800d8e0 <UART_SetConfig+0x1f8>)
 800d866:	429a      	cmp	r2, r3
 800d868:	d103      	bne.n	800d872 <UART_SetConfig+0x18a>
 800d86a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d86e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d870:	e001      	b.n	800d876 <UART_SetConfig+0x18e>
 800d872:	2300      	movs	r3, #0
 800d874:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d878:	681a      	ldr	r2, [r3, #0]
 800d87a:	4b19      	ldr	r3, [pc, #100]	@ (800d8e0 <UART_SetConfig+0x1f8>)
 800d87c:	429a      	cmp	r2, r3
 800d87e:	d005      	beq.n	800d88c <UART_SetConfig+0x1a4>
 800d880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d882:	681a      	ldr	r2, [r3, #0]
 800d884:	4b18      	ldr	r3, [pc, #96]	@ (800d8e8 <UART_SetConfig+0x200>)
 800d886:	429a      	cmp	r2, r3
 800d888:	f040 8094 	bne.w	800d9b4 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d88c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d88e:	2200      	movs	r2, #0
 800d890:	623b      	str	r3, [r7, #32]
 800d892:	627a      	str	r2, [r7, #36]	@ 0x24
 800d894:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d898:	f7fb ff40 	bl	800971c <HAL_RCCEx_GetPeriphCLKFreq>
 800d89c:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800d89e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	f000 80f7 	beq.w	800da94 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d8a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8aa:	4a1c      	ldr	r2, [pc, #112]	@ (800d91c <UART_SetConfig+0x234>)
 800d8ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d8b0:	461a      	mov	r2, r3
 800d8b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d8b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d8b8:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d8ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8bc:	685a      	ldr	r2, [r3, #4]
 800d8be:	4613      	mov	r3, r2
 800d8c0:	005b      	lsls	r3, r3, #1
 800d8c2:	4413      	add	r3, r2
 800d8c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d8c6:	429a      	cmp	r2, r3
 800d8c8:	d305      	bcc.n	800d8d6 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d8ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8cc:	685b      	ldr	r3, [r3, #4]
 800d8ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d8d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d8d2:	429a      	cmp	r2, r3
 800d8d4:	d924      	bls.n	800d920 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800d8dc:	e069      	b.n	800d9b2 <UART_SetConfig+0x2ca>
 800d8de:	bf00      	nop
 800d8e0:	44002400 	.word	0x44002400
 800d8e4:	cfff69f3 	.word	0xcfff69f3
 800d8e8:	54002400 	.word	0x54002400
 800d8ec:	40013800 	.word	0x40013800
 800d8f0:	40004400 	.word	0x40004400
 800d8f4:	40004800 	.word	0x40004800
 800d8f8:	40004c00 	.word	0x40004c00
 800d8fc:	40005000 	.word	0x40005000
 800d900:	40006400 	.word	0x40006400
 800d904:	40007800 	.word	0x40007800
 800d908:	40007c00 	.word	0x40007c00
 800d90c:	40008000 	.word	0x40008000
 800d910:	40006800 	.word	0x40006800
 800d914:	40006c00 	.word	0x40006c00
 800d918:	40008400 	.word	0x40008400
 800d91c:	0801255c 	.word	0x0801255c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d920:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d922:	2200      	movs	r2, #0
 800d924:	61bb      	str	r3, [r7, #24]
 800d926:	61fa      	str	r2, [r7, #28]
 800d928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d92a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d92c:	4a64      	ldr	r2, [pc, #400]	@ (800dac0 <UART_SetConfig+0x3d8>)
 800d92e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d932:	b29b      	uxth	r3, r3
 800d934:	2200      	movs	r2, #0
 800d936:	613b      	str	r3, [r7, #16]
 800d938:	617a      	str	r2, [r7, #20]
 800d93a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d93e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d942:	f7f3 f991 	bl	8000c68 <__aeabi_uldivmod>
 800d946:	4602      	mov	r2, r0
 800d948:	460b      	mov	r3, r1
 800d94a:	4610      	mov	r0, r2
 800d94c:	4619      	mov	r1, r3
 800d94e:	f04f 0200 	mov.w	r2, #0
 800d952:	f04f 0300 	mov.w	r3, #0
 800d956:	020b      	lsls	r3, r1, #8
 800d958:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d95c:	0202      	lsls	r2, r0, #8
 800d95e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d960:	6849      	ldr	r1, [r1, #4]
 800d962:	0849      	lsrs	r1, r1, #1
 800d964:	2000      	movs	r0, #0
 800d966:	460c      	mov	r4, r1
 800d968:	4605      	mov	r5, r0
 800d96a:	eb12 0804 	adds.w	r8, r2, r4
 800d96e:	eb43 0905 	adc.w	r9, r3, r5
 800d972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d974:	685b      	ldr	r3, [r3, #4]
 800d976:	2200      	movs	r2, #0
 800d978:	60bb      	str	r3, [r7, #8]
 800d97a:	60fa      	str	r2, [r7, #12]
 800d97c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d980:	4640      	mov	r0, r8
 800d982:	4649      	mov	r1, r9
 800d984:	f7f3 f970 	bl	8000c68 <__aeabi_uldivmod>
 800d988:	4602      	mov	r2, r0
 800d98a:	460b      	mov	r3, r1
 800d98c:	4613      	mov	r3, r2
 800d98e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d990:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d992:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d996:	d308      	bcc.n	800d9aa <UART_SetConfig+0x2c2>
 800d998:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d99a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d99e:	d204      	bcs.n	800d9aa <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800d9a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d9a6:	60da      	str	r2, [r3, #12]
 800d9a8:	e003      	b.n	800d9b2 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800d9aa:	2301      	movs	r3, #1
 800d9ac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800d9b0:	e070      	b.n	800da94 <UART_SetConfig+0x3ac>
 800d9b2:	e06f      	b.n	800da94 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d9b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9b6:	69db      	ldr	r3, [r3, #28]
 800d9b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d9bc:	d13c      	bne.n	800da38 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d9be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	603b      	str	r3, [r7, #0]
 800d9c4:	607a      	str	r2, [r7, #4]
 800d9c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d9ca:	f7fb fea7 	bl	800971c <HAL_RCCEx_GetPeriphCLKFreq>
 800d9ce:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d9d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d05e      	beq.n	800da94 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d9d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9da:	4a39      	ldr	r2, [pc, #228]	@ (800dac0 <UART_SetConfig+0x3d8>)
 800d9dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d9e0:	461a      	mov	r2, r3
 800d9e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d9e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d9e8:	005a      	lsls	r2, r3, #1
 800d9ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9ec:	685b      	ldr	r3, [r3, #4]
 800d9ee:	085b      	lsrs	r3, r3, #1
 800d9f0:	441a      	add	r2, r3
 800d9f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9f4:	685b      	ldr	r3, [r3, #4]
 800d9f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d9fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9fe:	2b0f      	cmp	r3, #15
 800da00:	d916      	bls.n	800da30 <UART_SetConfig+0x348>
 800da02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800da08:	d212      	bcs.n	800da30 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800da0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da0c:	b29b      	uxth	r3, r3
 800da0e:	f023 030f 	bic.w	r3, r3, #15
 800da12:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800da14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da16:	085b      	lsrs	r3, r3, #1
 800da18:	b29b      	uxth	r3, r3
 800da1a:	f003 0307 	and.w	r3, r3, #7
 800da1e:	b29a      	uxth	r2, r3
 800da20:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800da22:	4313      	orrs	r3, r2
 800da24:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800da26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800da2c:	60da      	str	r2, [r3, #12]
 800da2e:	e031      	b.n	800da94 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800da30:	2301      	movs	r3, #1
 800da32:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800da36:	e02d      	b.n	800da94 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800da38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800da3a:	2200      	movs	r2, #0
 800da3c:	469a      	mov	sl, r3
 800da3e:	4693      	mov	fp, r2
 800da40:	4650      	mov	r0, sl
 800da42:	4659      	mov	r1, fp
 800da44:	f7fb fe6a 	bl	800971c <HAL_RCCEx_GetPeriphCLKFreq>
 800da48:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800da4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d021      	beq.n	800da94 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800da50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da54:	4a1a      	ldr	r2, [pc, #104]	@ (800dac0 <UART_SetConfig+0x3d8>)
 800da56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da5a:	461a      	mov	r2, r3
 800da5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800da5e:	fbb3 f2f2 	udiv	r2, r3, r2
 800da62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da64:	685b      	ldr	r3, [r3, #4]
 800da66:	085b      	lsrs	r3, r3, #1
 800da68:	441a      	add	r2, r3
 800da6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da6c:	685b      	ldr	r3, [r3, #4]
 800da6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800da72:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800da74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da76:	2b0f      	cmp	r3, #15
 800da78:	d909      	bls.n	800da8e <UART_SetConfig+0x3a6>
 800da7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800da80:	d205      	bcs.n	800da8e <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800da82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da84:	b29a      	uxth	r2, r3
 800da86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	60da      	str	r2, [r3, #12]
 800da8c:	e002      	b.n	800da94 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800da8e:	2301      	movs	r3, #1
 800da90:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800da94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da96:	2201      	movs	r2, #1
 800da98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800da9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da9e:	2201      	movs	r2, #1
 800daa0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800daa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daa6:	2200      	movs	r2, #0
 800daa8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800daaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daac:	2200      	movs	r2, #0
 800daae:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800dab0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800dab4:	4618      	mov	r0, r3
 800dab6:	3750      	adds	r7, #80	@ 0x50
 800dab8:	46bd      	mov	sp, r7
 800daba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dabe:	bf00      	nop
 800dac0:	0801255c 	.word	0x0801255c

0800dac4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dac4:	b480      	push	{r7}
 800dac6:	b083      	sub	sp, #12
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dad0:	f003 0308 	and.w	r3, r3, #8
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d00a      	beq.n	800daee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	685b      	ldr	r3, [r3, #4]
 800dade:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	430a      	orrs	r2, r1
 800daec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800daf2:	f003 0301 	and.w	r3, r3, #1
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d00a      	beq.n	800db10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	685b      	ldr	r3, [r3, #4]
 800db00:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	430a      	orrs	r2, r1
 800db0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db14:	f003 0302 	and.w	r3, r3, #2
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d00a      	beq.n	800db32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	685b      	ldr	r3, [r3, #4]
 800db22:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	430a      	orrs	r2, r1
 800db30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db36:	f003 0304 	and.w	r3, r3, #4
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d00a      	beq.n	800db54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	685b      	ldr	r3, [r3, #4]
 800db44:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	430a      	orrs	r2, r1
 800db52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db58:	f003 0310 	and.w	r3, r3, #16
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d00a      	beq.n	800db76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	689b      	ldr	r3, [r3, #8]
 800db66:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	430a      	orrs	r2, r1
 800db74:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db7a:	f003 0320 	and.w	r3, r3, #32
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d00a      	beq.n	800db98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	689b      	ldr	r3, [r3, #8]
 800db88:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	430a      	orrs	r2, r1
 800db96:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d01a      	beq.n	800dbda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	685b      	ldr	r3, [r3, #4]
 800dbaa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	430a      	orrs	r2, r1
 800dbb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dbbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dbc2:	d10a      	bne.n	800dbda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	685b      	ldr	r3, [r3, #4]
 800dbca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	430a      	orrs	r2, r1
 800dbd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d00a      	beq.n	800dbfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	685b      	ldr	r3, [r3, #4]
 800dbec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	430a      	orrs	r2, r1
 800dbfa:	605a      	str	r2, [r3, #4]
  }
}
 800dbfc:	bf00      	nop
 800dbfe:	370c      	adds	r7, #12
 800dc00:	46bd      	mov	sp, r7
 800dc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc06:	4770      	bx	lr

0800dc08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b098      	sub	sp, #96	@ 0x60
 800dc0c:	af02      	add	r7, sp, #8
 800dc0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2200      	movs	r2, #0
 800dc14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dc18:	f7f6 ff1e 	bl	8004a58 <HAL_GetTick>
 800dc1c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	f003 0308 	and.w	r3, r3, #8
 800dc28:	2b08      	cmp	r3, #8
 800dc2a:	d12f      	bne.n	800dc8c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dc2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800dc30:	9300      	str	r3, [sp, #0]
 800dc32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dc34:	2200      	movs	r2, #0
 800dc36:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	f000 f88e 	bl	800dd5c <UART_WaitOnFlagUntilTimeout>
 800dc40:	4603      	mov	r3, r0
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d022      	beq.n	800dc8c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc4e:	e853 3f00 	ldrex	r3, [r3]
 800dc52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800dc54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dc5a:	653b      	str	r3, [r7, #80]	@ 0x50
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	461a      	mov	r2, r3
 800dc62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dc64:	647b      	str	r3, [r7, #68]	@ 0x44
 800dc66:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dc6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dc6c:	e841 2300 	strex	r3, r2, [r1]
 800dc70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800dc72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d1e6      	bne.n	800dc46 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2220      	movs	r2, #32
 800dc7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	2200      	movs	r2, #0
 800dc84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dc88:	2303      	movs	r3, #3
 800dc8a:	e063      	b.n	800dd54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	f003 0304 	and.w	r3, r3, #4
 800dc96:	2b04      	cmp	r3, #4
 800dc98:	d149      	bne.n	800dd2e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dc9a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800dc9e:	9300      	str	r3, [sp, #0]
 800dca0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dca2:	2200      	movs	r2, #0
 800dca4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800dca8:	6878      	ldr	r0, [r7, #4]
 800dcaa:	f000 f857 	bl	800dd5c <UART_WaitOnFlagUntilTimeout>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d03c      	beq.n	800dd2e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcbc:	e853 3f00 	ldrex	r3, [r3]
 800dcc0:	623b      	str	r3, [r7, #32]
   return(result);
 800dcc2:	6a3b      	ldr	r3, [r7, #32]
 800dcc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dcc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	461a      	mov	r2, r3
 800dcd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dcd2:	633b      	str	r3, [r7, #48]	@ 0x30
 800dcd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dcd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dcda:	e841 2300 	strex	r3, r2, [r1]
 800dcde:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d1e6      	bne.n	800dcb4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	3308      	adds	r3, #8
 800dcec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcee:	693b      	ldr	r3, [r7, #16]
 800dcf0:	e853 3f00 	ldrex	r3, [r3]
 800dcf4:	60fb      	str	r3, [r7, #12]
   return(result);
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	f023 0301 	bic.w	r3, r3, #1
 800dcfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	3308      	adds	r3, #8
 800dd04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dd06:	61fa      	str	r2, [r7, #28]
 800dd08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd0a:	69b9      	ldr	r1, [r7, #24]
 800dd0c:	69fa      	ldr	r2, [r7, #28]
 800dd0e:	e841 2300 	strex	r3, r2, [r1]
 800dd12:	617b      	str	r3, [r7, #20]
   return(result);
 800dd14:	697b      	ldr	r3, [r7, #20]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d1e5      	bne.n	800dce6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	2220      	movs	r2, #32
 800dd1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	2200      	movs	r2, #0
 800dd26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dd2a:	2303      	movs	r3, #3
 800dd2c:	e012      	b.n	800dd54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	2220      	movs	r2, #32
 800dd32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	2220      	movs	r2, #32
 800dd3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	2200      	movs	r2, #0
 800dd42:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	2200      	movs	r2, #0
 800dd48:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dd52:	2300      	movs	r3, #0
}
 800dd54:	4618      	mov	r0, r3
 800dd56:	3758      	adds	r7, #88	@ 0x58
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd80      	pop	{r7, pc}

0800dd5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b084      	sub	sp, #16
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	60f8      	str	r0, [r7, #12]
 800dd64:	60b9      	str	r1, [r7, #8]
 800dd66:	603b      	str	r3, [r7, #0]
 800dd68:	4613      	mov	r3, r2
 800dd6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dd6c:	e04f      	b.n	800de0e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dd6e:	69bb      	ldr	r3, [r7, #24]
 800dd70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd74:	d04b      	beq.n	800de0e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dd76:	f7f6 fe6f 	bl	8004a58 <HAL_GetTick>
 800dd7a:	4602      	mov	r2, r0
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	1ad3      	subs	r3, r2, r3
 800dd80:	69ba      	ldr	r2, [r7, #24]
 800dd82:	429a      	cmp	r2, r3
 800dd84:	d302      	bcc.n	800dd8c <UART_WaitOnFlagUntilTimeout+0x30>
 800dd86:	69bb      	ldr	r3, [r7, #24]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d101      	bne.n	800dd90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800dd8c:	2303      	movs	r3, #3
 800dd8e:	e04e      	b.n	800de2e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	f003 0304 	and.w	r3, r3, #4
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d037      	beq.n	800de0e <UART_WaitOnFlagUntilTimeout+0xb2>
 800dd9e:	68bb      	ldr	r3, [r7, #8]
 800dda0:	2b80      	cmp	r3, #128	@ 0x80
 800dda2:	d034      	beq.n	800de0e <UART_WaitOnFlagUntilTimeout+0xb2>
 800dda4:	68bb      	ldr	r3, [r7, #8]
 800dda6:	2b40      	cmp	r3, #64	@ 0x40
 800dda8:	d031      	beq.n	800de0e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	69db      	ldr	r3, [r3, #28]
 800ddb0:	f003 0308 	and.w	r3, r3, #8
 800ddb4:	2b08      	cmp	r3, #8
 800ddb6:	d110      	bne.n	800ddda <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	2208      	movs	r2, #8
 800ddbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ddc0:	68f8      	ldr	r0, [r7, #12]
 800ddc2:	f000 f95b 	bl	800e07c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	2208      	movs	r2, #8
 800ddca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ddd6:	2301      	movs	r3, #1
 800ddd8:	e029      	b.n	800de2e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	69db      	ldr	r3, [r3, #28]
 800dde0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dde4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dde8:	d111      	bne.n	800de0e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ddf2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ddf4:	68f8      	ldr	r0, [r7, #12]
 800ddf6:	f000 f941 	bl	800e07c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	2220      	movs	r2, #32
 800ddfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	2200      	movs	r2, #0
 800de06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800de0a:	2303      	movs	r3, #3
 800de0c:	e00f      	b.n	800de2e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	69da      	ldr	r2, [r3, #28]
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	4013      	ands	r3, r2
 800de18:	68ba      	ldr	r2, [r7, #8]
 800de1a:	429a      	cmp	r2, r3
 800de1c:	bf0c      	ite	eq
 800de1e:	2301      	moveq	r3, #1
 800de20:	2300      	movne	r3, #0
 800de22:	b2db      	uxtb	r3, r3
 800de24:	461a      	mov	r2, r3
 800de26:	79fb      	ldrb	r3, [r7, #7]
 800de28:	429a      	cmp	r2, r3
 800de2a:	d0a0      	beq.n	800dd6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800de2c:	2300      	movs	r3, #0
}
 800de2e:	4618      	mov	r0, r3
 800de30:	3710      	adds	r7, #16
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}
	...

0800de38 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800de38:	b480      	push	{r7}
 800de3a:	b0a3      	sub	sp, #140	@ 0x8c
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	60f8      	str	r0, [r7, #12]
 800de40:	60b9      	str	r1, [r7, #8]
 800de42:	4613      	mov	r3, r2
 800de44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	68ba      	ldr	r2, [r7, #8]
 800de4a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	88fa      	ldrh	r2, [r7, #6]
 800de50:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	88fa      	ldrh	r2, [r7, #6]
 800de58:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	2200      	movs	r2, #0
 800de60:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	689b      	ldr	r3, [r3, #8]
 800de66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800de6a:	d10e      	bne.n	800de8a <UART_Start_Receive_IT+0x52>
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	691b      	ldr	r3, [r3, #16]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d105      	bne.n	800de80 <UART_Start_Receive_IT+0x48>
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800de7a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800de7e:	e02d      	b.n	800dedc <UART_Start_Receive_IT+0xa4>
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	22ff      	movs	r2, #255	@ 0xff
 800de84:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800de88:	e028      	b.n	800dedc <UART_Start_Receive_IT+0xa4>
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	689b      	ldr	r3, [r3, #8]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d10d      	bne.n	800deae <UART_Start_Receive_IT+0x76>
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	691b      	ldr	r3, [r3, #16]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d104      	bne.n	800dea4 <UART_Start_Receive_IT+0x6c>
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	22ff      	movs	r2, #255	@ 0xff
 800de9e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800dea2:	e01b      	b.n	800dedc <UART_Start_Receive_IT+0xa4>
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	227f      	movs	r2, #127	@ 0x7f
 800dea8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800deac:	e016      	b.n	800dedc <UART_Start_Receive_IT+0xa4>
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	689b      	ldr	r3, [r3, #8]
 800deb2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800deb6:	d10d      	bne.n	800ded4 <UART_Start_Receive_IT+0x9c>
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	691b      	ldr	r3, [r3, #16]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d104      	bne.n	800deca <UART_Start_Receive_IT+0x92>
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	227f      	movs	r2, #127	@ 0x7f
 800dec4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800dec8:	e008      	b.n	800dedc <UART_Start_Receive_IT+0xa4>
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	223f      	movs	r2, #63	@ 0x3f
 800dece:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ded2:	e003      	b.n	800dedc <UART_Start_Receive_IT+0xa4>
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	2200      	movs	r2, #0
 800ded8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	2200      	movs	r2, #0
 800dee0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	2222      	movs	r2, #34	@ 0x22
 800dee8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	3308      	adds	r3, #8
 800def2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800def4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800def6:	e853 3f00 	ldrex	r3, [r3]
 800defa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800defc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800defe:	f043 0301 	orr.w	r3, r3, #1
 800df02:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	3308      	adds	r3, #8
 800df0c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800df10:	673a      	str	r2, [r7, #112]	@ 0x70
 800df12:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df14:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800df16:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800df18:	e841 2300 	strex	r3, r2, [r1]
 800df1c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800df1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800df20:	2b00      	cmp	r3, #0
 800df22:	d1e3      	bne.n	800deec <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800df28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800df2c:	d14f      	bne.n	800dfce <UART_Start_Receive_IT+0x196>
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800df34:	88fa      	ldrh	r2, [r7, #6]
 800df36:	429a      	cmp	r2, r3
 800df38:	d349      	bcc.n	800dfce <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	689b      	ldr	r3, [r3, #8]
 800df3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800df42:	d107      	bne.n	800df54 <UART_Start_Receive_IT+0x11c>
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	691b      	ldr	r3, [r3, #16]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d103      	bne.n	800df54 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	4a47      	ldr	r2, [pc, #284]	@ (800e06c <UART_Start_Receive_IT+0x234>)
 800df50:	675a      	str	r2, [r3, #116]	@ 0x74
 800df52:	e002      	b.n	800df5a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	4a46      	ldr	r2, [pc, #280]	@ (800e070 <UART_Start_Receive_IT+0x238>)
 800df58:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	691b      	ldr	r3, [r3, #16]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d01a      	beq.n	800df98 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df6a:	e853 3f00 	ldrex	r3, [r3]
 800df6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800df70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800df76:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	461a      	mov	r2, r3
 800df80:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800df84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800df86:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df88:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800df8a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800df8c:	e841 2300 	strex	r3, r2, [r1]
 800df90:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800df92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800df94:	2b00      	cmp	r3, #0
 800df96:	d1e4      	bne.n	800df62 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	3308      	adds	r3, #8
 800df9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dfa2:	e853 3f00 	ldrex	r3, [r3]
 800dfa6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dfa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dfae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	3308      	adds	r3, #8
 800dfb6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800dfb8:	64ba      	str	r2, [r7, #72]	@ 0x48
 800dfba:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfbc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800dfbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dfc0:	e841 2300 	strex	r3, r2, [r1]
 800dfc4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800dfc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d1e5      	bne.n	800df98 <UART_Start_Receive_IT+0x160>
 800dfcc:	e046      	b.n	800e05c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	689b      	ldr	r3, [r3, #8]
 800dfd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dfd6:	d107      	bne.n	800dfe8 <UART_Start_Receive_IT+0x1b0>
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	691b      	ldr	r3, [r3, #16]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d103      	bne.n	800dfe8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	4a24      	ldr	r2, [pc, #144]	@ (800e074 <UART_Start_Receive_IT+0x23c>)
 800dfe4:	675a      	str	r2, [r3, #116]	@ 0x74
 800dfe6:	e002      	b.n	800dfee <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	4a23      	ldr	r2, [pc, #140]	@ (800e078 <UART_Start_Receive_IT+0x240>)
 800dfec:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	691b      	ldr	r3, [r3, #16]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d019      	beq.n	800e02a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dffe:	e853 3f00 	ldrex	r3, [r3]
 800e002:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e006:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800e00a:	677b      	str	r3, [r7, #116]	@ 0x74
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	461a      	mov	r2, r3
 800e012:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e014:	637b      	str	r3, [r7, #52]	@ 0x34
 800e016:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e018:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e01a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e01c:	e841 2300 	strex	r3, r2, [r1]
 800e020:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800e022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e024:	2b00      	cmp	r3, #0
 800e026:	d1e6      	bne.n	800dff6 <UART_Start_Receive_IT+0x1be>
 800e028:	e018      	b.n	800e05c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e030:	697b      	ldr	r3, [r7, #20]
 800e032:	e853 3f00 	ldrex	r3, [r3]
 800e036:	613b      	str	r3, [r7, #16]
   return(result);
 800e038:	693b      	ldr	r3, [r7, #16]
 800e03a:	f043 0320 	orr.w	r3, r3, #32
 800e03e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	461a      	mov	r2, r3
 800e046:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e048:	623b      	str	r3, [r7, #32]
 800e04a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e04c:	69f9      	ldr	r1, [r7, #28]
 800e04e:	6a3a      	ldr	r2, [r7, #32]
 800e050:	e841 2300 	strex	r3, r2, [r1]
 800e054:	61bb      	str	r3, [r7, #24]
   return(result);
 800e056:	69bb      	ldr	r3, [r7, #24]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d1e6      	bne.n	800e02a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800e05c:	2300      	movs	r3, #0
}
 800e05e:	4618      	mov	r0, r3
 800e060:	378c      	adds	r7, #140	@ 0x8c
 800e062:	46bd      	mov	sp, r7
 800e064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e068:	4770      	bx	lr
 800e06a:	bf00      	nop
 800e06c:	0800ec09 	.word	0x0800ec09
 800e070:	0800e899 	.word	0x0800e899
 800e074:	0800e6d5 	.word	0x0800e6d5
 800e078:	0800e511 	.word	0x0800e511

0800e07c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e07c:	b480      	push	{r7}
 800e07e:	b095      	sub	sp, #84	@ 0x54
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e08a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e08c:	e853 3f00 	ldrex	r3, [r3]
 800e090:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e094:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e098:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	461a      	mov	r2, r3
 800e0a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e0a2:	643b      	str	r3, [r7, #64]	@ 0x40
 800e0a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e0a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e0aa:	e841 2300 	strex	r3, r2, [r1]
 800e0ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e0b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d1e6      	bne.n	800e084 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	3308      	adds	r3, #8
 800e0bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0be:	6a3b      	ldr	r3, [r7, #32]
 800e0c0:	e853 3f00 	ldrex	r3, [r3]
 800e0c4:	61fb      	str	r3, [r7, #28]
   return(result);
 800e0c6:	69fb      	ldr	r3, [r7, #28]
 800e0c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e0cc:	f023 0301 	bic.w	r3, r3, #1
 800e0d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	3308      	adds	r3, #8
 800e0d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e0da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e0dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e0e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e0e2:	e841 2300 	strex	r3, r2, [r1]
 800e0e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e0e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d1e3      	bne.n	800e0b6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e0f2:	2b01      	cmp	r3, #1
 800e0f4:	d118      	bne.n	800e128 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	e853 3f00 	ldrex	r3, [r3]
 800e102:	60bb      	str	r3, [r7, #8]
   return(result);
 800e104:	68bb      	ldr	r3, [r7, #8]
 800e106:	f023 0310 	bic.w	r3, r3, #16
 800e10a:	647b      	str	r3, [r7, #68]	@ 0x44
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	461a      	mov	r2, r3
 800e112:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e114:	61bb      	str	r3, [r7, #24]
 800e116:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e118:	6979      	ldr	r1, [r7, #20]
 800e11a:	69ba      	ldr	r2, [r7, #24]
 800e11c:	e841 2300 	strex	r3, r2, [r1]
 800e120:	613b      	str	r3, [r7, #16]
   return(result);
 800e122:	693b      	ldr	r3, [r7, #16]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d1e6      	bne.n	800e0f6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2220      	movs	r2, #32
 800e12c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	2200      	movs	r2, #0
 800e134:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	2200      	movs	r2, #0
 800e13a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e13c:	bf00      	nop
 800e13e:	3754      	adds	r7, #84	@ 0x54
 800e140:	46bd      	mov	sp, r7
 800e142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e146:	4770      	bx	lr

0800e148 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b084      	sub	sp, #16
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e154:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	2200      	movs	r2, #0
 800e15a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	2200      	movs	r2, #0
 800e162:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e166:	68f8      	ldr	r0, [r7, #12]
 800e168:	f7ff faa8 	bl	800d6bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e16c:	bf00      	nop
 800e16e:	3710      	adds	r7, #16
 800e170:	46bd      	mov	sp, r7
 800e172:	bd80      	pop	{r7, pc}

0800e174 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e174:	b480      	push	{r7}
 800e176:	b08f      	sub	sp, #60	@ 0x3c
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e182:	2b21      	cmp	r3, #33	@ 0x21
 800e184:	d14c      	bne.n	800e220 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e18c:	b29b      	uxth	r3, r3
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d132      	bne.n	800e1f8 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e198:	6a3b      	ldr	r3, [r7, #32]
 800e19a:	e853 3f00 	ldrex	r3, [r3]
 800e19e:	61fb      	str	r3, [r7, #28]
   return(result);
 800e1a0:	69fb      	ldr	r3, [r7, #28]
 800e1a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e1a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	461a      	mov	r2, r3
 800e1ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e1b2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e1b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e1b8:	e841 2300 	strex	r3, r2, [r1]
 800e1bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e1be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d1e6      	bne.n	800e192 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	e853 3f00 	ldrex	r3, [r3]
 800e1d0:	60bb      	str	r3, [r7, #8]
   return(result);
 800e1d2:	68bb      	ldr	r3, [r7, #8]
 800e1d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e1d8:	633b      	str	r3, [r7, #48]	@ 0x30
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	461a      	mov	r2, r3
 800e1e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1e2:	61bb      	str	r3, [r7, #24]
 800e1e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1e6:	6979      	ldr	r1, [r7, #20]
 800e1e8:	69ba      	ldr	r2, [r7, #24]
 800e1ea:	e841 2300 	strex	r3, r2, [r1]
 800e1ee:	613b      	str	r3, [r7, #16]
   return(result);
 800e1f0:	693b      	ldr	r3, [r7, #16]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d1e6      	bne.n	800e1c4 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800e1f6:	e013      	b.n	800e220 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e1fc:	781a      	ldrb	r2, [r3, #0]
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e208:	1c5a      	adds	r2, r3, #1
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e214:	b29b      	uxth	r3, r3
 800e216:	3b01      	subs	r3, #1
 800e218:	b29a      	uxth	r2, r3
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800e220:	bf00      	nop
 800e222:	373c      	adds	r7, #60	@ 0x3c
 800e224:	46bd      	mov	sp, r7
 800e226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22a:	4770      	bx	lr

0800e22c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e22c:	b480      	push	{r7}
 800e22e:	b091      	sub	sp, #68	@ 0x44
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e23a:	2b21      	cmp	r3, #33	@ 0x21
 800e23c:	d151      	bne.n	800e2e2 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e244:	b29b      	uxth	r3, r3
 800e246:	2b00      	cmp	r3, #0
 800e248:	d132      	bne.n	800e2b0 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e252:	e853 3f00 	ldrex	r3, [r3]
 800e256:	623b      	str	r3, [r7, #32]
   return(result);
 800e258:	6a3b      	ldr	r3, [r7, #32]
 800e25a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e25e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	461a      	mov	r2, r3
 800e266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e268:	633b      	str	r3, [r7, #48]	@ 0x30
 800e26a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e26c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e26e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e270:	e841 2300 	strex	r3, r2, [r1]
 800e274:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d1e6      	bne.n	800e24a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e282:	693b      	ldr	r3, [r7, #16]
 800e284:	e853 3f00 	ldrex	r3, [r3]
 800e288:	60fb      	str	r3, [r7, #12]
   return(result);
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e290:	637b      	str	r3, [r7, #52]	@ 0x34
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	461a      	mov	r2, r3
 800e298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e29a:	61fb      	str	r3, [r7, #28]
 800e29c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e29e:	69b9      	ldr	r1, [r7, #24]
 800e2a0:	69fa      	ldr	r2, [r7, #28]
 800e2a2:	e841 2300 	strex	r3, r2, [r1]
 800e2a6:	617b      	str	r3, [r7, #20]
   return(result);
 800e2a8:	697b      	ldr	r3, [r7, #20]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d1e6      	bne.n	800e27c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800e2ae:	e018      	b.n	800e2e2 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e2b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800e2b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e2b8:	881b      	ldrh	r3, [r3, #0]
 800e2ba:	461a      	mov	r2, r3
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e2c4:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e2ca:	1c9a      	adds	r2, r3, #2
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e2d6:	b29b      	uxth	r3, r3
 800e2d8:	3b01      	subs	r3, #1
 800e2da:	b29a      	uxth	r2, r3
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800e2e2:	bf00      	nop
 800e2e4:	3744      	adds	r7, #68	@ 0x44
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ec:	4770      	bx	lr

0800e2ee <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e2ee:	b480      	push	{r7}
 800e2f0:	b091      	sub	sp, #68	@ 0x44
 800e2f2:	af00      	add	r7, sp, #0
 800e2f4:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e2fc:	2b21      	cmp	r3, #33	@ 0x21
 800e2fe:	d160      	bne.n	800e3c2 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e306:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800e308:	e057      	b.n	800e3ba <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e310:	b29b      	uxth	r3, r3
 800e312:	2b00      	cmp	r3, #0
 800e314:	d133      	bne.n	800e37e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	3308      	adds	r3, #8
 800e31c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e31e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e320:	e853 3f00 	ldrex	r3, [r3]
 800e324:	623b      	str	r3, [r7, #32]
   return(result);
 800e326:	6a3b      	ldr	r3, [r7, #32]
 800e328:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800e32c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	3308      	adds	r3, #8
 800e334:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e336:	633a      	str	r2, [r7, #48]	@ 0x30
 800e338:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e33a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e33c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e33e:	e841 2300 	strex	r3, r2, [r1]
 800e342:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e346:	2b00      	cmp	r3, #0
 800e348:	d1e5      	bne.n	800e316 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e350:	693b      	ldr	r3, [r7, #16]
 800e352:	e853 3f00 	ldrex	r3, [r3]
 800e356:	60fb      	str	r3, [r7, #12]
   return(result);
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e35e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	461a      	mov	r2, r3
 800e366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e368:	61fb      	str	r3, [r7, #28]
 800e36a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e36c:	69b9      	ldr	r1, [r7, #24]
 800e36e:	69fa      	ldr	r2, [r7, #28]
 800e370:	e841 2300 	strex	r3, r2, [r1]
 800e374:	617b      	str	r3, [r7, #20]
   return(result);
 800e376:	697b      	ldr	r3, [r7, #20]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d1e6      	bne.n	800e34a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800e37c:	e021      	b.n	800e3c2 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	69db      	ldr	r3, [r3, #28]
 800e384:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d013      	beq.n	800e3b4 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e390:	781a      	ldrb	r2, [r3, #0]
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e39c:	1c5a      	adds	r2, r3, #1
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e3a8:	b29b      	uxth	r3, r3
 800e3aa:	3b01      	subs	r3, #1
 800e3ac:	b29a      	uxth	r2, r3
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e3b4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800e3b6:	3b01      	subs	r3, #1
 800e3b8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800e3ba:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d1a4      	bne.n	800e30a <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800e3c0:	e7ff      	b.n	800e3c2 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800e3c2:	bf00      	nop
 800e3c4:	3744      	adds	r7, #68	@ 0x44
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3cc:	4770      	bx	lr

0800e3ce <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e3ce:	b480      	push	{r7}
 800e3d0:	b091      	sub	sp, #68	@ 0x44
 800e3d2:	af00      	add	r7, sp, #0
 800e3d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e3dc:	2b21      	cmp	r3, #33	@ 0x21
 800e3de:	d165      	bne.n	800e4ac <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e3e6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800e3e8:	e05c      	b.n	800e4a4 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e3f0:	b29b      	uxth	r3, r3
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d133      	bne.n	800e45e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	3308      	adds	r3, #8
 800e3fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3fe:	6a3b      	ldr	r3, [r7, #32]
 800e400:	e853 3f00 	ldrex	r3, [r3]
 800e404:	61fb      	str	r3, [r7, #28]
   return(result);
 800e406:	69fb      	ldr	r3, [r7, #28]
 800e408:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800e40c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	3308      	adds	r3, #8
 800e414:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e416:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e418:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e41a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e41c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e41e:	e841 2300 	strex	r3, r2, [r1]
 800e422:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e426:	2b00      	cmp	r3, #0
 800e428:	d1e5      	bne.n	800e3f6 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	e853 3f00 	ldrex	r3, [r3]
 800e436:	60bb      	str	r3, [r7, #8]
   return(result);
 800e438:	68bb      	ldr	r3, [r7, #8]
 800e43a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e43e:	633b      	str	r3, [r7, #48]	@ 0x30
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	461a      	mov	r2, r3
 800e446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e448:	61bb      	str	r3, [r7, #24]
 800e44a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e44c:	6979      	ldr	r1, [r7, #20]
 800e44e:	69ba      	ldr	r2, [r7, #24]
 800e450:	e841 2300 	strex	r3, r2, [r1]
 800e454:	613b      	str	r3, [r7, #16]
   return(result);
 800e456:	693b      	ldr	r3, [r7, #16]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d1e6      	bne.n	800e42a <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800e45c:	e026      	b.n	800e4ac <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	69db      	ldr	r3, [r3, #28]
 800e464:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d018      	beq.n	800e49e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e470:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800e472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e474:	881b      	ldrh	r3, [r3, #0]
 800e476:	461a      	mov	r2, r3
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e480:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e486:	1c9a      	adds	r2, r3, #2
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e492:	b29b      	uxth	r3, r3
 800e494:	3b01      	subs	r3, #1
 800e496:	b29a      	uxth	r2, r3
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e49e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800e4a0:	3b01      	subs	r3, #1
 800e4a2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800e4a4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d19f      	bne.n	800e3ea <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800e4aa:	e7ff      	b.n	800e4ac <UART_TxISR_16BIT_FIFOEN+0xde>
 800e4ac:	bf00      	nop
 800e4ae:	3744      	adds	r7, #68	@ 0x44
 800e4b0:	46bd      	mov	sp, r7
 800e4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b6:	4770      	bx	lr

0800e4b8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b088      	sub	sp, #32
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	e853 3f00 	ldrex	r3, [r3]
 800e4cc:	60bb      	str	r3, [r7, #8]
   return(result);
 800e4ce:	68bb      	ldr	r3, [r7, #8]
 800e4d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e4d4:	61fb      	str	r3, [r7, #28]
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	461a      	mov	r2, r3
 800e4dc:	69fb      	ldr	r3, [r7, #28]
 800e4de:	61bb      	str	r3, [r7, #24]
 800e4e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4e2:	6979      	ldr	r1, [r7, #20]
 800e4e4:	69ba      	ldr	r2, [r7, #24]
 800e4e6:	e841 2300 	strex	r3, r2, [r1]
 800e4ea:	613b      	str	r3, [r7, #16]
   return(result);
 800e4ec:	693b      	ldr	r3, [r7, #16]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d1e6      	bne.n	800e4c0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	2220      	movs	r2, #32
 800e4f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e500:	6878      	ldr	r0, [r7, #4]
 800e502:	f7ff f8d1 	bl	800d6a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e506:	bf00      	nop
 800e508:	3720      	adds	r7, #32
 800e50a:	46bd      	mov	sp, r7
 800e50c:	bd80      	pop	{r7, pc}
	...

0800e510 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b09c      	sub	sp, #112	@ 0x70
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e51e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e528:	2b22      	cmp	r3, #34	@ 0x22
 800e52a:	f040 80c3 	bne.w	800e6b4 <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e534:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e538:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800e53c:	b2d9      	uxtb	r1, r3
 800e53e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800e542:	b2da      	uxtb	r2, r3
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e548:	400a      	ands	r2, r1
 800e54a:	b2d2      	uxtb	r2, r2
 800e54c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e552:	1c5a      	adds	r2, r3, #1
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e55e:	b29b      	uxth	r3, r3
 800e560:	3b01      	subs	r3, #1
 800e562:	b29a      	uxth	r2, r3
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e570:	b29b      	uxth	r3, r3
 800e572:	2b00      	cmp	r3, #0
 800e574:	f040 80a6 	bne.w	800e6c4 <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e57e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e580:	e853 3f00 	ldrex	r3, [r3]
 800e584:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e586:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e588:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e58c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	461a      	mov	r2, r3
 800e594:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e596:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e598:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e59a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e59c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e59e:	e841 2300 	strex	r3, r2, [r1]
 800e5a2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e5a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d1e6      	bne.n	800e578 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	3308      	adds	r3, #8
 800e5b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5b4:	e853 3f00 	ldrex	r3, [r3]
 800e5b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e5ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e5bc:	f023 0301 	bic.w	r3, r3, #1
 800e5c0:	667b      	str	r3, [r7, #100]	@ 0x64
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	3308      	adds	r3, #8
 800e5c8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e5ca:	647a      	str	r2, [r7, #68]	@ 0x44
 800e5cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e5d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e5d2:	e841 2300 	strex	r3, r2, [r1]
 800e5d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e5d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d1e5      	bne.n	800e5aa <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	2220      	movs	r2, #32
 800e5e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	4a35      	ldr	r2, [pc, #212]	@ (800e6cc <UART_RxISR_8BIT+0x1bc>)
 800e5f8:	4293      	cmp	r3, r2
 800e5fa:	d024      	beq.n	800e646 <UART_RxISR_8BIT+0x136>
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	4a33      	ldr	r2, [pc, #204]	@ (800e6d0 <UART_RxISR_8BIT+0x1c0>)
 800e602:	4293      	cmp	r3, r2
 800e604:	d01f      	beq.n	800e646 <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	685b      	ldr	r3, [r3, #4]
 800e60c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e610:	2b00      	cmp	r3, #0
 800e612:	d018      	beq.n	800e646 <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e61a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e61c:	e853 3f00 	ldrex	r3, [r3]
 800e620:	623b      	str	r3, [r7, #32]
   return(result);
 800e622:	6a3b      	ldr	r3, [r7, #32]
 800e624:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e628:	663b      	str	r3, [r7, #96]	@ 0x60
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	461a      	mov	r2, r3
 800e630:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e632:	633b      	str	r3, [r7, #48]	@ 0x30
 800e634:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e636:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e638:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e63a:	e841 2300 	strex	r3, r2, [r1]
 800e63e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e642:	2b00      	cmp	r3, #0
 800e644:	d1e6      	bne.n	800e614 <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e64a:	2b01      	cmp	r3, #1
 800e64c:	d12e      	bne.n	800e6ac <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	2200      	movs	r2, #0
 800e652:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e65a:	693b      	ldr	r3, [r7, #16]
 800e65c:	e853 3f00 	ldrex	r3, [r3]
 800e660:	60fb      	str	r3, [r7, #12]
   return(result);
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	f023 0310 	bic.w	r3, r3, #16
 800e668:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	461a      	mov	r2, r3
 800e670:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e672:	61fb      	str	r3, [r7, #28]
 800e674:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e676:	69b9      	ldr	r1, [r7, #24]
 800e678:	69fa      	ldr	r2, [r7, #28]
 800e67a:	e841 2300 	strex	r3, r2, [r1]
 800e67e:	617b      	str	r3, [r7, #20]
   return(result);
 800e680:	697b      	ldr	r3, [r7, #20]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d1e6      	bne.n	800e654 <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	69db      	ldr	r3, [r3, #28]
 800e68c:	f003 0310 	and.w	r3, r3, #16
 800e690:	2b10      	cmp	r3, #16
 800e692:	d103      	bne.n	800e69c <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	2210      	movs	r2, #16
 800e69a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e6a2:	4619      	mov	r1, r3
 800e6a4:	6878      	ldr	r0, [r7, #4]
 800e6a6:	f7ff f813 	bl	800d6d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e6aa:	e00b      	b.n	800e6c4 <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	f7f5 f8eb 	bl	8003888 <HAL_UART_RxCpltCallback>
}
 800e6b2:	e007      	b.n	800e6c4 <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	699a      	ldr	r2, [r3, #24]
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	f042 0208 	orr.w	r2, r2, #8
 800e6c2:	619a      	str	r2, [r3, #24]
}
 800e6c4:	bf00      	nop
 800e6c6:	3770      	adds	r7, #112	@ 0x70
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	bd80      	pop	{r7, pc}
 800e6cc:	44002400 	.word	0x44002400
 800e6d0:	54002400 	.word	0x54002400

0800e6d4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b09c      	sub	sp, #112	@ 0x70
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e6e2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e6ec:	2b22      	cmp	r3, #34	@ 0x22
 800e6ee:	f040 80c3 	bne.w	800e878 <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6f8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e700:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800e702:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800e706:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800e70a:	4013      	ands	r3, r2
 800e70c:	b29a      	uxth	r2, r3
 800e70e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e710:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e716:	1c9a      	adds	r2, r3, #2
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e722:	b29b      	uxth	r3, r3
 800e724:	3b01      	subs	r3, #1
 800e726:	b29a      	uxth	r2, r3
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e734:	b29b      	uxth	r3, r3
 800e736:	2b00      	cmp	r3, #0
 800e738:	f040 80a6 	bne.w	800e888 <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e742:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e744:	e853 3f00 	ldrex	r3, [r3]
 800e748:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800e74a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e74c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e750:	667b      	str	r3, [r7, #100]	@ 0x64
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	461a      	mov	r2, r3
 800e758:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e75a:	657b      	str	r3, [r7, #84]	@ 0x54
 800e75c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e75e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e760:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e762:	e841 2300 	strex	r3, r2, [r1]
 800e766:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e768:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d1e6      	bne.n	800e73c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	3308      	adds	r3, #8
 800e774:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e778:	e853 3f00 	ldrex	r3, [r3]
 800e77c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e77e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e780:	f023 0301 	bic.w	r3, r3, #1
 800e784:	663b      	str	r3, [r7, #96]	@ 0x60
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	3308      	adds	r3, #8
 800e78c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e78e:	643a      	str	r2, [r7, #64]	@ 0x40
 800e790:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e792:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e794:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e796:	e841 2300 	strex	r3, r2, [r1]
 800e79a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e79c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d1e5      	bne.n	800e76e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	2220      	movs	r2, #32
 800e7a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	4a35      	ldr	r2, [pc, #212]	@ (800e890 <UART_RxISR_16BIT+0x1bc>)
 800e7bc:	4293      	cmp	r3, r2
 800e7be:	d024      	beq.n	800e80a <UART_RxISR_16BIT+0x136>
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	4a33      	ldr	r2, [pc, #204]	@ (800e894 <UART_RxISR_16BIT+0x1c0>)
 800e7c6:	4293      	cmp	r3, r2
 800e7c8:	d01f      	beq.n	800e80a <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	685b      	ldr	r3, [r3, #4]
 800e7d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d018      	beq.n	800e80a <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7de:	6a3b      	ldr	r3, [r7, #32]
 800e7e0:	e853 3f00 	ldrex	r3, [r3]
 800e7e4:	61fb      	str	r3, [r7, #28]
   return(result);
 800e7e6:	69fb      	ldr	r3, [r7, #28]
 800e7e8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e7ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	461a      	mov	r2, r3
 800e7f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e7f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e7f8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e7fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e7fe:	e841 2300 	strex	r3, r2, [r1]
 800e802:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e806:	2b00      	cmp	r3, #0
 800e808:	d1e6      	bne.n	800e7d8 <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e80e:	2b01      	cmp	r3, #1
 800e810:	d12e      	bne.n	800e870 <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	2200      	movs	r2, #0
 800e816:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	e853 3f00 	ldrex	r3, [r3]
 800e824:	60bb      	str	r3, [r7, #8]
   return(result);
 800e826:	68bb      	ldr	r3, [r7, #8]
 800e828:	f023 0310 	bic.w	r3, r3, #16
 800e82c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	461a      	mov	r2, r3
 800e834:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e836:	61bb      	str	r3, [r7, #24]
 800e838:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e83a:	6979      	ldr	r1, [r7, #20]
 800e83c:	69ba      	ldr	r2, [r7, #24]
 800e83e:	e841 2300 	strex	r3, r2, [r1]
 800e842:	613b      	str	r3, [r7, #16]
   return(result);
 800e844:	693b      	ldr	r3, [r7, #16]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d1e6      	bne.n	800e818 <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	69db      	ldr	r3, [r3, #28]
 800e850:	f003 0310 	and.w	r3, r3, #16
 800e854:	2b10      	cmp	r3, #16
 800e856:	d103      	bne.n	800e860 <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	2210      	movs	r2, #16
 800e85e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e866:	4619      	mov	r1, r3
 800e868:	6878      	ldr	r0, [r7, #4]
 800e86a:	f7fe ff31 	bl	800d6d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e86e:	e00b      	b.n	800e888 <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800e870:	6878      	ldr	r0, [r7, #4]
 800e872:	f7f5 f809 	bl	8003888 <HAL_UART_RxCpltCallback>
}
 800e876:	e007      	b.n	800e888 <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	699a      	ldr	r2, [r3, #24]
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	f042 0208 	orr.w	r2, r2, #8
 800e886:	619a      	str	r2, [r3, #24]
}
 800e888:	bf00      	nop
 800e88a:	3770      	adds	r7, #112	@ 0x70
 800e88c:	46bd      	mov	sp, r7
 800e88e:	bd80      	pop	{r7, pc}
 800e890:	44002400 	.word	0x44002400
 800e894:	54002400 	.word	0x54002400

0800e898 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b0ac      	sub	sp, #176	@ 0xb0
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e8a6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	69db      	ldr	r3, [r3, #28]
 800e8b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	689b      	ldr	r3, [r3, #8]
 800e8c4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e8ce:	2b22      	cmp	r3, #34	@ 0x22
 800e8d0:	f040 8188 	bne.w	800ebe4 <UART_RxISR_8BIT_FIFOEN+0x34c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e8da:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e8de:	e12b      	b.n	800eb38 <UART_RxISR_8BIT_FIFOEN+0x2a0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8e6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e8ea:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800e8ee:	b2d9      	uxtb	r1, r3
 800e8f0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800e8f4:	b2da      	uxtb	r2, r3
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e8fa:	400a      	ands	r2, r1
 800e8fc:	b2d2      	uxtb	r2, r2
 800e8fe:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e904:	1c5a      	adds	r2, r3, #1
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e910:	b29b      	uxth	r3, r3
 800e912:	3b01      	subs	r3, #1
 800e914:	b29a      	uxth	r2, r3
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	69db      	ldr	r3, [r3, #28]
 800e922:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e926:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e92a:	f003 0307 	and.w	r3, r3, #7
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d053      	beq.n	800e9da <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e932:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e936:	f003 0301 	and.w	r3, r3, #1
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d011      	beq.n	800e962 <UART_RxISR_8BIT_FIFOEN+0xca>
 800e93e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e942:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e946:	2b00      	cmp	r3, #0
 800e948:	d00b      	beq.n	800e962 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	2201      	movs	r2, #1
 800e950:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e958:	f043 0201 	orr.w	r2, r3, #1
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e962:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e966:	f003 0302 	and.w	r3, r3, #2
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d011      	beq.n	800e992 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800e96e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e972:	f003 0301 	and.w	r3, r3, #1
 800e976:	2b00      	cmp	r3, #0
 800e978:	d00b      	beq.n	800e992 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	2202      	movs	r2, #2
 800e980:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e988:	f043 0204 	orr.w	r2, r3, #4
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e992:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e996:	f003 0304 	and.w	r3, r3, #4
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d011      	beq.n	800e9c2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800e99e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e9a2:	f003 0301 	and.w	r3, r3, #1
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d00b      	beq.n	800e9c2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	2204      	movs	r2, #4
 800e9b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e9b8:	f043 0202 	orr.w	r2, r3, #2
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d006      	beq.n	800e9da <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e9cc:	6878      	ldr	r0, [r7, #4]
 800e9ce:	f7fe fe75 	bl	800d6bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e9e0:	b29b      	uxth	r3, r3
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	f040 80a8 	bne.w	800eb38 <UART_RxISR_8BIT_FIFOEN+0x2a0>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e9f0:	e853 3f00 	ldrex	r3, [r3]
 800e9f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800e9f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e9f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e9fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	461a      	mov	r2, r3
 800ea06:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ea0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ea0c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea0e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800ea10:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ea12:	e841 2300 	strex	r3, r2, [r1]
 800ea16:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800ea18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d1e4      	bne.n	800e9e8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	3308      	adds	r3, #8
 800ea24:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ea28:	e853 3f00 	ldrex	r3, [r3]
 800ea2c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800ea2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ea30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ea34:	f023 0301 	bic.w	r3, r3, #1
 800ea38:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	3308      	adds	r3, #8
 800ea42:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ea46:	66ba      	str	r2, [r7, #104]	@ 0x68
 800ea48:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea4a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800ea4c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ea4e:	e841 2300 	strex	r3, r2, [r1]
 800ea52:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ea54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d1e1      	bne.n	800ea1e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	2220      	movs	r2, #32
 800ea5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	2200      	movs	r2, #0
 800ea66:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	4a62      	ldr	r2, [pc, #392]	@ (800ebfc <UART_RxISR_8BIT_FIFOEN+0x364>)
 800ea74:	4293      	cmp	r3, r2
 800ea76:	d026      	beq.n	800eac6 <UART_RxISR_8BIT_FIFOEN+0x22e>
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	4a60      	ldr	r2, [pc, #384]	@ (800ec00 <UART_RxISR_8BIT_FIFOEN+0x368>)
 800ea7e:	4293      	cmp	r3, r2
 800ea80:	d021      	beq.n	800eac6 <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	685b      	ldr	r3, [r3, #4]
 800ea88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d01a      	beq.n	800eac6 <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ea98:	e853 3f00 	ldrex	r3, [r3]
 800ea9c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ea9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eaa0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800eaa4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	461a      	mov	r2, r3
 800eaae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800eab2:	657b      	str	r3, [r7, #84]	@ 0x54
 800eab4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eab6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800eab8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800eaba:	e841 2300 	strex	r3, r2, [r1]
 800eabe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800eac0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d1e4      	bne.n	800ea90 <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eaca:	2b01      	cmp	r3, #1
 800eacc:	d130      	bne.n	800eb30 <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	2200      	movs	r2, #0
 800ead2:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eadc:	e853 3f00 	ldrex	r3, [r3]
 800eae0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800eae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eae4:	f023 0310 	bic.w	r3, r3, #16
 800eae8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	461a      	mov	r2, r3
 800eaf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800eaf6:	643b      	str	r3, [r7, #64]	@ 0x40
 800eaf8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eafa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800eafc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800eafe:	e841 2300 	strex	r3, r2, [r1]
 800eb02:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800eb04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d1e4      	bne.n	800ead4 <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	69db      	ldr	r3, [r3, #28]
 800eb10:	f003 0310 	and.w	r3, r3, #16
 800eb14:	2b10      	cmp	r3, #16
 800eb16:	d103      	bne.n	800eb20 <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	2210      	movs	r2, #16
 800eb1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800eb26:	4619      	mov	r1, r3
 800eb28:	6878      	ldr	r0, [r7, #4]
 800eb2a:	f7fe fdd1 	bl	800d6d0 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800eb2e:	e00e      	b.n	800eb4e <UART_RxISR_8BIT_FIFOEN+0x2b6>
          HAL_UART_RxCpltCallback(huart);
 800eb30:	6878      	ldr	r0, [r7, #4]
 800eb32:	f7f4 fea9 	bl	8003888 <HAL_UART_RxCpltCallback>
        break;
 800eb36:	e00a      	b.n	800eb4e <UART_RxISR_8BIT_FIFOEN+0x2b6>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800eb38:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d006      	beq.n	800eb4e <UART_RxISR_8BIT_FIFOEN+0x2b6>
 800eb40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eb44:	f003 0320 	and.w	r3, r3, #32
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	f47f aec9 	bne.w	800e8e0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800eb54:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800eb58:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d049      	beq.n	800ebf4 <UART_RxISR_8BIT_FIFOEN+0x35c>
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800eb66:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800eb6a:	429a      	cmp	r2, r3
 800eb6c:	d242      	bcs.n	800ebf4 <UART_RxISR_8BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	3308      	adds	r3, #8
 800eb74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb76:	6a3b      	ldr	r3, [r7, #32]
 800eb78:	e853 3f00 	ldrex	r3, [r3]
 800eb7c:	61fb      	str	r3, [r7, #28]
   return(result);
 800eb7e:	69fb      	ldr	r3, [r7, #28]
 800eb80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800eb84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	3308      	adds	r3, #8
 800eb8e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800eb92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800eb94:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eb98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eb9a:	e841 2300 	strex	r3, r2, [r1]
 800eb9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800eba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d1e3      	bne.n	800eb6e <UART_RxISR_8BIT_FIFOEN+0x2d6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	4a16      	ldr	r2, [pc, #88]	@ (800ec04 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 800ebaa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	e853 3f00 	ldrex	r3, [r3]
 800ebb8:	60bb      	str	r3, [r7, #8]
   return(result);
 800ebba:	68bb      	ldr	r3, [r7, #8]
 800ebbc:	f043 0320 	orr.w	r3, r3, #32
 800ebc0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	461a      	mov	r2, r3
 800ebca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ebce:	61bb      	str	r3, [r7, #24]
 800ebd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebd2:	6979      	ldr	r1, [r7, #20]
 800ebd4:	69ba      	ldr	r2, [r7, #24]
 800ebd6:	e841 2300 	strex	r3, r2, [r1]
 800ebda:	613b      	str	r3, [r7, #16]
   return(result);
 800ebdc:	693b      	ldr	r3, [r7, #16]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d1e4      	bne.n	800ebac <UART_RxISR_8BIT_FIFOEN+0x314>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ebe2:	e007      	b.n	800ebf4 <UART_RxISR_8BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	699a      	ldr	r2, [r3, #24]
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	f042 0208 	orr.w	r2, r2, #8
 800ebf2:	619a      	str	r2, [r3, #24]
}
 800ebf4:	bf00      	nop
 800ebf6:	37b0      	adds	r7, #176	@ 0xb0
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	bd80      	pop	{r7, pc}
 800ebfc:	44002400 	.word	0x44002400
 800ec00:	54002400 	.word	0x54002400
 800ec04:	0800e511 	.word	0x0800e511

0800ec08 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b0ae      	sub	sp, #184	@ 0xb8
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ec16:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	69db      	ldr	r3, [r3, #28]
 800ec20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	689b      	ldr	r3, [r3, #8]
 800ec34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ec3e:	2b22      	cmp	r3, #34	@ 0x22
 800ec40:	f040 818c 	bne.w	800ef5c <UART_RxISR_16BIT_FIFOEN+0x354>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ec4a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ec4e:	e12f      	b.n	800eeb0 <UART_RxISR_16BIT_FIFOEN+0x2a8>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec56:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ec5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800ec62:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800ec66:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800ec6a:	4013      	ands	r3, r2
 800ec6c:	b29a      	uxth	r2, r3
 800ec6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ec72:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ec78:	1c9a      	adds	r2, r3, #2
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ec84:	b29b      	uxth	r3, r3
 800ec86:	3b01      	subs	r3, #1
 800ec88:	b29a      	uxth	r2, r3
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	69db      	ldr	r3, [r3, #28]
 800ec96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ec9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ec9e:	f003 0307 	and.w	r3, r3, #7
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d053      	beq.n	800ed4e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800eca6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ecaa:	f003 0301 	and.w	r3, r3, #1
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d011      	beq.n	800ecd6 <UART_RxISR_16BIT_FIFOEN+0xce>
 800ecb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ecb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d00b      	beq.n	800ecd6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	2201      	movs	r2, #1
 800ecc4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eccc:	f043 0201 	orr.w	r2, r3, #1
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ecd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ecda:	f003 0302 	and.w	r3, r3, #2
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d011      	beq.n	800ed06 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800ece2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ece6:	f003 0301 	and.w	r3, r3, #1
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d00b      	beq.n	800ed06 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	2202      	movs	r2, #2
 800ecf4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ecfc:	f043 0204 	orr.w	r2, r3, #4
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ed06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ed0a:	f003 0304 	and.w	r3, r3, #4
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d011      	beq.n	800ed36 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800ed12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ed16:	f003 0301 	and.w	r3, r3, #1
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d00b      	beq.n	800ed36 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	2204      	movs	r2, #4
 800ed24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ed2c:	f043 0202 	orr.w	r2, r3, #2
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d006      	beq.n	800ed4e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ed40:	6878      	ldr	r0, [r7, #4]
 800ed42:	f7fe fcbb 	bl	800d6bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	2200      	movs	r2, #0
 800ed4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ed54:	b29b      	uxth	r3, r3
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	f040 80aa 	bne.w	800eeb0 <UART_RxISR_16BIT_FIFOEN+0x2a8>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ed64:	e853 3f00 	ldrex	r3, [r3]
 800ed68:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ed6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ed6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ed70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	461a      	mov	r2, r3
 800ed7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ed7e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ed82:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed84:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ed86:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ed8a:	e841 2300 	strex	r3, r2, [r1]
 800ed8e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ed90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d1e2      	bne.n	800ed5c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	3308      	adds	r3, #8
 800ed9c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800eda0:	e853 3f00 	ldrex	r3, [r3]
 800eda4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800eda6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eda8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800edac:	f023 0301 	bic.w	r3, r3, #1
 800edb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	3308      	adds	r3, #8
 800edba:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800edbe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800edc0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edc2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800edc4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800edc6:	e841 2300 	strex	r3, r2, [r1]
 800edca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800edcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d1e1      	bne.n	800ed96 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	2220      	movs	r2, #32
 800edd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	2200      	movs	r2, #0
 800edde:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	2200      	movs	r2, #0
 800ede4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	4a62      	ldr	r2, [pc, #392]	@ (800ef74 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 800edec:	4293      	cmp	r3, r2
 800edee:	d026      	beq.n	800ee3e <UART_RxISR_16BIT_FIFOEN+0x236>
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	4a60      	ldr	r2, [pc, #384]	@ (800ef78 <UART_RxISR_16BIT_FIFOEN+0x370>)
 800edf6:	4293      	cmp	r3, r2
 800edf8:	d021      	beq.n	800ee3e <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	685b      	ldr	r3, [r3, #4]
 800ee00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d01a      	beq.n	800ee3e <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ee10:	e853 3f00 	ldrex	r3, [r3]
 800ee14:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ee16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ee18:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ee1c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	461a      	mov	r2, r3
 800ee26:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ee2a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ee2c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee2e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ee30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ee32:	e841 2300 	strex	r3, r2, [r1]
 800ee36:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ee38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d1e4      	bne.n	800ee08 <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ee42:	2b01      	cmp	r3, #1
 800ee44:	d130      	bne.n	800eea8 <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	2200      	movs	r2, #0
 800ee4a:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee54:	e853 3f00 	ldrex	r3, [r3]
 800ee58:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ee5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee5c:	f023 0310 	bic.w	r3, r3, #16
 800ee60:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	461a      	mov	r2, r3
 800ee6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ee6e:	647b      	str	r3, [r7, #68]	@ 0x44
 800ee70:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee72:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ee74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ee76:	e841 2300 	strex	r3, r2, [r1]
 800ee7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ee7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d1e4      	bne.n	800ee4c <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	69db      	ldr	r3, [r3, #28]
 800ee88:	f003 0310 	and.w	r3, r3, #16
 800ee8c:	2b10      	cmp	r3, #16
 800ee8e:	d103      	bne.n	800ee98 <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	2210      	movs	r2, #16
 800ee96:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ee9e:	4619      	mov	r1, r3
 800eea0:	6878      	ldr	r0, [r7, #4]
 800eea2:	f7fe fc15 	bl	800d6d0 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800eea6:	e00e      	b.n	800eec6 <UART_RxISR_16BIT_FIFOEN+0x2be>
          HAL_UART_RxCpltCallback(huart);
 800eea8:	6878      	ldr	r0, [r7, #4]
 800eeaa:	f7f4 fced 	bl	8003888 <HAL_UART_RxCpltCallback>
        break;
 800eeae:	e00a      	b.n	800eec6 <UART_RxISR_16BIT_FIFOEN+0x2be>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800eeb0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d006      	beq.n	800eec6 <UART_RxISR_16BIT_FIFOEN+0x2be>
 800eeb8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800eebc:	f003 0320 	and.w	r3, r3, #32
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	f47f aec5 	bne.w	800ec50 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800eecc:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800eed0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d049      	beq.n	800ef6c <UART_RxISR_16BIT_FIFOEN+0x364>
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800eede:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800eee2:	429a      	cmp	r2, r3
 800eee4:	d242      	bcs.n	800ef6c <UART_RxISR_16BIT_FIFOEN+0x364>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	3308      	adds	r3, #8
 800eeec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eeee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eef0:	e853 3f00 	ldrex	r3, [r3]
 800eef4:	623b      	str	r3, [r7, #32]
   return(result);
 800eef6:	6a3b      	ldr	r3, [r7, #32]
 800eef8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800eefc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	3308      	adds	r3, #8
 800ef06:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800ef0a:	633a      	str	r2, [r7, #48]	@ 0x30
 800ef0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ef10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ef12:	e841 2300 	strex	r3, r2, [r1]
 800ef16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ef18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d1e3      	bne.n	800eee6 <UART_RxISR_16BIT_FIFOEN+0x2de>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	4a16      	ldr	r2, [pc, #88]	@ (800ef7c <UART_RxISR_16BIT_FIFOEN+0x374>)
 800ef22:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef2a:	693b      	ldr	r3, [r7, #16]
 800ef2c:	e853 3f00 	ldrex	r3, [r3]
 800ef30:	60fb      	str	r3, [r7, #12]
   return(result);
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	f043 0320 	orr.w	r3, r3, #32
 800ef38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	461a      	mov	r2, r3
 800ef42:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ef46:	61fb      	str	r3, [r7, #28]
 800ef48:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef4a:	69b9      	ldr	r1, [r7, #24]
 800ef4c:	69fa      	ldr	r2, [r7, #28]
 800ef4e:	e841 2300 	strex	r3, r2, [r1]
 800ef52:	617b      	str	r3, [r7, #20]
   return(result);
 800ef54:	697b      	ldr	r3, [r7, #20]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d1e4      	bne.n	800ef24 <UART_RxISR_16BIT_FIFOEN+0x31c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ef5a:	e007      	b.n	800ef6c <UART_RxISR_16BIT_FIFOEN+0x364>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	699a      	ldr	r2, [r3, #24]
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	f042 0208 	orr.w	r2, r2, #8
 800ef6a:	619a      	str	r2, [r3, #24]
}
 800ef6c:	bf00      	nop
 800ef6e:	37b8      	adds	r7, #184	@ 0xb8
 800ef70:	46bd      	mov	sp, r7
 800ef72:	bd80      	pop	{r7, pc}
 800ef74:	44002400 	.word	0x44002400
 800ef78:	54002400 	.word	0x54002400
 800ef7c:	0800e6d5 	.word	0x0800e6d5

0800ef80 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ef80:	b480      	push	{r7}
 800ef82:	b083      	sub	sp, #12
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ef88:	bf00      	nop
 800ef8a:	370c      	adds	r7, #12
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef92:	4770      	bx	lr

0800ef94 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ef94:	b480      	push	{r7}
 800ef96:	b083      	sub	sp, #12
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ef9c:	bf00      	nop
 800ef9e:	370c      	adds	r7, #12
 800efa0:	46bd      	mov	sp, r7
 800efa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa6:	4770      	bx	lr

0800efa8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800efa8:	b480      	push	{r7}
 800efaa:	b083      	sub	sp, #12
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800efb0:	bf00      	nop
 800efb2:	370c      	adds	r7, #12
 800efb4:	46bd      	mov	sp, r7
 800efb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efba:	4770      	bx	lr

0800efbc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800efbc:	b480      	push	{r7}
 800efbe:	b085      	sub	sp, #20
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800efca:	2b01      	cmp	r3, #1
 800efcc:	d101      	bne.n	800efd2 <HAL_UARTEx_DisableFifoMode+0x16>
 800efce:	2302      	movs	r3, #2
 800efd0:	e027      	b.n	800f022 <HAL_UARTEx_DisableFifoMode+0x66>
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	2201      	movs	r2, #1
 800efd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	2224      	movs	r2, #36	@ 0x24
 800efde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	681a      	ldr	r2, [r3, #0]
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	f022 0201 	bic.w	r2, r2, #1
 800eff8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800f000:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	2200      	movs	r2, #0
 800f006:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	68fa      	ldr	r2, [r7, #12]
 800f00e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	2220      	movs	r2, #32
 800f014:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	2200      	movs	r2, #0
 800f01c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f020:	2300      	movs	r3, #0
}
 800f022:	4618      	mov	r0, r3
 800f024:	3714      	adds	r7, #20
 800f026:	46bd      	mov	sp, r7
 800f028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f02c:	4770      	bx	lr

0800f02e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f02e:	b580      	push	{r7, lr}
 800f030:	b084      	sub	sp, #16
 800f032:	af00      	add	r7, sp, #0
 800f034:	6078      	str	r0, [r7, #4]
 800f036:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f03e:	2b01      	cmp	r3, #1
 800f040:	d101      	bne.n	800f046 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f042:	2302      	movs	r3, #2
 800f044:	e02d      	b.n	800f0a2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	2201      	movs	r2, #1
 800f04a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	2224      	movs	r2, #36	@ 0x24
 800f052:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	681a      	ldr	r2, [r3, #0]
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	f022 0201 	bic.w	r2, r2, #1
 800f06c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	689b      	ldr	r3, [r3, #8]
 800f074:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	683a      	ldr	r2, [r7, #0]
 800f07e:	430a      	orrs	r2, r1
 800f080:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f082:	6878      	ldr	r0, [r7, #4]
 800f084:	f000 f850 	bl	800f128 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	68fa      	ldr	r2, [r7, #12]
 800f08e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	2220      	movs	r2, #32
 800f094:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	2200      	movs	r2, #0
 800f09c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f0a0:	2300      	movs	r3, #0
}
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	3710      	adds	r7, #16
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	bd80      	pop	{r7, pc}

0800f0aa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f0aa:	b580      	push	{r7, lr}
 800f0ac:	b084      	sub	sp, #16
 800f0ae:	af00      	add	r7, sp, #0
 800f0b0:	6078      	str	r0, [r7, #4]
 800f0b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f0ba:	2b01      	cmp	r3, #1
 800f0bc:	d101      	bne.n	800f0c2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f0be:	2302      	movs	r3, #2
 800f0c0:	e02d      	b.n	800f11e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	2201      	movs	r2, #1
 800f0c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	2224      	movs	r2, #36	@ 0x24
 800f0ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	681a      	ldr	r2, [r3, #0]
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	f022 0201 	bic.w	r2, r2, #1
 800f0e8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	689b      	ldr	r3, [r3, #8]
 800f0f0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	683a      	ldr	r2, [r7, #0]
 800f0fa:	430a      	orrs	r2, r1
 800f0fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f0fe:	6878      	ldr	r0, [r7, #4]
 800f100:	f000 f812 	bl	800f128 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	68fa      	ldr	r2, [r7, #12]
 800f10a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	2220      	movs	r2, #32
 800f110:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	2200      	movs	r2, #0
 800f118:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f11c:	2300      	movs	r3, #0
}
 800f11e:	4618      	mov	r0, r3
 800f120:	3710      	adds	r7, #16
 800f122:	46bd      	mov	sp, r7
 800f124:	bd80      	pop	{r7, pc}
	...

0800f128 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f128:	b480      	push	{r7}
 800f12a:	b085      	sub	sp, #20
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f134:	2b00      	cmp	r3, #0
 800f136:	d108      	bne.n	800f14a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	2201      	movs	r2, #1
 800f13c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	2201      	movs	r2, #1
 800f144:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f148:	e031      	b.n	800f1ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f14a:	2308      	movs	r3, #8
 800f14c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f14e:	2308      	movs	r3, #8
 800f150:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	689b      	ldr	r3, [r3, #8]
 800f158:	0e5b      	lsrs	r3, r3, #25
 800f15a:	b2db      	uxtb	r3, r3
 800f15c:	f003 0307 	and.w	r3, r3, #7
 800f160:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	689b      	ldr	r3, [r3, #8]
 800f168:	0f5b      	lsrs	r3, r3, #29
 800f16a:	b2db      	uxtb	r3, r3
 800f16c:	f003 0307 	and.w	r3, r3, #7
 800f170:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f172:	7bbb      	ldrb	r3, [r7, #14]
 800f174:	7b3a      	ldrb	r2, [r7, #12]
 800f176:	4911      	ldr	r1, [pc, #68]	@ (800f1bc <UARTEx_SetNbDataToProcess+0x94>)
 800f178:	5c8a      	ldrb	r2, [r1, r2]
 800f17a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f17e:	7b3a      	ldrb	r2, [r7, #12]
 800f180:	490f      	ldr	r1, [pc, #60]	@ (800f1c0 <UARTEx_SetNbDataToProcess+0x98>)
 800f182:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f184:	fb93 f3f2 	sdiv	r3, r3, r2
 800f188:	b29a      	uxth	r2, r3
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f190:	7bfb      	ldrb	r3, [r7, #15]
 800f192:	7b7a      	ldrb	r2, [r7, #13]
 800f194:	4909      	ldr	r1, [pc, #36]	@ (800f1bc <UARTEx_SetNbDataToProcess+0x94>)
 800f196:	5c8a      	ldrb	r2, [r1, r2]
 800f198:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f19c:	7b7a      	ldrb	r2, [r7, #13]
 800f19e:	4908      	ldr	r1, [pc, #32]	@ (800f1c0 <UARTEx_SetNbDataToProcess+0x98>)
 800f1a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f1a2:	fb93 f3f2 	sdiv	r3, r3, r2
 800f1a6:	b29a      	uxth	r2, r3
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800f1ae:	bf00      	nop
 800f1b0:	3714      	adds	r7, #20
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b8:	4770      	bx	lr
 800f1ba:	bf00      	nop
 800f1bc:	08012574 	.word	0x08012574
 800f1c0:	0801257c 	.word	0x0801257c

0800f1c4 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    const FMC_NORSRAM_InitTypeDef *Init)
{
 800f1c4:	b480      	push	{r7}
 800f1c6:	b087      	sub	sp, #28
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	6078      	str	r0, [r7, #4]
 800f1cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	681a      	ldr	r2, [r3, #0]
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1d8:	683a      	ldr	r2, [r7, #0]
 800f1da:	6812      	ldr	r2, [r2, #0]
 800f1dc:	f023 0101 	bic.w	r1, r3, #1
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800f1e6:	683b      	ldr	r3, [r7, #0]
 800f1e8:	689b      	ldr	r3, [r3, #8]
 800f1ea:	2b08      	cmp	r3, #8
 800f1ec:	d102      	bne.n	800f1f4 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800f1ee:	2340      	movs	r3, #64	@ 0x40
 800f1f0:	617b      	str	r3, [r7, #20]
 800f1f2:	e001      	b.n	800f1f8 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800f1f8:	683b      	ldr	r3, [r7, #0]
 800f1fa:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800f1fc:	697b      	ldr	r3, [r7, #20]
 800f1fe:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800f200:	683b      	ldr	r3, [r7, #0]
 800f202:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800f204:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800f20a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800f20c:	683b      	ldr	r3, [r7, #0]
 800f20e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800f210:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800f216:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800f218:	683b      	ldr	r3, [r7, #0]
 800f21a:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800f21c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800f222:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800f224:	683b      	ldr	r3, [r7, #0]
 800f226:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800f228:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800f22a:	683b      	ldr	r3, [r7, #0]
 800f22c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WaitSignal              | \
 800f22e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800f230:	683b      	ldr	r3, [r7, #0]
 800f232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->ExtendedMode            | \
 800f234:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800f236:	683b      	ldr	r3, [r7, #0]
 800f238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  btcr_reg = (flashaccess                   | \
 800f23a:	4313      	orrs	r3, r2
 800f23c:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f242:	693a      	ldr	r2, [r7, #16]
 800f244:	4313      	orrs	r3, r2
 800f246:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800f248:	683b      	ldr	r3, [r7, #0]
 800f24a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f24c:	693a      	ldr	r2, [r7, #16]
 800f24e:	4313      	orrs	r3, r2
 800f250:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->NBLSetupTime;
 800f252:	683b      	ldr	r3, [r7, #0]
 800f254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f256:	693a      	ldr	r2, [r7, #16]
 800f258:	4313      	orrs	r3, r2
 800f25a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800f25c:	683b      	ldr	r3, [r7, #0]
 800f25e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f260:	693a      	ldr	r2, [r7, #16]
 800f262:	4313      	orrs	r3, r2
 800f264:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800f266:	4b3d      	ldr	r3, [pc, #244]	@ (800f35c <FMC_NORSRAM_Init+0x198>)
 800f268:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f270:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f278:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_NBLSET;
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 800f280:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 800f288:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800f28a:	683b      	ldr	r3, [r7, #0]
 800f28c:	681a      	ldr	r2, [r3, #0]
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	43db      	mvns	r3, r3
 800f298:	ea02 0103 	and.w	r1, r2, r3
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	681a      	ldr	r2, [r3, #0]
 800f2a0:	693b      	ldr	r3, [r7, #16]
 800f2a2:	4319      	orrs	r1, r3
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800f2aa:	683b      	ldr	r3, [r7, #0]
 800f2ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f2ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f2b2:	d10c      	bne.n	800f2ce <FMC_NORSRAM_Init+0x10a>
 800f2b4:	683b      	ldr	r3, [r7, #0]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d008      	beq.n	800f2ce <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800f2c4:	683b      	ldr	r3, [r7, #0]
 800f2c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f2c8:	431a      	orrs	r2, r3
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800f2ce:	683b      	ldr	r3, [r7, #0]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d006      	beq.n	800f2e4 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681a      	ldr	r2, [r3, #0]
 800f2da:	683b      	ldr	r3, [r7, #0]
 800f2dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f2de:	431a      	orrs	r2, r3
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	601a      	str	r2, [r3, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f2ea:	2b01      	cmp	r3, #1
 800f2ec:	d12f      	bne.n	800f34e <FMC_NORSRAM_Init+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	6a1b      	ldr	r3, [r3, #32]
 800f2f2:	0c1b      	lsrs	r3, r3, #16
 800f2f4:	041b      	lsls	r3, r3, #16
 800f2f6:	683a      	ldr	r2, [r7, #0]
 800f2f8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800f2fa:	431a      	orrs	r2, r3
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	621a      	str	r2, [r3, #32]

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 800f300:	683b      	ldr	r3, [r7, #0]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	2b04      	cmp	r3, #4
 800f306:	d014      	beq.n	800f332 <FMC_NORSRAM_Init+0x16e>
 800f308:	2b04      	cmp	r3, #4
 800f30a:	d819      	bhi.n	800f340 <FMC_NORSRAM_Init+0x17c>
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d002      	beq.n	800f316 <FMC_NORSRAM_Init+0x152>
 800f310:	2b02      	cmp	r3, #2
 800f312:	d007      	beq.n	800f324 <FMC_NORSRAM_Init+0x160>
 800f314:	e014      	b.n	800f340 <FMC_NORSRAM_Init+0x17c>
    {
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	6a1b      	ldr	r3, [r3, #32]
 800f31a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	621a      	str	r2, [r3, #32]
        break;
 800f322:	e014      	b.n	800f34e <FMC_NORSRAM_Init+0x18a>

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	6a1b      	ldr	r3, [r3, #32]
 800f328:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	621a      	str	r2, [r3, #32]
        break;
 800f330:	e00d      	b.n	800f34e <FMC_NORSRAM_Init+0x18a>

      case FMC_NORSRAM_BANK3 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	6a1b      	ldr	r3, [r3, #32]
 800f336:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	621a      	str	r2, [r3, #32]
        break;
 800f33e:	e006      	b.n	800f34e <FMC_NORSRAM_Init+0x18a>

      default :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	6a1b      	ldr	r3, [r3, #32]
 800f344:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	621a      	str	r2, [r3, #32]
        break;
 800f34c:	bf00      	nop
    }
  }

  return HAL_OK;
 800f34e:	2300      	movs	r3, #0
}
 800f350:	4618      	mov	r0, r3
 800f352:	371c      	adds	r7, #28
 800f354:	46bd      	mov	sp, r7
 800f356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35a:	4770      	bx	lr
 800f35c:	0008fb7f 	.word	0x0008fb7f

0800f360 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f360:	b480      	push	{r7}
 800f362:	b087      	sub	sp, #28
 800f364:	af00      	add	r7, sp, #0
 800f366:	60f8      	str	r0, [r7, #12]
 800f368:	60b9      	str	r1, [r7, #8]
 800f36a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 800f36c:	68bb      	ldr	r3, [r7, #8]
 800f36e:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 800f370:	68bb      	ldr	r3, [r7, #8]
 800f372:	685b      	ldr	r3, [r3, #4]
 800f374:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 800f376:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 800f378:	68bb      	ldr	r3, [r7, #8]
 800f37a:	689b      	ldr	r3, [r3, #8]
 800f37c:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 800f37e:	431a      	orrs	r2, r3
    (Timing->DataHoldTime << FMC_BTRx_DATAHLD_Pos) |
 800f380:	68bb      	ldr	r3, [r7, #8]
 800f382:	68db      	ldr	r3, [r3, #12]
 800f384:	079b      	lsls	r3, r3, #30
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 800f386:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 800f388:	68bb      	ldr	r3, [r7, #8]
 800f38a:	691b      	ldr	r3, [r3, #16]
 800f38c:	041b      	lsls	r3, r3, #16
    (Timing->DataHoldTime << FMC_BTRx_DATAHLD_Pos) |
 800f38e:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 800f390:	68bb      	ldr	r3, [r7, #8]
 800f392:	695b      	ldr	r3, [r3, #20]
 800f394:	3b01      	subs	r3, #1
 800f396:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 800f398:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 800f39a:	68bb      	ldr	r3, [r7, #8]
 800f39c:	699b      	ldr	r3, [r3, #24]
 800f39e:	3b02      	subs	r3, #2
 800f3a0:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 800f3a2:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 800f3a6:	68bb      	ldr	r3, [r7, #8]
 800f3a8:	69db      	ldr	r3, [r3, #28]
  Device->BTCR[Bank + 1U] =
 800f3aa:	687a      	ldr	r2, [r7, #4]
 800f3ac:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 800f3ae:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f3be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f3c2:	d113      	bne.n	800f3ec <FMC_NORSRAM_Timing_Init+0x8c>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	685b      	ldr	r3, [r3, #4]
 800f3c8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f3cc:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800f3ce:	68bb      	ldr	r3, [r7, #8]
 800f3d0:	695b      	ldr	r3, [r3, #20]
 800f3d2:	3b01      	subs	r3, #1
 800f3d4:	051b      	lsls	r3, r3, #20
 800f3d6:	697a      	ldr	r2, [r7, #20]
 800f3d8:	4313      	orrs	r3, r2
 800f3da:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	685b      	ldr	r3, [r3, #4]
 800f3e0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800f3e4:	697b      	ldr	r3, [r7, #20]
 800f3e6:	431a      	orrs	r2, r3
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800f3ec:	2300      	movs	r3, #0
}
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	371c      	adds	r7, #28
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f8:	4770      	bx	lr

0800f3fa <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800f3fa:	b480      	push	{r7}
 800f3fc:	b085      	sub	sp, #20
 800f3fe:	af00      	add	r7, sp, #0
 800f400:	60f8      	str	r0, [r7, #12]
 800f402:	60b9      	str	r1, [r7, #8]
 800f404:	607a      	str	r2, [r7, #4]
 800f406:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800f408:	683b      	ldr	r3, [r7, #0]
 800f40a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f40e:	d121      	bne.n	800f454 <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	687a      	ldr	r2, [r7, #4]
 800f414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f418:	f003 627f 	and.w	r2, r3, #267386880	@ 0xff00000
 800f41c:	68bb      	ldr	r3, [r7, #8]
 800f41e:	6819      	ldr	r1, [r3, #0]
 800f420:	68bb      	ldr	r3, [r7, #8]
 800f422:	685b      	ldr	r3, [r3, #4]
 800f424:	011b      	lsls	r3, r3, #4
 800f426:	4319      	orrs	r1, r3
 800f428:	68bb      	ldr	r3, [r7, #8]
 800f42a:	689b      	ldr	r3, [r3, #8]
 800f42c:	021b      	lsls	r3, r3, #8
 800f42e:	4319      	orrs	r1, r3
 800f430:	68bb      	ldr	r3, [r7, #8]
 800f432:	68db      	ldr	r3, [r3, #12]
 800f434:	079b      	lsls	r3, r3, #30
 800f436:	4319      	orrs	r1, r3
 800f438:	68bb      	ldr	r3, [r7, #8]
 800f43a:	69db      	ldr	r3, [r3, #28]
 800f43c:	4319      	orrs	r1, r3
 800f43e:	68bb      	ldr	r3, [r7, #8]
 800f440:	691b      	ldr	r3, [r3, #16]
 800f442:	041b      	lsls	r3, r3, #16
 800f444:	430b      	orrs	r3, r1
 800f446:	ea42 0103 	orr.w	r1, r2, r3
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	687a      	ldr	r2, [r7, #4]
 800f44e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800f452:	e005      	b.n	800f460 <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	687a      	ldr	r2, [r7, #4]
 800f458:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800f45c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800f460:	2300      	movs	r3, #0
}
 800f462:	4618      	mov	r0, r3
 800f464:	3714      	adds	r7, #20
 800f466:	46bd      	mov	sp, r7
 800f468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46c:	4770      	bx	lr
	...

0800f470 <FMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_Init(FMC_NAND_TypeDef *Device, const FMC_NAND_InitTypeDef *Init)
{
 800f470:	b480      	push	{r7}
 800f472:	b083      	sub	sp, #12
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
 800f478:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FMC_TAR_TIME(Init->TARSetupTime));

  /* NAND bank 3 registers configuration */
  MODIFY_REG(Device->PCR, PCR_CLEAR_MASK, (Init->Waitfeature                            |
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	681a      	ldr	r2, [r3, #0]
 800f47e:	4b10      	ldr	r3, [pc, #64]	@ (800f4c0 <FMC_NAND_Init+0x50>)
 800f480:	4013      	ands	r3, r2
 800f482:	683a      	ldr	r2, [r7, #0]
 800f484:	6851      	ldr	r1, [r2, #4]
 800f486:	683a      	ldr	r2, [r7, #0]
 800f488:	6892      	ldr	r2, [r2, #8]
 800f48a:	4311      	orrs	r1, r2
 800f48c:	683a      	ldr	r2, [r7, #0]
 800f48e:	68d2      	ldr	r2, [r2, #12]
 800f490:	4311      	orrs	r1, r2
 800f492:	683a      	ldr	r2, [r7, #0]
 800f494:	6912      	ldr	r2, [r2, #16]
 800f496:	4311      	orrs	r1, r2
 800f498:	683a      	ldr	r2, [r7, #0]
 800f49a:	6952      	ldr	r2, [r2, #20]
 800f49c:	0252      	lsls	r2, r2, #9
 800f49e:	4311      	orrs	r1, r2
 800f4a0:	683a      	ldr	r2, [r7, #0]
 800f4a2:	6992      	ldr	r2, [r2, #24]
 800f4a4:	0352      	lsls	r2, r2, #13
 800f4a6:	430a      	orrs	r2, r1
 800f4a8:	4313      	orrs	r3, r2
 800f4aa:	f043 0208 	orr.w	r2, r3, #8
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	601a      	str	r2, [r3, #0]
                                           Init->EccComputation                         |
                                           Init->ECCPageSize                            |
                                           ((Init->TCLRSetupTime) << FMC_PCR_TCLR_Pos)  |
                                           ((Init->TARSetupTime)  << FMC_PCR_TAR_Pos)));

  return HAL_OK;
 800f4b2:	2300      	movs	r3, #0
}
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	370c      	adds	r7, #12
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4be:	4770      	bx	lr
 800f4c0:	fff00181 	.word	0xfff00181

0800f4c4 <FMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_CommonSpace_Timing_Init(FMC_NAND_TypeDef *Device,
                                                   const FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 800f4c4:	b480      	push	{r7}
 800f4c6:	b085      	sub	sp, #20
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	60f8      	str	r0, [r7, #12]
 800f4cc:	60b9      	str	r1, [r7, #8]
 800f4ce:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  Device->PMEM = (Timing->SetupTime |
 800f4d0:	68bb      	ldr	r3, [r7, #8]
 800f4d2:	681a      	ldr	r2, [r3, #0]
                  ((Timing->WaitSetupTime) << FMC_PMEM_MEMWAIT_Pos) |
 800f4d4:	68bb      	ldr	r3, [r7, #8]
 800f4d6:	685b      	ldr	r3, [r3, #4]
 800f4d8:	021b      	lsls	r3, r3, #8
  Device->PMEM = (Timing->SetupTime |
 800f4da:	431a      	orrs	r2, r3
                  ((Timing->HoldSetupTime) << FMC_PMEM_MEMHOLD_Pos) |
 800f4dc:	68bb      	ldr	r3, [r7, #8]
 800f4de:	689b      	ldr	r3, [r3, #8]
 800f4e0:	041b      	lsls	r3, r3, #16
                  ((Timing->WaitSetupTime) << FMC_PMEM_MEMWAIT_Pos) |
 800f4e2:	431a      	orrs	r2, r3
                  ((Timing->HiZSetupTime) << FMC_PMEM_MEMHIZ_Pos));
 800f4e4:	68bb      	ldr	r3, [r7, #8]
 800f4e6:	68db      	ldr	r3, [r3, #12]
 800f4e8:	061b      	lsls	r3, r3, #24
                  ((Timing->HoldSetupTime) << FMC_PMEM_MEMHOLD_Pos) |
 800f4ea:	431a      	orrs	r2, r3
  Device->PMEM = (Timing->SetupTime |
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800f4f0:	2300      	movs	r3, #0
}
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	3714      	adds	r7, #20
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fc:	4770      	bx	lr

0800f4fe <FMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_AttributeSpace_Timing_Init(FMC_NAND_TypeDef *Device,
                                                      const FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 800f4fe:	b480      	push	{r7}
 800f500:	b085      	sub	sp, #20
 800f502:	af00      	add	r7, sp, #0
 800f504:	60f8      	str	r0, [r7, #12]
 800f506:	60b9      	str	r1, [r7, #8]
 800f508:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  Device->PATT = (Timing->SetupTime |
 800f50a:	68bb      	ldr	r3, [r7, #8]
 800f50c:	681a      	ldr	r2, [r3, #0]
                  ((Timing->WaitSetupTime) << FMC_PATT_ATTWAIT_Pos) |
 800f50e:	68bb      	ldr	r3, [r7, #8]
 800f510:	685b      	ldr	r3, [r3, #4]
 800f512:	021b      	lsls	r3, r3, #8
  Device->PATT = (Timing->SetupTime |
 800f514:	431a      	orrs	r2, r3
                  ((Timing->HoldSetupTime) << FMC_PATT_ATTHOLD_Pos) |
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	689b      	ldr	r3, [r3, #8]
 800f51a:	041b      	lsls	r3, r3, #16
                  ((Timing->WaitSetupTime) << FMC_PATT_ATTWAIT_Pos) |
 800f51c:	431a      	orrs	r2, r3
                  ((Timing->HiZSetupTime)  << FMC_PATT_ATTHIZ_Pos));
 800f51e:	68bb      	ldr	r3, [r7, #8]
 800f520:	68db      	ldr	r3, [r3, #12]
 800f522:	061b      	lsls	r3, r3, #24
                  ((Timing->HoldSetupTime) << FMC_PATT_ATTHOLD_Pos) |
 800f524:	431a      	orrs	r2, r3
  Device->PATT = (Timing->SetupTime |
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f52a:	2300      	movs	r3, #0
}
 800f52c:	4618      	mov	r0, r3
 800f52e:	3714      	adds	r7, #20
 800f530:	46bd      	mov	sp, r7
 800f532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f536:	4770      	bx	lr

0800f538 <__cvt>:
 800f538:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f53c:	ec57 6b10 	vmov	r6, r7, d0
 800f540:	2f00      	cmp	r7, #0
 800f542:	460c      	mov	r4, r1
 800f544:	4619      	mov	r1, r3
 800f546:	463b      	mov	r3, r7
 800f548:	bfb4      	ite	lt
 800f54a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f54e:	2300      	movge	r3, #0
 800f550:	4691      	mov	r9, r2
 800f552:	bfbf      	itttt	lt
 800f554:	4632      	movlt	r2, r6
 800f556:	461f      	movlt	r7, r3
 800f558:	232d      	movlt	r3, #45	@ 0x2d
 800f55a:	4616      	movlt	r6, r2
 800f55c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f560:	700b      	strb	r3, [r1, #0]
 800f562:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f564:	f023 0820 	bic.w	r8, r3, #32
 800f568:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f56c:	d005      	beq.n	800f57a <__cvt+0x42>
 800f56e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f572:	d100      	bne.n	800f576 <__cvt+0x3e>
 800f574:	3401      	adds	r4, #1
 800f576:	2102      	movs	r1, #2
 800f578:	e000      	b.n	800f57c <__cvt+0x44>
 800f57a:	2103      	movs	r1, #3
 800f57c:	ab03      	add	r3, sp, #12
 800f57e:	4622      	mov	r2, r4
 800f580:	9301      	str	r3, [sp, #4]
 800f582:	ab02      	add	r3, sp, #8
 800f584:	ec47 6b10 	vmov	d0, r6, r7
 800f588:	9300      	str	r3, [sp, #0]
 800f58a:	4653      	mov	r3, sl
 800f58c:	f000 fe7c 	bl	8010288 <_dtoa_r>
 800f590:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f594:	4605      	mov	r5, r0
 800f596:	d119      	bne.n	800f5cc <__cvt+0x94>
 800f598:	f019 0f01 	tst.w	r9, #1
 800f59c:	d00e      	beq.n	800f5bc <__cvt+0x84>
 800f59e:	eb00 0904 	add.w	r9, r0, r4
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	4630      	mov	r0, r6
 800f5a8:	4639      	mov	r1, r7
 800f5aa:	f7f1 fa9d 	bl	8000ae8 <__aeabi_dcmpeq>
 800f5ae:	b108      	cbz	r0, 800f5b4 <__cvt+0x7c>
 800f5b0:	f8cd 900c 	str.w	r9, [sp, #12]
 800f5b4:	2230      	movs	r2, #48	@ 0x30
 800f5b6:	9b03      	ldr	r3, [sp, #12]
 800f5b8:	454b      	cmp	r3, r9
 800f5ba:	d31e      	bcc.n	800f5fa <__cvt+0xc2>
 800f5bc:	9b03      	ldr	r3, [sp, #12]
 800f5be:	4628      	mov	r0, r5
 800f5c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f5c2:	1b5b      	subs	r3, r3, r5
 800f5c4:	6013      	str	r3, [r2, #0]
 800f5c6:	b004      	add	sp, #16
 800f5c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f5d0:	eb00 0904 	add.w	r9, r0, r4
 800f5d4:	d1e5      	bne.n	800f5a2 <__cvt+0x6a>
 800f5d6:	7803      	ldrb	r3, [r0, #0]
 800f5d8:	2b30      	cmp	r3, #48	@ 0x30
 800f5da:	d10a      	bne.n	800f5f2 <__cvt+0xba>
 800f5dc:	2200      	movs	r2, #0
 800f5de:	2300      	movs	r3, #0
 800f5e0:	4630      	mov	r0, r6
 800f5e2:	4639      	mov	r1, r7
 800f5e4:	f7f1 fa80 	bl	8000ae8 <__aeabi_dcmpeq>
 800f5e8:	b918      	cbnz	r0, 800f5f2 <__cvt+0xba>
 800f5ea:	f1c4 0401 	rsb	r4, r4, #1
 800f5ee:	f8ca 4000 	str.w	r4, [sl]
 800f5f2:	f8da 3000 	ldr.w	r3, [sl]
 800f5f6:	4499      	add	r9, r3
 800f5f8:	e7d3      	b.n	800f5a2 <__cvt+0x6a>
 800f5fa:	1c59      	adds	r1, r3, #1
 800f5fc:	9103      	str	r1, [sp, #12]
 800f5fe:	701a      	strb	r2, [r3, #0]
 800f600:	e7d9      	b.n	800f5b6 <__cvt+0x7e>

0800f602 <__exponent>:
 800f602:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f604:	2900      	cmp	r1, #0
 800f606:	7002      	strb	r2, [r0, #0]
 800f608:	bfba      	itte	lt
 800f60a:	4249      	neglt	r1, r1
 800f60c:	232d      	movlt	r3, #45	@ 0x2d
 800f60e:	232b      	movge	r3, #43	@ 0x2b
 800f610:	2909      	cmp	r1, #9
 800f612:	7043      	strb	r3, [r0, #1]
 800f614:	dd28      	ble.n	800f668 <__exponent+0x66>
 800f616:	f10d 0307 	add.w	r3, sp, #7
 800f61a:	270a      	movs	r7, #10
 800f61c:	461d      	mov	r5, r3
 800f61e:	461a      	mov	r2, r3
 800f620:	3b01      	subs	r3, #1
 800f622:	fbb1 f6f7 	udiv	r6, r1, r7
 800f626:	fb07 1416 	mls	r4, r7, r6, r1
 800f62a:	3430      	adds	r4, #48	@ 0x30
 800f62c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f630:	460c      	mov	r4, r1
 800f632:	4631      	mov	r1, r6
 800f634:	2c63      	cmp	r4, #99	@ 0x63
 800f636:	dcf2      	bgt.n	800f61e <__exponent+0x1c>
 800f638:	3130      	adds	r1, #48	@ 0x30
 800f63a:	1e94      	subs	r4, r2, #2
 800f63c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f640:	1c41      	adds	r1, r0, #1
 800f642:	4623      	mov	r3, r4
 800f644:	42ab      	cmp	r3, r5
 800f646:	d30a      	bcc.n	800f65e <__exponent+0x5c>
 800f648:	f10d 0309 	add.w	r3, sp, #9
 800f64c:	1a9b      	subs	r3, r3, r2
 800f64e:	42ac      	cmp	r4, r5
 800f650:	bf88      	it	hi
 800f652:	2300      	movhi	r3, #0
 800f654:	3302      	adds	r3, #2
 800f656:	4403      	add	r3, r0
 800f658:	1a18      	subs	r0, r3, r0
 800f65a:	b003      	add	sp, #12
 800f65c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f65e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f662:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f666:	e7ed      	b.n	800f644 <__exponent+0x42>
 800f668:	2330      	movs	r3, #48	@ 0x30
 800f66a:	3130      	adds	r1, #48	@ 0x30
 800f66c:	7083      	strb	r3, [r0, #2]
 800f66e:	1d03      	adds	r3, r0, #4
 800f670:	70c1      	strb	r1, [r0, #3]
 800f672:	e7f1      	b.n	800f658 <__exponent+0x56>

0800f674 <_printf_float>:
 800f674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f678:	b08d      	sub	sp, #52	@ 0x34
 800f67a:	460c      	mov	r4, r1
 800f67c:	4616      	mov	r6, r2
 800f67e:	461f      	mov	r7, r3
 800f680:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f684:	4605      	mov	r5, r0
 800f686:	f000 fcdf 	bl	8010048 <_localeconv_r>
 800f68a:	6803      	ldr	r3, [r0, #0]
 800f68c:	4618      	mov	r0, r3
 800f68e:	9304      	str	r3, [sp, #16]
 800f690:	f7f0 fdfe 	bl	8000290 <strlen>
 800f694:	2300      	movs	r3, #0
 800f696:	9005      	str	r0, [sp, #20]
 800f698:	930a      	str	r3, [sp, #40]	@ 0x28
 800f69a:	f8d8 3000 	ldr.w	r3, [r8]
 800f69e:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f6a2:	3307      	adds	r3, #7
 800f6a4:	f8d4 b000 	ldr.w	fp, [r4]
 800f6a8:	f023 0307 	bic.w	r3, r3, #7
 800f6ac:	f103 0208 	add.w	r2, r3, #8
 800f6b0:	f8c8 2000 	str.w	r2, [r8]
 800f6b4:	f04f 32ff 	mov.w	r2, #4294967295
 800f6b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f6bc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f6c0:	f8cd 8018 	str.w	r8, [sp, #24]
 800f6c4:	9307      	str	r3, [sp, #28]
 800f6c6:	4b9d      	ldr	r3, [pc, #628]	@ (800f93c <_printf_float+0x2c8>)
 800f6c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f6cc:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f6d0:	f7f1 fa3c 	bl	8000b4c <__aeabi_dcmpun>
 800f6d4:	bb70      	cbnz	r0, 800f734 <_printf_float+0xc0>
 800f6d6:	f04f 32ff 	mov.w	r2, #4294967295
 800f6da:	4b98      	ldr	r3, [pc, #608]	@ (800f93c <_printf_float+0x2c8>)
 800f6dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f6e0:	f7f1 fa16 	bl	8000b10 <__aeabi_dcmple>
 800f6e4:	bb30      	cbnz	r0, 800f734 <_printf_float+0xc0>
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	4640      	mov	r0, r8
 800f6ec:	4649      	mov	r1, r9
 800f6ee:	f7f1 fa05 	bl	8000afc <__aeabi_dcmplt>
 800f6f2:	b110      	cbz	r0, 800f6fa <_printf_float+0x86>
 800f6f4:	232d      	movs	r3, #45	@ 0x2d
 800f6f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f6fa:	4a91      	ldr	r2, [pc, #580]	@ (800f940 <_printf_float+0x2cc>)
 800f6fc:	4b91      	ldr	r3, [pc, #580]	@ (800f944 <_printf_float+0x2d0>)
 800f6fe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f702:	bf94      	ite	ls
 800f704:	4690      	movls	r8, r2
 800f706:	4698      	movhi	r8, r3
 800f708:	2303      	movs	r3, #3
 800f70a:	f04f 0900 	mov.w	r9, #0
 800f70e:	6123      	str	r3, [r4, #16]
 800f710:	f02b 0304 	bic.w	r3, fp, #4
 800f714:	6023      	str	r3, [r4, #0]
 800f716:	4633      	mov	r3, r6
 800f718:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f71a:	4621      	mov	r1, r4
 800f71c:	4628      	mov	r0, r5
 800f71e:	9700      	str	r7, [sp, #0]
 800f720:	f000 f9d2 	bl	800fac8 <_printf_common>
 800f724:	3001      	adds	r0, #1
 800f726:	f040 808d 	bne.w	800f844 <_printf_float+0x1d0>
 800f72a:	f04f 30ff 	mov.w	r0, #4294967295
 800f72e:	b00d      	add	sp, #52	@ 0x34
 800f730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f734:	4642      	mov	r2, r8
 800f736:	464b      	mov	r3, r9
 800f738:	4640      	mov	r0, r8
 800f73a:	4649      	mov	r1, r9
 800f73c:	f7f1 fa06 	bl	8000b4c <__aeabi_dcmpun>
 800f740:	b140      	cbz	r0, 800f754 <_printf_float+0xe0>
 800f742:	464b      	mov	r3, r9
 800f744:	4a80      	ldr	r2, [pc, #512]	@ (800f948 <_printf_float+0x2d4>)
 800f746:	2b00      	cmp	r3, #0
 800f748:	bfbc      	itt	lt
 800f74a:	232d      	movlt	r3, #45	@ 0x2d
 800f74c:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f750:	4b7e      	ldr	r3, [pc, #504]	@ (800f94c <_printf_float+0x2d8>)
 800f752:	e7d4      	b.n	800f6fe <_printf_float+0x8a>
 800f754:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f758:	6863      	ldr	r3, [r4, #4]
 800f75a:	9206      	str	r2, [sp, #24]
 800f75c:	1c5a      	adds	r2, r3, #1
 800f75e:	d13b      	bne.n	800f7d8 <_printf_float+0x164>
 800f760:	2306      	movs	r3, #6
 800f762:	6063      	str	r3, [r4, #4]
 800f764:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f768:	2300      	movs	r3, #0
 800f76a:	4628      	mov	r0, r5
 800f76c:	6022      	str	r2, [r4, #0]
 800f76e:	9303      	str	r3, [sp, #12]
 800f770:	ab0a      	add	r3, sp, #40	@ 0x28
 800f772:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f776:	ab09      	add	r3, sp, #36	@ 0x24
 800f778:	ec49 8b10 	vmov	d0, r8, r9
 800f77c:	9300      	str	r3, [sp, #0]
 800f77e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f782:	6861      	ldr	r1, [r4, #4]
 800f784:	f7ff fed8 	bl	800f538 <__cvt>
 800f788:	9b06      	ldr	r3, [sp, #24]
 800f78a:	4680      	mov	r8, r0
 800f78c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f78e:	2b47      	cmp	r3, #71	@ 0x47
 800f790:	d129      	bne.n	800f7e6 <_printf_float+0x172>
 800f792:	1cc8      	adds	r0, r1, #3
 800f794:	db02      	blt.n	800f79c <_printf_float+0x128>
 800f796:	6863      	ldr	r3, [r4, #4]
 800f798:	4299      	cmp	r1, r3
 800f79a:	dd41      	ble.n	800f820 <_printf_float+0x1ac>
 800f79c:	f1aa 0a02 	sub.w	sl, sl, #2
 800f7a0:	fa5f fa8a 	uxtb.w	sl, sl
 800f7a4:	3901      	subs	r1, #1
 800f7a6:	4652      	mov	r2, sl
 800f7a8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f7ac:	9109      	str	r1, [sp, #36]	@ 0x24
 800f7ae:	f7ff ff28 	bl	800f602 <__exponent>
 800f7b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f7b4:	4681      	mov	r9, r0
 800f7b6:	1813      	adds	r3, r2, r0
 800f7b8:	2a01      	cmp	r2, #1
 800f7ba:	6123      	str	r3, [r4, #16]
 800f7bc:	dc02      	bgt.n	800f7c4 <_printf_float+0x150>
 800f7be:	6822      	ldr	r2, [r4, #0]
 800f7c0:	07d2      	lsls	r2, r2, #31
 800f7c2:	d501      	bpl.n	800f7c8 <_printf_float+0x154>
 800f7c4:	3301      	adds	r3, #1
 800f7c6:	6123      	str	r3, [r4, #16]
 800f7c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d0a2      	beq.n	800f716 <_printf_float+0xa2>
 800f7d0:	232d      	movs	r3, #45	@ 0x2d
 800f7d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f7d6:	e79e      	b.n	800f716 <_printf_float+0xa2>
 800f7d8:	9a06      	ldr	r2, [sp, #24]
 800f7da:	2a47      	cmp	r2, #71	@ 0x47
 800f7dc:	d1c2      	bne.n	800f764 <_printf_float+0xf0>
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d1c0      	bne.n	800f764 <_printf_float+0xf0>
 800f7e2:	2301      	movs	r3, #1
 800f7e4:	e7bd      	b.n	800f762 <_printf_float+0xee>
 800f7e6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f7ea:	d9db      	bls.n	800f7a4 <_printf_float+0x130>
 800f7ec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f7f0:	d118      	bne.n	800f824 <_printf_float+0x1b0>
 800f7f2:	2900      	cmp	r1, #0
 800f7f4:	6863      	ldr	r3, [r4, #4]
 800f7f6:	dd0b      	ble.n	800f810 <_printf_float+0x19c>
 800f7f8:	6121      	str	r1, [r4, #16]
 800f7fa:	b913      	cbnz	r3, 800f802 <_printf_float+0x18e>
 800f7fc:	6822      	ldr	r2, [r4, #0]
 800f7fe:	07d0      	lsls	r0, r2, #31
 800f800:	d502      	bpl.n	800f808 <_printf_float+0x194>
 800f802:	3301      	adds	r3, #1
 800f804:	440b      	add	r3, r1
 800f806:	6123      	str	r3, [r4, #16]
 800f808:	f04f 0900 	mov.w	r9, #0
 800f80c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f80e:	e7db      	b.n	800f7c8 <_printf_float+0x154>
 800f810:	b913      	cbnz	r3, 800f818 <_printf_float+0x1a4>
 800f812:	6822      	ldr	r2, [r4, #0]
 800f814:	07d2      	lsls	r2, r2, #31
 800f816:	d501      	bpl.n	800f81c <_printf_float+0x1a8>
 800f818:	3302      	adds	r3, #2
 800f81a:	e7f4      	b.n	800f806 <_printf_float+0x192>
 800f81c:	2301      	movs	r3, #1
 800f81e:	e7f2      	b.n	800f806 <_printf_float+0x192>
 800f820:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f824:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f826:	4299      	cmp	r1, r3
 800f828:	db05      	blt.n	800f836 <_printf_float+0x1c2>
 800f82a:	6823      	ldr	r3, [r4, #0]
 800f82c:	6121      	str	r1, [r4, #16]
 800f82e:	07d8      	lsls	r0, r3, #31
 800f830:	d5ea      	bpl.n	800f808 <_printf_float+0x194>
 800f832:	1c4b      	adds	r3, r1, #1
 800f834:	e7e7      	b.n	800f806 <_printf_float+0x192>
 800f836:	2900      	cmp	r1, #0
 800f838:	bfd4      	ite	le
 800f83a:	f1c1 0202 	rsble	r2, r1, #2
 800f83e:	2201      	movgt	r2, #1
 800f840:	4413      	add	r3, r2
 800f842:	e7e0      	b.n	800f806 <_printf_float+0x192>
 800f844:	6823      	ldr	r3, [r4, #0]
 800f846:	055a      	lsls	r2, r3, #21
 800f848:	d407      	bmi.n	800f85a <_printf_float+0x1e6>
 800f84a:	6923      	ldr	r3, [r4, #16]
 800f84c:	4642      	mov	r2, r8
 800f84e:	4631      	mov	r1, r6
 800f850:	4628      	mov	r0, r5
 800f852:	47b8      	blx	r7
 800f854:	3001      	adds	r0, #1
 800f856:	d12b      	bne.n	800f8b0 <_printf_float+0x23c>
 800f858:	e767      	b.n	800f72a <_printf_float+0xb6>
 800f85a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f85e:	f240 80dd 	bls.w	800fa1c <_printf_float+0x3a8>
 800f862:	2200      	movs	r2, #0
 800f864:	2300      	movs	r3, #0
 800f866:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f86a:	f7f1 f93d 	bl	8000ae8 <__aeabi_dcmpeq>
 800f86e:	2800      	cmp	r0, #0
 800f870:	d033      	beq.n	800f8da <_printf_float+0x266>
 800f872:	2301      	movs	r3, #1
 800f874:	4a36      	ldr	r2, [pc, #216]	@ (800f950 <_printf_float+0x2dc>)
 800f876:	4631      	mov	r1, r6
 800f878:	4628      	mov	r0, r5
 800f87a:	47b8      	blx	r7
 800f87c:	3001      	adds	r0, #1
 800f87e:	f43f af54 	beq.w	800f72a <_printf_float+0xb6>
 800f882:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f886:	4543      	cmp	r3, r8
 800f888:	db02      	blt.n	800f890 <_printf_float+0x21c>
 800f88a:	6823      	ldr	r3, [r4, #0]
 800f88c:	07d8      	lsls	r0, r3, #31
 800f88e:	d50f      	bpl.n	800f8b0 <_printf_float+0x23c>
 800f890:	4631      	mov	r1, r6
 800f892:	4628      	mov	r0, r5
 800f894:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f898:	47b8      	blx	r7
 800f89a:	3001      	adds	r0, #1
 800f89c:	f43f af45 	beq.w	800f72a <_printf_float+0xb6>
 800f8a0:	f04f 0900 	mov.w	r9, #0
 800f8a4:	f108 38ff 	add.w	r8, r8, #4294967295
 800f8a8:	f104 0a1a 	add.w	sl, r4, #26
 800f8ac:	45c8      	cmp	r8, r9
 800f8ae:	dc09      	bgt.n	800f8c4 <_printf_float+0x250>
 800f8b0:	6823      	ldr	r3, [r4, #0]
 800f8b2:	079b      	lsls	r3, r3, #30
 800f8b4:	f100 8103 	bmi.w	800fabe <_printf_float+0x44a>
 800f8b8:	68e0      	ldr	r0, [r4, #12]
 800f8ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f8bc:	4298      	cmp	r0, r3
 800f8be:	bfb8      	it	lt
 800f8c0:	4618      	movlt	r0, r3
 800f8c2:	e734      	b.n	800f72e <_printf_float+0xba>
 800f8c4:	2301      	movs	r3, #1
 800f8c6:	4652      	mov	r2, sl
 800f8c8:	4631      	mov	r1, r6
 800f8ca:	4628      	mov	r0, r5
 800f8cc:	47b8      	blx	r7
 800f8ce:	3001      	adds	r0, #1
 800f8d0:	f43f af2b 	beq.w	800f72a <_printf_float+0xb6>
 800f8d4:	f109 0901 	add.w	r9, r9, #1
 800f8d8:	e7e8      	b.n	800f8ac <_printf_float+0x238>
 800f8da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	dc39      	bgt.n	800f954 <_printf_float+0x2e0>
 800f8e0:	2301      	movs	r3, #1
 800f8e2:	4a1b      	ldr	r2, [pc, #108]	@ (800f950 <_printf_float+0x2dc>)
 800f8e4:	4631      	mov	r1, r6
 800f8e6:	4628      	mov	r0, r5
 800f8e8:	47b8      	blx	r7
 800f8ea:	3001      	adds	r0, #1
 800f8ec:	f43f af1d 	beq.w	800f72a <_printf_float+0xb6>
 800f8f0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f8f4:	ea59 0303 	orrs.w	r3, r9, r3
 800f8f8:	d102      	bne.n	800f900 <_printf_float+0x28c>
 800f8fa:	6823      	ldr	r3, [r4, #0]
 800f8fc:	07d9      	lsls	r1, r3, #31
 800f8fe:	d5d7      	bpl.n	800f8b0 <_printf_float+0x23c>
 800f900:	4631      	mov	r1, r6
 800f902:	4628      	mov	r0, r5
 800f904:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f908:	47b8      	blx	r7
 800f90a:	3001      	adds	r0, #1
 800f90c:	f43f af0d 	beq.w	800f72a <_printf_float+0xb6>
 800f910:	f04f 0a00 	mov.w	sl, #0
 800f914:	f104 0b1a 	add.w	fp, r4, #26
 800f918:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f91a:	425b      	negs	r3, r3
 800f91c:	4553      	cmp	r3, sl
 800f91e:	dc01      	bgt.n	800f924 <_printf_float+0x2b0>
 800f920:	464b      	mov	r3, r9
 800f922:	e793      	b.n	800f84c <_printf_float+0x1d8>
 800f924:	2301      	movs	r3, #1
 800f926:	465a      	mov	r2, fp
 800f928:	4631      	mov	r1, r6
 800f92a:	4628      	mov	r0, r5
 800f92c:	47b8      	blx	r7
 800f92e:	3001      	adds	r0, #1
 800f930:	f43f aefb 	beq.w	800f72a <_printf_float+0xb6>
 800f934:	f10a 0a01 	add.w	sl, sl, #1
 800f938:	e7ee      	b.n	800f918 <_printf_float+0x2a4>
 800f93a:	bf00      	nop
 800f93c:	7fefffff 	.word	0x7fefffff
 800f940:	08012584 	.word	0x08012584
 800f944:	08012588 	.word	0x08012588
 800f948:	0801258c 	.word	0x0801258c
 800f94c:	08012590 	.word	0x08012590
 800f950:	08012594 	.word	0x08012594
 800f954:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f956:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f95a:	4553      	cmp	r3, sl
 800f95c:	bfa8      	it	ge
 800f95e:	4653      	movge	r3, sl
 800f960:	2b00      	cmp	r3, #0
 800f962:	4699      	mov	r9, r3
 800f964:	dc36      	bgt.n	800f9d4 <_printf_float+0x360>
 800f966:	f04f 0b00 	mov.w	fp, #0
 800f96a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f96e:	f104 021a 	add.w	r2, r4, #26
 800f972:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f974:	9306      	str	r3, [sp, #24]
 800f976:	eba3 0309 	sub.w	r3, r3, r9
 800f97a:	455b      	cmp	r3, fp
 800f97c:	dc31      	bgt.n	800f9e2 <_printf_float+0x36e>
 800f97e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f980:	459a      	cmp	sl, r3
 800f982:	dc3a      	bgt.n	800f9fa <_printf_float+0x386>
 800f984:	6823      	ldr	r3, [r4, #0]
 800f986:	07da      	lsls	r2, r3, #31
 800f988:	d437      	bmi.n	800f9fa <_printf_float+0x386>
 800f98a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f98c:	ebaa 0903 	sub.w	r9, sl, r3
 800f990:	9b06      	ldr	r3, [sp, #24]
 800f992:	ebaa 0303 	sub.w	r3, sl, r3
 800f996:	4599      	cmp	r9, r3
 800f998:	bfa8      	it	ge
 800f99a:	4699      	movge	r9, r3
 800f99c:	f1b9 0f00 	cmp.w	r9, #0
 800f9a0:	dc33      	bgt.n	800fa0a <_printf_float+0x396>
 800f9a2:	f04f 0800 	mov.w	r8, #0
 800f9a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f9aa:	f104 0b1a 	add.w	fp, r4, #26
 800f9ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f9b0:	ebaa 0303 	sub.w	r3, sl, r3
 800f9b4:	eba3 0309 	sub.w	r3, r3, r9
 800f9b8:	4543      	cmp	r3, r8
 800f9ba:	f77f af79 	ble.w	800f8b0 <_printf_float+0x23c>
 800f9be:	2301      	movs	r3, #1
 800f9c0:	465a      	mov	r2, fp
 800f9c2:	4631      	mov	r1, r6
 800f9c4:	4628      	mov	r0, r5
 800f9c6:	47b8      	blx	r7
 800f9c8:	3001      	adds	r0, #1
 800f9ca:	f43f aeae 	beq.w	800f72a <_printf_float+0xb6>
 800f9ce:	f108 0801 	add.w	r8, r8, #1
 800f9d2:	e7ec      	b.n	800f9ae <_printf_float+0x33a>
 800f9d4:	4642      	mov	r2, r8
 800f9d6:	4631      	mov	r1, r6
 800f9d8:	4628      	mov	r0, r5
 800f9da:	47b8      	blx	r7
 800f9dc:	3001      	adds	r0, #1
 800f9de:	d1c2      	bne.n	800f966 <_printf_float+0x2f2>
 800f9e0:	e6a3      	b.n	800f72a <_printf_float+0xb6>
 800f9e2:	2301      	movs	r3, #1
 800f9e4:	4631      	mov	r1, r6
 800f9e6:	4628      	mov	r0, r5
 800f9e8:	9206      	str	r2, [sp, #24]
 800f9ea:	47b8      	blx	r7
 800f9ec:	3001      	adds	r0, #1
 800f9ee:	f43f ae9c 	beq.w	800f72a <_printf_float+0xb6>
 800f9f2:	f10b 0b01 	add.w	fp, fp, #1
 800f9f6:	9a06      	ldr	r2, [sp, #24]
 800f9f8:	e7bb      	b.n	800f972 <_printf_float+0x2fe>
 800f9fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f9fe:	4631      	mov	r1, r6
 800fa00:	4628      	mov	r0, r5
 800fa02:	47b8      	blx	r7
 800fa04:	3001      	adds	r0, #1
 800fa06:	d1c0      	bne.n	800f98a <_printf_float+0x316>
 800fa08:	e68f      	b.n	800f72a <_printf_float+0xb6>
 800fa0a:	9a06      	ldr	r2, [sp, #24]
 800fa0c:	464b      	mov	r3, r9
 800fa0e:	4631      	mov	r1, r6
 800fa10:	4628      	mov	r0, r5
 800fa12:	4442      	add	r2, r8
 800fa14:	47b8      	blx	r7
 800fa16:	3001      	adds	r0, #1
 800fa18:	d1c3      	bne.n	800f9a2 <_printf_float+0x32e>
 800fa1a:	e686      	b.n	800f72a <_printf_float+0xb6>
 800fa1c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fa20:	f1ba 0f01 	cmp.w	sl, #1
 800fa24:	dc01      	bgt.n	800fa2a <_printf_float+0x3b6>
 800fa26:	07db      	lsls	r3, r3, #31
 800fa28:	d536      	bpl.n	800fa98 <_printf_float+0x424>
 800fa2a:	2301      	movs	r3, #1
 800fa2c:	4642      	mov	r2, r8
 800fa2e:	4631      	mov	r1, r6
 800fa30:	4628      	mov	r0, r5
 800fa32:	47b8      	blx	r7
 800fa34:	3001      	adds	r0, #1
 800fa36:	f43f ae78 	beq.w	800f72a <_printf_float+0xb6>
 800fa3a:	4631      	mov	r1, r6
 800fa3c:	4628      	mov	r0, r5
 800fa3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fa42:	47b8      	blx	r7
 800fa44:	3001      	adds	r0, #1
 800fa46:	f43f ae70 	beq.w	800f72a <_printf_float+0xb6>
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fa52:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fa56:	f7f1 f847 	bl	8000ae8 <__aeabi_dcmpeq>
 800fa5a:	b9c0      	cbnz	r0, 800fa8e <_printf_float+0x41a>
 800fa5c:	4653      	mov	r3, sl
 800fa5e:	f108 0201 	add.w	r2, r8, #1
 800fa62:	4631      	mov	r1, r6
 800fa64:	4628      	mov	r0, r5
 800fa66:	47b8      	blx	r7
 800fa68:	3001      	adds	r0, #1
 800fa6a:	d10c      	bne.n	800fa86 <_printf_float+0x412>
 800fa6c:	e65d      	b.n	800f72a <_printf_float+0xb6>
 800fa6e:	2301      	movs	r3, #1
 800fa70:	465a      	mov	r2, fp
 800fa72:	4631      	mov	r1, r6
 800fa74:	4628      	mov	r0, r5
 800fa76:	47b8      	blx	r7
 800fa78:	3001      	adds	r0, #1
 800fa7a:	f43f ae56 	beq.w	800f72a <_printf_float+0xb6>
 800fa7e:	f108 0801 	add.w	r8, r8, #1
 800fa82:	45d0      	cmp	r8, sl
 800fa84:	dbf3      	blt.n	800fa6e <_printf_float+0x3fa>
 800fa86:	464b      	mov	r3, r9
 800fa88:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800fa8c:	e6df      	b.n	800f84e <_printf_float+0x1da>
 800fa8e:	f04f 0800 	mov.w	r8, #0
 800fa92:	f104 0b1a 	add.w	fp, r4, #26
 800fa96:	e7f4      	b.n	800fa82 <_printf_float+0x40e>
 800fa98:	2301      	movs	r3, #1
 800fa9a:	4642      	mov	r2, r8
 800fa9c:	e7e1      	b.n	800fa62 <_printf_float+0x3ee>
 800fa9e:	2301      	movs	r3, #1
 800faa0:	464a      	mov	r2, r9
 800faa2:	4631      	mov	r1, r6
 800faa4:	4628      	mov	r0, r5
 800faa6:	47b8      	blx	r7
 800faa8:	3001      	adds	r0, #1
 800faaa:	f43f ae3e 	beq.w	800f72a <_printf_float+0xb6>
 800faae:	f108 0801 	add.w	r8, r8, #1
 800fab2:	68e3      	ldr	r3, [r4, #12]
 800fab4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fab6:	1a5b      	subs	r3, r3, r1
 800fab8:	4543      	cmp	r3, r8
 800faba:	dcf0      	bgt.n	800fa9e <_printf_float+0x42a>
 800fabc:	e6fc      	b.n	800f8b8 <_printf_float+0x244>
 800fabe:	f04f 0800 	mov.w	r8, #0
 800fac2:	f104 0919 	add.w	r9, r4, #25
 800fac6:	e7f4      	b.n	800fab2 <_printf_float+0x43e>

0800fac8 <_printf_common>:
 800fac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800facc:	4616      	mov	r6, r2
 800face:	4698      	mov	r8, r3
 800fad0:	688a      	ldr	r2, [r1, #8]
 800fad2:	4607      	mov	r7, r0
 800fad4:	690b      	ldr	r3, [r1, #16]
 800fad6:	460c      	mov	r4, r1
 800fad8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fadc:	4293      	cmp	r3, r2
 800fade:	bfb8      	it	lt
 800fae0:	4613      	movlt	r3, r2
 800fae2:	6033      	str	r3, [r6, #0]
 800fae4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fae8:	b10a      	cbz	r2, 800faee <_printf_common+0x26>
 800faea:	3301      	adds	r3, #1
 800faec:	6033      	str	r3, [r6, #0]
 800faee:	6823      	ldr	r3, [r4, #0]
 800faf0:	0699      	lsls	r1, r3, #26
 800faf2:	bf42      	ittt	mi
 800faf4:	6833      	ldrmi	r3, [r6, #0]
 800faf6:	3302      	addmi	r3, #2
 800faf8:	6033      	strmi	r3, [r6, #0]
 800fafa:	6825      	ldr	r5, [r4, #0]
 800fafc:	f015 0506 	ands.w	r5, r5, #6
 800fb00:	d106      	bne.n	800fb10 <_printf_common+0x48>
 800fb02:	f104 0a19 	add.w	sl, r4, #25
 800fb06:	68e3      	ldr	r3, [r4, #12]
 800fb08:	6832      	ldr	r2, [r6, #0]
 800fb0a:	1a9b      	subs	r3, r3, r2
 800fb0c:	42ab      	cmp	r3, r5
 800fb0e:	dc2b      	bgt.n	800fb68 <_printf_common+0xa0>
 800fb10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fb14:	6822      	ldr	r2, [r4, #0]
 800fb16:	3b00      	subs	r3, #0
 800fb18:	bf18      	it	ne
 800fb1a:	2301      	movne	r3, #1
 800fb1c:	0692      	lsls	r2, r2, #26
 800fb1e:	d430      	bmi.n	800fb82 <_printf_common+0xba>
 800fb20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fb24:	4641      	mov	r1, r8
 800fb26:	4638      	mov	r0, r7
 800fb28:	47c8      	blx	r9
 800fb2a:	3001      	adds	r0, #1
 800fb2c:	d023      	beq.n	800fb76 <_printf_common+0xae>
 800fb2e:	6823      	ldr	r3, [r4, #0]
 800fb30:	341a      	adds	r4, #26
 800fb32:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800fb36:	f003 0306 	and.w	r3, r3, #6
 800fb3a:	2b04      	cmp	r3, #4
 800fb3c:	bf0a      	itet	eq
 800fb3e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800fb42:	2500      	movne	r5, #0
 800fb44:	6833      	ldreq	r3, [r6, #0]
 800fb46:	f04f 0600 	mov.w	r6, #0
 800fb4a:	bf08      	it	eq
 800fb4c:	1aed      	subeq	r5, r5, r3
 800fb4e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800fb52:	bf08      	it	eq
 800fb54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fb58:	4293      	cmp	r3, r2
 800fb5a:	bfc4      	itt	gt
 800fb5c:	1a9b      	subgt	r3, r3, r2
 800fb5e:	18ed      	addgt	r5, r5, r3
 800fb60:	42b5      	cmp	r5, r6
 800fb62:	d11a      	bne.n	800fb9a <_printf_common+0xd2>
 800fb64:	2000      	movs	r0, #0
 800fb66:	e008      	b.n	800fb7a <_printf_common+0xb2>
 800fb68:	2301      	movs	r3, #1
 800fb6a:	4652      	mov	r2, sl
 800fb6c:	4641      	mov	r1, r8
 800fb6e:	4638      	mov	r0, r7
 800fb70:	47c8      	blx	r9
 800fb72:	3001      	adds	r0, #1
 800fb74:	d103      	bne.n	800fb7e <_printf_common+0xb6>
 800fb76:	f04f 30ff 	mov.w	r0, #4294967295
 800fb7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb7e:	3501      	adds	r5, #1
 800fb80:	e7c1      	b.n	800fb06 <_printf_common+0x3e>
 800fb82:	18e1      	adds	r1, r4, r3
 800fb84:	1c5a      	adds	r2, r3, #1
 800fb86:	2030      	movs	r0, #48	@ 0x30
 800fb88:	3302      	adds	r3, #2
 800fb8a:	4422      	add	r2, r4
 800fb8c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fb90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fb94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fb98:	e7c2      	b.n	800fb20 <_printf_common+0x58>
 800fb9a:	2301      	movs	r3, #1
 800fb9c:	4622      	mov	r2, r4
 800fb9e:	4641      	mov	r1, r8
 800fba0:	4638      	mov	r0, r7
 800fba2:	47c8      	blx	r9
 800fba4:	3001      	adds	r0, #1
 800fba6:	d0e6      	beq.n	800fb76 <_printf_common+0xae>
 800fba8:	3601      	adds	r6, #1
 800fbaa:	e7d9      	b.n	800fb60 <_printf_common+0x98>

0800fbac <_printf_i>:
 800fbac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fbb0:	7e0f      	ldrb	r7, [r1, #24]
 800fbb2:	4691      	mov	r9, r2
 800fbb4:	4680      	mov	r8, r0
 800fbb6:	460c      	mov	r4, r1
 800fbb8:	2f78      	cmp	r7, #120	@ 0x78
 800fbba:	469a      	mov	sl, r3
 800fbbc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fbbe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fbc2:	d807      	bhi.n	800fbd4 <_printf_i+0x28>
 800fbc4:	2f62      	cmp	r7, #98	@ 0x62
 800fbc6:	d80a      	bhi.n	800fbde <_printf_i+0x32>
 800fbc8:	2f00      	cmp	r7, #0
 800fbca:	f000 80d2 	beq.w	800fd72 <_printf_i+0x1c6>
 800fbce:	2f58      	cmp	r7, #88	@ 0x58
 800fbd0:	f000 80b9 	beq.w	800fd46 <_printf_i+0x19a>
 800fbd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fbd8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fbdc:	e03a      	b.n	800fc54 <_printf_i+0xa8>
 800fbde:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fbe2:	2b15      	cmp	r3, #21
 800fbe4:	d8f6      	bhi.n	800fbd4 <_printf_i+0x28>
 800fbe6:	a101      	add	r1, pc, #4	@ (adr r1, 800fbec <_printf_i+0x40>)
 800fbe8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fbec:	0800fc45 	.word	0x0800fc45
 800fbf0:	0800fc59 	.word	0x0800fc59
 800fbf4:	0800fbd5 	.word	0x0800fbd5
 800fbf8:	0800fbd5 	.word	0x0800fbd5
 800fbfc:	0800fbd5 	.word	0x0800fbd5
 800fc00:	0800fbd5 	.word	0x0800fbd5
 800fc04:	0800fc59 	.word	0x0800fc59
 800fc08:	0800fbd5 	.word	0x0800fbd5
 800fc0c:	0800fbd5 	.word	0x0800fbd5
 800fc10:	0800fbd5 	.word	0x0800fbd5
 800fc14:	0800fbd5 	.word	0x0800fbd5
 800fc18:	0800fd59 	.word	0x0800fd59
 800fc1c:	0800fc83 	.word	0x0800fc83
 800fc20:	0800fd13 	.word	0x0800fd13
 800fc24:	0800fbd5 	.word	0x0800fbd5
 800fc28:	0800fbd5 	.word	0x0800fbd5
 800fc2c:	0800fd7b 	.word	0x0800fd7b
 800fc30:	0800fbd5 	.word	0x0800fbd5
 800fc34:	0800fc83 	.word	0x0800fc83
 800fc38:	0800fbd5 	.word	0x0800fbd5
 800fc3c:	0800fbd5 	.word	0x0800fbd5
 800fc40:	0800fd1b 	.word	0x0800fd1b
 800fc44:	6833      	ldr	r3, [r6, #0]
 800fc46:	1d1a      	adds	r2, r3, #4
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	6032      	str	r2, [r6, #0]
 800fc4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fc50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fc54:	2301      	movs	r3, #1
 800fc56:	e09d      	b.n	800fd94 <_printf_i+0x1e8>
 800fc58:	6833      	ldr	r3, [r6, #0]
 800fc5a:	6820      	ldr	r0, [r4, #0]
 800fc5c:	1d19      	adds	r1, r3, #4
 800fc5e:	6031      	str	r1, [r6, #0]
 800fc60:	0606      	lsls	r6, r0, #24
 800fc62:	d501      	bpl.n	800fc68 <_printf_i+0xbc>
 800fc64:	681d      	ldr	r5, [r3, #0]
 800fc66:	e003      	b.n	800fc70 <_printf_i+0xc4>
 800fc68:	0645      	lsls	r5, r0, #25
 800fc6a:	d5fb      	bpl.n	800fc64 <_printf_i+0xb8>
 800fc6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fc70:	2d00      	cmp	r5, #0
 800fc72:	da03      	bge.n	800fc7c <_printf_i+0xd0>
 800fc74:	232d      	movs	r3, #45	@ 0x2d
 800fc76:	426d      	negs	r5, r5
 800fc78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fc7c:	4859      	ldr	r0, [pc, #356]	@ (800fde4 <_printf_i+0x238>)
 800fc7e:	230a      	movs	r3, #10
 800fc80:	e011      	b.n	800fca6 <_printf_i+0xfa>
 800fc82:	6821      	ldr	r1, [r4, #0]
 800fc84:	6833      	ldr	r3, [r6, #0]
 800fc86:	0608      	lsls	r0, r1, #24
 800fc88:	f853 5b04 	ldr.w	r5, [r3], #4
 800fc8c:	d402      	bmi.n	800fc94 <_printf_i+0xe8>
 800fc8e:	0649      	lsls	r1, r1, #25
 800fc90:	bf48      	it	mi
 800fc92:	b2ad      	uxthmi	r5, r5
 800fc94:	2f6f      	cmp	r7, #111	@ 0x6f
 800fc96:	6033      	str	r3, [r6, #0]
 800fc98:	4852      	ldr	r0, [pc, #328]	@ (800fde4 <_printf_i+0x238>)
 800fc9a:	bf14      	ite	ne
 800fc9c:	230a      	movne	r3, #10
 800fc9e:	2308      	moveq	r3, #8
 800fca0:	2100      	movs	r1, #0
 800fca2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fca6:	6866      	ldr	r6, [r4, #4]
 800fca8:	2e00      	cmp	r6, #0
 800fcaa:	60a6      	str	r6, [r4, #8]
 800fcac:	bfa2      	ittt	ge
 800fcae:	6821      	ldrge	r1, [r4, #0]
 800fcb0:	f021 0104 	bicge.w	r1, r1, #4
 800fcb4:	6021      	strge	r1, [r4, #0]
 800fcb6:	b90d      	cbnz	r5, 800fcbc <_printf_i+0x110>
 800fcb8:	2e00      	cmp	r6, #0
 800fcba:	d04b      	beq.n	800fd54 <_printf_i+0x1a8>
 800fcbc:	4616      	mov	r6, r2
 800fcbe:	fbb5 f1f3 	udiv	r1, r5, r3
 800fcc2:	fb03 5711 	mls	r7, r3, r1, r5
 800fcc6:	5dc7      	ldrb	r7, [r0, r7]
 800fcc8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fccc:	462f      	mov	r7, r5
 800fcce:	460d      	mov	r5, r1
 800fcd0:	42bb      	cmp	r3, r7
 800fcd2:	d9f4      	bls.n	800fcbe <_printf_i+0x112>
 800fcd4:	2b08      	cmp	r3, #8
 800fcd6:	d10b      	bne.n	800fcf0 <_printf_i+0x144>
 800fcd8:	6823      	ldr	r3, [r4, #0]
 800fcda:	07df      	lsls	r7, r3, #31
 800fcdc:	d508      	bpl.n	800fcf0 <_printf_i+0x144>
 800fcde:	6923      	ldr	r3, [r4, #16]
 800fce0:	6861      	ldr	r1, [r4, #4]
 800fce2:	4299      	cmp	r1, r3
 800fce4:	bfde      	ittt	le
 800fce6:	2330      	movle	r3, #48	@ 0x30
 800fce8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fcec:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fcf0:	1b92      	subs	r2, r2, r6
 800fcf2:	6122      	str	r2, [r4, #16]
 800fcf4:	464b      	mov	r3, r9
 800fcf6:	aa03      	add	r2, sp, #12
 800fcf8:	4621      	mov	r1, r4
 800fcfa:	4640      	mov	r0, r8
 800fcfc:	f8cd a000 	str.w	sl, [sp]
 800fd00:	f7ff fee2 	bl	800fac8 <_printf_common>
 800fd04:	3001      	adds	r0, #1
 800fd06:	d14a      	bne.n	800fd9e <_printf_i+0x1f2>
 800fd08:	f04f 30ff 	mov.w	r0, #4294967295
 800fd0c:	b004      	add	sp, #16
 800fd0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd12:	6823      	ldr	r3, [r4, #0]
 800fd14:	f043 0320 	orr.w	r3, r3, #32
 800fd18:	6023      	str	r3, [r4, #0]
 800fd1a:	2778      	movs	r7, #120	@ 0x78
 800fd1c:	4832      	ldr	r0, [pc, #200]	@ (800fde8 <_printf_i+0x23c>)
 800fd1e:	6823      	ldr	r3, [r4, #0]
 800fd20:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fd24:	061f      	lsls	r7, r3, #24
 800fd26:	6831      	ldr	r1, [r6, #0]
 800fd28:	f851 5b04 	ldr.w	r5, [r1], #4
 800fd2c:	d402      	bmi.n	800fd34 <_printf_i+0x188>
 800fd2e:	065f      	lsls	r7, r3, #25
 800fd30:	bf48      	it	mi
 800fd32:	b2ad      	uxthmi	r5, r5
 800fd34:	6031      	str	r1, [r6, #0]
 800fd36:	07d9      	lsls	r1, r3, #31
 800fd38:	bf44      	itt	mi
 800fd3a:	f043 0320 	orrmi.w	r3, r3, #32
 800fd3e:	6023      	strmi	r3, [r4, #0]
 800fd40:	b11d      	cbz	r5, 800fd4a <_printf_i+0x19e>
 800fd42:	2310      	movs	r3, #16
 800fd44:	e7ac      	b.n	800fca0 <_printf_i+0xf4>
 800fd46:	4827      	ldr	r0, [pc, #156]	@ (800fde4 <_printf_i+0x238>)
 800fd48:	e7e9      	b.n	800fd1e <_printf_i+0x172>
 800fd4a:	6823      	ldr	r3, [r4, #0]
 800fd4c:	f023 0320 	bic.w	r3, r3, #32
 800fd50:	6023      	str	r3, [r4, #0]
 800fd52:	e7f6      	b.n	800fd42 <_printf_i+0x196>
 800fd54:	4616      	mov	r6, r2
 800fd56:	e7bd      	b.n	800fcd4 <_printf_i+0x128>
 800fd58:	6833      	ldr	r3, [r6, #0]
 800fd5a:	6825      	ldr	r5, [r4, #0]
 800fd5c:	1d18      	adds	r0, r3, #4
 800fd5e:	6961      	ldr	r1, [r4, #20]
 800fd60:	6030      	str	r0, [r6, #0]
 800fd62:	062e      	lsls	r6, r5, #24
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	d501      	bpl.n	800fd6c <_printf_i+0x1c0>
 800fd68:	6019      	str	r1, [r3, #0]
 800fd6a:	e002      	b.n	800fd72 <_printf_i+0x1c6>
 800fd6c:	0668      	lsls	r0, r5, #25
 800fd6e:	d5fb      	bpl.n	800fd68 <_printf_i+0x1bc>
 800fd70:	8019      	strh	r1, [r3, #0]
 800fd72:	2300      	movs	r3, #0
 800fd74:	4616      	mov	r6, r2
 800fd76:	6123      	str	r3, [r4, #16]
 800fd78:	e7bc      	b.n	800fcf4 <_printf_i+0x148>
 800fd7a:	6833      	ldr	r3, [r6, #0]
 800fd7c:	2100      	movs	r1, #0
 800fd7e:	1d1a      	adds	r2, r3, #4
 800fd80:	6032      	str	r2, [r6, #0]
 800fd82:	681e      	ldr	r6, [r3, #0]
 800fd84:	6862      	ldr	r2, [r4, #4]
 800fd86:	4630      	mov	r0, r6
 800fd88:	f000 f9d5 	bl	8010136 <memchr>
 800fd8c:	b108      	cbz	r0, 800fd92 <_printf_i+0x1e6>
 800fd8e:	1b80      	subs	r0, r0, r6
 800fd90:	6060      	str	r0, [r4, #4]
 800fd92:	6863      	ldr	r3, [r4, #4]
 800fd94:	6123      	str	r3, [r4, #16]
 800fd96:	2300      	movs	r3, #0
 800fd98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fd9c:	e7aa      	b.n	800fcf4 <_printf_i+0x148>
 800fd9e:	6923      	ldr	r3, [r4, #16]
 800fda0:	4632      	mov	r2, r6
 800fda2:	4649      	mov	r1, r9
 800fda4:	4640      	mov	r0, r8
 800fda6:	47d0      	blx	sl
 800fda8:	3001      	adds	r0, #1
 800fdaa:	d0ad      	beq.n	800fd08 <_printf_i+0x15c>
 800fdac:	6823      	ldr	r3, [r4, #0]
 800fdae:	079b      	lsls	r3, r3, #30
 800fdb0:	d413      	bmi.n	800fdda <_printf_i+0x22e>
 800fdb2:	68e0      	ldr	r0, [r4, #12]
 800fdb4:	9b03      	ldr	r3, [sp, #12]
 800fdb6:	4298      	cmp	r0, r3
 800fdb8:	bfb8      	it	lt
 800fdba:	4618      	movlt	r0, r3
 800fdbc:	e7a6      	b.n	800fd0c <_printf_i+0x160>
 800fdbe:	2301      	movs	r3, #1
 800fdc0:	4632      	mov	r2, r6
 800fdc2:	4649      	mov	r1, r9
 800fdc4:	4640      	mov	r0, r8
 800fdc6:	47d0      	blx	sl
 800fdc8:	3001      	adds	r0, #1
 800fdca:	d09d      	beq.n	800fd08 <_printf_i+0x15c>
 800fdcc:	3501      	adds	r5, #1
 800fdce:	68e3      	ldr	r3, [r4, #12]
 800fdd0:	9903      	ldr	r1, [sp, #12]
 800fdd2:	1a5b      	subs	r3, r3, r1
 800fdd4:	42ab      	cmp	r3, r5
 800fdd6:	dcf2      	bgt.n	800fdbe <_printf_i+0x212>
 800fdd8:	e7eb      	b.n	800fdb2 <_printf_i+0x206>
 800fdda:	2500      	movs	r5, #0
 800fddc:	f104 0619 	add.w	r6, r4, #25
 800fde0:	e7f5      	b.n	800fdce <_printf_i+0x222>
 800fde2:	bf00      	nop
 800fde4:	08012596 	.word	0x08012596
 800fde8:	080125a7 	.word	0x080125a7

0800fdec <std>:
 800fdec:	2300      	movs	r3, #0
 800fdee:	b510      	push	{r4, lr}
 800fdf0:	4604      	mov	r4, r0
 800fdf2:	6083      	str	r3, [r0, #8]
 800fdf4:	8181      	strh	r1, [r0, #12]
 800fdf6:	4619      	mov	r1, r3
 800fdf8:	6643      	str	r3, [r0, #100]	@ 0x64
 800fdfa:	81c2      	strh	r2, [r0, #14]
 800fdfc:	2208      	movs	r2, #8
 800fdfe:	6183      	str	r3, [r0, #24]
 800fe00:	e9c0 3300 	strd	r3, r3, [r0]
 800fe04:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fe08:	305c      	adds	r0, #92	@ 0x5c
 800fe0a:	f000 f914 	bl	8010036 <memset>
 800fe0e:	4b0d      	ldr	r3, [pc, #52]	@ (800fe44 <std+0x58>)
 800fe10:	6224      	str	r4, [r4, #32]
 800fe12:	6263      	str	r3, [r4, #36]	@ 0x24
 800fe14:	4b0c      	ldr	r3, [pc, #48]	@ (800fe48 <std+0x5c>)
 800fe16:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fe18:	4b0c      	ldr	r3, [pc, #48]	@ (800fe4c <std+0x60>)
 800fe1a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fe1c:	4b0c      	ldr	r3, [pc, #48]	@ (800fe50 <std+0x64>)
 800fe1e:	6323      	str	r3, [r4, #48]	@ 0x30
 800fe20:	4b0c      	ldr	r3, [pc, #48]	@ (800fe54 <std+0x68>)
 800fe22:	429c      	cmp	r4, r3
 800fe24:	d006      	beq.n	800fe34 <std+0x48>
 800fe26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fe2a:	4294      	cmp	r4, r2
 800fe2c:	d002      	beq.n	800fe34 <std+0x48>
 800fe2e:	33d0      	adds	r3, #208	@ 0xd0
 800fe30:	429c      	cmp	r4, r3
 800fe32:	d105      	bne.n	800fe40 <std+0x54>
 800fe34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fe38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe3c:	f000 b978 	b.w	8010130 <__retarget_lock_init_recursive>
 800fe40:	bd10      	pop	{r4, pc}
 800fe42:	bf00      	nop
 800fe44:	0800ffb1 	.word	0x0800ffb1
 800fe48:	0800ffd3 	.word	0x0800ffd3
 800fe4c:	0801000b 	.word	0x0801000b
 800fe50:	0801002f 	.word	0x0801002f
 800fe54:	20005cd0 	.word	0x20005cd0

0800fe58 <stdio_exit_handler>:
 800fe58:	4a02      	ldr	r2, [pc, #8]	@ (800fe64 <stdio_exit_handler+0xc>)
 800fe5a:	4903      	ldr	r1, [pc, #12]	@ (800fe68 <stdio_exit_handler+0x10>)
 800fe5c:	4803      	ldr	r0, [pc, #12]	@ (800fe6c <stdio_exit_handler+0x14>)
 800fe5e:	f000 b869 	b.w	800ff34 <_fwalk_sglue>
 800fe62:	bf00      	nop
 800fe64:	20000028 	.word	0x20000028
 800fe68:	08011ad9 	.word	0x08011ad9
 800fe6c:	20000038 	.word	0x20000038

0800fe70 <cleanup_stdio>:
 800fe70:	6841      	ldr	r1, [r0, #4]
 800fe72:	4b0c      	ldr	r3, [pc, #48]	@ (800fea4 <cleanup_stdio+0x34>)
 800fe74:	4299      	cmp	r1, r3
 800fe76:	b510      	push	{r4, lr}
 800fe78:	4604      	mov	r4, r0
 800fe7a:	d001      	beq.n	800fe80 <cleanup_stdio+0x10>
 800fe7c:	f001 fe2c 	bl	8011ad8 <_fflush_r>
 800fe80:	68a1      	ldr	r1, [r4, #8]
 800fe82:	4b09      	ldr	r3, [pc, #36]	@ (800fea8 <cleanup_stdio+0x38>)
 800fe84:	4299      	cmp	r1, r3
 800fe86:	d002      	beq.n	800fe8e <cleanup_stdio+0x1e>
 800fe88:	4620      	mov	r0, r4
 800fe8a:	f001 fe25 	bl	8011ad8 <_fflush_r>
 800fe8e:	68e1      	ldr	r1, [r4, #12]
 800fe90:	4b06      	ldr	r3, [pc, #24]	@ (800feac <cleanup_stdio+0x3c>)
 800fe92:	4299      	cmp	r1, r3
 800fe94:	d004      	beq.n	800fea0 <cleanup_stdio+0x30>
 800fe96:	4620      	mov	r0, r4
 800fe98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe9c:	f001 be1c 	b.w	8011ad8 <_fflush_r>
 800fea0:	bd10      	pop	{r4, pc}
 800fea2:	bf00      	nop
 800fea4:	20005cd0 	.word	0x20005cd0
 800fea8:	20005d38 	.word	0x20005d38
 800feac:	20005da0 	.word	0x20005da0

0800feb0 <global_stdio_init.part.0>:
 800feb0:	b510      	push	{r4, lr}
 800feb2:	4b0b      	ldr	r3, [pc, #44]	@ (800fee0 <global_stdio_init.part.0+0x30>)
 800feb4:	2104      	movs	r1, #4
 800feb6:	4c0b      	ldr	r4, [pc, #44]	@ (800fee4 <global_stdio_init.part.0+0x34>)
 800feb8:	4a0b      	ldr	r2, [pc, #44]	@ (800fee8 <global_stdio_init.part.0+0x38>)
 800feba:	4620      	mov	r0, r4
 800febc:	601a      	str	r2, [r3, #0]
 800febe:	2200      	movs	r2, #0
 800fec0:	f7ff ff94 	bl	800fdec <std>
 800fec4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fec8:	2201      	movs	r2, #1
 800feca:	2109      	movs	r1, #9
 800fecc:	f7ff ff8e 	bl	800fdec <std>
 800fed0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fed4:	2202      	movs	r2, #2
 800fed6:	2112      	movs	r1, #18
 800fed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fedc:	f7ff bf86 	b.w	800fdec <std>
 800fee0:	20005e08 	.word	0x20005e08
 800fee4:	20005cd0 	.word	0x20005cd0
 800fee8:	0800fe59 	.word	0x0800fe59

0800feec <__sfp_lock_acquire>:
 800feec:	4801      	ldr	r0, [pc, #4]	@ (800fef4 <__sfp_lock_acquire+0x8>)
 800feee:	f000 b920 	b.w	8010132 <__retarget_lock_acquire_recursive>
 800fef2:	bf00      	nop
 800fef4:	20005e11 	.word	0x20005e11

0800fef8 <__sfp_lock_release>:
 800fef8:	4801      	ldr	r0, [pc, #4]	@ (800ff00 <__sfp_lock_release+0x8>)
 800fefa:	f000 b91b 	b.w	8010134 <__retarget_lock_release_recursive>
 800fefe:	bf00      	nop
 800ff00:	20005e11 	.word	0x20005e11

0800ff04 <__sinit>:
 800ff04:	b510      	push	{r4, lr}
 800ff06:	4604      	mov	r4, r0
 800ff08:	f7ff fff0 	bl	800feec <__sfp_lock_acquire>
 800ff0c:	6a23      	ldr	r3, [r4, #32]
 800ff0e:	b11b      	cbz	r3, 800ff18 <__sinit+0x14>
 800ff10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff14:	f7ff bff0 	b.w	800fef8 <__sfp_lock_release>
 800ff18:	4b04      	ldr	r3, [pc, #16]	@ (800ff2c <__sinit+0x28>)
 800ff1a:	6223      	str	r3, [r4, #32]
 800ff1c:	4b04      	ldr	r3, [pc, #16]	@ (800ff30 <__sinit+0x2c>)
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d1f5      	bne.n	800ff10 <__sinit+0xc>
 800ff24:	f7ff ffc4 	bl	800feb0 <global_stdio_init.part.0>
 800ff28:	e7f2      	b.n	800ff10 <__sinit+0xc>
 800ff2a:	bf00      	nop
 800ff2c:	0800fe71 	.word	0x0800fe71
 800ff30:	20005e08 	.word	0x20005e08

0800ff34 <_fwalk_sglue>:
 800ff34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff38:	4607      	mov	r7, r0
 800ff3a:	4688      	mov	r8, r1
 800ff3c:	4614      	mov	r4, r2
 800ff3e:	2600      	movs	r6, #0
 800ff40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ff44:	f1b9 0901 	subs.w	r9, r9, #1
 800ff48:	d505      	bpl.n	800ff56 <_fwalk_sglue+0x22>
 800ff4a:	6824      	ldr	r4, [r4, #0]
 800ff4c:	2c00      	cmp	r4, #0
 800ff4e:	d1f7      	bne.n	800ff40 <_fwalk_sglue+0xc>
 800ff50:	4630      	mov	r0, r6
 800ff52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff56:	89ab      	ldrh	r3, [r5, #12]
 800ff58:	2b01      	cmp	r3, #1
 800ff5a:	d907      	bls.n	800ff6c <_fwalk_sglue+0x38>
 800ff5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ff60:	3301      	adds	r3, #1
 800ff62:	d003      	beq.n	800ff6c <_fwalk_sglue+0x38>
 800ff64:	4629      	mov	r1, r5
 800ff66:	4638      	mov	r0, r7
 800ff68:	47c0      	blx	r8
 800ff6a:	4306      	orrs	r6, r0
 800ff6c:	3568      	adds	r5, #104	@ 0x68
 800ff6e:	e7e9      	b.n	800ff44 <_fwalk_sglue+0x10>

0800ff70 <siprintf>:
 800ff70:	b40e      	push	{r1, r2, r3}
 800ff72:	b500      	push	{lr}
 800ff74:	b09c      	sub	sp, #112	@ 0x70
 800ff76:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ff7a:	ab1d      	add	r3, sp, #116	@ 0x74
 800ff7c:	9002      	str	r0, [sp, #8]
 800ff7e:	9006      	str	r0, [sp, #24]
 800ff80:	9107      	str	r1, [sp, #28]
 800ff82:	9104      	str	r1, [sp, #16]
 800ff84:	4808      	ldr	r0, [pc, #32]	@ (800ffa8 <siprintf+0x38>)
 800ff86:	4909      	ldr	r1, [pc, #36]	@ (800ffac <siprintf+0x3c>)
 800ff88:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff8c:	9105      	str	r1, [sp, #20]
 800ff8e:	a902      	add	r1, sp, #8
 800ff90:	6800      	ldr	r0, [r0, #0]
 800ff92:	9301      	str	r3, [sp, #4]
 800ff94:	f001 fc20 	bl	80117d8 <_svfiprintf_r>
 800ff98:	9b02      	ldr	r3, [sp, #8]
 800ff9a:	2200      	movs	r2, #0
 800ff9c:	701a      	strb	r2, [r3, #0]
 800ff9e:	b01c      	add	sp, #112	@ 0x70
 800ffa0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ffa4:	b003      	add	sp, #12
 800ffa6:	4770      	bx	lr
 800ffa8:	20000034 	.word	0x20000034
 800ffac:	ffff0208 	.word	0xffff0208

0800ffb0 <__sread>:
 800ffb0:	b510      	push	{r4, lr}
 800ffb2:	460c      	mov	r4, r1
 800ffb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffb8:	f000 f86c 	bl	8010094 <_read_r>
 800ffbc:	2800      	cmp	r0, #0
 800ffbe:	bfab      	itete	ge
 800ffc0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ffc2:	89a3      	ldrhlt	r3, [r4, #12]
 800ffc4:	181b      	addge	r3, r3, r0
 800ffc6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ffca:	bfac      	ite	ge
 800ffcc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ffce:	81a3      	strhlt	r3, [r4, #12]
 800ffd0:	bd10      	pop	{r4, pc}

0800ffd2 <__swrite>:
 800ffd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffd6:	461f      	mov	r7, r3
 800ffd8:	898b      	ldrh	r3, [r1, #12]
 800ffda:	4605      	mov	r5, r0
 800ffdc:	460c      	mov	r4, r1
 800ffde:	05db      	lsls	r3, r3, #23
 800ffe0:	4616      	mov	r6, r2
 800ffe2:	d505      	bpl.n	800fff0 <__swrite+0x1e>
 800ffe4:	2302      	movs	r3, #2
 800ffe6:	2200      	movs	r2, #0
 800ffe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffec:	f000 f840 	bl	8010070 <_lseek_r>
 800fff0:	89a3      	ldrh	r3, [r4, #12]
 800fff2:	4632      	mov	r2, r6
 800fff4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fff8:	4628      	mov	r0, r5
 800fffa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fffe:	81a3      	strh	r3, [r4, #12]
 8010000:	463b      	mov	r3, r7
 8010002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010006:	f000 b857 	b.w	80100b8 <_write_r>

0801000a <__sseek>:
 801000a:	b510      	push	{r4, lr}
 801000c:	460c      	mov	r4, r1
 801000e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010012:	f000 f82d 	bl	8010070 <_lseek_r>
 8010016:	1c43      	adds	r3, r0, #1
 8010018:	89a3      	ldrh	r3, [r4, #12]
 801001a:	bf15      	itete	ne
 801001c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801001e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010022:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010026:	81a3      	strheq	r3, [r4, #12]
 8010028:	bf18      	it	ne
 801002a:	81a3      	strhne	r3, [r4, #12]
 801002c:	bd10      	pop	{r4, pc}

0801002e <__sclose>:
 801002e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010032:	f000 b80d 	b.w	8010050 <_close_r>

08010036 <memset>:
 8010036:	4402      	add	r2, r0
 8010038:	4603      	mov	r3, r0
 801003a:	4293      	cmp	r3, r2
 801003c:	d100      	bne.n	8010040 <memset+0xa>
 801003e:	4770      	bx	lr
 8010040:	f803 1b01 	strb.w	r1, [r3], #1
 8010044:	e7f9      	b.n	801003a <memset+0x4>
	...

08010048 <_localeconv_r>:
 8010048:	4800      	ldr	r0, [pc, #0]	@ (801004c <_localeconv_r+0x4>)
 801004a:	4770      	bx	lr
 801004c:	20000174 	.word	0x20000174

08010050 <_close_r>:
 8010050:	b538      	push	{r3, r4, r5, lr}
 8010052:	2300      	movs	r3, #0
 8010054:	4d05      	ldr	r5, [pc, #20]	@ (801006c <_close_r+0x1c>)
 8010056:	4604      	mov	r4, r0
 8010058:	4608      	mov	r0, r1
 801005a:	602b      	str	r3, [r5, #0]
 801005c:	f7f4 fb3a 	bl	80046d4 <_close>
 8010060:	1c43      	adds	r3, r0, #1
 8010062:	d102      	bne.n	801006a <_close_r+0x1a>
 8010064:	682b      	ldr	r3, [r5, #0]
 8010066:	b103      	cbz	r3, 801006a <_close_r+0x1a>
 8010068:	6023      	str	r3, [r4, #0]
 801006a:	bd38      	pop	{r3, r4, r5, pc}
 801006c:	20005e0c 	.word	0x20005e0c

08010070 <_lseek_r>:
 8010070:	b538      	push	{r3, r4, r5, lr}
 8010072:	4604      	mov	r4, r0
 8010074:	4d06      	ldr	r5, [pc, #24]	@ (8010090 <_lseek_r+0x20>)
 8010076:	4608      	mov	r0, r1
 8010078:	4611      	mov	r1, r2
 801007a:	2200      	movs	r2, #0
 801007c:	602a      	str	r2, [r5, #0]
 801007e:	461a      	mov	r2, r3
 8010080:	f7f4 fb4f 	bl	8004722 <_lseek>
 8010084:	1c43      	adds	r3, r0, #1
 8010086:	d102      	bne.n	801008e <_lseek_r+0x1e>
 8010088:	682b      	ldr	r3, [r5, #0]
 801008a:	b103      	cbz	r3, 801008e <_lseek_r+0x1e>
 801008c:	6023      	str	r3, [r4, #0]
 801008e:	bd38      	pop	{r3, r4, r5, pc}
 8010090:	20005e0c 	.word	0x20005e0c

08010094 <_read_r>:
 8010094:	b538      	push	{r3, r4, r5, lr}
 8010096:	4604      	mov	r4, r0
 8010098:	4d06      	ldr	r5, [pc, #24]	@ (80100b4 <_read_r+0x20>)
 801009a:	4608      	mov	r0, r1
 801009c:	4611      	mov	r1, r2
 801009e:	2200      	movs	r2, #0
 80100a0:	602a      	str	r2, [r5, #0]
 80100a2:	461a      	mov	r2, r3
 80100a4:	f7f4 fadd 	bl	8004662 <_read>
 80100a8:	1c43      	adds	r3, r0, #1
 80100aa:	d102      	bne.n	80100b2 <_read_r+0x1e>
 80100ac:	682b      	ldr	r3, [r5, #0]
 80100ae:	b103      	cbz	r3, 80100b2 <_read_r+0x1e>
 80100b0:	6023      	str	r3, [r4, #0]
 80100b2:	bd38      	pop	{r3, r4, r5, pc}
 80100b4:	20005e0c 	.word	0x20005e0c

080100b8 <_write_r>:
 80100b8:	b538      	push	{r3, r4, r5, lr}
 80100ba:	4604      	mov	r4, r0
 80100bc:	4d06      	ldr	r5, [pc, #24]	@ (80100d8 <_write_r+0x20>)
 80100be:	4608      	mov	r0, r1
 80100c0:	4611      	mov	r1, r2
 80100c2:	2200      	movs	r2, #0
 80100c4:	602a      	str	r2, [r5, #0]
 80100c6:	461a      	mov	r2, r3
 80100c8:	f7f4 fae8 	bl	800469c <_write>
 80100cc:	1c43      	adds	r3, r0, #1
 80100ce:	d102      	bne.n	80100d6 <_write_r+0x1e>
 80100d0:	682b      	ldr	r3, [r5, #0]
 80100d2:	b103      	cbz	r3, 80100d6 <_write_r+0x1e>
 80100d4:	6023      	str	r3, [r4, #0]
 80100d6:	bd38      	pop	{r3, r4, r5, pc}
 80100d8:	20005e0c 	.word	0x20005e0c

080100dc <__errno>:
 80100dc:	4b01      	ldr	r3, [pc, #4]	@ (80100e4 <__errno+0x8>)
 80100de:	6818      	ldr	r0, [r3, #0]
 80100e0:	4770      	bx	lr
 80100e2:	bf00      	nop
 80100e4:	20000034 	.word	0x20000034

080100e8 <__libc_init_array>:
 80100e8:	b570      	push	{r4, r5, r6, lr}
 80100ea:	4d0d      	ldr	r5, [pc, #52]	@ (8010120 <__libc_init_array+0x38>)
 80100ec:	2600      	movs	r6, #0
 80100ee:	4c0d      	ldr	r4, [pc, #52]	@ (8010124 <__libc_init_array+0x3c>)
 80100f0:	1b64      	subs	r4, r4, r5
 80100f2:	10a4      	asrs	r4, r4, #2
 80100f4:	42a6      	cmp	r6, r4
 80100f6:	d109      	bne.n	801010c <__libc_init_array+0x24>
 80100f8:	4d0b      	ldr	r5, [pc, #44]	@ (8010128 <__libc_init_array+0x40>)
 80100fa:	2600      	movs	r6, #0
 80100fc:	4c0b      	ldr	r4, [pc, #44]	@ (801012c <__libc_init_array+0x44>)
 80100fe:	f002 f985 	bl	801240c <_init>
 8010102:	1b64      	subs	r4, r4, r5
 8010104:	10a4      	asrs	r4, r4, #2
 8010106:	42a6      	cmp	r6, r4
 8010108:	d105      	bne.n	8010116 <__libc_init_array+0x2e>
 801010a:	bd70      	pop	{r4, r5, r6, pc}
 801010c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010110:	3601      	adds	r6, #1
 8010112:	4798      	blx	r3
 8010114:	e7ee      	b.n	80100f4 <__libc_init_array+0xc>
 8010116:	f855 3b04 	ldr.w	r3, [r5], #4
 801011a:	3601      	adds	r6, #1
 801011c:	4798      	blx	r3
 801011e:	e7f2      	b.n	8010106 <__libc_init_array+0x1e>
 8010120:	08012900 	.word	0x08012900
 8010124:	08012900 	.word	0x08012900
 8010128:	08012900 	.word	0x08012900
 801012c:	08012904 	.word	0x08012904

08010130 <__retarget_lock_init_recursive>:
 8010130:	4770      	bx	lr

08010132 <__retarget_lock_acquire_recursive>:
 8010132:	4770      	bx	lr

08010134 <__retarget_lock_release_recursive>:
 8010134:	4770      	bx	lr

08010136 <memchr>:
 8010136:	b2c9      	uxtb	r1, r1
 8010138:	4603      	mov	r3, r0
 801013a:	4402      	add	r2, r0
 801013c:	b510      	push	{r4, lr}
 801013e:	4293      	cmp	r3, r2
 8010140:	4618      	mov	r0, r3
 8010142:	d101      	bne.n	8010148 <memchr+0x12>
 8010144:	2000      	movs	r0, #0
 8010146:	e003      	b.n	8010150 <memchr+0x1a>
 8010148:	7804      	ldrb	r4, [r0, #0]
 801014a:	3301      	adds	r3, #1
 801014c:	428c      	cmp	r4, r1
 801014e:	d1f6      	bne.n	801013e <memchr+0x8>
 8010150:	bd10      	pop	{r4, pc}

08010152 <memcpy>:
 8010152:	440a      	add	r2, r1
 8010154:	1e43      	subs	r3, r0, #1
 8010156:	4291      	cmp	r1, r2
 8010158:	d100      	bne.n	801015c <memcpy+0xa>
 801015a:	4770      	bx	lr
 801015c:	b510      	push	{r4, lr}
 801015e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010162:	4291      	cmp	r1, r2
 8010164:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010168:	d1f9      	bne.n	801015e <memcpy+0xc>
 801016a:	bd10      	pop	{r4, pc}

0801016c <quorem>:
 801016c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010170:	6903      	ldr	r3, [r0, #16]
 8010172:	4607      	mov	r7, r0
 8010174:	690c      	ldr	r4, [r1, #16]
 8010176:	42a3      	cmp	r3, r4
 8010178:	f2c0 8083 	blt.w	8010282 <quorem+0x116>
 801017c:	3c01      	subs	r4, #1
 801017e:	f100 0514 	add.w	r5, r0, #20
 8010182:	f101 0814 	add.w	r8, r1, #20
 8010186:	00a3      	lsls	r3, r4, #2
 8010188:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801018c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010190:	9300      	str	r3, [sp, #0]
 8010192:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010196:	9301      	str	r3, [sp, #4]
 8010198:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801019c:	3301      	adds	r3, #1
 801019e:	429a      	cmp	r2, r3
 80101a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80101a4:	d331      	bcc.n	801020a <quorem+0x9e>
 80101a6:	f04f 0a00 	mov.w	sl, #0
 80101aa:	46c4      	mov	ip, r8
 80101ac:	46ae      	mov	lr, r5
 80101ae:	46d3      	mov	fp, sl
 80101b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80101b4:	b298      	uxth	r0, r3
 80101b6:	45e1      	cmp	r9, ip
 80101b8:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80101bc:	fb06 a000 	mla	r0, r6, r0, sl
 80101c0:	ea4f 4210 	mov.w	r2, r0, lsr #16
 80101c4:	b280      	uxth	r0, r0
 80101c6:	fb06 2303 	mla	r3, r6, r3, r2
 80101ca:	f8de 2000 	ldr.w	r2, [lr]
 80101ce:	b292      	uxth	r2, r2
 80101d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80101d4:	eba2 0200 	sub.w	r2, r2, r0
 80101d8:	b29b      	uxth	r3, r3
 80101da:	f8de 0000 	ldr.w	r0, [lr]
 80101de:	445a      	add	r2, fp
 80101e0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80101e4:	b292      	uxth	r2, r2
 80101e6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80101ea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80101ee:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80101f2:	f84e 2b04 	str.w	r2, [lr], #4
 80101f6:	d2db      	bcs.n	80101b0 <quorem+0x44>
 80101f8:	9b00      	ldr	r3, [sp, #0]
 80101fa:	58eb      	ldr	r3, [r5, r3]
 80101fc:	b92b      	cbnz	r3, 801020a <quorem+0x9e>
 80101fe:	9b01      	ldr	r3, [sp, #4]
 8010200:	3b04      	subs	r3, #4
 8010202:	429d      	cmp	r5, r3
 8010204:	461a      	mov	r2, r3
 8010206:	d330      	bcc.n	801026a <quorem+0xfe>
 8010208:	613c      	str	r4, [r7, #16]
 801020a:	4638      	mov	r0, r7
 801020c:	f001 f97c 	bl	8011508 <__mcmp>
 8010210:	2800      	cmp	r0, #0
 8010212:	db26      	blt.n	8010262 <quorem+0xf6>
 8010214:	4629      	mov	r1, r5
 8010216:	2000      	movs	r0, #0
 8010218:	f858 2b04 	ldr.w	r2, [r8], #4
 801021c:	f8d1 c000 	ldr.w	ip, [r1]
 8010220:	fa1f fe82 	uxth.w	lr, r2
 8010224:	45c1      	cmp	r9, r8
 8010226:	fa1f f38c 	uxth.w	r3, ip
 801022a:	ea4f 4212 	mov.w	r2, r2, lsr #16
 801022e:	eba3 030e 	sub.w	r3, r3, lr
 8010232:	4403      	add	r3, r0
 8010234:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010238:	b29b      	uxth	r3, r3
 801023a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801023e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010242:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010246:	f841 3b04 	str.w	r3, [r1], #4
 801024a:	d2e5      	bcs.n	8010218 <quorem+0xac>
 801024c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010250:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010254:	b922      	cbnz	r2, 8010260 <quorem+0xf4>
 8010256:	3b04      	subs	r3, #4
 8010258:	429d      	cmp	r5, r3
 801025a:	461a      	mov	r2, r3
 801025c:	d30b      	bcc.n	8010276 <quorem+0x10a>
 801025e:	613c      	str	r4, [r7, #16]
 8010260:	3601      	adds	r6, #1
 8010262:	4630      	mov	r0, r6
 8010264:	b003      	add	sp, #12
 8010266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801026a:	6812      	ldr	r2, [r2, #0]
 801026c:	3b04      	subs	r3, #4
 801026e:	2a00      	cmp	r2, #0
 8010270:	d1ca      	bne.n	8010208 <quorem+0x9c>
 8010272:	3c01      	subs	r4, #1
 8010274:	e7c5      	b.n	8010202 <quorem+0x96>
 8010276:	6812      	ldr	r2, [r2, #0]
 8010278:	3b04      	subs	r3, #4
 801027a:	2a00      	cmp	r2, #0
 801027c:	d1ef      	bne.n	801025e <quorem+0xf2>
 801027e:	3c01      	subs	r4, #1
 8010280:	e7ea      	b.n	8010258 <quorem+0xec>
 8010282:	2000      	movs	r0, #0
 8010284:	e7ee      	b.n	8010264 <quorem+0xf8>
	...

08010288 <_dtoa_r>:
 8010288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801028c:	69c7      	ldr	r7, [r0, #28]
 801028e:	b099      	sub	sp, #100	@ 0x64
 8010290:	4683      	mov	fp, r0
 8010292:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8010294:	9109      	str	r1, [sp, #36]	@ 0x24
 8010296:	920e      	str	r2, [sp, #56]	@ 0x38
 8010298:	9313      	str	r3, [sp, #76]	@ 0x4c
 801029a:	ec55 4b10 	vmov	r4, r5, d0
 801029e:	ed8d 0b02 	vstr	d0, [sp, #8]
 80102a2:	b97f      	cbnz	r7, 80102c4 <_dtoa_r+0x3c>
 80102a4:	2010      	movs	r0, #16
 80102a6:	f000 fdfd 	bl	8010ea4 <malloc>
 80102aa:	4602      	mov	r2, r0
 80102ac:	f8cb 001c 	str.w	r0, [fp, #28]
 80102b0:	b920      	cbnz	r0, 80102bc <_dtoa_r+0x34>
 80102b2:	4ba7      	ldr	r3, [pc, #668]	@ (8010550 <_dtoa_r+0x2c8>)
 80102b4:	21ef      	movs	r1, #239	@ 0xef
 80102b6:	48a7      	ldr	r0, [pc, #668]	@ (8010554 <_dtoa_r+0x2cc>)
 80102b8:	f001 fc60 	bl	8011b7c <__assert_func>
 80102bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80102c0:	6007      	str	r7, [r0, #0]
 80102c2:	60c7      	str	r7, [r0, #12]
 80102c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80102c8:	6819      	ldr	r1, [r3, #0]
 80102ca:	b159      	cbz	r1, 80102e4 <_dtoa_r+0x5c>
 80102cc:	685a      	ldr	r2, [r3, #4]
 80102ce:	2301      	movs	r3, #1
 80102d0:	4658      	mov	r0, fp
 80102d2:	4093      	lsls	r3, r2
 80102d4:	604a      	str	r2, [r1, #4]
 80102d6:	608b      	str	r3, [r1, #8]
 80102d8:	f000 feda 	bl	8011090 <_Bfree>
 80102dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80102e0:	2200      	movs	r2, #0
 80102e2:	601a      	str	r2, [r3, #0]
 80102e4:	1e2b      	subs	r3, r5, #0
 80102e6:	bfb7      	itett	lt
 80102e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80102ec:	2300      	movge	r3, #0
 80102ee:	2201      	movlt	r2, #1
 80102f0:	9303      	strlt	r3, [sp, #12]
 80102f2:	bfa8      	it	ge
 80102f4:	6033      	strge	r3, [r6, #0]
 80102f6:	9f03      	ldr	r7, [sp, #12]
 80102f8:	4b97      	ldr	r3, [pc, #604]	@ (8010558 <_dtoa_r+0x2d0>)
 80102fa:	bfb8      	it	lt
 80102fc:	6032      	strlt	r2, [r6, #0]
 80102fe:	43bb      	bics	r3, r7
 8010300:	d112      	bne.n	8010328 <_dtoa_r+0xa0>
 8010302:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010306:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010308:	6013      	str	r3, [r2, #0]
 801030a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801030e:	4323      	orrs	r3, r4
 8010310:	f000 854c 	beq.w	8010dac <_dtoa_r+0xb24>
 8010314:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010316:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801056c <_dtoa_r+0x2e4>
 801031a:	2b00      	cmp	r3, #0
 801031c:	f000 854e 	beq.w	8010dbc <_dtoa_r+0xb34>
 8010320:	f10a 0303 	add.w	r3, sl, #3
 8010324:	f000 bd48 	b.w	8010db8 <_dtoa_r+0xb30>
 8010328:	ed9d 7b02 	vldr	d7, [sp, #8]
 801032c:	2200      	movs	r2, #0
 801032e:	2300      	movs	r3, #0
 8010330:	ec51 0b17 	vmov	r0, r1, d7
 8010334:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8010338:	f7f0 fbd6 	bl	8000ae8 <__aeabi_dcmpeq>
 801033c:	4680      	mov	r8, r0
 801033e:	b158      	cbz	r0, 8010358 <_dtoa_r+0xd0>
 8010340:	2301      	movs	r3, #1
 8010342:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010344:	6013      	str	r3, [r2, #0]
 8010346:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010348:	b113      	cbz	r3, 8010350 <_dtoa_r+0xc8>
 801034a:	4b84      	ldr	r3, [pc, #528]	@ (801055c <_dtoa_r+0x2d4>)
 801034c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801034e:	6013      	str	r3, [r2, #0]
 8010350:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 8010570 <_dtoa_r+0x2e8>
 8010354:	f000 bd32 	b.w	8010dbc <_dtoa_r+0xb34>
 8010358:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801035c:	aa16      	add	r2, sp, #88	@ 0x58
 801035e:	a917      	add	r1, sp, #92	@ 0x5c
 8010360:	4658      	mov	r0, fp
 8010362:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010366:	f001 f983 	bl	8011670 <__d2b>
 801036a:	4681      	mov	r9, r0
 801036c:	2e00      	cmp	r6, #0
 801036e:	d075      	beq.n	801045c <_dtoa_r+0x1d4>
 8010370:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010372:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010376:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801037a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801037e:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010382:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010386:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801038a:	4619      	mov	r1, r3
 801038c:	2200      	movs	r2, #0
 801038e:	4b74      	ldr	r3, [pc, #464]	@ (8010560 <_dtoa_r+0x2d8>)
 8010390:	f7ef ff8a 	bl	80002a8 <__aeabi_dsub>
 8010394:	a368      	add	r3, pc, #416	@ (adr r3, 8010538 <_dtoa_r+0x2b0>)
 8010396:	e9d3 2300 	ldrd	r2, r3, [r3]
 801039a:	f7f0 f93d 	bl	8000618 <__aeabi_dmul>
 801039e:	a368      	add	r3, pc, #416	@ (adr r3, 8010540 <_dtoa_r+0x2b8>)
 80103a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103a4:	f7ef ff82 	bl	80002ac <__adddf3>
 80103a8:	4604      	mov	r4, r0
 80103aa:	460d      	mov	r5, r1
 80103ac:	4630      	mov	r0, r6
 80103ae:	f7f0 f8c9 	bl	8000544 <__aeabi_i2d>
 80103b2:	a365      	add	r3, pc, #404	@ (adr r3, 8010548 <_dtoa_r+0x2c0>)
 80103b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103b8:	f7f0 f92e 	bl	8000618 <__aeabi_dmul>
 80103bc:	4602      	mov	r2, r0
 80103be:	460b      	mov	r3, r1
 80103c0:	4620      	mov	r0, r4
 80103c2:	4629      	mov	r1, r5
 80103c4:	f7ef ff72 	bl	80002ac <__adddf3>
 80103c8:	4604      	mov	r4, r0
 80103ca:	460d      	mov	r5, r1
 80103cc:	f7f0 fbd4 	bl	8000b78 <__aeabi_d2iz>
 80103d0:	2200      	movs	r2, #0
 80103d2:	4607      	mov	r7, r0
 80103d4:	2300      	movs	r3, #0
 80103d6:	4620      	mov	r0, r4
 80103d8:	4629      	mov	r1, r5
 80103da:	f7f0 fb8f 	bl	8000afc <__aeabi_dcmplt>
 80103de:	b140      	cbz	r0, 80103f2 <_dtoa_r+0x16a>
 80103e0:	4638      	mov	r0, r7
 80103e2:	f7f0 f8af 	bl	8000544 <__aeabi_i2d>
 80103e6:	4622      	mov	r2, r4
 80103e8:	462b      	mov	r3, r5
 80103ea:	f7f0 fb7d 	bl	8000ae8 <__aeabi_dcmpeq>
 80103ee:	b900      	cbnz	r0, 80103f2 <_dtoa_r+0x16a>
 80103f0:	3f01      	subs	r7, #1
 80103f2:	2f16      	cmp	r7, #22
 80103f4:	d851      	bhi.n	801049a <_dtoa_r+0x212>
 80103f6:	4b5b      	ldr	r3, [pc, #364]	@ (8010564 <_dtoa_r+0x2dc>)
 80103f8:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80103fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010404:	f7f0 fb7a 	bl	8000afc <__aeabi_dcmplt>
 8010408:	2800      	cmp	r0, #0
 801040a:	d048      	beq.n	801049e <_dtoa_r+0x216>
 801040c:	3f01      	subs	r7, #1
 801040e:	2300      	movs	r3, #0
 8010410:	9312      	str	r3, [sp, #72]	@ 0x48
 8010412:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010414:	1b9b      	subs	r3, r3, r6
 8010416:	1e5a      	subs	r2, r3, #1
 8010418:	bf46      	itte	mi
 801041a:	f1c3 0801 	rsbmi	r8, r3, #1
 801041e:	2300      	movmi	r3, #0
 8010420:	f04f 0800 	movpl.w	r8, #0
 8010424:	9208      	str	r2, [sp, #32]
 8010426:	bf48      	it	mi
 8010428:	9308      	strmi	r3, [sp, #32]
 801042a:	2f00      	cmp	r7, #0
 801042c:	db39      	blt.n	80104a2 <_dtoa_r+0x21a>
 801042e:	9b08      	ldr	r3, [sp, #32]
 8010430:	970f      	str	r7, [sp, #60]	@ 0x3c
 8010432:	443b      	add	r3, r7
 8010434:	9308      	str	r3, [sp, #32]
 8010436:	2300      	movs	r3, #0
 8010438:	930a      	str	r3, [sp, #40]	@ 0x28
 801043a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801043c:	2b09      	cmp	r3, #9
 801043e:	d864      	bhi.n	801050a <_dtoa_r+0x282>
 8010440:	2b05      	cmp	r3, #5
 8010442:	bfc5      	ittet	gt
 8010444:	3b04      	subgt	r3, #4
 8010446:	2400      	movgt	r4, #0
 8010448:	2401      	movle	r4, #1
 801044a:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801044c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801044e:	3b02      	subs	r3, #2
 8010450:	2b03      	cmp	r3, #3
 8010452:	d865      	bhi.n	8010520 <_dtoa_r+0x298>
 8010454:	e8df f003 	tbb	[pc, r3]
 8010458:	5737392c 	.word	0x5737392c
 801045c:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8010460:	441e      	add	r6, r3
 8010462:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010466:	2b20      	cmp	r3, #32
 8010468:	bfc9      	itett	gt
 801046a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801046e:	f1c3 0320 	rsble	r3, r3, #32
 8010472:	409f      	lslgt	r7, r3
 8010474:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010478:	bfd8      	it	le
 801047a:	fa04 f003 	lslle.w	r0, r4, r3
 801047e:	f106 36ff 	add.w	r6, r6, #4294967295
 8010482:	bfc4      	itt	gt
 8010484:	fa24 f303 	lsrgt.w	r3, r4, r3
 8010488:	ea47 0003 	orrgt.w	r0, r7, r3
 801048c:	f7f0 f84a 	bl	8000524 <__aeabi_ui2d>
 8010490:	2201      	movs	r2, #1
 8010492:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010496:	9214      	str	r2, [sp, #80]	@ 0x50
 8010498:	e777      	b.n	801038a <_dtoa_r+0x102>
 801049a:	2301      	movs	r3, #1
 801049c:	e7b8      	b.n	8010410 <_dtoa_r+0x188>
 801049e:	9012      	str	r0, [sp, #72]	@ 0x48
 80104a0:	e7b7      	b.n	8010412 <_dtoa_r+0x18a>
 80104a2:	427b      	negs	r3, r7
 80104a4:	eba8 0807 	sub.w	r8, r8, r7
 80104a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80104aa:	2300      	movs	r3, #0
 80104ac:	930f      	str	r3, [sp, #60]	@ 0x3c
 80104ae:	e7c4      	b.n	801043a <_dtoa_r+0x1b2>
 80104b0:	2300      	movs	r3, #0
 80104b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80104b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	dc35      	bgt.n	8010526 <_dtoa_r+0x29e>
 80104ba:	2301      	movs	r3, #1
 80104bc:	461a      	mov	r2, r3
 80104be:	9300      	str	r3, [sp, #0]
 80104c0:	9307      	str	r3, [sp, #28]
 80104c2:	920e      	str	r2, [sp, #56]	@ 0x38
 80104c4:	e00b      	b.n	80104de <_dtoa_r+0x256>
 80104c6:	2301      	movs	r3, #1
 80104c8:	e7f3      	b.n	80104b2 <_dtoa_r+0x22a>
 80104ca:	2300      	movs	r3, #0
 80104cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80104ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80104d0:	18fb      	adds	r3, r7, r3
 80104d2:	9300      	str	r3, [sp, #0]
 80104d4:	3301      	adds	r3, #1
 80104d6:	2b01      	cmp	r3, #1
 80104d8:	9307      	str	r3, [sp, #28]
 80104da:	bfb8      	it	lt
 80104dc:	2301      	movlt	r3, #1
 80104de:	f8db 001c 	ldr.w	r0, [fp, #28]
 80104e2:	2100      	movs	r1, #0
 80104e4:	2204      	movs	r2, #4
 80104e6:	f102 0514 	add.w	r5, r2, #20
 80104ea:	429d      	cmp	r5, r3
 80104ec:	d91f      	bls.n	801052e <_dtoa_r+0x2a6>
 80104ee:	6041      	str	r1, [r0, #4]
 80104f0:	4658      	mov	r0, fp
 80104f2:	f000 fd8d 	bl	8011010 <_Balloc>
 80104f6:	4682      	mov	sl, r0
 80104f8:	2800      	cmp	r0, #0
 80104fa:	d13b      	bne.n	8010574 <_dtoa_r+0x2ec>
 80104fc:	4b1a      	ldr	r3, [pc, #104]	@ (8010568 <_dtoa_r+0x2e0>)
 80104fe:	4602      	mov	r2, r0
 8010500:	f240 11af 	movw	r1, #431	@ 0x1af
 8010504:	e6d7      	b.n	80102b6 <_dtoa_r+0x2e>
 8010506:	2301      	movs	r3, #1
 8010508:	e7e0      	b.n	80104cc <_dtoa_r+0x244>
 801050a:	2401      	movs	r4, #1
 801050c:	2300      	movs	r3, #0
 801050e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010510:	9309      	str	r3, [sp, #36]	@ 0x24
 8010512:	f04f 33ff 	mov.w	r3, #4294967295
 8010516:	2200      	movs	r2, #0
 8010518:	9300      	str	r3, [sp, #0]
 801051a:	9307      	str	r3, [sp, #28]
 801051c:	2312      	movs	r3, #18
 801051e:	e7d0      	b.n	80104c2 <_dtoa_r+0x23a>
 8010520:	2301      	movs	r3, #1
 8010522:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010524:	e7f5      	b.n	8010512 <_dtoa_r+0x28a>
 8010526:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010528:	9300      	str	r3, [sp, #0]
 801052a:	9307      	str	r3, [sp, #28]
 801052c:	e7d7      	b.n	80104de <_dtoa_r+0x256>
 801052e:	3101      	adds	r1, #1
 8010530:	0052      	lsls	r2, r2, #1
 8010532:	e7d8      	b.n	80104e6 <_dtoa_r+0x25e>
 8010534:	f3af 8000 	nop.w
 8010538:	636f4361 	.word	0x636f4361
 801053c:	3fd287a7 	.word	0x3fd287a7
 8010540:	8b60c8b3 	.word	0x8b60c8b3
 8010544:	3fc68a28 	.word	0x3fc68a28
 8010548:	509f79fb 	.word	0x509f79fb
 801054c:	3fd34413 	.word	0x3fd34413
 8010550:	080125c5 	.word	0x080125c5
 8010554:	080125dc 	.word	0x080125dc
 8010558:	7ff00000 	.word	0x7ff00000
 801055c:	08012595 	.word	0x08012595
 8010560:	3ff80000 	.word	0x3ff80000
 8010564:	080126d8 	.word	0x080126d8
 8010568:	08012634 	.word	0x08012634
 801056c:	080125c1 	.word	0x080125c1
 8010570:	08012594 	.word	0x08012594
 8010574:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010578:	6018      	str	r0, [r3, #0]
 801057a:	9b07      	ldr	r3, [sp, #28]
 801057c:	2b0e      	cmp	r3, #14
 801057e:	f200 80a4 	bhi.w	80106ca <_dtoa_r+0x442>
 8010582:	2c00      	cmp	r4, #0
 8010584:	f000 80a1 	beq.w	80106ca <_dtoa_r+0x442>
 8010588:	2f00      	cmp	r7, #0
 801058a:	dd33      	ble.n	80105f4 <_dtoa_r+0x36c>
 801058c:	f007 020f 	and.w	r2, r7, #15
 8010590:	4bac      	ldr	r3, [pc, #688]	@ (8010844 <_dtoa_r+0x5bc>)
 8010592:	05f8      	lsls	r0, r7, #23
 8010594:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010598:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801059c:	ed93 7b00 	vldr	d7, [r3]
 80105a0:	ed8d 7b04 	vstr	d7, [sp, #16]
 80105a4:	d516      	bpl.n	80105d4 <_dtoa_r+0x34c>
 80105a6:	4ba8      	ldr	r3, [pc, #672]	@ (8010848 <_dtoa_r+0x5c0>)
 80105a8:	f004 040f 	and.w	r4, r4, #15
 80105ac:	2603      	movs	r6, #3
 80105ae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80105b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80105b6:	f7f0 f959 	bl	800086c <__aeabi_ddiv>
 80105ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80105be:	4da2      	ldr	r5, [pc, #648]	@ (8010848 <_dtoa_r+0x5c0>)
 80105c0:	b954      	cbnz	r4, 80105d8 <_dtoa_r+0x350>
 80105c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80105c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80105ca:	f7f0 f94f 	bl	800086c <__aeabi_ddiv>
 80105ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80105d2:	e028      	b.n	8010626 <_dtoa_r+0x39e>
 80105d4:	2602      	movs	r6, #2
 80105d6:	e7f2      	b.n	80105be <_dtoa_r+0x336>
 80105d8:	07e1      	lsls	r1, r4, #31
 80105da:	d508      	bpl.n	80105ee <_dtoa_r+0x366>
 80105dc:	3601      	adds	r6, #1
 80105de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80105e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80105e6:	f7f0 f817 	bl	8000618 <__aeabi_dmul>
 80105ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80105ee:	1064      	asrs	r4, r4, #1
 80105f0:	3508      	adds	r5, #8
 80105f2:	e7e5      	b.n	80105c0 <_dtoa_r+0x338>
 80105f4:	f000 80d2 	beq.w	801079c <_dtoa_r+0x514>
 80105f8:	427c      	negs	r4, r7
 80105fa:	4b92      	ldr	r3, [pc, #584]	@ (8010844 <_dtoa_r+0x5bc>)
 80105fc:	4d92      	ldr	r5, [pc, #584]	@ (8010848 <_dtoa_r+0x5c0>)
 80105fe:	2602      	movs	r6, #2
 8010600:	f004 020f 	and.w	r2, r4, #15
 8010604:	1124      	asrs	r4, r4, #4
 8010606:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801060a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801060e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010612:	f7f0 f801 	bl	8000618 <__aeabi_dmul>
 8010616:	2300      	movs	r3, #0
 8010618:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801061c:	2c00      	cmp	r4, #0
 801061e:	f040 80b2 	bne.w	8010786 <_dtoa_r+0x4fe>
 8010622:	2b00      	cmp	r3, #0
 8010624:	d1d3      	bne.n	80105ce <_dtoa_r+0x346>
 8010626:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010628:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801062c:	2b00      	cmp	r3, #0
 801062e:	f000 80b7 	beq.w	80107a0 <_dtoa_r+0x518>
 8010632:	2200      	movs	r2, #0
 8010634:	4b85      	ldr	r3, [pc, #532]	@ (801084c <_dtoa_r+0x5c4>)
 8010636:	4620      	mov	r0, r4
 8010638:	4629      	mov	r1, r5
 801063a:	f7f0 fa5f 	bl	8000afc <__aeabi_dcmplt>
 801063e:	2800      	cmp	r0, #0
 8010640:	f000 80ae 	beq.w	80107a0 <_dtoa_r+0x518>
 8010644:	9b07      	ldr	r3, [sp, #28]
 8010646:	2b00      	cmp	r3, #0
 8010648:	f000 80aa 	beq.w	80107a0 <_dtoa_r+0x518>
 801064c:	9b00      	ldr	r3, [sp, #0]
 801064e:	2b00      	cmp	r3, #0
 8010650:	dd37      	ble.n	80106c2 <_dtoa_r+0x43a>
 8010652:	1e7b      	subs	r3, r7, #1
 8010654:	4620      	mov	r0, r4
 8010656:	2200      	movs	r2, #0
 8010658:	4629      	mov	r1, r5
 801065a:	9304      	str	r3, [sp, #16]
 801065c:	3601      	adds	r6, #1
 801065e:	4b7c      	ldr	r3, [pc, #496]	@ (8010850 <_dtoa_r+0x5c8>)
 8010660:	f7ef ffda 	bl	8000618 <__aeabi_dmul>
 8010664:	9c00      	ldr	r4, [sp, #0]
 8010666:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801066a:	4630      	mov	r0, r6
 801066c:	f7ef ff6a 	bl	8000544 <__aeabi_i2d>
 8010670:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010674:	f7ef ffd0 	bl	8000618 <__aeabi_dmul>
 8010678:	2200      	movs	r2, #0
 801067a:	4b76      	ldr	r3, [pc, #472]	@ (8010854 <_dtoa_r+0x5cc>)
 801067c:	f7ef fe16 	bl	80002ac <__adddf3>
 8010680:	4605      	mov	r5, r0
 8010682:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8010686:	2c00      	cmp	r4, #0
 8010688:	f040 808d 	bne.w	80107a6 <_dtoa_r+0x51e>
 801068c:	2200      	movs	r2, #0
 801068e:	4b72      	ldr	r3, [pc, #456]	@ (8010858 <_dtoa_r+0x5d0>)
 8010690:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010694:	f7ef fe08 	bl	80002a8 <__aeabi_dsub>
 8010698:	4602      	mov	r2, r0
 801069a:	460b      	mov	r3, r1
 801069c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80106a0:	462a      	mov	r2, r5
 80106a2:	4633      	mov	r3, r6
 80106a4:	f7f0 fa48 	bl	8000b38 <__aeabi_dcmpgt>
 80106a8:	2800      	cmp	r0, #0
 80106aa:	f040 828b 	bne.w	8010bc4 <_dtoa_r+0x93c>
 80106ae:	462a      	mov	r2, r5
 80106b0:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80106b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80106b8:	f7f0 fa20 	bl	8000afc <__aeabi_dcmplt>
 80106bc:	2800      	cmp	r0, #0
 80106be:	f040 8128 	bne.w	8010912 <_dtoa_r+0x68a>
 80106c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80106c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80106ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	f2c0 815a 	blt.w	8010986 <_dtoa_r+0x6fe>
 80106d2:	2f0e      	cmp	r7, #14
 80106d4:	f300 8157 	bgt.w	8010986 <_dtoa_r+0x6fe>
 80106d8:	4b5a      	ldr	r3, [pc, #360]	@ (8010844 <_dtoa_r+0x5bc>)
 80106da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80106de:	ed93 7b00 	vldr	d7, [r3]
 80106e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	ed8d 7b00 	vstr	d7, [sp]
 80106ea:	da03      	bge.n	80106f4 <_dtoa_r+0x46c>
 80106ec:	9b07      	ldr	r3, [sp, #28]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	f340 8101 	ble.w	80108f6 <_dtoa_r+0x66e>
 80106f4:	4656      	mov	r6, sl
 80106f6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80106fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80106fe:	4620      	mov	r0, r4
 8010700:	4629      	mov	r1, r5
 8010702:	f7f0 f8b3 	bl	800086c <__aeabi_ddiv>
 8010706:	f7f0 fa37 	bl	8000b78 <__aeabi_d2iz>
 801070a:	4680      	mov	r8, r0
 801070c:	f7ef ff1a 	bl	8000544 <__aeabi_i2d>
 8010710:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010714:	f7ef ff80 	bl	8000618 <__aeabi_dmul>
 8010718:	4602      	mov	r2, r0
 801071a:	4620      	mov	r0, r4
 801071c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010720:	460b      	mov	r3, r1
 8010722:	4629      	mov	r1, r5
 8010724:	f7ef fdc0 	bl	80002a8 <__aeabi_dsub>
 8010728:	9d07      	ldr	r5, [sp, #28]
 801072a:	f806 4b01 	strb.w	r4, [r6], #1
 801072e:	eba6 040a 	sub.w	r4, r6, sl
 8010732:	4602      	mov	r2, r0
 8010734:	460b      	mov	r3, r1
 8010736:	42a5      	cmp	r5, r4
 8010738:	f040 8117 	bne.w	801096a <_dtoa_r+0x6e2>
 801073c:	f7ef fdb6 	bl	80002ac <__adddf3>
 8010740:	4604      	mov	r4, r0
 8010742:	460d      	mov	r5, r1
 8010744:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010748:	f7f0 f9f6 	bl	8000b38 <__aeabi_dcmpgt>
 801074c:	2800      	cmp	r0, #0
 801074e:	f040 80f9 	bne.w	8010944 <_dtoa_r+0x6bc>
 8010752:	4620      	mov	r0, r4
 8010754:	4629      	mov	r1, r5
 8010756:	e9dd 2300 	ldrd	r2, r3, [sp]
 801075a:	f7f0 f9c5 	bl	8000ae8 <__aeabi_dcmpeq>
 801075e:	b118      	cbz	r0, 8010768 <_dtoa_r+0x4e0>
 8010760:	f018 0f01 	tst.w	r8, #1
 8010764:	f040 80ee 	bne.w	8010944 <_dtoa_r+0x6bc>
 8010768:	4649      	mov	r1, r9
 801076a:	4658      	mov	r0, fp
 801076c:	f000 fc90 	bl	8011090 <_Bfree>
 8010770:	2300      	movs	r3, #0
 8010772:	3701      	adds	r7, #1
 8010774:	7033      	strb	r3, [r6, #0]
 8010776:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010778:	601f      	str	r7, [r3, #0]
 801077a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801077c:	2b00      	cmp	r3, #0
 801077e:	f000 831d 	beq.w	8010dbc <_dtoa_r+0xb34>
 8010782:	601e      	str	r6, [r3, #0]
 8010784:	e31a      	b.n	8010dbc <_dtoa_r+0xb34>
 8010786:	07e2      	lsls	r2, r4, #31
 8010788:	d505      	bpl.n	8010796 <_dtoa_r+0x50e>
 801078a:	3601      	adds	r6, #1
 801078c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010790:	f7ef ff42 	bl	8000618 <__aeabi_dmul>
 8010794:	2301      	movs	r3, #1
 8010796:	1064      	asrs	r4, r4, #1
 8010798:	3508      	adds	r5, #8
 801079a:	e73f      	b.n	801061c <_dtoa_r+0x394>
 801079c:	2602      	movs	r6, #2
 801079e:	e742      	b.n	8010626 <_dtoa_r+0x39e>
 80107a0:	9c07      	ldr	r4, [sp, #28]
 80107a2:	9704      	str	r7, [sp, #16]
 80107a4:	e761      	b.n	801066a <_dtoa_r+0x3e2>
 80107a6:	4b27      	ldr	r3, [pc, #156]	@ (8010844 <_dtoa_r+0x5bc>)
 80107a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80107aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80107ae:	4454      	add	r4, sl
 80107b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80107b4:	2900      	cmp	r1, #0
 80107b6:	d053      	beq.n	8010860 <_dtoa_r+0x5d8>
 80107b8:	2000      	movs	r0, #0
 80107ba:	4928      	ldr	r1, [pc, #160]	@ (801085c <_dtoa_r+0x5d4>)
 80107bc:	f7f0 f856 	bl	800086c <__aeabi_ddiv>
 80107c0:	4633      	mov	r3, r6
 80107c2:	4656      	mov	r6, sl
 80107c4:	462a      	mov	r2, r5
 80107c6:	f7ef fd6f 	bl	80002a8 <__aeabi_dsub>
 80107ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80107ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80107d2:	f7f0 f9d1 	bl	8000b78 <__aeabi_d2iz>
 80107d6:	4605      	mov	r5, r0
 80107d8:	f7ef feb4 	bl	8000544 <__aeabi_i2d>
 80107dc:	4602      	mov	r2, r0
 80107de:	460b      	mov	r3, r1
 80107e0:	3530      	adds	r5, #48	@ 0x30
 80107e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80107e6:	f7ef fd5f 	bl	80002a8 <__aeabi_dsub>
 80107ea:	4602      	mov	r2, r0
 80107ec:	460b      	mov	r3, r1
 80107ee:	f806 5b01 	strb.w	r5, [r6], #1
 80107f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80107f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80107fa:	f7f0 f97f 	bl	8000afc <__aeabi_dcmplt>
 80107fe:	2800      	cmp	r0, #0
 8010800:	d171      	bne.n	80108e6 <_dtoa_r+0x65e>
 8010802:	2000      	movs	r0, #0
 8010804:	4911      	ldr	r1, [pc, #68]	@ (801084c <_dtoa_r+0x5c4>)
 8010806:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801080a:	f7ef fd4d 	bl	80002a8 <__aeabi_dsub>
 801080e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010812:	f7f0 f973 	bl	8000afc <__aeabi_dcmplt>
 8010816:	2800      	cmp	r0, #0
 8010818:	f040 8095 	bne.w	8010946 <_dtoa_r+0x6be>
 801081c:	42a6      	cmp	r6, r4
 801081e:	f43f af50 	beq.w	80106c2 <_dtoa_r+0x43a>
 8010822:	2200      	movs	r2, #0
 8010824:	4b0a      	ldr	r3, [pc, #40]	@ (8010850 <_dtoa_r+0x5c8>)
 8010826:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801082a:	f7ef fef5 	bl	8000618 <__aeabi_dmul>
 801082e:	2200      	movs	r2, #0
 8010830:	4b07      	ldr	r3, [pc, #28]	@ (8010850 <_dtoa_r+0x5c8>)
 8010832:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010836:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801083a:	f7ef feed 	bl	8000618 <__aeabi_dmul>
 801083e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010842:	e7c4      	b.n	80107ce <_dtoa_r+0x546>
 8010844:	080126d8 	.word	0x080126d8
 8010848:	080126b0 	.word	0x080126b0
 801084c:	3ff00000 	.word	0x3ff00000
 8010850:	40240000 	.word	0x40240000
 8010854:	401c0000 	.word	0x401c0000
 8010858:	40140000 	.word	0x40140000
 801085c:	3fe00000 	.word	0x3fe00000
 8010860:	4631      	mov	r1, r6
 8010862:	4656      	mov	r6, sl
 8010864:	4628      	mov	r0, r5
 8010866:	f7ef fed7 	bl	8000618 <__aeabi_dmul>
 801086a:	9415      	str	r4, [sp, #84]	@ 0x54
 801086c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010870:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010874:	f7f0 f980 	bl	8000b78 <__aeabi_d2iz>
 8010878:	4605      	mov	r5, r0
 801087a:	f7ef fe63 	bl	8000544 <__aeabi_i2d>
 801087e:	4602      	mov	r2, r0
 8010880:	3530      	adds	r5, #48	@ 0x30
 8010882:	460b      	mov	r3, r1
 8010884:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010888:	f7ef fd0e 	bl	80002a8 <__aeabi_dsub>
 801088c:	f806 5b01 	strb.w	r5, [r6], #1
 8010890:	4602      	mov	r2, r0
 8010892:	460b      	mov	r3, r1
 8010894:	42a6      	cmp	r6, r4
 8010896:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801089a:	f04f 0200 	mov.w	r2, #0
 801089e:	d124      	bne.n	80108ea <_dtoa_r+0x662>
 80108a0:	4bac      	ldr	r3, [pc, #688]	@ (8010b54 <_dtoa_r+0x8cc>)
 80108a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80108a6:	f7ef fd01 	bl	80002ac <__adddf3>
 80108aa:	4602      	mov	r2, r0
 80108ac:	460b      	mov	r3, r1
 80108ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80108b2:	f7f0 f941 	bl	8000b38 <__aeabi_dcmpgt>
 80108b6:	2800      	cmp	r0, #0
 80108b8:	d145      	bne.n	8010946 <_dtoa_r+0x6be>
 80108ba:	2000      	movs	r0, #0
 80108bc:	49a5      	ldr	r1, [pc, #660]	@ (8010b54 <_dtoa_r+0x8cc>)
 80108be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80108c2:	f7ef fcf1 	bl	80002a8 <__aeabi_dsub>
 80108c6:	4602      	mov	r2, r0
 80108c8:	460b      	mov	r3, r1
 80108ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80108ce:	f7f0 f915 	bl	8000afc <__aeabi_dcmplt>
 80108d2:	2800      	cmp	r0, #0
 80108d4:	f43f aef5 	beq.w	80106c2 <_dtoa_r+0x43a>
 80108d8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80108da:	1e73      	subs	r3, r6, #1
 80108dc:	9315      	str	r3, [sp, #84]	@ 0x54
 80108de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80108e2:	2b30      	cmp	r3, #48	@ 0x30
 80108e4:	d0f8      	beq.n	80108d8 <_dtoa_r+0x650>
 80108e6:	9f04      	ldr	r7, [sp, #16]
 80108e8:	e73e      	b.n	8010768 <_dtoa_r+0x4e0>
 80108ea:	4b9b      	ldr	r3, [pc, #620]	@ (8010b58 <_dtoa_r+0x8d0>)
 80108ec:	f7ef fe94 	bl	8000618 <__aeabi_dmul>
 80108f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80108f4:	e7bc      	b.n	8010870 <_dtoa_r+0x5e8>
 80108f6:	d10c      	bne.n	8010912 <_dtoa_r+0x68a>
 80108f8:	2200      	movs	r2, #0
 80108fa:	4b98      	ldr	r3, [pc, #608]	@ (8010b5c <_dtoa_r+0x8d4>)
 80108fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010900:	f7ef fe8a 	bl	8000618 <__aeabi_dmul>
 8010904:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010908:	f7f0 f90c 	bl	8000b24 <__aeabi_dcmpge>
 801090c:	2800      	cmp	r0, #0
 801090e:	f000 8157 	beq.w	8010bc0 <_dtoa_r+0x938>
 8010912:	2400      	movs	r4, #0
 8010914:	4625      	mov	r5, r4
 8010916:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010918:	4656      	mov	r6, sl
 801091a:	43db      	mvns	r3, r3
 801091c:	9304      	str	r3, [sp, #16]
 801091e:	2700      	movs	r7, #0
 8010920:	4621      	mov	r1, r4
 8010922:	4658      	mov	r0, fp
 8010924:	f000 fbb4 	bl	8011090 <_Bfree>
 8010928:	2d00      	cmp	r5, #0
 801092a:	d0dc      	beq.n	80108e6 <_dtoa_r+0x65e>
 801092c:	b12f      	cbz	r7, 801093a <_dtoa_r+0x6b2>
 801092e:	42af      	cmp	r7, r5
 8010930:	d003      	beq.n	801093a <_dtoa_r+0x6b2>
 8010932:	4639      	mov	r1, r7
 8010934:	4658      	mov	r0, fp
 8010936:	f000 fbab 	bl	8011090 <_Bfree>
 801093a:	4629      	mov	r1, r5
 801093c:	4658      	mov	r0, fp
 801093e:	f000 fba7 	bl	8011090 <_Bfree>
 8010942:	e7d0      	b.n	80108e6 <_dtoa_r+0x65e>
 8010944:	9704      	str	r7, [sp, #16]
 8010946:	4633      	mov	r3, r6
 8010948:	461e      	mov	r6, r3
 801094a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801094e:	2a39      	cmp	r2, #57	@ 0x39
 8010950:	d107      	bne.n	8010962 <_dtoa_r+0x6da>
 8010952:	459a      	cmp	sl, r3
 8010954:	d1f8      	bne.n	8010948 <_dtoa_r+0x6c0>
 8010956:	9a04      	ldr	r2, [sp, #16]
 8010958:	3201      	adds	r2, #1
 801095a:	9204      	str	r2, [sp, #16]
 801095c:	2230      	movs	r2, #48	@ 0x30
 801095e:	f88a 2000 	strb.w	r2, [sl]
 8010962:	781a      	ldrb	r2, [r3, #0]
 8010964:	3201      	adds	r2, #1
 8010966:	701a      	strb	r2, [r3, #0]
 8010968:	e7bd      	b.n	80108e6 <_dtoa_r+0x65e>
 801096a:	2200      	movs	r2, #0
 801096c:	4b7a      	ldr	r3, [pc, #488]	@ (8010b58 <_dtoa_r+0x8d0>)
 801096e:	f7ef fe53 	bl	8000618 <__aeabi_dmul>
 8010972:	2200      	movs	r2, #0
 8010974:	2300      	movs	r3, #0
 8010976:	4604      	mov	r4, r0
 8010978:	460d      	mov	r5, r1
 801097a:	f7f0 f8b5 	bl	8000ae8 <__aeabi_dcmpeq>
 801097e:	2800      	cmp	r0, #0
 8010980:	f43f aebb 	beq.w	80106fa <_dtoa_r+0x472>
 8010984:	e6f0      	b.n	8010768 <_dtoa_r+0x4e0>
 8010986:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010988:	2a00      	cmp	r2, #0
 801098a:	f000 80db 	beq.w	8010b44 <_dtoa_r+0x8bc>
 801098e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010990:	2a01      	cmp	r2, #1
 8010992:	f300 80bf 	bgt.w	8010b14 <_dtoa_r+0x88c>
 8010996:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010998:	2a00      	cmp	r2, #0
 801099a:	f000 80b7 	beq.w	8010b0c <_dtoa_r+0x884>
 801099e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80109a2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80109a4:	4646      	mov	r6, r8
 80109a6:	9a08      	ldr	r2, [sp, #32]
 80109a8:	2101      	movs	r1, #1
 80109aa:	4658      	mov	r0, fp
 80109ac:	4498      	add	r8, r3
 80109ae:	441a      	add	r2, r3
 80109b0:	9208      	str	r2, [sp, #32]
 80109b2:	f000 fc23 	bl	80111fc <__i2b>
 80109b6:	4605      	mov	r5, r0
 80109b8:	b15e      	cbz	r6, 80109d2 <_dtoa_r+0x74a>
 80109ba:	9b08      	ldr	r3, [sp, #32]
 80109bc:	2b00      	cmp	r3, #0
 80109be:	dd08      	ble.n	80109d2 <_dtoa_r+0x74a>
 80109c0:	42b3      	cmp	r3, r6
 80109c2:	9a08      	ldr	r2, [sp, #32]
 80109c4:	bfa8      	it	ge
 80109c6:	4633      	movge	r3, r6
 80109c8:	eba8 0803 	sub.w	r8, r8, r3
 80109cc:	1af6      	subs	r6, r6, r3
 80109ce:	1ad3      	subs	r3, r2, r3
 80109d0:	9308      	str	r3, [sp, #32]
 80109d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80109d4:	b1f3      	cbz	r3, 8010a14 <_dtoa_r+0x78c>
 80109d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80109d8:	2b00      	cmp	r3, #0
 80109da:	f000 80b7 	beq.w	8010b4c <_dtoa_r+0x8c4>
 80109de:	b18c      	cbz	r4, 8010a04 <_dtoa_r+0x77c>
 80109e0:	4629      	mov	r1, r5
 80109e2:	4622      	mov	r2, r4
 80109e4:	4658      	mov	r0, fp
 80109e6:	f000 fcc9 	bl	801137c <__pow5mult>
 80109ea:	464a      	mov	r2, r9
 80109ec:	4601      	mov	r1, r0
 80109ee:	4605      	mov	r5, r0
 80109f0:	4658      	mov	r0, fp
 80109f2:	f000 fc19 	bl	8011228 <__multiply>
 80109f6:	4649      	mov	r1, r9
 80109f8:	9004      	str	r0, [sp, #16]
 80109fa:	4658      	mov	r0, fp
 80109fc:	f000 fb48 	bl	8011090 <_Bfree>
 8010a00:	9b04      	ldr	r3, [sp, #16]
 8010a02:	4699      	mov	r9, r3
 8010a04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010a06:	1b1a      	subs	r2, r3, r4
 8010a08:	d004      	beq.n	8010a14 <_dtoa_r+0x78c>
 8010a0a:	4649      	mov	r1, r9
 8010a0c:	4658      	mov	r0, fp
 8010a0e:	f000 fcb5 	bl	801137c <__pow5mult>
 8010a12:	4681      	mov	r9, r0
 8010a14:	2101      	movs	r1, #1
 8010a16:	4658      	mov	r0, fp
 8010a18:	f000 fbf0 	bl	80111fc <__i2b>
 8010a1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010a1e:	4604      	mov	r4, r0
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	f000 81cf 	beq.w	8010dc4 <_dtoa_r+0xb3c>
 8010a26:	461a      	mov	r2, r3
 8010a28:	4601      	mov	r1, r0
 8010a2a:	4658      	mov	r0, fp
 8010a2c:	f000 fca6 	bl	801137c <__pow5mult>
 8010a30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a32:	4604      	mov	r4, r0
 8010a34:	2b01      	cmp	r3, #1
 8010a36:	f300 8095 	bgt.w	8010b64 <_dtoa_r+0x8dc>
 8010a3a:	9b02      	ldr	r3, [sp, #8]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	f040 8087 	bne.w	8010b50 <_dtoa_r+0x8c8>
 8010a42:	9b03      	ldr	r3, [sp, #12]
 8010a44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	f040 8089 	bne.w	8010b60 <_dtoa_r+0x8d8>
 8010a4e:	9b03      	ldr	r3, [sp, #12]
 8010a50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010a54:	0d1b      	lsrs	r3, r3, #20
 8010a56:	051b      	lsls	r3, r3, #20
 8010a58:	b12b      	cbz	r3, 8010a66 <_dtoa_r+0x7de>
 8010a5a:	9b08      	ldr	r3, [sp, #32]
 8010a5c:	f108 0801 	add.w	r8, r8, #1
 8010a60:	3301      	adds	r3, #1
 8010a62:	9308      	str	r3, [sp, #32]
 8010a64:	2301      	movs	r3, #1
 8010a66:	930a      	str	r3, [sp, #40]	@ 0x28
 8010a68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	f000 81b0 	beq.w	8010dd0 <_dtoa_r+0xb48>
 8010a70:	6923      	ldr	r3, [r4, #16]
 8010a72:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010a76:	6918      	ldr	r0, [r3, #16]
 8010a78:	f000 fb74 	bl	8011164 <__hi0bits>
 8010a7c:	f1c0 0020 	rsb	r0, r0, #32
 8010a80:	9b08      	ldr	r3, [sp, #32]
 8010a82:	4418      	add	r0, r3
 8010a84:	f010 001f 	ands.w	r0, r0, #31
 8010a88:	d077      	beq.n	8010b7a <_dtoa_r+0x8f2>
 8010a8a:	f1c0 0320 	rsb	r3, r0, #32
 8010a8e:	2b04      	cmp	r3, #4
 8010a90:	dd6b      	ble.n	8010b6a <_dtoa_r+0x8e2>
 8010a92:	f1c0 001c 	rsb	r0, r0, #28
 8010a96:	9b08      	ldr	r3, [sp, #32]
 8010a98:	4480      	add	r8, r0
 8010a9a:	4403      	add	r3, r0
 8010a9c:	4406      	add	r6, r0
 8010a9e:	9308      	str	r3, [sp, #32]
 8010aa0:	f1b8 0f00 	cmp.w	r8, #0
 8010aa4:	dd05      	ble.n	8010ab2 <_dtoa_r+0x82a>
 8010aa6:	4649      	mov	r1, r9
 8010aa8:	4642      	mov	r2, r8
 8010aaa:	4658      	mov	r0, fp
 8010aac:	f000 fcc0 	bl	8011430 <__lshift>
 8010ab0:	4681      	mov	r9, r0
 8010ab2:	9b08      	ldr	r3, [sp, #32]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	dd05      	ble.n	8010ac4 <_dtoa_r+0x83c>
 8010ab8:	4621      	mov	r1, r4
 8010aba:	461a      	mov	r2, r3
 8010abc:	4658      	mov	r0, fp
 8010abe:	f000 fcb7 	bl	8011430 <__lshift>
 8010ac2:	4604      	mov	r4, r0
 8010ac4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d059      	beq.n	8010b7e <_dtoa_r+0x8f6>
 8010aca:	4621      	mov	r1, r4
 8010acc:	4648      	mov	r0, r9
 8010ace:	f000 fd1b 	bl	8011508 <__mcmp>
 8010ad2:	2800      	cmp	r0, #0
 8010ad4:	da53      	bge.n	8010b7e <_dtoa_r+0x8f6>
 8010ad6:	1e7b      	subs	r3, r7, #1
 8010ad8:	4649      	mov	r1, r9
 8010ada:	220a      	movs	r2, #10
 8010adc:	4658      	mov	r0, fp
 8010ade:	9304      	str	r3, [sp, #16]
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	f000 faf7 	bl	80110d4 <__multadd>
 8010ae6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010ae8:	4681      	mov	r9, r0
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	f000 8172 	beq.w	8010dd4 <_dtoa_r+0xb4c>
 8010af0:	2300      	movs	r3, #0
 8010af2:	4629      	mov	r1, r5
 8010af4:	220a      	movs	r2, #10
 8010af6:	4658      	mov	r0, fp
 8010af8:	f000 faec 	bl	80110d4 <__multadd>
 8010afc:	9b00      	ldr	r3, [sp, #0]
 8010afe:	4605      	mov	r5, r0
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	dc67      	bgt.n	8010bd4 <_dtoa_r+0x94c>
 8010b04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b06:	2b02      	cmp	r3, #2
 8010b08:	dc41      	bgt.n	8010b8e <_dtoa_r+0x906>
 8010b0a:	e063      	b.n	8010bd4 <_dtoa_r+0x94c>
 8010b0c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010b0e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010b12:	e746      	b.n	80109a2 <_dtoa_r+0x71a>
 8010b14:	9b07      	ldr	r3, [sp, #28]
 8010b16:	1e5c      	subs	r4, r3, #1
 8010b18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010b1a:	42a3      	cmp	r3, r4
 8010b1c:	bfb7      	itett	lt
 8010b1e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010b20:	1b1c      	subge	r4, r3, r4
 8010b22:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8010b24:	1ae3      	sublt	r3, r4, r3
 8010b26:	bfbe      	ittt	lt
 8010b28:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8010b2a:	2400      	movlt	r4, #0
 8010b2c:	18d2      	addlt	r2, r2, r3
 8010b2e:	9b07      	ldr	r3, [sp, #28]
 8010b30:	bfb8      	it	lt
 8010b32:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	bfb5      	itete	lt
 8010b38:	eba8 0603 	sublt.w	r6, r8, r3
 8010b3c:	4646      	movge	r6, r8
 8010b3e:	2300      	movlt	r3, #0
 8010b40:	9b07      	ldrge	r3, [sp, #28]
 8010b42:	e730      	b.n	80109a6 <_dtoa_r+0x71e>
 8010b44:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010b46:	4646      	mov	r6, r8
 8010b48:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010b4a:	e735      	b.n	80109b8 <_dtoa_r+0x730>
 8010b4c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010b4e:	e75c      	b.n	8010a0a <_dtoa_r+0x782>
 8010b50:	2300      	movs	r3, #0
 8010b52:	e788      	b.n	8010a66 <_dtoa_r+0x7de>
 8010b54:	3fe00000 	.word	0x3fe00000
 8010b58:	40240000 	.word	0x40240000
 8010b5c:	40140000 	.word	0x40140000
 8010b60:	9b02      	ldr	r3, [sp, #8]
 8010b62:	e780      	b.n	8010a66 <_dtoa_r+0x7de>
 8010b64:	2300      	movs	r3, #0
 8010b66:	930a      	str	r3, [sp, #40]	@ 0x28
 8010b68:	e782      	b.n	8010a70 <_dtoa_r+0x7e8>
 8010b6a:	d099      	beq.n	8010aa0 <_dtoa_r+0x818>
 8010b6c:	331c      	adds	r3, #28
 8010b6e:	9a08      	ldr	r2, [sp, #32]
 8010b70:	441a      	add	r2, r3
 8010b72:	4498      	add	r8, r3
 8010b74:	441e      	add	r6, r3
 8010b76:	9208      	str	r2, [sp, #32]
 8010b78:	e792      	b.n	8010aa0 <_dtoa_r+0x818>
 8010b7a:	4603      	mov	r3, r0
 8010b7c:	e7f6      	b.n	8010b6c <_dtoa_r+0x8e4>
 8010b7e:	9b07      	ldr	r3, [sp, #28]
 8010b80:	9704      	str	r7, [sp, #16]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	dc20      	bgt.n	8010bc8 <_dtoa_r+0x940>
 8010b86:	9300      	str	r3, [sp, #0]
 8010b88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b8a:	2b02      	cmp	r3, #2
 8010b8c:	dd1e      	ble.n	8010bcc <_dtoa_r+0x944>
 8010b8e:	9b00      	ldr	r3, [sp, #0]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	f47f aec0 	bne.w	8010916 <_dtoa_r+0x68e>
 8010b96:	4621      	mov	r1, r4
 8010b98:	2205      	movs	r2, #5
 8010b9a:	4658      	mov	r0, fp
 8010b9c:	f000 fa9a 	bl	80110d4 <__multadd>
 8010ba0:	4601      	mov	r1, r0
 8010ba2:	4604      	mov	r4, r0
 8010ba4:	4648      	mov	r0, r9
 8010ba6:	f000 fcaf 	bl	8011508 <__mcmp>
 8010baa:	2800      	cmp	r0, #0
 8010bac:	f77f aeb3 	ble.w	8010916 <_dtoa_r+0x68e>
 8010bb0:	2331      	movs	r3, #49	@ 0x31
 8010bb2:	4656      	mov	r6, sl
 8010bb4:	f806 3b01 	strb.w	r3, [r6], #1
 8010bb8:	9b04      	ldr	r3, [sp, #16]
 8010bba:	3301      	adds	r3, #1
 8010bbc:	9304      	str	r3, [sp, #16]
 8010bbe:	e6ae      	b.n	801091e <_dtoa_r+0x696>
 8010bc0:	9c07      	ldr	r4, [sp, #28]
 8010bc2:	9704      	str	r7, [sp, #16]
 8010bc4:	4625      	mov	r5, r4
 8010bc6:	e7f3      	b.n	8010bb0 <_dtoa_r+0x928>
 8010bc8:	9b07      	ldr	r3, [sp, #28]
 8010bca:	9300      	str	r3, [sp, #0]
 8010bcc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	f000 8104 	beq.w	8010ddc <_dtoa_r+0xb54>
 8010bd4:	2e00      	cmp	r6, #0
 8010bd6:	dd05      	ble.n	8010be4 <_dtoa_r+0x95c>
 8010bd8:	4629      	mov	r1, r5
 8010bda:	4632      	mov	r2, r6
 8010bdc:	4658      	mov	r0, fp
 8010bde:	f000 fc27 	bl	8011430 <__lshift>
 8010be2:	4605      	mov	r5, r0
 8010be4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d05a      	beq.n	8010ca0 <_dtoa_r+0xa18>
 8010bea:	6869      	ldr	r1, [r5, #4]
 8010bec:	4658      	mov	r0, fp
 8010bee:	f000 fa0f 	bl	8011010 <_Balloc>
 8010bf2:	4606      	mov	r6, r0
 8010bf4:	b928      	cbnz	r0, 8010c02 <_dtoa_r+0x97a>
 8010bf6:	4b84      	ldr	r3, [pc, #528]	@ (8010e08 <_dtoa_r+0xb80>)
 8010bf8:	4602      	mov	r2, r0
 8010bfa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010bfe:	f7ff bb5a 	b.w	80102b6 <_dtoa_r+0x2e>
 8010c02:	692a      	ldr	r2, [r5, #16]
 8010c04:	f105 010c 	add.w	r1, r5, #12
 8010c08:	300c      	adds	r0, #12
 8010c0a:	3202      	adds	r2, #2
 8010c0c:	0092      	lsls	r2, r2, #2
 8010c0e:	f7ff faa0 	bl	8010152 <memcpy>
 8010c12:	2201      	movs	r2, #1
 8010c14:	4631      	mov	r1, r6
 8010c16:	4658      	mov	r0, fp
 8010c18:	f000 fc0a 	bl	8011430 <__lshift>
 8010c1c:	f10a 0301 	add.w	r3, sl, #1
 8010c20:	462f      	mov	r7, r5
 8010c22:	4605      	mov	r5, r0
 8010c24:	9307      	str	r3, [sp, #28]
 8010c26:	9b00      	ldr	r3, [sp, #0]
 8010c28:	4453      	add	r3, sl
 8010c2a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010c2c:	9b02      	ldr	r3, [sp, #8]
 8010c2e:	f003 0301 	and.w	r3, r3, #1
 8010c32:	930a      	str	r3, [sp, #40]	@ 0x28
 8010c34:	9b07      	ldr	r3, [sp, #28]
 8010c36:	4621      	mov	r1, r4
 8010c38:	4648      	mov	r0, r9
 8010c3a:	3b01      	subs	r3, #1
 8010c3c:	9300      	str	r3, [sp, #0]
 8010c3e:	f7ff fa95 	bl	801016c <quorem>
 8010c42:	4639      	mov	r1, r7
 8010c44:	9002      	str	r0, [sp, #8]
 8010c46:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010c4a:	4648      	mov	r0, r9
 8010c4c:	f000 fc5c 	bl	8011508 <__mcmp>
 8010c50:	462a      	mov	r2, r5
 8010c52:	9008      	str	r0, [sp, #32]
 8010c54:	4621      	mov	r1, r4
 8010c56:	4658      	mov	r0, fp
 8010c58:	f000 fc72 	bl	8011540 <__mdiff>
 8010c5c:	68c2      	ldr	r2, [r0, #12]
 8010c5e:	4606      	mov	r6, r0
 8010c60:	bb02      	cbnz	r2, 8010ca4 <_dtoa_r+0xa1c>
 8010c62:	4601      	mov	r1, r0
 8010c64:	4648      	mov	r0, r9
 8010c66:	f000 fc4f 	bl	8011508 <__mcmp>
 8010c6a:	4602      	mov	r2, r0
 8010c6c:	4631      	mov	r1, r6
 8010c6e:	4658      	mov	r0, fp
 8010c70:	920e      	str	r2, [sp, #56]	@ 0x38
 8010c72:	f000 fa0d 	bl	8011090 <_Bfree>
 8010c76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c78:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010c7a:	9e07      	ldr	r6, [sp, #28]
 8010c7c:	ea43 0102 	orr.w	r1, r3, r2
 8010c80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010c82:	4319      	orrs	r1, r3
 8010c84:	d110      	bne.n	8010ca8 <_dtoa_r+0xa20>
 8010c86:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010c8a:	d029      	beq.n	8010ce0 <_dtoa_r+0xa58>
 8010c8c:	9b08      	ldr	r3, [sp, #32]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	dd02      	ble.n	8010c98 <_dtoa_r+0xa10>
 8010c92:	9b02      	ldr	r3, [sp, #8]
 8010c94:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010c98:	9b00      	ldr	r3, [sp, #0]
 8010c9a:	f883 8000 	strb.w	r8, [r3]
 8010c9e:	e63f      	b.n	8010920 <_dtoa_r+0x698>
 8010ca0:	4628      	mov	r0, r5
 8010ca2:	e7bb      	b.n	8010c1c <_dtoa_r+0x994>
 8010ca4:	2201      	movs	r2, #1
 8010ca6:	e7e1      	b.n	8010c6c <_dtoa_r+0x9e4>
 8010ca8:	9b08      	ldr	r3, [sp, #32]
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	db04      	blt.n	8010cb8 <_dtoa_r+0xa30>
 8010cae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010cb0:	430b      	orrs	r3, r1
 8010cb2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010cb4:	430b      	orrs	r3, r1
 8010cb6:	d120      	bne.n	8010cfa <_dtoa_r+0xa72>
 8010cb8:	2a00      	cmp	r2, #0
 8010cba:	dded      	ble.n	8010c98 <_dtoa_r+0xa10>
 8010cbc:	4649      	mov	r1, r9
 8010cbe:	2201      	movs	r2, #1
 8010cc0:	4658      	mov	r0, fp
 8010cc2:	f000 fbb5 	bl	8011430 <__lshift>
 8010cc6:	4621      	mov	r1, r4
 8010cc8:	4681      	mov	r9, r0
 8010cca:	f000 fc1d 	bl	8011508 <__mcmp>
 8010cce:	2800      	cmp	r0, #0
 8010cd0:	dc03      	bgt.n	8010cda <_dtoa_r+0xa52>
 8010cd2:	d1e1      	bne.n	8010c98 <_dtoa_r+0xa10>
 8010cd4:	f018 0f01 	tst.w	r8, #1
 8010cd8:	d0de      	beq.n	8010c98 <_dtoa_r+0xa10>
 8010cda:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010cde:	d1d8      	bne.n	8010c92 <_dtoa_r+0xa0a>
 8010ce0:	2339      	movs	r3, #57	@ 0x39
 8010ce2:	9a00      	ldr	r2, [sp, #0]
 8010ce4:	7013      	strb	r3, [r2, #0]
 8010ce6:	4633      	mov	r3, r6
 8010ce8:	461e      	mov	r6, r3
 8010cea:	3b01      	subs	r3, #1
 8010cec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010cf0:	2a39      	cmp	r2, #57	@ 0x39
 8010cf2:	d052      	beq.n	8010d9a <_dtoa_r+0xb12>
 8010cf4:	3201      	adds	r2, #1
 8010cf6:	701a      	strb	r2, [r3, #0]
 8010cf8:	e612      	b.n	8010920 <_dtoa_r+0x698>
 8010cfa:	2a00      	cmp	r2, #0
 8010cfc:	dd07      	ble.n	8010d0e <_dtoa_r+0xa86>
 8010cfe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010d02:	d0ed      	beq.n	8010ce0 <_dtoa_r+0xa58>
 8010d04:	f108 0301 	add.w	r3, r8, #1
 8010d08:	9a00      	ldr	r2, [sp, #0]
 8010d0a:	7013      	strb	r3, [r2, #0]
 8010d0c:	e608      	b.n	8010920 <_dtoa_r+0x698>
 8010d0e:	9b07      	ldr	r3, [sp, #28]
 8010d10:	9a07      	ldr	r2, [sp, #28]
 8010d12:	f803 8c01 	strb.w	r8, [r3, #-1]
 8010d16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010d18:	4293      	cmp	r3, r2
 8010d1a:	d028      	beq.n	8010d6e <_dtoa_r+0xae6>
 8010d1c:	4649      	mov	r1, r9
 8010d1e:	2300      	movs	r3, #0
 8010d20:	220a      	movs	r2, #10
 8010d22:	4658      	mov	r0, fp
 8010d24:	f000 f9d6 	bl	80110d4 <__multadd>
 8010d28:	42af      	cmp	r7, r5
 8010d2a:	4681      	mov	r9, r0
 8010d2c:	f04f 0300 	mov.w	r3, #0
 8010d30:	f04f 020a 	mov.w	r2, #10
 8010d34:	4639      	mov	r1, r7
 8010d36:	4658      	mov	r0, fp
 8010d38:	d107      	bne.n	8010d4a <_dtoa_r+0xac2>
 8010d3a:	f000 f9cb 	bl	80110d4 <__multadd>
 8010d3e:	4607      	mov	r7, r0
 8010d40:	4605      	mov	r5, r0
 8010d42:	9b07      	ldr	r3, [sp, #28]
 8010d44:	3301      	adds	r3, #1
 8010d46:	9307      	str	r3, [sp, #28]
 8010d48:	e774      	b.n	8010c34 <_dtoa_r+0x9ac>
 8010d4a:	f000 f9c3 	bl	80110d4 <__multadd>
 8010d4e:	4629      	mov	r1, r5
 8010d50:	4607      	mov	r7, r0
 8010d52:	2300      	movs	r3, #0
 8010d54:	220a      	movs	r2, #10
 8010d56:	4658      	mov	r0, fp
 8010d58:	f000 f9bc 	bl	80110d4 <__multadd>
 8010d5c:	4605      	mov	r5, r0
 8010d5e:	e7f0      	b.n	8010d42 <_dtoa_r+0xaba>
 8010d60:	9b00      	ldr	r3, [sp, #0]
 8010d62:	2700      	movs	r7, #0
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	bfcc      	ite	gt
 8010d68:	461e      	movgt	r6, r3
 8010d6a:	2601      	movle	r6, #1
 8010d6c:	4456      	add	r6, sl
 8010d6e:	4649      	mov	r1, r9
 8010d70:	2201      	movs	r2, #1
 8010d72:	4658      	mov	r0, fp
 8010d74:	f000 fb5c 	bl	8011430 <__lshift>
 8010d78:	4621      	mov	r1, r4
 8010d7a:	4681      	mov	r9, r0
 8010d7c:	f000 fbc4 	bl	8011508 <__mcmp>
 8010d80:	2800      	cmp	r0, #0
 8010d82:	dcb0      	bgt.n	8010ce6 <_dtoa_r+0xa5e>
 8010d84:	d102      	bne.n	8010d8c <_dtoa_r+0xb04>
 8010d86:	f018 0f01 	tst.w	r8, #1
 8010d8a:	d1ac      	bne.n	8010ce6 <_dtoa_r+0xa5e>
 8010d8c:	4633      	mov	r3, r6
 8010d8e:	461e      	mov	r6, r3
 8010d90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010d94:	2a30      	cmp	r2, #48	@ 0x30
 8010d96:	d0fa      	beq.n	8010d8e <_dtoa_r+0xb06>
 8010d98:	e5c2      	b.n	8010920 <_dtoa_r+0x698>
 8010d9a:	459a      	cmp	sl, r3
 8010d9c:	d1a4      	bne.n	8010ce8 <_dtoa_r+0xa60>
 8010d9e:	9b04      	ldr	r3, [sp, #16]
 8010da0:	3301      	adds	r3, #1
 8010da2:	9304      	str	r3, [sp, #16]
 8010da4:	2331      	movs	r3, #49	@ 0x31
 8010da6:	f88a 3000 	strb.w	r3, [sl]
 8010daa:	e5b9      	b.n	8010920 <_dtoa_r+0x698>
 8010dac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010dae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8010e0c <_dtoa_r+0xb84>
 8010db2:	b11b      	cbz	r3, 8010dbc <_dtoa_r+0xb34>
 8010db4:	f10a 0308 	add.w	r3, sl, #8
 8010db8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010dba:	6013      	str	r3, [r2, #0]
 8010dbc:	4650      	mov	r0, sl
 8010dbe:	b019      	add	sp, #100	@ 0x64
 8010dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010dc6:	2b01      	cmp	r3, #1
 8010dc8:	f77f ae37 	ble.w	8010a3a <_dtoa_r+0x7b2>
 8010dcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010dce:	930a      	str	r3, [sp, #40]	@ 0x28
 8010dd0:	2001      	movs	r0, #1
 8010dd2:	e655      	b.n	8010a80 <_dtoa_r+0x7f8>
 8010dd4:	9b00      	ldr	r3, [sp, #0]
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	f77f aed6 	ble.w	8010b88 <_dtoa_r+0x900>
 8010ddc:	4656      	mov	r6, sl
 8010dde:	4621      	mov	r1, r4
 8010de0:	4648      	mov	r0, r9
 8010de2:	f7ff f9c3 	bl	801016c <quorem>
 8010de6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010dea:	9b00      	ldr	r3, [sp, #0]
 8010dec:	f806 8b01 	strb.w	r8, [r6], #1
 8010df0:	eba6 020a 	sub.w	r2, r6, sl
 8010df4:	4293      	cmp	r3, r2
 8010df6:	ddb3      	ble.n	8010d60 <_dtoa_r+0xad8>
 8010df8:	4649      	mov	r1, r9
 8010dfa:	2300      	movs	r3, #0
 8010dfc:	220a      	movs	r2, #10
 8010dfe:	4658      	mov	r0, fp
 8010e00:	f000 f968 	bl	80110d4 <__multadd>
 8010e04:	4681      	mov	r9, r0
 8010e06:	e7ea      	b.n	8010dde <_dtoa_r+0xb56>
 8010e08:	08012634 	.word	0x08012634
 8010e0c:	080125b8 	.word	0x080125b8

08010e10 <_free_r>:
 8010e10:	b538      	push	{r3, r4, r5, lr}
 8010e12:	4605      	mov	r5, r0
 8010e14:	2900      	cmp	r1, #0
 8010e16:	d041      	beq.n	8010e9c <_free_r+0x8c>
 8010e18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010e1c:	1f0c      	subs	r4, r1, #4
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	bfb8      	it	lt
 8010e22:	18e4      	addlt	r4, r4, r3
 8010e24:	f000 f8e8 	bl	8010ff8 <__malloc_lock>
 8010e28:	4a1d      	ldr	r2, [pc, #116]	@ (8010ea0 <_free_r+0x90>)
 8010e2a:	6813      	ldr	r3, [r2, #0]
 8010e2c:	b933      	cbnz	r3, 8010e3c <_free_r+0x2c>
 8010e2e:	6063      	str	r3, [r4, #4]
 8010e30:	6014      	str	r4, [r2, #0]
 8010e32:	4628      	mov	r0, r5
 8010e34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e38:	f000 b8e4 	b.w	8011004 <__malloc_unlock>
 8010e3c:	42a3      	cmp	r3, r4
 8010e3e:	d908      	bls.n	8010e52 <_free_r+0x42>
 8010e40:	6820      	ldr	r0, [r4, #0]
 8010e42:	1821      	adds	r1, r4, r0
 8010e44:	428b      	cmp	r3, r1
 8010e46:	bf01      	itttt	eq
 8010e48:	6819      	ldreq	r1, [r3, #0]
 8010e4a:	685b      	ldreq	r3, [r3, #4]
 8010e4c:	1809      	addeq	r1, r1, r0
 8010e4e:	6021      	streq	r1, [r4, #0]
 8010e50:	e7ed      	b.n	8010e2e <_free_r+0x1e>
 8010e52:	461a      	mov	r2, r3
 8010e54:	685b      	ldr	r3, [r3, #4]
 8010e56:	b10b      	cbz	r3, 8010e5c <_free_r+0x4c>
 8010e58:	42a3      	cmp	r3, r4
 8010e5a:	d9fa      	bls.n	8010e52 <_free_r+0x42>
 8010e5c:	6811      	ldr	r1, [r2, #0]
 8010e5e:	1850      	adds	r0, r2, r1
 8010e60:	42a0      	cmp	r0, r4
 8010e62:	d10b      	bne.n	8010e7c <_free_r+0x6c>
 8010e64:	6820      	ldr	r0, [r4, #0]
 8010e66:	4401      	add	r1, r0
 8010e68:	1850      	adds	r0, r2, r1
 8010e6a:	6011      	str	r1, [r2, #0]
 8010e6c:	4283      	cmp	r3, r0
 8010e6e:	d1e0      	bne.n	8010e32 <_free_r+0x22>
 8010e70:	6818      	ldr	r0, [r3, #0]
 8010e72:	685b      	ldr	r3, [r3, #4]
 8010e74:	4408      	add	r0, r1
 8010e76:	6053      	str	r3, [r2, #4]
 8010e78:	6010      	str	r0, [r2, #0]
 8010e7a:	e7da      	b.n	8010e32 <_free_r+0x22>
 8010e7c:	d902      	bls.n	8010e84 <_free_r+0x74>
 8010e7e:	230c      	movs	r3, #12
 8010e80:	602b      	str	r3, [r5, #0]
 8010e82:	e7d6      	b.n	8010e32 <_free_r+0x22>
 8010e84:	6820      	ldr	r0, [r4, #0]
 8010e86:	1821      	adds	r1, r4, r0
 8010e88:	428b      	cmp	r3, r1
 8010e8a:	bf02      	ittt	eq
 8010e8c:	6819      	ldreq	r1, [r3, #0]
 8010e8e:	685b      	ldreq	r3, [r3, #4]
 8010e90:	1809      	addeq	r1, r1, r0
 8010e92:	6063      	str	r3, [r4, #4]
 8010e94:	bf08      	it	eq
 8010e96:	6021      	streq	r1, [r4, #0]
 8010e98:	6054      	str	r4, [r2, #4]
 8010e9a:	e7ca      	b.n	8010e32 <_free_r+0x22>
 8010e9c:	bd38      	pop	{r3, r4, r5, pc}
 8010e9e:	bf00      	nop
 8010ea0:	20005e18 	.word	0x20005e18

08010ea4 <malloc>:
 8010ea4:	4b02      	ldr	r3, [pc, #8]	@ (8010eb0 <malloc+0xc>)
 8010ea6:	4601      	mov	r1, r0
 8010ea8:	6818      	ldr	r0, [r3, #0]
 8010eaa:	f000 b825 	b.w	8010ef8 <_malloc_r>
 8010eae:	bf00      	nop
 8010eb0:	20000034 	.word	0x20000034

08010eb4 <sbrk_aligned>:
 8010eb4:	b570      	push	{r4, r5, r6, lr}
 8010eb6:	4e0f      	ldr	r6, [pc, #60]	@ (8010ef4 <sbrk_aligned+0x40>)
 8010eb8:	460c      	mov	r4, r1
 8010eba:	4605      	mov	r5, r0
 8010ebc:	6831      	ldr	r1, [r6, #0]
 8010ebe:	b911      	cbnz	r1, 8010ec6 <sbrk_aligned+0x12>
 8010ec0:	f000 fe4c 	bl	8011b5c <_sbrk_r>
 8010ec4:	6030      	str	r0, [r6, #0]
 8010ec6:	4621      	mov	r1, r4
 8010ec8:	4628      	mov	r0, r5
 8010eca:	f000 fe47 	bl	8011b5c <_sbrk_r>
 8010ece:	1c43      	adds	r3, r0, #1
 8010ed0:	d103      	bne.n	8010eda <sbrk_aligned+0x26>
 8010ed2:	f04f 34ff 	mov.w	r4, #4294967295
 8010ed6:	4620      	mov	r0, r4
 8010ed8:	bd70      	pop	{r4, r5, r6, pc}
 8010eda:	1cc4      	adds	r4, r0, #3
 8010edc:	f024 0403 	bic.w	r4, r4, #3
 8010ee0:	42a0      	cmp	r0, r4
 8010ee2:	d0f8      	beq.n	8010ed6 <sbrk_aligned+0x22>
 8010ee4:	1a21      	subs	r1, r4, r0
 8010ee6:	4628      	mov	r0, r5
 8010ee8:	f000 fe38 	bl	8011b5c <_sbrk_r>
 8010eec:	3001      	adds	r0, #1
 8010eee:	d1f2      	bne.n	8010ed6 <sbrk_aligned+0x22>
 8010ef0:	e7ef      	b.n	8010ed2 <sbrk_aligned+0x1e>
 8010ef2:	bf00      	nop
 8010ef4:	20005e14 	.word	0x20005e14

08010ef8 <_malloc_r>:
 8010ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010efc:	1ccd      	adds	r5, r1, #3
 8010efe:	4606      	mov	r6, r0
 8010f00:	f025 0503 	bic.w	r5, r5, #3
 8010f04:	3508      	adds	r5, #8
 8010f06:	2d0c      	cmp	r5, #12
 8010f08:	bf38      	it	cc
 8010f0a:	250c      	movcc	r5, #12
 8010f0c:	2d00      	cmp	r5, #0
 8010f0e:	db01      	blt.n	8010f14 <_malloc_r+0x1c>
 8010f10:	42a9      	cmp	r1, r5
 8010f12:	d904      	bls.n	8010f1e <_malloc_r+0x26>
 8010f14:	230c      	movs	r3, #12
 8010f16:	6033      	str	r3, [r6, #0]
 8010f18:	2000      	movs	r0, #0
 8010f1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010ff4 <_malloc_r+0xfc>
 8010f22:	f000 f869 	bl	8010ff8 <__malloc_lock>
 8010f26:	f8d8 3000 	ldr.w	r3, [r8]
 8010f2a:	461c      	mov	r4, r3
 8010f2c:	bb44      	cbnz	r4, 8010f80 <_malloc_r+0x88>
 8010f2e:	4629      	mov	r1, r5
 8010f30:	4630      	mov	r0, r6
 8010f32:	f7ff ffbf 	bl	8010eb4 <sbrk_aligned>
 8010f36:	1c43      	adds	r3, r0, #1
 8010f38:	4604      	mov	r4, r0
 8010f3a:	d158      	bne.n	8010fee <_malloc_r+0xf6>
 8010f3c:	f8d8 4000 	ldr.w	r4, [r8]
 8010f40:	4627      	mov	r7, r4
 8010f42:	2f00      	cmp	r7, #0
 8010f44:	d143      	bne.n	8010fce <_malloc_r+0xd6>
 8010f46:	2c00      	cmp	r4, #0
 8010f48:	d04b      	beq.n	8010fe2 <_malloc_r+0xea>
 8010f4a:	6823      	ldr	r3, [r4, #0]
 8010f4c:	4639      	mov	r1, r7
 8010f4e:	4630      	mov	r0, r6
 8010f50:	eb04 0903 	add.w	r9, r4, r3
 8010f54:	f000 fe02 	bl	8011b5c <_sbrk_r>
 8010f58:	4581      	cmp	r9, r0
 8010f5a:	d142      	bne.n	8010fe2 <_malloc_r+0xea>
 8010f5c:	6821      	ldr	r1, [r4, #0]
 8010f5e:	4630      	mov	r0, r6
 8010f60:	1a6d      	subs	r5, r5, r1
 8010f62:	4629      	mov	r1, r5
 8010f64:	f7ff ffa6 	bl	8010eb4 <sbrk_aligned>
 8010f68:	3001      	adds	r0, #1
 8010f6a:	d03a      	beq.n	8010fe2 <_malloc_r+0xea>
 8010f6c:	6823      	ldr	r3, [r4, #0]
 8010f6e:	442b      	add	r3, r5
 8010f70:	6023      	str	r3, [r4, #0]
 8010f72:	f8d8 3000 	ldr.w	r3, [r8]
 8010f76:	685a      	ldr	r2, [r3, #4]
 8010f78:	bb62      	cbnz	r2, 8010fd4 <_malloc_r+0xdc>
 8010f7a:	f8c8 7000 	str.w	r7, [r8]
 8010f7e:	e00f      	b.n	8010fa0 <_malloc_r+0xa8>
 8010f80:	6822      	ldr	r2, [r4, #0]
 8010f82:	1b52      	subs	r2, r2, r5
 8010f84:	d420      	bmi.n	8010fc8 <_malloc_r+0xd0>
 8010f86:	2a0b      	cmp	r2, #11
 8010f88:	d917      	bls.n	8010fba <_malloc_r+0xc2>
 8010f8a:	1961      	adds	r1, r4, r5
 8010f8c:	42a3      	cmp	r3, r4
 8010f8e:	6025      	str	r5, [r4, #0]
 8010f90:	bf18      	it	ne
 8010f92:	6059      	strne	r1, [r3, #4]
 8010f94:	6863      	ldr	r3, [r4, #4]
 8010f96:	bf08      	it	eq
 8010f98:	f8c8 1000 	streq.w	r1, [r8]
 8010f9c:	5162      	str	r2, [r4, r5]
 8010f9e:	604b      	str	r3, [r1, #4]
 8010fa0:	4630      	mov	r0, r6
 8010fa2:	f000 f82f 	bl	8011004 <__malloc_unlock>
 8010fa6:	f104 000b 	add.w	r0, r4, #11
 8010faa:	1d23      	adds	r3, r4, #4
 8010fac:	f020 0007 	bic.w	r0, r0, #7
 8010fb0:	1ac2      	subs	r2, r0, r3
 8010fb2:	bf1c      	itt	ne
 8010fb4:	1a1b      	subne	r3, r3, r0
 8010fb6:	50a3      	strne	r3, [r4, r2]
 8010fb8:	e7af      	b.n	8010f1a <_malloc_r+0x22>
 8010fba:	6862      	ldr	r2, [r4, #4]
 8010fbc:	42a3      	cmp	r3, r4
 8010fbe:	bf0c      	ite	eq
 8010fc0:	f8c8 2000 	streq.w	r2, [r8]
 8010fc4:	605a      	strne	r2, [r3, #4]
 8010fc6:	e7eb      	b.n	8010fa0 <_malloc_r+0xa8>
 8010fc8:	4623      	mov	r3, r4
 8010fca:	6864      	ldr	r4, [r4, #4]
 8010fcc:	e7ae      	b.n	8010f2c <_malloc_r+0x34>
 8010fce:	463c      	mov	r4, r7
 8010fd0:	687f      	ldr	r7, [r7, #4]
 8010fd2:	e7b6      	b.n	8010f42 <_malloc_r+0x4a>
 8010fd4:	461a      	mov	r2, r3
 8010fd6:	685b      	ldr	r3, [r3, #4]
 8010fd8:	42a3      	cmp	r3, r4
 8010fda:	d1fb      	bne.n	8010fd4 <_malloc_r+0xdc>
 8010fdc:	2300      	movs	r3, #0
 8010fde:	6053      	str	r3, [r2, #4]
 8010fe0:	e7de      	b.n	8010fa0 <_malloc_r+0xa8>
 8010fe2:	230c      	movs	r3, #12
 8010fe4:	4630      	mov	r0, r6
 8010fe6:	6033      	str	r3, [r6, #0]
 8010fe8:	f000 f80c 	bl	8011004 <__malloc_unlock>
 8010fec:	e794      	b.n	8010f18 <_malloc_r+0x20>
 8010fee:	6005      	str	r5, [r0, #0]
 8010ff0:	e7d6      	b.n	8010fa0 <_malloc_r+0xa8>
 8010ff2:	bf00      	nop
 8010ff4:	20005e18 	.word	0x20005e18

08010ff8 <__malloc_lock>:
 8010ff8:	4801      	ldr	r0, [pc, #4]	@ (8011000 <__malloc_lock+0x8>)
 8010ffa:	f7ff b89a 	b.w	8010132 <__retarget_lock_acquire_recursive>
 8010ffe:	bf00      	nop
 8011000:	20005e10 	.word	0x20005e10

08011004 <__malloc_unlock>:
 8011004:	4801      	ldr	r0, [pc, #4]	@ (801100c <__malloc_unlock+0x8>)
 8011006:	f7ff b895 	b.w	8010134 <__retarget_lock_release_recursive>
 801100a:	bf00      	nop
 801100c:	20005e10 	.word	0x20005e10

08011010 <_Balloc>:
 8011010:	b570      	push	{r4, r5, r6, lr}
 8011012:	69c6      	ldr	r6, [r0, #28]
 8011014:	4604      	mov	r4, r0
 8011016:	460d      	mov	r5, r1
 8011018:	b976      	cbnz	r6, 8011038 <_Balloc+0x28>
 801101a:	2010      	movs	r0, #16
 801101c:	f7ff ff42 	bl	8010ea4 <malloc>
 8011020:	4602      	mov	r2, r0
 8011022:	61e0      	str	r0, [r4, #28]
 8011024:	b920      	cbnz	r0, 8011030 <_Balloc+0x20>
 8011026:	4b18      	ldr	r3, [pc, #96]	@ (8011088 <_Balloc+0x78>)
 8011028:	216b      	movs	r1, #107	@ 0x6b
 801102a:	4818      	ldr	r0, [pc, #96]	@ (801108c <_Balloc+0x7c>)
 801102c:	f000 fda6 	bl	8011b7c <__assert_func>
 8011030:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011034:	6006      	str	r6, [r0, #0]
 8011036:	60c6      	str	r6, [r0, #12]
 8011038:	69e6      	ldr	r6, [r4, #28]
 801103a:	68f3      	ldr	r3, [r6, #12]
 801103c:	b183      	cbz	r3, 8011060 <_Balloc+0x50>
 801103e:	69e3      	ldr	r3, [r4, #28]
 8011040:	68db      	ldr	r3, [r3, #12]
 8011042:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011046:	b9b8      	cbnz	r0, 8011078 <_Balloc+0x68>
 8011048:	2101      	movs	r1, #1
 801104a:	4620      	mov	r0, r4
 801104c:	fa01 f605 	lsl.w	r6, r1, r5
 8011050:	1d72      	adds	r2, r6, #5
 8011052:	0092      	lsls	r2, r2, #2
 8011054:	f000 fdb0 	bl	8011bb8 <_calloc_r>
 8011058:	b160      	cbz	r0, 8011074 <_Balloc+0x64>
 801105a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801105e:	e00e      	b.n	801107e <_Balloc+0x6e>
 8011060:	2221      	movs	r2, #33	@ 0x21
 8011062:	2104      	movs	r1, #4
 8011064:	4620      	mov	r0, r4
 8011066:	f000 fda7 	bl	8011bb8 <_calloc_r>
 801106a:	69e3      	ldr	r3, [r4, #28]
 801106c:	60f0      	str	r0, [r6, #12]
 801106e:	68db      	ldr	r3, [r3, #12]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d1e4      	bne.n	801103e <_Balloc+0x2e>
 8011074:	2000      	movs	r0, #0
 8011076:	bd70      	pop	{r4, r5, r6, pc}
 8011078:	6802      	ldr	r2, [r0, #0]
 801107a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801107e:	2300      	movs	r3, #0
 8011080:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011084:	e7f7      	b.n	8011076 <_Balloc+0x66>
 8011086:	bf00      	nop
 8011088:	080125c5 	.word	0x080125c5
 801108c:	08012645 	.word	0x08012645

08011090 <_Bfree>:
 8011090:	b570      	push	{r4, r5, r6, lr}
 8011092:	69c6      	ldr	r6, [r0, #28]
 8011094:	4605      	mov	r5, r0
 8011096:	460c      	mov	r4, r1
 8011098:	b976      	cbnz	r6, 80110b8 <_Bfree+0x28>
 801109a:	2010      	movs	r0, #16
 801109c:	f7ff ff02 	bl	8010ea4 <malloc>
 80110a0:	4602      	mov	r2, r0
 80110a2:	61e8      	str	r0, [r5, #28]
 80110a4:	b920      	cbnz	r0, 80110b0 <_Bfree+0x20>
 80110a6:	4b09      	ldr	r3, [pc, #36]	@ (80110cc <_Bfree+0x3c>)
 80110a8:	218f      	movs	r1, #143	@ 0x8f
 80110aa:	4809      	ldr	r0, [pc, #36]	@ (80110d0 <_Bfree+0x40>)
 80110ac:	f000 fd66 	bl	8011b7c <__assert_func>
 80110b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80110b4:	6006      	str	r6, [r0, #0]
 80110b6:	60c6      	str	r6, [r0, #12]
 80110b8:	b13c      	cbz	r4, 80110ca <_Bfree+0x3a>
 80110ba:	69eb      	ldr	r3, [r5, #28]
 80110bc:	6862      	ldr	r2, [r4, #4]
 80110be:	68db      	ldr	r3, [r3, #12]
 80110c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80110c4:	6021      	str	r1, [r4, #0]
 80110c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80110ca:	bd70      	pop	{r4, r5, r6, pc}
 80110cc:	080125c5 	.word	0x080125c5
 80110d0:	08012645 	.word	0x08012645

080110d4 <__multadd>:
 80110d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110d8:	f101 0c14 	add.w	ip, r1, #20
 80110dc:	4607      	mov	r7, r0
 80110de:	460c      	mov	r4, r1
 80110e0:	461e      	mov	r6, r3
 80110e2:	690d      	ldr	r5, [r1, #16]
 80110e4:	2000      	movs	r0, #0
 80110e6:	f8dc 3000 	ldr.w	r3, [ip]
 80110ea:	3001      	adds	r0, #1
 80110ec:	b299      	uxth	r1, r3
 80110ee:	4285      	cmp	r5, r0
 80110f0:	fb02 6101 	mla	r1, r2, r1, r6
 80110f4:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80110f8:	ea4f 4311 	mov.w	r3, r1, lsr #16
 80110fc:	b289      	uxth	r1, r1
 80110fe:	fb02 3306 	mla	r3, r2, r6, r3
 8011102:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011106:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801110a:	f84c 1b04 	str.w	r1, [ip], #4
 801110e:	dcea      	bgt.n	80110e6 <__multadd+0x12>
 8011110:	b30e      	cbz	r6, 8011156 <__multadd+0x82>
 8011112:	68a3      	ldr	r3, [r4, #8]
 8011114:	42ab      	cmp	r3, r5
 8011116:	dc19      	bgt.n	801114c <__multadd+0x78>
 8011118:	6861      	ldr	r1, [r4, #4]
 801111a:	4638      	mov	r0, r7
 801111c:	3101      	adds	r1, #1
 801111e:	f7ff ff77 	bl	8011010 <_Balloc>
 8011122:	4680      	mov	r8, r0
 8011124:	b928      	cbnz	r0, 8011132 <__multadd+0x5e>
 8011126:	4602      	mov	r2, r0
 8011128:	4b0c      	ldr	r3, [pc, #48]	@ (801115c <__multadd+0x88>)
 801112a:	21ba      	movs	r1, #186	@ 0xba
 801112c:	480c      	ldr	r0, [pc, #48]	@ (8011160 <__multadd+0x8c>)
 801112e:	f000 fd25 	bl	8011b7c <__assert_func>
 8011132:	6922      	ldr	r2, [r4, #16]
 8011134:	f104 010c 	add.w	r1, r4, #12
 8011138:	300c      	adds	r0, #12
 801113a:	3202      	adds	r2, #2
 801113c:	0092      	lsls	r2, r2, #2
 801113e:	f7ff f808 	bl	8010152 <memcpy>
 8011142:	4621      	mov	r1, r4
 8011144:	4644      	mov	r4, r8
 8011146:	4638      	mov	r0, r7
 8011148:	f7ff ffa2 	bl	8011090 <_Bfree>
 801114c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011150:	3501      	adds	r5, #1
 8011152:	615e      	str	r6, [r3, #20]
 8011154:	6125      	str	r5, [r4, #16]
 8011156:	4620      	mov	r0, r4
 8011158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801115c:	08012634 	.word	0x08012634
 8011160:	08012645 	.word	0x08012645

08011164 <__hi0bits>:
 8011164:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011168:	4603      	mov	r3, r0
 801116a:	bf36      	itet	cc
 801116c:	0403      	lslcc	r3, r0, #16
 801116e:	2000      	movcs	r0, #0
 8011170:	2010      	movcc	r0, #16
 8011172:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011176:	bf3c      	itt	cc
 8011178:	021b      	lslcc	r3, r3, #8
 801117a:	3008      	addcc	r0, #8
 801117c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011180:	bf3c      	itt	cc
 8011182:	011b      	lslcc	r3, r3, #4
 8011184:	3004      	addcc	r0, #4
 8011186:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801118a:	bf3c      	itt	cc
 801118c:	009b      	lslcc	r3, r3, #2
 801118e:	3002      	addcc	r0, #2
 8011190:	2b00      	cmp	r3, #0
 8011192:	db05      	blt.n	80111a0 <__hi0bits+0x3c>
 8011194:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011198:	f100 0001 	add.w	r0, r0, #1
 801119c:	bf08      	it	eq
 801119e:	2020      	moveq	r0, #32
 80111a0:	4770      	bx	lr

080111a2 <__lo0bits>:
 80111a2:	6803      	ldr	r3, [r0, #0]
 80111a4:	4602      	mov	r2, r0
 80111a6:	f013 0007 	ands.w	r0, r3, #7
 80111aa:	d00b      	beq.n	80111c4 <__lo0bits+0x22>
 80111ac:	07d9      	lsls	r1, r3, #31
 80111ae:	d421      	bmi.n	80111f4 <__lo0bits+0x52>
 80111b0:	0798      	lsls	r0, r3, #30
 80111b2:	bf47      	ittee	mi
 80111b4:	085b      	lsrmi	r3, r3, #1
 80111b6:	2001      	movmi	r0, #1
 80111b8:	089b      	lsrpl	r3, r3, #2
 80111ba:	2002      	movpl	r0, #2
 80111bc:	bf4c      	ite	mi
 80111be:	6013      	strmi	r3, [r2, #0]
 80111c0:	6013      	strpl	r3, [r2, #0]
 80111c2:	4770      	bx	lr
 80111c4:	b299      	uxth	r1, r3
 80111c6:	b909      	cbnz	r1, 80111cc <__lo0bits+0x2a>
 80111c8:	0c1b      	lsrs	r3, r3, #16
 80111ca:	2010      	movs	r0, #16
 80111cc:	b2d9      	uxtb	r1, r3
 80111ce:	b909      	cbnz	r1, 80111d4 <__lo0bits+0x32>
 80111d0:	3008      	adds	r0, #8
 80111d2:	0a1b      	lsrs	r3, r3, #8
 80111d4:	0719      	lsls	r1, r3, #28
 80111d6:	bf04      	itt	eq
 80111d8:	091b      	lsreq	r3, r3, #4
 80111da:	3004      	addeq	r0, #4
 80111dc:	0799      	lsls	r1, r3, #30
 80111de:	bf04      	itt	eq
 80111e0:	089b      	lsreq	r3, r3, #2
 80111e2:	3002      	addeq	r0, #2
 80111e4:	07d9      	lsls	r1, r3, #31
 80111e6:	d403      	bmi.n	80111f0 <__lo0bits+0x4e>
 80111e8:	085b      	lsrs	r3, r3, #1
 80111ea:	f100 0001 	add.w	r0, r0, #1
 80111ee:	d003      	beq.n	80111f8 <__lo0bits+0x56>
 80111f0:	6013      	str	r3, [r2, #0]
 80111f2:	4770      	bx	lr
 80111f4:	2000      	movs	r0, #0
 80111f6:	4770      	bx	lr
 80111f8:	2020      	movs	r0, #32
 80111fa:	4770      	bx	lr

080111fc <__i2b>:
 80111fc:	b510      	push	{r4, lr}
 80111fe:	460c      	mov	r4, r1
 8011200:	2101      	movs	r1, #1
 8011202:	f7ff ff05 	bl	8011010 <_Balloc>
 8011206:	4602      	mov	r2, r0
 8011208:	b928      	cbnz	r0, 8011216 <__i2b+0x1a>
 801120a:	4b05      	ldr	r3, [pc, #20]	@ (8011220 <__i2b+0x24>)
 801120c:	f240 1145 	movw	r1, #325	@ 0x145
 8011210:	4804      	ldr	r0, [pc, #16]	@ (8011224 <__i2b+0x28>)
 8011212:	f000 fcb3 	bl	8011b7c <__assert_func>
 8011216:	2301      	movs	r3, #1
 8011218:	6144      	str	r4, [r0, #20]
 801121a:	6103      	str	r3, [r0, #16]
 801121c:	bd10      	pop	{r4, pc}
 801121e:	bf00      	nop
 8011220:	08012634 	.word	0x08012634
 8011224:	08012645 	.word	0x08012645

08011228 <__multiply>:
 8011228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801122c:	4614      	mov	r4, r2
 801122e:	690a      	ldr	r2, [r1, #16]
 8011230:	460f      	mov	r7, r1
 8011232:	b085      	sub	sp, #20
 8011234:	6923      	ldr	r3, [r4, #16]
 8011236:	429a      	cmp	r2, r3
 8011238:	bfa2      	ittt	ge
 801123a:	4623      	movge	r3, r4
 801123c:	460c      	movge	r4, r1
 801123e:	461f      	movge	r7, r3
 8011240:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011244:	68a3      	ldr	r3, [r4, #8]
 8011246:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801124a:	6861      	ldr	r1, [r4, #4]
 801124c:	eb0a 0609 	add.w	r6, sl, r9
 8011250:	42b3      	cmp	r3, r6
 8011252:	bfb8      	it	lt
 8011254:	3101      	addlt	r1, #1
 8011256:	f7ff fedb 	bl	8011010 <_Balloc>
 801125a:	b930      	cbnz	r0, 801126a <__multiply+0x42>
 801125c:	4602      	mov	r2, r0
 801125e:	4b45      	ldr	r3, [pc, #276]	@ (8011374 <__multiply+0x14c>)
 8011260:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011264:	4844      	ldr	r0, [pc, #272]	@ (8011378 <__multiply+0x150>)
 8011266:	f000 fc89 	bl	8011b7c <__assert_func>
 801126a:	f100 0514 	add.w	r5, r0, #20
 801126e:	2200      	movs	r2, #0
 8011270:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011274:	462b      	mov	r3, r5
 8011276:	4543      	cmp	r3, r8
 8011278:	d321      	bcc.n	80112be <__multiply+0x96>
 801127a:	f107 0114 	add.w	r1, r7, #20
 801127e:	f104 0214 	add.w	r2, r4, #20
 8011282:	f104 0715 	add.w	r7, r4, #21
 8011286:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801128a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801128e:	9302      	str	r3, [sp, #8]
 8011290:	1b13      	subs	r3, r2, r4
 8011292:	3b15      	subs	r3, #21
 8011294:	f023 0303 	bic.w	r3, r3, #3
 8011298:	3304      	adds	r3, #4
 801129a:	42ba      	cmp	r2, r7
 801129c:	bf38      	it	cc
 801129e:	2304      	movcc	r3, #4
 80112a0:	9301      	str	r3, [sp, #4]
 80112a2:	9b02      	ldr	r3, [sp, #8]
 80112a4:	9103      	str	r1, [sp, #12]
 80112a6:	428b      	cmp	r3, r1
 80112a8:	d80c      	bhi.n	80112c4 <__multiply+0x9c>
 80112aa:	2e00      	cmp	r6, #0
 80112ac:	dd03      	ble.n	80112b6 <__multiply+0x8e>
 80112ae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d05b      	beq.n	801136e <__multiply+0x146>
 80112b6:	6106      	str	r6, [r0, #16]
 80112b8:	b005      	add	sp, #20
 80112ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112be:	f843 2b04 	str.w	r2, [r3], #4
 80112c2:	e7d8      	b.n	8011276 <__multiply+0x4e>
 80112c4:	f8b1 a000 	ldrh.w	sl, [r1]
 80112c8:	f1ba 0f00 	cmp.w	sl, #0
 80112cc:	d024      	beq.n	8011318 <__multiply+0xf0>
 80112ce:	f104 0e14 	add.w	lr, r4, #20
 80112d2:	46a9      	mov	r9, r5
 80112d4:	f04f 0c00 	mov.w	ip, #0
 80112d8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80112dc:	f8d9 3000 	ldr.w	r3, [r9]
 80112e0:	fa1f fb87 	uxth.w	fp, r7
 80112e4:	4572      	cmp	r2, lr
 80112e6:	b29b      	uxth	r3, r3
 80112e8:	fb0a 330b 	mla	r3, sl, fp, r3
 80112ec:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80112f0:	f8d9 7000 	ldr.w	r7, [r9]
 80112f4:	4463      	add	r3, ip
 80112f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80112fa:	fb0a c70b 	mla	r7, sl, fp, ip
 80112fe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8011302:	b29b      	uxth	r3, r3
 8011304:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011308:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801130c:	f849 3b04 	str.w	r3, [r9], #4
 8011310:	d8e2      	bhi.n	80112d8 <__multiply+0xb0>
 8011312:	9b01      	ldr	r3, [sp, #4]
 8011314:	f845 c003 	str.w	ip, [r5, r3]
 8011318:	9b03      	ldr	r3, [sp, #12]
 801131a:	3104      	adds	r1, #4
 801131c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011320:	f1b9 0f00 	cmp.w	r9, #0
 8011324:	d021      	beq.n	801136a <__multiply+0x142>
 8011326:	682b      	ldr	r3, [r5, #0]
 8011328:	f104 0c14 	add.w	ip, r4, #20
 801132c:	46ae      	mov	lr, r5
 801132e:	f04f 0a00 	mov.w	sl, #0
 8011332:	f8bc b000 	ldrh.w	fp, [ip]
 8011336:	b29b      	uxth	r3, r3
 8011338:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801133c:	fb09 770b 	mla	r7, r9, fp, r7
 8011340:	4457      	add	r7, sl
 8011342:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011346:	f84e 3b04 	str.w	r3, [lr], #4
 801134a:	f85c 3b04 	ldr.w	r3, [ip], #4
 801134e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011352:	f8be 3000 	ldrh.w	r3, [lr]
 8011356:	4562      	cmp	r2, ip
 8011358:	fb09 330a 	mla	r3, r9, sl, r3
 801135c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011360:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011364:	d8e5      	bhi.n	8011332 <__multiply+0x10a>
 8011366:	9f01      	ldr	r7, [sp, #4]
 8011368:	51eb      	str	r3, [r5, r7]
 801136a:	3504      	adds	r5, #4
 801136c:	e799      	b.n	80112a2 <__multiply+0x7a>
 801136e:	3e01      	subs	r6, #1
 8011370:	e79b      	b.n	80112aa <__multiply+0x82>
 8011372:	bf00      	nop
 8011374:	08012634 	.word	0x08012634
 8011378:	08012645 	.word	0x08012645

0801137c <__pow5mult>:
 801137c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011380:	4615      	mov	r5, r2
 8011382:	f012 0203 	ands.w	r2, r2, #3
 8011386:	4607      	mov	r7, r0
 8011388:	460e      	mov	r6, r1
 801138a:	d007      	beq.n	801139c <__pow5mult+0x20>
 801138c:	3a01      	subs	r2, #1
 801138e:	4c25      	ldr	r4, [pc, #148]	@ (8011424 <__pow5mult+0xa8>)
 8011390:	2300      	movs	r3, #0
 8011392:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011396:	f7ff fe9d 	bl	80110d4 <__multadd>
 801139a:	4606      	mov	r6, r0
 801139c:	10ad      	asrs	r5, r5, #2
 801139e:	d03d      	beq.n	801141c <__pow5mult+0xa0>
 80113a0:	69fc      	ldr	r4, [r7, #28]
 80113a2:	b97c      	cbnz	r4, 80113c4 <__pow5mult+0x48>
 80113a4:	2010      	movs	r0, #16
 80113a6:	f7ff fd7d 	bl	8010ea4 <malloc>
 80113aa:	4602      	mov	r2, r0
 80113ac:	61f8      	str	r0, [r7, #28]
 80113ae:	b928      	cbnz	r0, 80113bc <__pow5mult+0x40>
 80113b0:	4b1d      	ldr	r3, [pc, #116]	@ (8011428 <__pow5mult+0xac>)
 80113b2:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80113b6:	481d      	ldr	r0, [pc, #116]	@ (801142c <__pow5mult+0xb0>)
 80113b8:	f000 fbe0 	bl	8011b7c <__assert_func>
 80113bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80113c0:	6004      	str	r4, [r0, #0]
 80113c2:	60c4      	str	r4, [r0, #12]
 80113c4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80113c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80113cc:	b94c      	cbnz	r4, 80113e2 <__pow5mult+0x66>
 80113ce:	f240 2171 	movw	r1, #625	@ 0x271
 80113d2:	4638      	mov	r0, r7
 80113d4:	f7ff ff12 	bl	80111fc <__i2b>
 80113d8:	2300      	movs	r3, #0
 80113da:	4604      	mov	r4, r0
 80113dc:	f8c8 0008 	str.w	r0, [r8, #8]
 80113e0:	6003      	str	r3, [r0, #0]
 80113e2:	f04f 0900 	mov.w	r9, #0
 80113e6:	07eb      	lsls	r3, r5, #31
 80113e8:	d50a      	bpl.n	8011400 <__pow5mult+0x84>
 80113ea:	4631      	mov	r1, r6
 80113ec:	4622      	mov	r2, r4
 80113ee:	4638      	mov	r0, r7
 80113f0:	f7ff ff1a 	bl	8011228 <__multiply>
 80113f4:	4680      	mov	r8, r0
 80113f6:	4631      	mov	r1, r6
 80113f8:	4638      	mov	r0, r7
 80113fa:	4646      	mov	r6, r8
 80113fc:	f7ff fe48 	bl	8011090 <_Bfree>
 8011400:	106d      	asrs	r5, r5, #1
 8011402:	d00b      	beq.n	801141c <__pow5mult+0xa0>
 8011404:	6820      	ldr	r0, [r4, #0]
 8011406:	b938      	cbnz	r0, 8011418 <__pow5mult+0x9c>
 8011408:	4622      	mov	r2, r4
 801140a:	4621      	mov	r1, r4
 801140c:	4638      	mov	r0, r7
 801140e:	f7ff ff0b 	bl	8011228 <__multiply>
 8011412:	6020      	str	r0, [r4, #0]
 8011414:	f8c0 9000 	str.w	r9, [r0]
 8011418:	4604      	mov	r4, r0
 801141a:	e7e4      	b.n	80113e6 <__pow5mult+0x6a>
 801141c:	4630      	mov	r0, r6
 801141e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011422:	bf00      	nop
 8011424:	080126a0 	.word	0x080126a0
 8011428:	080125c5 	.word	0x080125c5
 801142c:	08012645 	.word	0x08012645

08011430 <__lshift>:
 8011430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011434:	460c      	mov	r4, r1
 8011436:	4607      	mov	r7, r0
 8011438:	4691      	mov	r9, r2
 801143a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801143e:	6923      	ldr	r3, [r4, #16]
 8011440:	6849      	ldr	r1, [r1, #4]
 8011442:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011446:	68a3      	ldr	r3, [r4, #8]
 8011448:	f108 0601 	add.w	r6, r8, #1
 801144c:	42b3      	cmp	r3, r6
 801144e:	db0b      	blt.n	8011468 <__lshift+0x38>
 8011450:	4638      	mov	r0, r7
 8011452:	f7ff fddd 	bl	8011010 <_Balloc>
 8011456:	4605      	mov	r5, r0
 8011458:	b948      	cbnz	r0, 801146e <__lshift+0x3e>
 801145a:	4602      	mov	r2, r0
 801145c:	4b28      	ldr	r3, [pc, #160]	@ (8011500 <__lshift+0xd0>)
 801145e:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011462:	4828      	ldr	r0, [pc, #160]	@ (8011504 <__lshift+0xd4>)
 8011464:	f000 fb8a 	bl	8011b7c <__assert_func>
 8011468:	3101      	adds	r1, #1
 801146a:	005b      	lsls	r3, r3, #1
 801146c:	e7ee      	b.n	801144c <__lshift+0x1c>
 801146e:	2300      	movs	r3, #0
 8011470:	f100 0114 	add.w	r1, r0, #20
 8011474:	f100 0210 	add.w	r2, r0, #16
 8011478:	4618      	mov	r0, r3
 801147a:	4553      	cmp	r3, sl
 801147c:	db33      	blt.n	80114e6 <__lshift+0xb6>
 801147e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011482:	f104 0314 	add.w	r3, r4, #20
 8011486:	6920      	ldr	r0, [r4, #16]
 8011488:	f019 091f 	ands.w	r9, r9, #31
 801148c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011490:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011494:	d02b      	beq.n	80114ee <__lshift+0xbe>
 8011496:	f1c9 0e20 	rsb	lr, r9, #32
 801149a:	468a      	mov	sl, r1
 801149c:	2200      	movs	r2, #0
 801149e:	6818      	ldr	r0, [r3, #0]
 80114a0:	fa00 f009 	lsl.w	r0, r0, r9
 80114a4:	4310      	orrs	r0, r2
 80114a6:	f84a 0b04 	str.w	r0, [sl], #4
 80114aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80114ae:	459c      	cmp	ip, r3
 80114b0:	fa22 f20e 	lsr.w	r2, r2, lr
 80114b4:	d8f3      	bhi.n	801149e <__lshift+0x6e>
 80114b6:	ebac 0304 	sub.w	r3, ip, r4
 80114ba:	f104 0015 	add.w	r0, r4, #21
 80114be:	3b15      	subs	r3, #21
 80114c0:	f023 0303 	bic.w	r3, r3, #3
 80114c4:	3304      	adds	r3, #4
 80114c6:	4584      	cmp	ip, r0
 80114c8:	bf38      	it	cc
 80114ca:	2304      	movcc	r3, #4
 80114cc:	50ca      	str	r2, [r1, r3]
 80114ce:	b10a      	cbz	r2, 80114d4 <__lshift+0xa4>
 80114d0:	f108 0602 	add.w	r6, r8, #2
 80114d4:	3e01      	subs	r6, #1
 80114d6:	4638      	mov	r0, r7
 80114d8:	4621      	mov	r1, r4
 80114da:	612e      	str	r6, [r5, #16]
 80114dc:	f7ff fdd8 	bl	8011090 <_Bfree>
 80114e0:	4628      	mov	r0, r5
 80114e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114e6:	3301      	adds	r3, #1
 80114e8:	f842 0f04 	str.w	r0, [r2, #4]!
 80114ec:	e7c5      	b.n	801147a <__lshift+0x4a>
 80114ee:	3904      	subs	r1, #4
 80114f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80114f4:	459c      	cmp	ip, r3
 80114f6:	f841 2f04 	str.w	r2, [r1, #4]!
 80114fa:	d8f9      	bhi.n	80114f0 <__lshift+0xc0>
 80114fc:	e7ea      	b.n	80114d4 <__lshift+0xa4>
 80114fe:	bf00      	nop
 8011500:	08012634 	.word	0x08012634
 8011504:	08012645 	.word	0x08012645

08011508 <__mcmp>:
 8011508:	4603      	mov	r3, r0
 801150a:	690a      	ldr	r2, [r1, #16]
 801150c:	6900      	ldr	r0, [r0, #16]
 801150e:	1a80      	subs	r0, r0, r2
 8011510:	b530      	push	{r4, r5, lr}
 8011512:	d10e      	bne.n	8011532 <__mcmp+0x2a>
 8011514:	3314      	adds	r3, #20
 8011516:	3114      	adds	r1, #20
 8011518:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801151c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011520:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011524:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011528:	4295      	cmp	r5, r2
 801152a:	d003      	beq.n	8011534 <__mcmp+0x2c>
 801152c:	d205      	bcs.n	801153a <__mcmp+0x32>
 801152e:	f04f 30ff 	mov.w	r0, #4294967295
 8011532:	bd30      	pop	{r4, r5, pc}
 8011534:	42a3      	cmp	r3, r4
 8011536:	d3f3      	bcc.n	8011520 <__mcmp+0x18>
 8011538:	e7fb      	b.n	8011532 <__mcmp+0x2a>
 801153a:	2001      	movs	r0, #1
 801153c:	e7f9      	b.n	8011532 <__mcmp+0x2a>
	...

08011540 <__mdiff>:
 8011540:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011544:	4689      	mov	r9, r1
 8011546:	4606      	mov	r6, r0
 8011548:	4611      	mov	r1, r2
 801154a:	4614      	mov	r4, r2
 801154c:	4648      	mov	r0, r9
 801154e:	f7ff ffdb 	bl	8011508 <__mcmp>
 8011552:	1e05      	subs	r5, r0, #0
 8011554:	d112      	bne.n	801157c <__mdiff+0x3c>
 8011556:	4629      	mov	r1, r5
 8011558:	4630      	mov	r0, r6
 801155a:	f7ff fd59 	bl	8011010 <_Balloc>
 801155e:	4602      	mov	r2, r0
 8011560:	b928      	cbnz	r0, 801156e <__mdiff+0x2e>
 8011562:	4b41      	ldr	r3, [pc, #260]	@ (8011668 <__mdiff+0x128>)
 8011564:	f240 2137 	movw	r1, #567	@ 0x237
 8011568:	4840      	ldr	r0, [pc, #256]	@ (801166c <__mdiff+0x12c>)
 801156a:	f000 fb07 	bl	8011b7c <__assert_func>
 801156e:	2301      	movs	r3, #1
 8011570:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011574:	4610      	mov	r0, r2
 8011576:	b003      	add	sp, #12
 8011578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801157c:	bfbc      	itt	lt
 801157e:	464b      	movlt	r3, r9
 8011580:	46a1      	movlt	r9, r4
 8011582:	4630      	mov	r0, r6
 8011584:	bfb8      	it	lt
 8011586:	2501      	movlt	r5, #1
 8011588:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801158c:	bfb4      	ite	lt
 801158e:	461c      	movlt	r4, r3
 8011590:	2500      	movge	r5, #0
 8011592:	f7ff fd3d 	bl	8011010 <_Balloc>
 8011596:	4602      	mov	r2, r0
 8011598:	b918      	cbnz	r0, 80115a2 <__mdiff+0x62>
 801159a:	4b33      	ldr	r3, [pc, #204]	@ (8011668 <__mdiff+0x128>)
 801159c:	f240 2145 	movw	r1, #581	@ 0x245
 80115a0:	e7e2      	b.n	8011568 <__mdiff+0x28>
 80115a2:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80115a6:	f104 0e14 	add.w	lr, r4, #20
 80115aa:	6926      	ldr	r6, [r4, #16]
 80115ac:	f100 0b14 	add.w	fp, r0, #20
 80115b0:	60c5      	str	r5, [r0, #12]
 80115b2:	f109 0514 	add.w	r5, r9, #20
 80115b6:	f109 0310 	add.w	r3, r9, #16
 80115ba:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80115be:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80115c2:	46d9      	mov	r9, fp
 80115c4:	f04f 0c00 	mov.w	ip, #0
 80115c8:	9301      	str	r3, [sp, #4]
 80115ca:	9b01      	ldr	r3, [sp, #4]
 80115cc:	f85e 0b04 	ldr.w	r0, [lr], #4
 80115d0:	f853 af04 	ldr.w	sl, [r3, #4]!
 80115d4:	4576      	cmp	r6, lr
 80115d6:	9301      	str	r3, [sp, #4]
 80115d8:	fa1f f38a 	uxth.w	r3, sl
 80115dc:	4619      	mov	r1, r3
 80115de:	b283      	uxth	r3, r0
 80115e0:	ea4f 4010 	mov.w	r0, r0, lsr #16
 80115e4:	eba1 0303 	sub.w	r3, r1, r3
 80115e8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80115ec:	4463      	add	r3, ip
 80115ee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80115f2:	b29b      	uxth	r3, r3
 80115f4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80115f8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80115fc:	f849 3b04 	str.w	r3, [r9], #4
 8011600:	d8e3      	bhi.n	80115ca <__mdiff+0x8a>
 8011602:	1b33      	subs	r3, r6, r4
 8011604:	3415      	adds	r4, #21
 8011606:	3b15      	subs	r3, #21
 8011608:	f023 0303 	bic.w	r3, r3, #3
 801160c:	3304      	adds	r3, #4
 801160e:	42a6      	cmp	r6, r4
 8011610:	bf38      	it	cc
 8011612:	2304      	movcc	r3, #4
 8011614:	441d      	add	r5, r3
 8011616:	445b      	add	r3, fp
 8011618:	462c      	mov	r4, r5
 801161a:	461e      	mov	r6, r3
 801161c:	4544      	cmp	r4, r8
 801161e:	d30e      	bcc.n	801163e <__mdiff+0xfe>
 8011620:	f108 0103 	add.w	r1, r8, #3
 8011624:	1b49      	subs	r1, r1, r5
 8011626:	3d03      	subs	r5, #3
 8011628:	f021 0103 	bic.w	r1, r1, #3
 801162c:	45a8      	cmp	r8, r5
 801162e:	bf38      	it	cc
 8011630:	2100      	movcc	r1, #0
 8011632:	440b      	add	r3, r1
 8011634:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011638:	b199      	cbz	r1, 8011662 <__mdiff+0x122>
 801163a:	6117      	str	r7, [r2, #16]
 801163c:	e79a      	b.n	8011574 <__mdiff+0x34>
 801163e:	f854 1b04 	ldr.w	r1, [r4], #4
 8011642:	46e6      	mov	lr, ip
 8011644:	fa1f fc81 	uxth.w	ip, r1
 8011648:	0c08      	lsrs	r0, r1, #16
 801164a:	4471      	add	r1, lr
 801164c:	44f4      	add	ip, lr
 801164e:	b289      	uxth	r1, r1
 8011650:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011654:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011658:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801165c:	f846 1b04 	str.w	r1, [r6], #4
 8011660:	e7dc      	b.n	801161c <__mdiff+0xdc>
 8011662:	3f01      	subs	r7, #1
 8011664:	e7e6      	b.n	8011634 <__mdiff+0xf4>
 8011666:	bf00      	nop
 8011668:	08012634 	.word	0x08012634
 801166c:	08012645 	.word	0x08012645

08011670 <__d2b>:
 8011670:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011674:	460f      	mov	r7, r1
 8011676:	2101      	movs	r1, #1
 8011678:	4616      	mov	r6, r2
 801167a:	ec59 8b10 	vmov	r8, r9, d0
 801167e:	f7ff fcc7 	bl	8011010 <_Balloc>
 8011682:	4604      	mov	r4, r0
 8011684:	b930      	cbnz	r0, 8011694 <__d2b+0x24>
 8011686:	4602      	mov	r2, r0
 8011688:	4b23      	ldr	r3, [pc, #140]	@ (8011718 <__d2b+0xa8>)
 801168a:	f240 310f 	movw	r1, #783	@ 0x30f
 801168e:	4823      	ldr	r0, [pc, #140]	@ (801171c <__d2b+0xac>)
 8011690:	f000 fa74 	bl	8011b7c <__assert_func>
 8011694:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011698:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801169c:	b10d      	cbz	r5, 80116a2 <__d2b+0x32>
 801169e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80116a2:	9301      	str	r3, [sp, #4]
 80116a4:	f1b8 0300 	subs.w	r3, r8, #0
 80116a8:	d023      	beq.n	80116f2 <__d2b+0x82>
 80116aa:	4668      	mov	r0, sp
 80116ac:	9300      	str	r3, [sp, #0]
 80116ae:	f7ff fd78 	bl	80111a2 <__lo0bits>
 80116b2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80116b6:	b1d0      	cbz	r0, 80116ee <__d2b+0x7e>
 80116b8:	f1c0 0320 	rsb	r3, r0, #32
 80116bc:	fa02 f303 	lsl.w	r3, r2, r3
 80116c0:	40c2      	lsrs	r2, r0
 80116c2:	430b      	orrs	r3, r1
 80116c4:	9201      	str	r2, [sp, #4]
 80116c6:	6163      	str	r3, [r4, #20]
 80116c8:	9b01      	ldr	r3, [sp, #4]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	61a3      	str	r3, [r4, #24]
 80116ce:	bf0c      	ite	eq
 80116d0:	2201      	moveq	r2, #1
 80116d2:	2202      	movne	r2, #2
 80116d4:	6122      	str	r2, [r4, #16]
 80116d6:	b1a5      	cbz	r5, 8011702 <__d2b+0x92>
 80116d8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80116dc:	4405      	add	r5, r0
 80116de:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80116e2:	603d      	str	r5, [r7, #0]
 80116e4:	6030      	str	r0, [r6, #0]
 80116e6:	4620      	mov	r0, r4
 80116e8:	b003      	add	sp, #12
 80116ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80116ee:	6161      	str	r1, [r4, #20]
 80116f0:	e7ea      	b.n	80116c8 <__d2b+0x58>
 80116f2:	a801      	add	r0, sp, #4
 80116f4:	f7ff fd55 	bl	80111a2 <__lo0bits>
 80116f8:	9b01      	ldr	r3, [sp, #4]
 80116fa:	3020      	adds	r0, #32
 80116fc:	2201      	movs	r2, #1
 80116fe:	6163      	str	r3, [r4, #20]
 8011700:	e7e8      	b.n	80116d4 <__d2b+0x64>
 8011702:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011706:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801170a:	6038      	str	r0, [r7, #0]
 801170c:	6918      	ldr	r0, [r3, #16]
 801170e:	f7ff fd29 	bl	8011164 <__hi0bits>
 8011712:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011716:	e7e5      	b.n	80116e4 <__d2b+0x74>
 8011718:	08012634 	.word	0x08012634
 801171c:	08012645 	.word	0x08012645

08011720 <__ssputs_r>:
 8011720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011724:	461f      	mov	r7, r3
 8011726:	688e      	ldr	r6, [r1, #8]
 8011728:	4682      	mov	sl, r0
 801172a:	460c      	mov	r4, r1
 801172c:	42be      	cmp	r6, r7
 801172e:	4690      	mov	r8, r2
 8011730:	680b      	ldr	r3, [r1, #0]
 8011732:	d82d      	bhi.n	8011790 <__ssputs_r+0x70>
 8011734:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011738:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801173c:	d026      	beq.n	801178c <__ssputs_r+0x6c>
 801173e:	6965      	ldr	r5, [r4, #20]
 8011740:	6909      	ldr	r1, [r1, #16]
 8011742:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011746:	eba3 0901 	sub.w	r9, r3, r1
 801174a:	1c7b      	adds	r3, r7, #1
 801174c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011750:	444b      	add	r3, r9
 8011752:	106d      	asrs	r5, r5, #1
 8011754:	429d      	cmp	r5, r3
 8011756:	bf38      	it	cc
 8011758:	461d      	movcc	r5, r3
 801175a:	0553      	lsls	r3, r2, #21
 801175c:	d527      	bpl.n	80117ae <__ssputs_r+0x8e>
 801175e:	4629      	mov	r1, r5
 8011760:	f7ff fbca 	bl	8010ef8 <_malloc_r>
 8011764:	4606      	mov	r6, r0
 8011766:	b360      	cbz	r0, 80117c2 <__ssputs_r+0xa2>
 8011768:	464a      	mov	r2, r9
 801176a:	6921      	ldr	r1, [r4, #16]
 801176c:	f7fe fcf1 	bl	8010152 <memcpy>
 8011770:	89a3      	ldrh	r3, [r4, #12]
 8011772:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011776:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801177a:	81a3      	strh	r3, [r4, #12]
 801177c:	6126      	str	r6, [r4, #16]
 801177e:	444e      	add	r6, r9
 8011780:	6165      	str	r5, [r4, #20]
 8011782:	eba5 0509 	sub.w	r5, r5, r9
 8011786:	6026      	str	r6, [r4, #0]
 8011788:	463e      	mov	r6, r7
 801178a:	60a5      	str	r5, [r4, #8]
 801178c:	42be      	cmp	r6, r7
 801178e:	d900      	bls.n	8011792 <__ssputs_r+0x72>
 8011790:	463e      	mov	r6, r7
 8011792:	4632      	mov	r2, r6
 8011794:	4641      	mov	r1, r8
 8011796:	6820      	ldr	r0, [r4, #0]
 8011798:	f000 f9c6 	bl	8011b28 <memmove>
 801179c:	68a3      	ldr	r3, [r4, #8]
 801179e:	2000      	movs	r0, #0
 80117a0:	1b9b      	subs	r3, r3, r6
 80117a2:	60a3      	str	r3, [r4, #8]
 80117a4:	6823      	ldr	r3, [r4, #0]
 80117a6:	4433      	add	r3, r6
 80117a8:	6023      	str	r3, [r4, #0]
 80117aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117ae:	462a      	mov	r2, r5
 80117b0:	f000 fa28 	bl	8011c04 <_realloc_r>
 80117b4:	4606      	mov	r6, r0
 80117b6:	2800      	cmp	r0, #0
 80117b8:	d1e0      	bne.n	801177c <__ssputs_r+0x5c>
 80117ba:	6921      	ldr	r1, [r4, #16]
 80117bc:	4650      	mov	r0, sl
 80117be:	f7ff fb27 	bl	8010e10 <_free_r>
 80117c2:	230c      	movs	r3, #12
 80117c4:	f04f 30ff 	mov.w	r0, #4294967295
 80117c8:	f8ca 3000 	str.w	r3, [sl]
 80117cc:	89a3      	ldrh	r3, [r4, #12]
 80117ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80117d2:	81a3      	strh	r3, [r4, #12]
 80117d4:	e7e9      	b.n	80117aa <__ssputs_r+0x8a>
	...

080117d8 <_svfiprintf_r>:
 80117d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117dc:	4698      	mov	r8, r3
 80117de:	898b      	ldrh	r3, [r1, #12]
 80117e0:	b09d      	sub	sp, #116	@ 0x74
 80117e2:	4607      	mov	r7, r0
 80117e4:	061b      	lsls	r3, r3, #24
 80117e6:	460d      	mov	r5, r1
 80117e8:	4614      	mov	r4, r2
 80117ea:	d510      	bpl.n	801180e <_svfiprintf_r+0x36>
 80117ec:	690b      	ldr	r3, [r1, #16]
 80117ee:	b973      	cbnz	r3, 801180e <_svfiprintf_r+0x36>
 80117f0:	2140      	movs	r1, #64	@ 0x40
 80117f2:	f7ff fb81 	bl	8010ef8 <_malloc_r>
 80117f6:	6028      	str	r0, [r5, #0]
 80117f8:	6128      	str	r0, [r5, #16]
 80117fa:	b930      	cbnz	r0, 801180a <_svfiprintf_r+0x32>
 80117fc:	230c      	movs	r3, #12
 80117fe:	603b      	str	r3, [r7, #0]
 8011800:	f04f 30ff 	mov.w	r0, #4294967295
 8011804:	b01d      	add	sp, #116	@ 0x74
 8011806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801180a:	2340      	movs	r3, #64	@ 0x40
 801180c:	616b      	str	r3, [r5, #20]
 801180e:	2300      	movs	r3, #0
 8011810:	f8cd 800c 	str.w	r8, [sp, #12]
 8011814:	f04f 0901 	mov.w	r9, #1
 8011818:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 80119bc <_svfiprintf_r+0x1e4>
 801181c:	9309      	str	r3, [sp, #36]	@ 0x24
 801181e:	2320      	movs	r3, #32
 8011820:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011824:	2330      	movs	r3, #48	@ 0x30
 8011826:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801182a:	4623      	mov	r3, r4
 801182c:	469a      	mov	sl, r3
 801182e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011832:	b10a      	cbz	r2, 8011838 <_svfiprintf_r+0x60>
 8011834:	2a25      	cmp	r2, #37	@ 0x25
 8011836:	d1f9      	bne.n	801182c <_svfiprintf_r+0x54>
 8011838:	ebba 0b04 	subs.w	fp, sl, r4
 801183c:	d00b      	beq.n	8011856 <_svfiprintf_r+0x7e>
 801183e:	465b      	mov	r3, fp
 8011840:	4622      	mov	r2, r4
 8011842:	4629      	mov	r1, r5
 8011844:	4638      	mov	r0, r7
 8011846:	f7ff ff6b 	bl	8011720 <__ssputs_r>
 801184a:	3001      	adds	r0, #1
 801184c:	f000 80a7 	beq.w	801199e <_svfiprintf_r+0x1c6>
 8011850:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011852:	445a      	add	r2, fp
 8011854:	9209      	str	r2, [sp, #36]	@ 0x24
 8011856:	f89a 3000 	ldrb.w	r3, [sl]
 801185a:	2b00      	cmp	r3, #0
 801185c:	f000 809f 	beq.w	801199e <_svfiprintf_r+0x1c6>
 8011860:	2300      	movs	r3, #0
 8011862:	f04f 32ff 	mov.w	r2, #4294967295
 8011866:	f10a 0a01 	add.w	sl, sl, #1
 801186a:	9304      	str	r3, [sp, #16]
 801186c:	9307      	str	r3, [sp, #28]
 801186e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011872:	931a      	str	r3, [sp, #104]	@ 0x68
 8011874:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011878:	4654      	mov	r4, sl
 801187a:	2205      	movs	r2, #5
 801187c:	484f      	ldr	r0, [pc, #316]	@ (80119bc <_svfiprintf_r+0x1e4>)
 801187e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011882:	f7fe fc58 	bl	8010136 <memchr>
 8011886:	9a04      	ldr	r2, [sp, #16]
 8011888:	b9d8      	cbnz	r0, 80118c2 <_svfiprintf_r+0xea>
 801188a:	06d0      	lsls	r0, r2, #27
 801188c:	bf44      	itt	mi
 801188e:	2320      	movmi	r3, #32
 8011890:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011894:	0711      	lsls	r1, r2, #28
 8011896:	bf44      	itt	mi
 8011898:	232b      	movmi	r3, #43	@ 0x2b
 801189a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801189e:	f89a 3000 	ldrb.w	r3, [sl]
 80118a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80118a4:	d015      	beq.n	80118d2 <_svfiprintf_r+0xfa>
 80118a6:	9a07      	ldr	r2, [sp, #28]
 80118a8:	4654      	mov	r4, sl
 80118aa:	2000      	movs	r0, #0
 80118ac:	f04f 0c0a 	mov.w	ip, #10
 80118b0:	4621      	mov	r1, r4
 80118b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80118b6:	3b30      	subs	r3, #48	@ 0x30
 80118b8:	2b09      	cmp	r3, #9
 80118ba:	d94b      	bls.n	8011954 <_svfiprintf_r+0x17c>
 80118bc:	b1b0      	cbz	r0, 80118ec <_svfiprintf_r+0x114>
 80118be:	9207      	str	r2, [sp, #28]
 80118c0:	e014      	b.n	80118ec <_svfiprintf_r+0x114>
 80118c2:	eba0 0308 	sub.w	r3, r0, r8
 80118c6:	46a2      	mov	sl, r4
 80118c8:	fa09 f303 	lsl.w	r3, r9, r3
 80118cc:	4313      	orrs	r3, r2
 80118ce:	9304      	str	r3, [sp, #16]
 80118d0:	e7d2      	b.n	8011878 <_svfiprintf_r+0xa0>
 80118d2:	9b03      	ldr	r3, [sp, #12]
 80118d4:	1d19      	adds	r1, r3, #4
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	2b00      	cmp	r3, #0
 80118da:	9103      	str	r1, [sp, #12]
 80118dc:	bfbb      	ittet	lt
 80118de:	425b      	neglt	r3, r3
 80118e0:	f042 0202 	orrlt.w	r2, r2, #2
 80118e4:	9307      	strge	r3, [sp, #28]
 80118e6:	9307      	strlt	r3, [sp, #28]
 80118e8:	bfb8      	it	lt
 80118ea:	9204      	strlt	r2, [sp, #16]
 80118ec:	7823      	ldrb	r3, [r4, #0]
 80118ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80118f0:	d10a      	bne.n	8011908 <_svfiprintf_r+0x130>
 80118f2:	7863      	ldrb	r3, [r4, #1]
 80118f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80118f6:	d132      	bne.n	801195e <_svfiprintf_r+0x186>
 80118f8:	9b03      	ldr	r3, [sp, #12]
 80118fa:	3402      	adds	r4, #2
 80118fc:	1d1a      	adds	r2, r3, #4
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011904:	9203      	str	r2, [sp, #12]
 8011906:	9305      	str	r3, [sp, #20]
 8011908:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80119cc <_svfiprintf_r+0x1f4>
 801190c:	2203      	movs	r2, #3
 801190e:	7821      	ldrb	r1, [r4, #0]
 8011910:	4650      	mov	r0, sl
 8011912:	f7fe fc10 	bl	8010136 <memchr>
 8011916:	b138      	cbz	r0, 8011928 <_svfiprintf_r+0x150>
 8011918:	eba0 000a 	sub.w	r0, r0, sl
 801191c:	2240      	movs	r2, #64	@ 0x40
 801191e:	9b04      	ldr	r3, [sp, #16]
 8011920:	3401      	adds	r4, #1
 8011922:	4082      	lsls	r2, r0
 8011924:	4313      	orrs	r3, r2
 8011926:	9304      	str	r3, [sp, #16]
 8011928:	f814 1b01 	ldrb.w	r1, [r4], #1
 801192c:	2206      	movs	r2, #6
 801192e:	4824      	ldr	r0, [pc, #144]	@ (80119c0 <_svfiprintf_r+0x1e8>)
 8011930:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011934:	f7fe fbff 	bl	8010136 <memchr>
 8011938:	2800      	cmp	r0, #0
 801193a:	d036      	beq.n	80119aa <_svfiprintf_r+0x1d2>
 801193c:	4b21      	ldr	r3, [pc, #132]	@ (80119c4 <_svfiprintf_r+0x1ec>)
 801193e:	bb1b      	cbnz	r3, 8011988 <_svfiprintf_r+0x1b0>
 8011940:	9b03      	ldr	r3, [sp, #12]
 8011942:	3307      	adds	r3, #7
 8011944:	f023 0307 	bic.w	r3, r3, #7
 8011948:	3308      	adds	r3, #8
 801194a:	9303      	str	r3, [sp, #12]
 801194c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801194e:	4433      	add	r3, r6
 8011950:	9309      	str	r3, [sp, #36]	@ 0x24
 8011952:	e76a      	b.n	801182a <_svfiprintf_r+0x52>
 8011954:	fb0c 3202 	mla	r2, ip, r2, r3
 8011958:	460c      	mov	r4, r1
 801195a:	2001      	movs	r0, #1
 801195c:	e7a8      	b.n	80118b0 <_svfiprintf_r+0xd8>
 801195e:	2300      	movs	r3, #0
 8011960:	3401      	adds	r4, #1
 8011962:	f04f 0c0a 	mov.w	ip, #10
 8011966:	4619      	mov	r1, r3
 8011968:	9305      	str	r3, [sp, #20]
 801196a:	4620      	mov	r0, r4
 801196c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011970:	3a30      	subs	r2, #48	@ 0x30
 8011972:	2a09      	cmp	r2, #9
 8011974:	d903      	bls.n	801197e <_svfiprintf_r+0x1a6>
 8011976:	2b00      	cmp	r3, #0
 8011978:	d0c6      	beq.n	8011908 <_svfiprintf_r+0x130>
 801197a:	9105      	str	r1, [sp, #20]
 801197c:	e7c4      	b.n	8011908 <_svfiprintf_r+0x130>
 801197e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011982:	4604      	mov	r4, r0
 8011984:	2301      	movs	r3, #1
 8011986:	e7f0      	b.n	801196a <_svfiprintf_r+0x192>
 8011988:	ab03      	add	r3, sp, #12
 801198a:	462a      	mov	r2, r5
 801198c:	a904      	add	r1, sp, #16
 801198e:	4638      	mov	r0, r7
 8011990:	9300      	str	r3, [sp, #0]
 8011992:	4b0d      	ldr	r3, [pc, #52]	@ (80119c8 <_svfiprintf_r+0x1f0>)
 8011994:	f7fd fe6e 	bl	800f674 <_printf_float>
 8011998:	1c42      	adds	r2, r0, #1
 801199a:	4606      	mov	r6, r0
 801199c:	d1d6      	bne.n	801194c <_svfiprintf_r+0x174>
 801199e:	89ab      	ldrh	r3, [r5, #12]
 80119a0:	065b      	lsls	r3, r3, #25
 80119a2:	f53f af2d 	bmi.w	8011800 <_svfiprintf_r+0x28>
 80119a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80119a8:	e72c      	b.n	8011804 <_svfiprintf_r+0x2c>
 80119aa:	ab03      	add	r3, sp, #12
 80119ac:	462a      	mov	r2, r5
 80119ae:	a904      	add	r1, sp, #16
 80119b0:	4638      	mov	r0, r7
 80119b2:	9300      	str	r3, [sp, #0]
 80119b4:	4b04      	ldr	r3, [pc, #16]	@ (80119c8 <_svfiprintf_r+0x1f0>)
 80119b6:	f7fe f8f9 	bl	800fbac <_printf_i>
 80119ba:	e7ed      	b.n	8011998 <_svfiprintf_r+0x1c0>
 80119bc:	080127a0 	.word	0x080127a0
 80119c0:	080127aa 	.word	0x080127aa
 80119c4:	0800f675 	.word	0x0800f675
 80119c8:	08011721 	.word	0x08011721
 80119cc:	080127a6 	.word	0x080127a6

080119d0 <__sflush_r>:
 80119d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80119d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119d8:	0716      	lsls	r6, r2, #28
 80119da:	4605      	mov	r5, r0
 80119dc:	460c      	mov	r4, r1
 80119de:	d454      	bmi.n	8011a8a <__sflush_r+0xba>
 80119e0:	684b      	ldr	r3, [r1, #4]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	dc02      	bgt.n	80119ec <__sflush_r+0x1c>
 80119e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	dd48      	ble.n	8011a7e <__sflush_r+0xae>
 80119ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80119ee:	2e00      	cmp	r6, #0
 80119f0:	d045      	beq.n	8011a7e <__sflush_r+0xae>
 80119f2:	2300      	movs	r3, #0
 80119f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80119f8:	682f      	ldr	r7, [r5, #0]
 80119fa:	6a21      	ldr	r1, [r4, #32]
 80119fc:	602b      	str	r3, [r5, #0]
 80119fe:	d030      	beq.n	8011a62 <__sflush_r+0x92>
 8011a00:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011a02:	89a3      	ldrh	r3, [r4, #12]
 8011a04:	0759      	lsls	r1, r3, #29
 8011a06:	d505      	bpl.n	8011a14 <__sflush_r+0x44>
 8011a08:	6863      	ldr	r3, [r4, #4]
 8011a0a:	1ad2      	subs	r2, r2, r3
 8011a0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011a0e:	b10b      	cbz	r3, 8011a14 <__sflush_r+0x44>
 8011a10:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011a12:	1ad2      	subs	r2, r2, r3
 8011a14:	2300      	movs	r3, #0
 8011a16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011a18:	6a21      	ldr	r1, [r4, #32]
 8011a1a:	4628      	mov	r0, r5
 8011a1c:	47b0      	blx	r6
 8011a1e:	1c43      	adds	r3, r0, #1
 8011a20:	89a3      	ldrh	r3, [r4, #12]
 8011a22:	d106      	bne.n	8011a32 <__sflush_r+0x62>
 8011a24:	6829      	ldr	r1, [r5, #0]
 8011a26:	291d      	cmp	r1, #29
 8011a28:	d82b      	bhi.n	8011a82 <__sflush_r+0xb2>
 8011a2a:	4a2a      	ldr	r2, [pc, #168]	@ (8011ad4 <__sflush_r+0x104>)
 8011a2c:	410a      	asrs	r2, r1
 8011a2e:	07d6      	lsls	r6, r2, #31
 8011a30:	d427      	bmi.n	8011a82 <__sflush_r+0xb2>
 8011a32:	2200      	movs	r2, #0
 8011a34:	04d9      	lsls	r1, r3, #19
 8011a36:	6062      	str	r2, [r4, #4]
 8011a38:	6922      	ldr	r2, [r4, #16]
 8011a3a:	6022      	str	r2, [r4, #0]
 8011a3c:	d504      	bpl.n	8011a48 <__sflush_r+0x78>
 8011a3e:	1c42      	adds	r2, r0, #1
 8011a40:	d101      	bne.n	8011a46 <__sflush_r+0x76>
 8011a42:	682b      	ldr	r3, [r5, #0]
 8011a44:	b903      	cbnz	r3, 8011a48 <__sflush_r+0x78>
 8011a46:	6560      	str	r0, [r4, #84]	@ 0x54
 8011a48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011a4a:	602f      	str	r7, [r5, #0]
 8011a4c:	b1b9      	cbz	r1, 8011a7e <__sflush_r+0xae>
 8011a4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011a52:	4299      	cmp	r1, r3
 8011a54:	d002      	beq.n	8011a5c <__sflush_r+0x8c>
 8011a56:	4628      	mov	r0, r5
 8011a58:	f7ff f9da 	bl	8010e10 <_free_r>
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	6363      	str	r3, [r4, #52]	@ 0x34
 8011a60:	e00d      	b.n	8011a7e <__sflush_r+0xae>
 8011a62:	2301      	movs	r3, #1
 8011a64:	4628      	mov	r0, r5
 8011a66:	47b0      	blx	r6
 8011a68:	4602      	mov	r2, r0
 8011a6a:	1c50      	adds	r0, r2, #1
 8011a6c:	d1c9      	bne.n	8011a02 <__sflush_r+0x32>
 8011a6e:	682b      	ldr	r3, [r5, #0]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d0c6      	beq.n	8011a02 <__sflush_r+0x32>
 8011a74:	2b1d      	cmp	r3, #29
 8011a76:	d001      	beq.n	8011a7c <__sflush_r+0xac>
 8011a78:	2b16      	cmp	r3, #22
 8011a7a:	d11d      	bne.n	8011ab8 <__sflush_r+0xe8>
 8011a7c:	602f      	str	r7, [r5, #0]
 8011a7e:	2000      	movs	r0, #0
 8011a80:	e021      	b.n	8011ac6 <__sflush_r+0xf6>
 8011a82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011a86:	b21b      	sxth	r3, r3
 8011a88:	e01a      	b.n	8011ac0 <__sflush_r+0xf0>
 8011a8a:	690f      	ldr	r7, [r1, #16]
 8011a8c:	2f00      	cmp	r7, #0
 8011a8e:	d0f6      	beq.n	8011a7e <__sflush_r+0xae>
 8011a90:	0793      	lsls	r3, r2, #30
 8011a92:	680e      	ldr	r6, [r1, #0]
 8011a94:	600f      	str	r7, [r1, #0]
 8011a96:	bf0c      	ite	eq
 8011a98:	694b      	ldreq	r3, [r1, #20]
 8011a9a:	2300      	movne	r3, #0
 8011a9c:	eba6 0807 	sub.w	r8, r6, r7
 8011aa0:	608b      	str	r3, [r1, #8]
 8011aa2:	f1b8 0f00 	cmp.w	r8, #0
 8011aa6:	ddea      	ble.n	8011a7e <__sflush_r+0xae>
 8011aa8:	4643      	mov	r3, r8
 8011aaa:	463a      	mov	r2, r7
 8011aac:	6a21      	ldr	r1, [r4, #32]
 8011aae:	4628      	mov	r0, r5
 8011ab0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011ab2:	47b0      	blx	r6
 8011ab4:	2800      	cmp	r0, #0
 8011ab6:	dc08      	bgt.n	8011aca <__sflush_r+0xfa>
 8011ab8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011abc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8011ac4:	81a3      	strh	r3, [r4, #12]
 8011ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011aca:	4407      	add	r7, r0
 8011acc:	eba8 0800 	sub.w	r8, r8, r0
 8011ad0:	e7e7      	b.n	8011aa2 <__sflush_r+0xd2>
 8011ad2:	bf00      	nop
 8011ad4:	dfbffffe 	.word	0xdfbffffe

08011ad8 <_fflush_r>:
 8011ad8:	b538      	push	{r3, r4, r5, lr}
 8011ada:	690b      	ldr	r3, [r1, #16]
 8011adc:	4605      	mov	r5, r0
 8011ade:	460c      	mov	r4, r1
 8011ae0:	b913      	cbnz	r3, 8011ae8 <_fflush_r+0x10>
 8011ae2:	2500      	movs	r5, #0
 8011ae4:	4628      	mov	r0, r5
 8011ae6:	bd38      	pop	{r3, r4, r5, pc}
 8011ae8:	b118      	cbz	r0, 8011af2 <_fflush_r+0x1a>
 8011aea:	6a03      	ldr	r3, [r0, #32]
 8011aec:	b90b      	cbnz	r3, 8011af2 <_fflush_r+0x1a>
 8011aee:	f7fe fa09 	bl	800ff04 <__sinit>
 8011af2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d0f3      	beq.n	8011ae2 <_fflush_r+0xa>
 8011afa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011afc:	07d0      	lsls	r0, r2, #31
 8011afe:	d404      	bmi.n	8011b0a <_fflush_r+0x32>
 8011b00:	0599      	lsls	r1, r3, #22
 8011b02:	d402      	bmi.n	8011b0a <_fflush_r+0x32>
 8011b04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011b06:	f7fe fb14 	bl	8010132 <__retarget_lock_acquire_recursive>
 8011b0a:	4628      	mov	r0, r5
 8011b0c:	4621      	mov	r1, r4
 8011b0e:	f7ff ff5f 	bl	80119d0 <__sflush_r>
 8011b12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011b14:	4605      	mov	r5, r0
 8011b16:	07da      	lsls	r2, r3, #31
 8011b18:	d4e4      	bmi.n	8011ae4 <_fflush_r+0xc>
 8011b1a:	89a3      	ldrh	r3, [r4, #12]
 8011b1c:	059b      	lsls	r3, r3, #22
 8011b1e:	d4e1      	bmi.n	8011ae4 <_fflush_r+0xc>
 8011b20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011b22:	f7fe fb07 	bl	8010134 <__retarget_lock_release_recursive>
 8011b26:	e7dd      	b.n	8011ae4 <_fflush_r+0xc>

08011b28 <memmove>:
 8011b28:	4288      	cmp	r0, r1
 8011b2a:	b510      	push	{r4, lr}
 8011b2c:	eb01 0402 	add.w	r4, r1, r2
 8011b30:	d902      	bls.n	8011b38 <memmove+0x10>
 8011b32:	4284      	cmp	r4, r0
 8011b34:	4623      	mov	r3, r4
 8011b36:	d807      	bhi.n	8011b48 <memmove+0x20>
 8011b38:	1e43      	subs	r3, r0, #1
 8011b3a:	42a1      	cmp	r1, r4
 8011b3c:	d008      	beq.n	8011b50 <memmove+0x28>
 8011b3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011b42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011b46:	e7f8      	b.n	8011b3a <memmove+0x12>
 8011b48:	4402      	add	r2, r0
 8011b4a:	4601      	mov	r1, r0
 8011b4c:	428a      	cmp	r2, r1
 8011b4e:	d100      	bne.n	8011b52 <memmove+0x2a>
 8011b50:	bd10      	pop	{r4, pc}
 8011b52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011b56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011b5a:	e7f7      	b.n	8011b4c <memmove+0x24>

08011b5c <_sbrk_r>:
 8011b5c:	b538      	push	{r3, r4, r5, lr}
 8011b5e:	2300      	movs	r3, #0
 8011b60:	4d05      	ldr	r5, [pc, #20]	@ (8011b78 <_sbrk_r+0x1c>)
 8011b62:	4604      	mov	r4, r0
 8011b64:	4608      	mov	r0, r1
 8011b66:	602b      	str	r3, [r5, #0]
 8011b68:	f7f2 fde8 	bl	800473c <_sbrk>
 8011b6c:	1c43      	adds	r3, r0, #1
 8011b6e:	d102      	bne.n	8011b76 <_sbrk_r+0x1a>
 8011b70:	682b      	ldr	r3, [r5, #0]
 8011b72:	b103      	cbz	r3, 8011b76 <_sbrk_r+0x1a>
 8011b74:	6023      	str	r3, [r4, #0]
 8011b76:	bd38      	pop	{r3, r4, r5, pc}
 8011b78:	20005e0c 	.word	0x20005e0c

08011b7c <__assert_func>:
 8011b7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011b7e:	4614      	mov	r4, r2
 8011b80:	461a      	mov	r2, r3
 8011b82:	4b09      	ldr	r3, [pc, #36]	@ (8011ba8 <__assert_func+0x2c>)
 8011b84:	4605      	mov	r5, r0
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	68d8      	ldr	r0, [r3, #12]
 8011b8a:	b954      	cbnz	r4, 8011ba2 <__assert_func+0x26>
 8011b8c:	4b07      	ldr	r3, [pc, #28]	@ (8011bac <__assert_func+0x30>)
 8011b8e:	461c      	mov	r4, r3
 8011b90:	9100      	str	r1, [sp, #0]
 8011b92:	4907      	ldr	r1, [pc, #28]	@ (8011bb0 <__assert_func+0x34>)
 8011b94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011b98:	462b      	mov	r3, r5
 8011b9a:	f000 f86f 	bl	8011c7c <fiprintf>
 8011b9e:	f000 f87f 	bl	8011ca0 <abort>
 8011ba2:	4b04      	ldr	r3, [pc, #16]	@ (8011bb4 <__assert_func+0x38>)
 8011ba4:	e7f4      	b.n	8011b90 <__assert_func+0x14>
 8011ba6:	bf00      	nop
 8011ba8:	20000034 	.word	0x20000034
 8011bac:	080127f6 	.word	0x080127f6
 8011bb0:	080127c8 	.word	0x080127c8
 8011bb4:	080127bb 	.word	0x080127bb

08011bb8 <_calloc_r>:
 8011bb8:	b570      	push	{r4, r5, r6, lr}
 8011bba:	fba1 5402 	umull	r5, r4, r1, r2
 8011bbe:	b93c      	cbnz	r4, 8011bd0 <_calloc_r+0x18>
 8011bc0:	4629      	mov	r1, r5
 8011bc2:	f7ff f999 	bl	8010ef8 <_malloc_r>
 8011bc6:	4606      	mov	r6, r0
 8011bc8:	b928      	cbnz	r0, 8011bd6 <_calloc_r+0x1e>
 8011bca:	2600      	movs	r6, #0
 8011bcc:	4630      	mov	r0, r6
 8011bce:	bd70      	pop	{r4, r5, r6, pc}
 8011bd0:	220c      	movs	r2, #12
 8011bd2:	6002      	str	r2, [r0, #0]
 8011bd4:	e7f9      	b.n	8011bca <_calloc_r+0x12>
 8011bd6:	462a      	mov	r2, r5
 8011bd8:	4621      	mov	r1, r4
 8011bda:	f7fe fa2c 	bl	8010036 <memset>
 8011bde:	e7f5      	b.n	8011bcc <_calloc_r+0x14>

08011be0 <__ascii_mbtowc>:
 8011be0:	b082      	sub	sp, #8
 8011be2:	b901      	cbnz	r1, 8011be6 <__ascii_mbtowc+0x6>
 8011be4:	a901      	add	r1, sp, #4
 8011be6:	b142      	cbz	r2, 8011bfa <__ascii_mbtowc+0x1a>
 8011be8:	b14b      	cbz	r3, 8011bfe <__ascii_mbtowc+0x1e>
 8011bea:	7813      	ldrb	r3, [r2, #0]
 8011bec:	600b      	str	r3, [r1, #0]
 8011bee:	7812      	ldrb	r2, [r2, #0]
 8011bf0:	1e10      	subs	r0, r2, #0
 8011bf2:	bf18      	it	ne
 8011bf4:	2001      	movne	r0, #1
 8011bf6:	b002      	add	sp, #8
 8011bf8:	4770      	bx	lr
 8011bfa:	4610      	mov	r0, r2
 8011bfc:	e7fb      	b.n	8011bf6 <__ascii_mbtowc+0x16>
 8011bfe:	f06f 0001 	mvn.w	r0, #1
 8011c02:	e7f8      	b.n	8011bf6 <__ascii_mbtowc+0x16>

08011c04 <_realloc_r>:
 8011c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c08:	4680      	mov	r8, r0
 8011c0a:	4615      	mov	r5, r2
 8011c0c:	460c      	mov	r4, r1
 8011c0e:	b921      	cbnz	r1, 8011c1a <_realloc_r+0x16>
 8011c10:	4611      	mov	r1, r2
 8011c12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c16:	f7ff b96f 	b.w	8010ef8 <_malloc_r>
 8011c1a:	b92a      	cbnz	r2, 8011c28 <_realloc_r+0x24>
 8011c1c:	f7ff f8f8 	bl	8010e10 <_free_r>
 8011c20:	2400      	movs	r4, #0
 8011c22:	4620      	mov	r0, r4
 8011c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c28:	f000 f841 	bl	8011cae <_malloc_usable_size_r>
 8011c2c:	4285      	cmp	r5, r0
 8011c2e:	4606      	mov	r6, r0
 8011c30:	d802      	bhi.n	8011c38 <_realloc_r+0x34>
 8011c32:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011c36:	d8f4      	bhi.n	8011c22 <_realloc_r+0x1e>
 8011c38:	4629      	mov	r1, r5
 8011c3a:	4640      	mov	r0, r8
 8011c3c:	f7ff f95c 	bl	8010ef8 <_malloc_r>
 8011c40:	4607      	mov	r7, r0
 8011c42:	2800      	cmp	r0, #0
 8011c44:	d0ec      	beq.n	8011c20 <_realloc_r+0x1c>
 8011c46:	42b5      	cmp	r5, r6
 8011c48:	462a      	mov	r2, r5
 8011c4a:	4621      	mov	r1, r4
 8011c4c:	bf28      	it	cs
 8011c4e:	4632      	movcs	r2, r6
 8011c50:	f7fe fa7f 	bl	8010152 <memcpy>
 8011c54:	4621      	mov	r1, r4
 8011c56:	4640      	mov	r0, r8
 8011c58:	463c      	mov	r4, r7
 8011c5a:	f7ff f8d9 	bl	8010e10 <_free_r>
 8011c5e:	e7e0      	b.n	8011c22 <_realloc_r+0x1e>

08011c60 <__ascii_wctomb>:
 8011c60:	4603      	mov	r3, r0
 8011c62:	4608      	mov	r0, r1
 8011c64:	b141      	cbz	r1, 8011c78 <__ascii_wctomb+0x18>
 8011c66:	2aff      	cmp	r2, #255	@ 0xff
 8011c68:	d904      	bls.n	8011c74 <__ascii_wctomb+0x14>
 8011c6a:	228a      	movs	r2, #138	@ 0x8a
 8011c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8011c70:	601a      	str	r2, [r3, #0]
 8011c72:	4770      	bx	lr
 8011c74:	2001      	movs	r0, #1
 8011c76:	700a      	strb	r2, [r1, #0]
 8011c78:	4770      	bx	lr
	...

08011c7c <fiprintf>:
 8011c7c:	b40e      	push	{r1, r2, r3}
 8011c7e:	b503      	push	{r0, r1, lr}
 8011c80:	ab03      	add	r3, sp, #12
 8011c82:	4601      	mov	r1, r0
 8011c84:	4805      	ldr	r0, [pc, #20]	@ (8011c9c <fiprintf+0x20>)
 8011c86:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c8a:	6800      	ldr	r0, [r0, #0]
 8011c8c:	9301      	str	r3, [sp, #4]
 8011c8e:	f000 f83f 	bl	8011d10 <_vfiprintf_r>
 8011c92:	b002      	add	sp, #8
 8011c94:	f85d eb04 	ldr.w	lr, [sp], #4
 8011c98:	b003      	add	sp, #12
 8011c9a:	4770      	bx	lr
 8011c9c:	20000034 	.word	0x20000034

08011ca0 <abort>:
 8011ca0:	2006      	movs	r0, #6
 8011ca2:	b508      	push	{r3, lr}
 8011ca4:	f000 fa08 	bl	80120b8 <raise>
 8011ca8:	2001      	movs	r0, #1
 8011caa:	f7f2 fccf 	bl	800464c <_exit>

08011cae <_malloc_usable_size_r>:
 8011cae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011cb2:	1f18      	subs	r0, r3, #4
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	bfbc      	itt	lt
 8011cb8:	580b      	ldrlt	r3, [r1, r0]
 8011cba:	18c0      	addlt	r0, r0, r3
 8011cbc:	4770      	bx	lr

08011cbe <__sfputc_r>:
 8011cbe:	6893      	ldr	r3, [r2, #8]
 8011cc0:	3b01      	subs	r3, #1
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	6093      	str	r3, [r2, #8]
 8011cc6:	b410      	push	{r4}
 8011cc8:	da08      	bge.n	8011cdc <__sfputc_r+0x1e>
 8011cca:	6994      	ldr	r4, [r2, #24]
 8011ccc:	42a3      	cmp	r3, r4
 8011cce:	db01      	blt.n	8011cd4 <__sfputc_r+0x16>
 8011cd0:	290a      	cmp	r1, #10
 8011cd2:	d103      	bne.n	8011cdc <__sfputc_r+0x1e>
 8011cd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011cd8:	f000 b932 	b.w	8011f40 <__swbuf_r>
 8011cdc:	6813      	ldr	r3, [r2, #0]
 8011cde:	1c58      	adds	r0, r3, #1
 8011ce0:	6010      	str	r0, [r2, #0]
 8011ce2:	4608      	mov	r0, r1
 8011ce4:	7019      	strb	r1, [r3, #0]
 8011ce6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011cea:	4770      	bx	lr

08011cec <__sfputs_r>:
 8011cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cee:	4606      	mov	r6, r0
 8011cf0:	460f      	mov	r7, r1
 8011cf2:	4614      	mov	r4, r2
 8011cf4:	18d5      	adds	r5, r2, r3
 8011cf6:	42ac      	cmp	r4, r5
 8011cf8:	d101      	bne.n	8011cfe <__sfputs_r+0x12>
 8011cfa:	2000      	movs	r0, #0
 8011cfc:	e007      	b.n	8011d0e <__sfputs_r+0x22>
 8011cfe:	463a      	mov	r2, r7
 8011d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d04:	4630      	mov	r0, r6
 8011d06:	f7ff ffda 	bl	8011cbe <__sfputc_r>
 8011d0a:	1c43      	adds	r3, r0, #1
 8011d0c:	d1f3      	bne.n	8011cf6 <__sfputs_r+0xa>
 8011d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011d10 <_vfiprintf_r>:
 8011d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d14:	460d      	mov	r5, r1
 8011d16:	b09d      	sub	sp, #116	@ 0x74
 8011d18:	4614      	mov	r4, r2
 8011d1a:	4698      	mov	r8, r3
 8011d1c:	4606      	mov	r6, r0
 8011d1e:	b118      	cbz	r0, 8011d28 <_vfiprintf_r+0x18>
 8011d20:	6a03      	ldr	r3, [r0, #32]
 8011d22:	b90b      	cbnz	r3, 8011d28 <_vfiprintf_r+0x18>
 8011d24:	f7fe f8ee 	bl	800ff04 <__sinit>
 8011d28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011d2a:	07d9      	lsls	r1, r3, #31
 8011d2c:	d405      	bmi.n	8011d3a <_vfiprintf_r+0x2a>
 8011d2e:	89ab      	ldrh	r3, [r5, #12]
 8011d30:	059a      	lsls	r2, r3, #22
 8011d32:	d402      	bmi.n	8011d3a <_vfiprintf_r+0x2a>
 8011d34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011d36:	f7fe f9fc 	bl	8010132 <__retarget_lock_acquire_recursive>
 8011d3a:	89ab      	ldrh	r3, [r5, #12]
 8011d3c:	071b      	lsls	r3, r3, #28
 8011d3e:	d501      	bpl.n	8011d44 <_vfiprintf_r+0x34>
 8011d40:	692b      	ldr	r3, [r5, #16]
 8011d42:	b99b      	cbnz	r3, 8011d6c <_vfiprintf_r+0x5c>
 8011d44:	4629      	mov	r1, r5
 8011d46:	4630      	mov	r0, r6
 8011d48:	f000 f938 	bl	8011fbc <__swsetup_r>
 8011d4c:	b170      	cbz	r0, 8011d6c <_vfiprintf_r+0x5c>
 8011d4e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011d50:	07dc      	lsls	r4, r3, #31
 8011d52:	d504      	bpl.n	8011d5e <_vfiprintf_r+0x4e>
 8011d54:	f04f 30ff 	mov.w	r0, #4294967295
 8011d58:	b01d      	add	sp, #116	@ 0x74
 8011d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d5e:	89ab      	ldrh	r3, [r5, #12]
 8011d60:	0598      	lsls	r0, r3, #22
 8011d62:	d4f7      	bmi.n	8011d54 <_vfiprintf_r+0x44>
 8011d64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011d66:	f7fe f9e5 	bl	8010134 <__retarget_lock_release_recursive>
 8011d6a:	e7f3      	b.n	8011d54 <_vfiprintf_r+0x44>
 8011d6c:	2300      	movs	r3, #0
 8011d6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011d72:	f04f 0901 	mov.w	r9, #1
 8011d76:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8011f2c <_vfiprintf_r+0x21c>
 8011d7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8011d7c:	2320      	movs	r3, #32
 8011d7e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011d82:	2330      	movs	r3, #48	@ 0x30
 8011d84:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011d88:	4623      	mov	r3, r4
 8011d8a:	469a      	mov	sl, r3
 8011d8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011d90:	b10a      	cbz	r2, 8011d96 <_vfiprintf_r+0x86>
 8011d92:	2a25      	cmp	r2, #37	@ 0x25
 8011d94:	d1f9      	bne.n	8011d8a <_vfiprintf_r+0x7a>
 8011d96:	ebba 0b04 	subs.w	fp, sl, r4
 8011d9a:	d00b      	beq.n	8011db4 <_vfiprintf_r+0xa4>
 8011d9c:	465b      	mov	r3, fp
 8011d9e:	4622      	mov	r2, r4
 8011da0:	4629      	mov	r1, r5
 8011da2:	4630      	mov	r0, r6
 8011da4:	f7ff ffa2 	bl	8011cec <__sfputs_r>
 8011da8:	3001      	adds	r0, #1
 8011daa:	f000 80a7 	beq.w	8011efc <_vfiprintf_r+0x1ec>
 8011dae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011db0:	445a      	add	r2, fp
 8011db2:	9209      	str	r2, [sp, #36]	@ 0x24
 8011db4:	f89a 3000 	ldrb.w	r3, [sl]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	f000 809f 	beq.w	8011efc <_vfiprintf_r+0x1ec>
 8011dbe:	2300      	movs	r3, #0
 8011dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8011dc4:	f10a 0a01 	add.w	sl, sl, #1
 8011dc8:	9304      	str	r3, [sp, #16]
 8011dca:	9307      	str	r3, [sp, #28]
 8011dcc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011dd0:	931a      	str	r3, [sp, #104]	@ 0x68
 8011dd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011dd6:	4654      	mov	r4, sl
 8011dd8:	2205      	movs	r2, #5
 8011dda:	4854      	ldr	r0, [pc, #336]	@ (8011f2c <_vfiprintf_r+0x21c>)
 8011ddc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011de0:	f7fe f9a9 	bl	8010136 <memchr>
 8011de4:	9a04      	ldr	r2, [sp, #16]
 8011de6:	b9d8      	cbnz	r0, 8011e20 <_vfiprintf_r+0x110>
 8011de8:	06d1      	lsls	r1, r2, #27
 8011dea:	bf44      	itt	mi
 8011dec:	2320      	movmi	r3, #32
 8011dee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011df2:	0713      	lsls	r3, r2, #28
 8011df4:	bf44      	itt	mi
 8011df6:	232b      	movmi	r3, #43	@ 0x2b
 8011df8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011dfc:	f89a 3000 	ldrb.w	r3, [sl]
 8011e00:	2b2a      	cmp	r3, #42	@ 0x2a
 8011e02:	d015      	beq.n	8011e30 <_vfiprintf_r+0x120>
 8011e04:	9a07      	ldr	r2, [sp, #28]
 8011e06:	4654      	mov	r4, sl
 8011e08:	2000      	movs	r0, #0
 8011e0a:	f04f 0c0a 	mov.w	ip, #10
 8011e0e:	4621      	mov	r1, r4
 8011e10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011e14:	3b30      	subs	r3, #48	@ 0x30
 8011e16:	2b09      	cmp	r3, #9
 8011e18:	d94b      	bls.n	8011eb2 <_vfiprintf_r+0x1a2>
 8011e1a:	b1b0      	cbz	r0, 8011e4a <_vfiprintf_r+0x13a>
 8011e1c:	9207      	str	r2, [sp, #28]
 8011e1e:	e014      	b.n	8011e4a <_vfiprintf_r+0x13a>
 8011e20:	eba0 0308 	sub.w	r3, r0, r8
 8011e24:	46a2      	mov	sl, r4
 8011e26:	fa09 f303 	lsl.w	r3, r9, r3
 8011e2a:	4313      	orrs	r3, r2
 8011e2c:	9304      	str	r3, [sp, #16]
 8011e2e:	e7d2      	b.n	8011dd6 <_vfiprintf_r+0xc6>
 8011e30:	9b03      	ldr	r3, [sp, #12]
 8011e32:	1d19      	adds	r1, r3, #4
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	9103      	str	r1, [sp, #12]
 8011e3a:	bfbb      	ittet	lt
 8011e3c:	425b      	neglt	r3, r3
 8011e3e:	f042 0202 	orrlt.w	r2, r2, #2
 8011e42:	9307      	strge	r3, [sp, #28]
 8011e44:	9307      	strlt	r3, [sp, #28]
 8011e46:	bfb8      	it	lt
 8011e48:	9204      	strlt	r2, [sp, #16]
 8011e4a:	7823      	ldrb	r3, [r4, #0]
 8011e4c:	2b2e      	cmp	r3, #46	@ 0x2e
 8011e4e:	d10a      	bne.n	8011e66 <_vfiprintf_r+0x156>
 8011e50:	7863      	ldrb	r3, [r4, #1]
 8011e52:	2b2a      	cmp	r3, #42	@ 0x2a
 8011e54:	d132      	bne.n	8011ebc <_vfiprintf_r+0x1ac>
 8011e56:	9b03      	ldr	r3, [sp, #12]
 8011e58:	3402      	adds	r4, #2
 8011e5a:	1d1a      	adds	r2, r3, #4
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011e62:	9203      	str	r2, [sp, #12]
 8011e64:	9305      	str	r3, [sp, #20]
 8011e66:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011f3c <_vfiprintf_r+0x22c>
 8011e6a:	2203      	movs	r2, #3
 8011e6c:	7821      	ldrb	r1, [r4, #0]
 8011e6e:	4650      	mov	r0, sl
 8011e70:	f7fe f961 	bl	8010136 <memchr>
 8011e74:	b138      	cbz	r0, 8011e86 <_vfiprintf_r+0x176>
 8011e76:	eba0 000a 	sub.w	r0, r0, sl
 8011e7a:	2240      	movs	r2, #64	@ 0x40
 8011e7c:	9b04      	ldr	r3, [sp, #16]
 8011e7e:	3401      	adds	r4, #1
 8011e80:	4082      	lsls	r2, r0
 8011e82:	4313      	orrs	r3, r2
 8011e84:	9304      	str	r3, [sp, #16]
 8011e86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e8a:	2206      	movs	r2, #6
 8011e8c:	4828      	ldr	r0, [pc, #160]	@ (8011f30 <_vfiprintf_r+0x220>)
 8011e8e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011e92:	f7fe f950 	bl	8010136 <memchr>
 8011e96:	2800      	cmp	r0, #0
 8011e98:	d03f      	beq.n	8011f1a <_vfiprintf_r+0x20a>
 8011e9a:	4b26      	ldr	r3, [pc, #152]	@ (8011f34 <_vfiprintf_r+0x224>)
 8011e9c:	bb1b      	cbnz	r3, 8011ee6 <_vfiprintf_r+0x1d6>
 8011e9e:	9b03      	ldr	r3, [sp, #12]
 8011ea0:	3307      	adds	r3, #7
 8011ea2:	f023 0307 	bic.w	r3, r3, #7
 8011ea6:	3308      	adds	r3, #8
 8011ea8:	9303      	str	r3, [sp, #12]
 8011eaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011eac:	443b      	add	r3, r7
 8011eae:	9309      	str	r3, [sp, #36]	@ 0x24
 8011eb0:	e76a      	b.n	8011d88 <_vfiprintf_r+0x78>
 8011eb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8011eb6:	460c      	mov	r4, r1
 8011eb8:	2001      	movs	r0, #1
 8011eba:	e7a8      	b.n	8011e0e <_vfiprintf_r+0xfe>
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	3401      	adds	r4, #1
 8011ec0:	f04f 0c0a 	mov.w	ip, #10
 8011ec4:	4619      	mov	r1, r3
 8011ec6:	9305      	str	r3, [sp, #20]
 8011ec8:	4620      	mov	r0, r4
 8011eca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011ece:	3a30      	subs	r2, #48	@ 0x30
 8011ed0:	2a09      	cmp	r2, #9
 8011ed2:	d903      	bls.n	8011edc <_vfiprintf_r+0x1cc>
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d0c6      	beq.n	8011e66 <_vfiprintf_r+0x156>
 8011ed8:	9105      	str	r1, [sp, #20]
 8011eda:	e7c4      	b.n	8011e66 <_vfiprintf_r+0x156>
 8011edc:	fb0c 2101 	mla	r1, ip, r1, r2
 8011ee0:	4604      	mov	r4, r0
 8011ee2:	2301      	movs	r3, #1
 8011ee4:	e7f0      	b.n	8011ec8 <_vfiprintf_r+0x1b8>
 8011ee6:	ab03      	add	r3, sp, #12
 8011ee8:	462a      	mov	r2, r5
 8011eea:	a904      	add	r1, sp, #16
 8011eec:	4630      	mov	r0, r6
 8011eee:	9300      	str	r3, [sp, #0]
 8011ef0:	4b11      	ldr	r3, [pc, #68]	@ (8011f38 <_vfiprintf_r+0x228>)
 8011ef2:	f7fd fbbf 	bl	800f674 <_printf_float>
 8011ef6:	4607      	mov	r7, r0
 8011ef8:	1c78      	adds	r0, r7, #1
 8011efa:	d1d6      	bne.n	8011eaa <_vfiprintf_r+0x19a>
 8011efc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011efe:	07d9      	lsls	r1, r3, #31
 8011f00:	d405      	bmi.n	8011f0e <_vfiprintf_r+0x1fe>
 8011f02:	89ab      	ldrh	r3, [r5, #12]
 8011f04:	059a      	lsls	r2, r3, #22
 8011f06:	d402      	bmi.n	8011f0e <_vfiprintf_r+0x1fe>
 8011f08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011f0a:	f7fe f913 	bl	8010134 <__retarget_lock_release_recursive>
 8011f0e:	89ab      	ldrh	r3, [r5, #12]
 8011f10:	065b      	lsls	r3, r3, #25
 8011f12:	f53f af1f 	bmi.w	8011d54 <_vfiprintf_r+0x44>
 8011f16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011f18:	e71e      	b.n	8011d58 <_vfiprintf_r+0x48>
 8011f1a:	ab03      	add	r3, sp, #12
 8011f1c:	462a      	mov	r2, r5
 8011f1e:	a904      	add	r1, sp, #16
 8011f20:	4630      	mov	r0, r6
 8011f22:	9300      	str	r3, [sp, #0]
 8011f24:	4b04      	ldr	r3, [pc, #16]	@ (8011f38 <_vfiprintf_r+0x228>)
 8011f26:	f7fd fe41 	bl	800fbac <_printf_i>
 8011f2a:	e7e4      	b.n	8011ef6 <_vfiprintf_r+0x1e6>
 8011f2c:	080127a0 	.word	0x080127a0
 8011f30:	080127aa 	.word	0x080127aa
 8011f34:	0800f675 	.word	0x0800f675
 8011f38:	08011ced 	.word	0x08011ced
 8011f3c:	080127a6 	.word	0x080127a6

08011f40 <__swbuf_r>:
 8011f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f42:	460e      	mov	r6, r1
 8011f44:	4614      	mov	r4, r2
 8011f46:	4605      	mov	r5, r0
 8011f48:	b118      	cbz	r0, 8011f52 <__swbuf_r+0x12>
 8011f4a:	6a03      	ldr	r3, [r0, #32]
 8011f4c:	b90b      	cbnz	r3, 8011f52 <__swbuf_r+0x12>
 8011f4e:	f7fd ffd9 	bl	800ff04 <__sinit>
 8011f52:	69a3      	ldr	r3, [r4, #24]
 8011f54:	60a3      	str	r3, [r4, #8]
 8011f56:	89a3      	ldrh	r3, [r4, #12]
 8011f58:	071a      	lsls	r2, r3, #28
 8011f5a:	d501      	bpl.n	8011f60 <__swbuf_r+0x20>
 8011f5c:	6923      	ldr	r3, [r4, #16]
 8011f5e:	b943      	cbnz	r3, 8011f72 <__swbuf_r+0x32>
 8011f60:	4621      	mov	r1, r4
 8011f62:	4628      	mov	r0, r5
 8011f64:	f000 f82a 	bl	8011fbc <__swsetup_r>
 8011f68:	b118      	cbz	r0, 8011f72 <__swbuf_r+0x32>
 8011f6a:	f04f 37ff 	mov.w	r7, #4294967295
 8011f6e:	4638      	mov	r0, r7
 8011f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f72:	6823      	ldr	r3, [r4, #0]
 8011f74:	b2f6      	uxtb	r6, r6
 8011f76:	6922      	ldr	r2, [r4, #16]
 8011f78:	4637      	mov	r7, r6
 8011f7a:	1a98      	subs	r0, r3, r2
 8011f7c:	6963      	ldr	r3, [r4, #20]
 8011f7e:	4283      	cmp	r3, r0
 8011f80:	dc05      	bgt.n	8011f8e <__swbuf_r+0x4e>
 8011f82:	4621      	mov	r1, r4
 8011f84:	4628      	mov	r0, r5
 8011f86:	f7ff fda7 	bl	8011ad8 <_fflush_r>
 8011f8a:	2800      	cmp	r0, #0
 8011f8c:	d1ed      	bne.n	8011f6a <__swbuf_r+0x2a>
 8011f8e:	68a3      	ldr	r3, [r4, #8]
 8011f90:	3b01      	subs	r3, #1
 8011f92:	60a3      	str	r3, [r4, #8]
 8011f94:	6823      	ldr	r3, [r4, #0]
 8011f96:	1c5a      	adds	r2, r3, #1
 8011f98:	6022      	str	r2, [r4, #0]
 8011f9a:	701e      	strb	r6, [r3, #0]
 8011f9c:	1c43      	adds	r3, r0, #1
 8011f9e:	6962      	ldr	r2, [r4, #20]
 8011fa0:	429a      	cmp	r2, r3
 8011fa2:	d004      	beq.n	8011fae <__swbuf_r+0x6e>
 8011fa4:	89a3      	ldrh	r3, [r4, #12]
 8011fa6:	07db      	lsls	r3, r3, #31
 8011fa8:	d5e1      	bpl.n	8011f6e <__swbuf_r+0x2e>
 8011faa:	2e0a      	cmp	r6, #10
 8011fac:	d1df      	bne.n	8011f6e <__swbuf_r+0x2e>
 8011fae:	4621      	mov	r1, r4
 8011fb0:	4628      	mov	r0, r5
 8011fb2:	f7ff fd91 	bl	8011ad8 <_fflush_r>
 8011fb6:	2800      	cmp	r0, #0
 8011fb8:	d0d9      	beq.n	8011f6e <__swbuf_r+0x2e>
 8011fba:	e7d6      	b.n	8011f6a <__swbuf_r+0x2a>

08011fbc <__swsetup_r>:
 8011fbc:	b538      	push	{r3, r4, r5, lr}
 8011fbe:	4b29      	ldr	r3, [pc, #164]	@ (8012064 <__swsetup_r+0xa8>)
 8011fc0:	4605      	mov	r5, r0
 8011fc2:	460c      	mov	r4, r1
 8011fc4:	6818      	ldr	r0, [r3, #0]
 8011fc6:	b118      	cbz	r0, 8011fd0 <__swsetup_r+0x14>
 8011fc8:	6a03      	ldr	r3, [r0, #32]
 8011fca:	b90b      	cbnz	r3, 8011fd0 <__swsetup_r+0x14>
 8011fcc:	f7fd ff9a 	bl	800ff04 <__sinit>
 8011fd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011fd4:	0719      	lsls	r1, r3, #28
 8011fd6:	d422      	bmi.n	801201e <__swsetup_r+0x62>
 8011fd8:	06da      	lsls	r2, r3, #27
 8011fda:	d407      	bmi.n	8011fec <__swsetup_r+0x30>
 8011fdc:	2209      	movs	r2, #9
 8011fde:	602a      	str	r2, [r5, #0]
 8011fe0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8011fe8:	81a3      	strh	r3, [r4, #12]
 8011fea:	e033      	b.n	8012054 <__swsetup_r+0x98>
 8011fec:	0758      	lsls	r0, r3, #29
 8011fee:	d512      	bpl.n	8012016 <__swsetup_r+0x5a>
 8011ff0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011ff2:	b141      	cbz	r1, 8012006 <__swsetup_r+0x4a>
 8011ff4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011ff8:	4299      	cmp	r1, r3
 8011ffa:	d002      	beq.n	8012002 <__swsetup_r+0x46>
 8011ffc:	4628      	mov	r0, r5
 8011ffe:	f7fe ff07 	bl	8010e10 <_free_r>
 8012002:	2300      	movs	r3, #0
 8012004:	6363      	str	r3, [r4, #52]	@ 0x34
 8012006:	89a3      	ldrh	r3, [r4, #12]
 8012008:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801200c:	81a3      	strh	r3, [r4, #12]
 801200e:	2300      	movs	r3, #0
 8012010:	6063      	str	r3, [r4, #4]
 8012012:	6923      	ldr	r3, [r4, #16]
 8012014:	6023      	str	r3, [r4, #0]
 8012016:	89a3      	ldrh	r3, [r4, #12]
 8012018:	f043 0308 	orr.w	r3, r3, #8
 801201c:	81a3      	strh	r3, [r4, #12]
 801201e:	6923      	ldr	r3, [r4, #16]
 8012020:	b94b      	cbnz	r3, 8012036 <__swsetup_r+0x7a>
 8012022:	89a3      	ldrh	r3, [r4, #12]
 8012024:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012028:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801202c:	d003      	beq.n	8012036 <__swsetup_r+0x7a>
 801202e:	4621      	mov	r1, r4
 8012030:	4628      	mov	r0, r5
 8012032:	f000 f882 	bl	801213a <__smakebuf_r>
 8012036:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801203a:	f013 0201 	ands.w	r2, r3, #1
 801203e:	d00a      	beq.n	8012056 <__swsetup_r+0x9a>
 8012040:	2200      	movs	r2, #0
 8012042:	60a2      	str	r2, [r4, #8]
 8012044:	6962      	ldr	r2, [r4, #20]
 8012046:	4252      	negs	r2, r2
 8012048:	61a2      	str	r2, [r4, #24]
 801204a:	6922      	ldr	r2, [r4, #16]
 801204c:	b942      	cbnz	r2, 8012060 <__swsetup_r+0xa4>
 801204e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012052:	d1c5      	bne.n	8011fe0 <__swsetup_r+0x24>
 8012054:	bd38      	pop	{r3, r4, r5, pc}
 8012056:	0799      	lsls	r1, r3, #30
 8012058:	bf58      	it	pl
 801205a:	6962      	ldrpl	r2, [r4, #20]
 801205c:	60a2      	str	r2, [r4, #8]
 801205e:	e7f4      	b.n	801204a <__swsetup_r+0x8e>
 8012060:	2000      	movs	r0, #0
 8012062:	e7f7      	b.n	8012054 <__swsetup_r+0x98>
 8012064:	20000034 	.word	0x20000034

08012068 <_raise_r>:
 8012068:	291f      	cmp	r1, #31
 801206a:	b538      	push	{r3, r4, r5, lr}
 801206c:	4605      	mov	r5, r0
 801206e:	460c      	mov	r4, r1
 8012070:	d904      	bls.n	801207c <_raise_r+0x14>
 8012072:	2316      	movs	r3, #22
 8012074:	6003      	str	r3, [r0, #0]
 8012076:	f04f 30ff 	mov.w	r0, #4294967295
 801207a:	bd38      	pop	{r3, r4, r5, pc}
 801207c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801207e:	b112      	cbz	r2, 8012086 <_raise_r+0x1e>
 8012080:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012084:	b94b      	cbnz	r3, 801209a <_raise_r+0x32>
 8012086:	4628      	mov	r0, r5
 8012088:	f000 f830 	bl	80120ec <_getpid_r>
 801208c:	4622      	mov	r2, r4
 801208e:	4601      	mov	r1, r0
 8012090:	4628      	mov	r0, r5
 8012092:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012096:	f000 b817 	b.w	80120c8 <_kill_r>
 801209a:	2b01      	cmp	r3, #1
 801209c:	d00a      	beq.n	80120b4 <_raise_r+0x4c>
 801209e:	1c59      	adds	r1, r3, #1
 80120a0:	d103      	bne.n	80120aa <_raise_r+0x42>
 80120a2:	2316      	movs	r3, #22
 80120a4:	6003      	str	r3, [r0, #0]
 80120a6:	2001      	movs	r0, #1
 80120a8:	e7e7      	b.n	801207a <_raise_r+0x12>
 80120aa:	2100      	movs	r1, #0
 80120ac:	4620      	mov	r0, r4
 80120ae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80120b2:	4798      	blx	r3
 80120b4:	2000      	movs	r0, #0
 80120b6:	e7e0      	b.n	801207a <_raise_r+0x12>

080120b8 <raise>:
 80120b8:	4b02      	ldr	r3, [pc, #8]	@ (80120c4 <raise+0xc>)
 80120ba:	4601      	mov	r1, r0
 80120bc:	6818      	ldr	r0, [r3, #0]
 80120be:	f7ff bfd3 	b.w	8012068 <_raise_r>
 80120c2:	bf00      	nop
 80120c4:	20000034 	.word	0x20000034

080120c8 <_kill_r>:
 80120c8:	b538      	push	{r3, r4, r5, lr}
 80120ca:	2300      	movs	r3, #0
 80120cc:	4d06      	ldr	r5, [pc, #24]	@ (80120e8 <_kill_r+0x20>)
 80120ce:	4604      	mov	r4, r0
 80120d0:	4608      	mov	r0, r1
 80120d2:	4611      	mov	r1, r2
 80120d4:	602b      	str	r3, [r5, #0]
 80120d6:	f7f2 faa9 	bl	800462c <_kill>
 80120da:	1c43      	adds	r3, r0, #1
 80120dc:	d102      	bne.n	80120e4 <_kill_r+0x1c>
 80120de:	682b      	ldr	r3, [r5, #0]
 80120e0:	b103      	cbz	r3, 80120e4 <_kill_r+0x1c>
 80120e2:	6023      	str	r3, [r4, #0]
 80120e4:	bd38      	pop	{r3, r4, r5, pc}
 80120e6:	bf00      	nop
 80120e8:	20005e0c 	.word	0x20005e0c

080120ec <_getpid_r>:
 80120ec:	f7f2 ba96 	b.w	800461c <_getpid>

080120f0 <__swhatbuf_r>:
 80120f0:	b570      	push	{r4, r5, r6, lr}
 80120f2:	460c      	mov	r4, r1
 80120f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120f8:	b096      	sub	sp, #88	@ 0x58
 80120fa:	4615      	mov	r5, r2
 80120fc:	2900      	cmp	r1, #0
 80120fe:	461e      	mov	r6, r3
 8012100:	da0c      	bge.n	801211c <__swhatbuf_r+0x2c>
 8012102:	89a3      	ldrh	r3, [r4, #12]
 8012104:	2100      	movs	r1, #0
 8012106:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801210a:	bf14      	ite	ne
 801210c:	2340      	movne	r3, #64	@ 0x40
 801210e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012112:	2000      	movs	r0, #0
 8012114:	6031      	str	r1, [r6, #0]
 8012116:	602b      	str	r3, [r5, #0]
 8012118:	b016      	add	sp, #88	@ 0x58
 801211a:	bd70      	pop	{r4, r5, r6, pc}
 801211c:	466a      	mov	r2, sp
 801211e:	f000 f849 	bl	80121b4 <_fstat_r>
 8012122:	2800      	cmp	r0, #0
 8012124:	dbed      	blt.n	8012102 <__swhatbuf_r+0x12>
 8012126:	9901      	ldr	r1, [sp, #4]
 8012128:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801212c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012130:	4259      	negs	r1, r3
 8012132:	4159      	adcs	r1, r3
 8012134:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012138:	e7eb      	b.n	8012112 <__swhatbuf_r+0x22>

0801213a <__smakebuf_r>:
 801213a:	898b      	ldrh	r3, [r1, #12]
 801213c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801213e:	079d      	lsls	r5, r3, #30
 8012140:	4606      	mov	r6, r0
 8012142:	460c      	mov	r4, r1
 8012144:	d507      	bpl.n	8012156 <__smakebuf_r+0x1c>
 8012146:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801214a:	6023      	str	r3, [r4, #0]
 801214c:	6123      	str	r3, [r4, #16]
 801214e:	2301      	movs	r3, #1
 8012150:	6163      	str	r3, [r4, #20]
 8012152:	b003      	add	sp, #12
 8012154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012156:	ab01      	add	r3, sp, #4
 8012158:	466a      	mov	r2, sp
 801215a:	f7ff ffc9 	bl	80120f0 <__swhatbuf_r>
 801215e:	9f00      	ldr	r7, [sp, #0]
 8012160:	4605      	mov	r5, r0
 8012162:	4630      	mov	r0, r6
 8012164:	4639      	mov	r1, r7
 8012166:	f7fe fec7 	bl	8010ef8 <_malloc_r>
 801216a:	b948      	cbnz	r0, 8012180 <__smakebuf_r+0x46>
 801216c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012170:	059a      	lsls	r2, r3, #22
 8012172:	d4ee      	bmi.n	8012152 <__smakebuf_r+0x18>
 8012174:	f023 0303 	bic.w	r3, r3, #3
 8012178:	f043 0302 	orr.w	r3, r3, #2
 801217c:	81a3      	strh	r3, [r4, #12]
 801217e:	e7e2      	b.n	8012146 <__smakebuf_r+0xc>
 8012180:	89a3      	ldrh	r3, [r4, #12]
 8012182:	6020      	str	r0, [r4, #0]
 8012184:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012188:	81a3      	strh	r3, [r4, #12]
 801218a:	9b01      	ldr	r3, [sp, #4]
 801218c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012190:	b15b      	cbz	r3, 80121aa <__smakebuf_r+0x70>
 8012192:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012196:	4630      	mov	r0, r6
 8012198:	f000 f81e 	bl	80121d8 <_isatty_r>
 801219c:	b128      	cbz	r0, 80121aa <__smakebuf_r+0x70>
 801219e:	89a3      	ldrh	r3, [r4, #12]
 80121a0:	f023 0303 	bic.w	r3, r3, #3
 80121a4:	f043 0301 	orr.w	r3, r3, #1
 80121a8:	81a3      	strh	r3, [r4, #12]
 80121aa:	89a3      	ldrh	r3, [r4, #12]
 80121ac:	431d      	orrs	r5, r3
 80121ae:	81a5      	strh	r5, [r4, #12]
 80121b0:	e7cf      	b.n	8012152 <__smakebuf_r+0x18>
	...

080121b4 <_fstat_r>:
 80121b4:	b538      	push	{r3, r4, r5, lr}
 80121b6:	2300      	movs	r3, #0
 80121b8:	4d06      	ldr	r5, [pc, #24]	@ (80121d4 <_fstat_r+0x20>)
 80121ba:	4604      	mov	r4, r0
 80121bc:	4608      	mov	r0, r1
 80121be:	4611      	mov	r1, r2
 80121c0:	602b      	str	r3, [r5, #0]
 80121c2:	f7f2 fa93 	bl	80046ec <_fstat>
 80121c6:	1c43      	adds	r3, r0, #1
 80121c8:	d102      	bne.n	80121d0 <_fstat_r+0x1c>
 80121ca:	682b      	ldr	r3, [r5, #0]
 80121cc:	b103      	cbz	r3, 80121d0 <_fstat_r+0x1c>
 80121ce:	6023      	str	r3, [r4, #0]
 80121d0:	bd38      	pop	{r3, r4, r5, pc}
 80121d2:	bf00      	nop
 80121d4:	20005e0c 	.word	0x20005e0c

080121d8 <_isatty_r>:
 80121d8:	b538      	push	{r3, r4, r5, lr}
 80121da:	2300      	movs	r3, #0
 80121dc:	4d05      	ldr	r5, [pc, #20]	@ (80121f4 <_isatty_r+0x1c>)
 80121de:	4604      	mov	r4, r0
 80121e0:	4608      	mov	r0, r1
 80121e2:	602b      	str	r3, [r5, #0]
 80121e4:	f7f2 fa92 	bl	800470c <_isatty>
 80121e8:	1c43      	adds	r3, r0, #1
 80121ea:	d102      	bne.n	80121f2 <_isatty_r+0x1a>
 80121ec:	682b      	ldr	r3, [r5, #0]
 80121ee:	b103      	cbz	r3, 80121f2 <_isatty_r+0x1a>
 80121f0:	6023      	str	r3, [r4, #0]
 80121f2:	bd38      	pop	{r3, r4, r5, pc}
 80121f4:	20005e0c 	.word	0x20005e0c

080121f8 <sqrt>:
 80121f8:	b538      	push	{r3, r4, r5, lr}
 80121fa:	ec55 4b10 	vmov	r4, r5, d0
 80121fe:	ed2d 8b02 	vpush	{d8}
 8012202:	f000 f825 	bl	8012250 <__ieee754_sqrt>
 8012206:	4622      	mov	r2, r4
 8012208:	462b      	mov	r3, r5
 801220a:	4620      	mov	r0, r4
 801220c:	4629      	mov	r1, r5
 801220e:	eeb0 8a40 	vmov.f32	s16, s0
 8012212:	eef0 8a60 	vmov.f32	s17, s1
 8012216:	f7ee fc99 	bl	8000b4c <__aeabi_dcmpun>
 801221a:	b990      	cbnz	r0, 8012242 <sqrt+0x4a>
 801221c:	2200      	movs	r2, #0
 801221e:	2300      	movs	r3, #0
 8012220:	4620      	mov	r0, r4
 8012222:	4629      	mov	r1, r5
 8012224:	f7ee fc6a 	bl	8000afc <__aeabi_dcmplt>
 8012228:	b158      	cbz	r0, 8012242 <sqrt+0x4a>
 801222a:	f7fd ff57 	bl	80100dc <__errno>
 801222e:	2321      	movs	r3, #33	@ 0x21
 8012230:	2200      	movs	r2, #0
 8012232:	6003      	str	r3, [r0, #0]
 8012234:	2300      	movs	r3, #0
 8012236:	4610      	mov	r0, r2
 8012238:	4619      	mov	r1, r3
 801223a:	f7ee fb17 	bl	800086c <__aeabi_ddiv>
 801223e:	ec41 0b18 	vmov	d8, r0, r1
 8012242:	eeb0 0a48 	vmov.f32	s0, s16
 8012246:	eef0 0a68 	vmov.f32	s1, s17
 801224a:	ecbd 8b02 	vpop	{d8}
 801224e:	bd38      	pop	{r3, r4, r5, pc}

08012250 <__ieee754_sqrt>:
 8012250:	4a6b      	ldr	r2, [pc, #428]	@ (8012400 <__ieee754_sqrt+0x1b0>)
 8012252:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012256:	ec55 4b10 	vmov	r4, r5, d0
 801225a:	43aa      	bics	r2, r5
 801225c:	462b      	mov	r3, r5
 801225e:	4621      	mov	r1, r4
 8012260:	d110      	bne.n	8012284 <__ieee754_sqrt+0x34>
 8012262:	4622      	mov	r2, r4
 8012264:	4620      	mov	r0, r4
 8012266:	4629      	mov	r1, r5
 8012268:	f7ee f9d6 	bl	8000618 <__aeabi_dmul>
 801226c:	4602      	mov	r2, r0
 801226e:	460b      	mov	r3, r1
 8012270:	4620      	mov	r0, r4
 8012272:	4629      	mov	r1, r5
 8012274:	f7ee f81a 	bl	80002ac <__adddf3>
 8012278:	4604      	mov	r4, r0
 801227a:	460d      	mov	r5, r1
 801227c:	ec45 4b10 	vmov	d0, r4, r5
 8012280:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012284:	2d00      	cmp	r5, #0
 8012286:	dc0e      	bgt.n	80122a6 <__ieee754_sqrt+0x56>
 8012288:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801228c:	4322      	orrs	r2, r4
 801228e:	d0f5      	beq.n	801227c <__ieee754_sqrt+0x2c>
 8012290:	b19d      	cbz	r5, 80122ba <__ieee754_sqrt+0x6a>
 8012292:	4622      	mov	r2, r4
 8012294:	4620      	mov	r0, r4
 8012296:	4629      	mov	r1, r5
 8012298:	f7ee f806 	bl	80002a8 <__aeabi_dsub>
 801229c:	4602      	mov	r2, r0
 801229e:	460b      	mov	r3, r1
 80122a0:	f7ee fae4 	bl	800086c <__aeabi_ddiv>
 80122a4:	e7e8      	b.n	8012278 <__ieee754_sqrt+0x28>
 80122a6:	152a      	asrs	r2, r5, #20
 80122a8:	d115      	bne.n	80122d6 <__ieee754_sqrt+0x86>
 80122aa:	2000      	movs	r0, #0
 80122ac:	e009      	b.n	80122c2 <__ieee754_sqrt+0x72>
 80122ae:	0acb      	lsrs	r3, r1, #11
 80122b0:	3a15      	subs	r2, #21
 80122b2:	0549      	lsls	r1, r1, #21
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d0fa      	beq.n	80122ae <__ieee754_sqrt+0x5e>
 80122b8:	e7f7      	b.n	80122aa <__ieee754_sqrt+0x5a>
 80122ba:	462a      	mov	r2, r5
 80122bc:	e7fa      	b.n	80122b4 <__ieee754_sqrt+0x64>
 80122be:	005b      	lsls	r3, r3, #1
 80122c0:	3001      	adds	r0, #1
 80122c2:	02dc      	lsls	r4, r3, #11
 80122c4:	d5fb      	bpl.n	80122be <__ieee754_sqrt+0x6e>
 80122c6:	1e44      	subs	r4, r0, #1
 80122c8:	1b12      	subs	r2, r2, r4
 80122ca:	f1c0 0420 	rsb	r4, r0, #32
 80122ce:	fa21 f404 	lsr.w	r4, r1, r4
 80122d2:	4081      	lsls	r1, r0
 80122d4:	4323      	orrs	r3, r4
 80122d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80122da:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80122de:	07d2      	lsls	r2, r2, #31
 80122e0:	f04f 0600 	mov.w	r6, #0
 80122e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80122e8:	ea4f 0565 	mov.w	r5, r5, asr #1
 80122ec:	f04f 0016 	mov.w	r0, #22
 80122f0:	4632      	mov	r2, r6
 80122f2:	bf58      	it	pl
 80122f4:	005b      	lslpl	r3, r3, #1
 80122f6:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80122fa:	bf5c      	itt	pl
 80122fc:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8012300:	0049      	lslpl	r1, r1, #1
 8012302:	005b      	lsls	r3, r3, #1
 8012304:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8012308:	0049      	lsls	r1, r1, #1
 801230a:	1917      	adds	r7, r2, r4
 801230c:	429f      	cmp	r7, r3
 801230e:	bfde      	ittt	le
 8012310:	193a      	addle	r2, r7, r4
 8012312:	1bdb      	suble	r3, r3, r7
 8012314:	1936      	addle	r6, r6, r4
 8012316:	0fcf      	lsrs	r7, r1, #31
 8012318:	3801      	subs	r0, #1
 801231a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801231e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8012322:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8012326:	d1f0      	bne.n	801230a <__ieee754_sqrt+0xba>
 8012328:	4604      	mov	r4, r0
 801232a:	2720      	movs	r7, #32
 801232c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8012330:	429a      	cmp	r2, r3
 8012332:	eb00 0e0c 	add.w	lr, r0, ip
 8012336:	db02      	blt.n	801233e <__ieee754_sqrt+0xee>
 8012338:	d113      	bne.n	8012362 <__ieee754_sqrt+0x112>
 801233a:	458e      	cmp	lr, r1
 801233c:	d811      	bhi.n	8012362 <__ieee754_sqrt+0x112>
 801233e:	f1be 0f00 	cmp.w	lr, #0
 8012342:	eb0e 000c 	add.w	r0, lr, ip
 8012346:	da43      	bge.n	80123d0 <__ieee754_sqrt+0x180>
 8012348:	2800      	cmp	r0, #0
 801234a:	db41      	blt.n	80123d0 <__ieee754_sqrt+0x180>
 801234c:	f102 0801 	add.w	r8, r2, #1
 8012350:	1a9b      	subs	r3, r3, r2
 8012352:	458e      	cmp	lr, r1
 8012354:	4464      	add	r4, ip
 8012356:	eba1 010e 	sub.w	r1, r1, lr
 801235a:	bf88      	it	hi
 801235c:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8012360:	4642      	mov	r2, r8
 8012362:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8012366:	3f01      	subs	r7, #1
 8012368:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801236c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8012370:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8012374:	d1dc      	bne.n	8012330 <__ieee754_sqrt+0xe0>
 8012376:	4319      	orrs	r1, r3
 8012378:	d01b      	beq.n	80123b2 <__ieee754_sqrt+0x162>
 801237a:	f8df a088 	ldr.w	sl, [pc, #136]	@ 8012404 <__ieee754_sqrt+0x1b4>
 801237e:	f8df b088 	ldr.w	fp, [pc, #136]	@ 8012408 <__ieee754_sqrt+0x1b8>
 8012382:	e9da 0100 	ldrd	r0, r1, [sl]
 8012386:	e9db 2300 	ldrd	r2, r3, [fp]
 801238a:	e9da 8900 	ldrd	r8, r9, [sl]
 801238e:	f7ed ff8b 	bl	80002a8 <__aeabi_dsub>
 8012392:	4602      	mov	r2, r0
 8012394:	460b      	mov	r3, r1
 8012396:	4640      	mov	r0, r8
 8012398:	4649      	mov	r1, r9
 801239a:	f7ee fbb9 	bl	8000b10 <__aeabi_dcmple>
 801239e:	b140      	cbz	r0, 80123b2 <__ieee754_sqrt+0x162>
 80123a0:	f1b4 3fff 	cmp.w	r4, #4294967295
 80123a4:	e9da 0100 	ldrd	r0, r1, [sl]
 80123a8:	e9db 2300 	ldrd	r2, r3, [fp]
 80123ac:	d112      	bne.n	80123d4 <__ieee754_sqrt+0x184>
 80123ae:	3601      	adds	r6, #1
 80123b0:	463c      	mov	r4, r7
 80123b2:	1072      	asrs	r2, r6, #1
 80123b4:	07f1      	lsls	r1, r6, #31
 80123b6:	ea4f 0354 	mov.w	r3, r4, lsr #1
 80123ba:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80123be:	bf48      	it	mi
 80123c0:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80123c4:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80123c8:	4618      	mov	r0, r3
 80123ca:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80123ce:	e753      	b.n	8012278 <__ieee754_sqrt+0x28>
 80123d0:	4690      	mov	r8, r2
 80123d2:	e7bd      	b.n	8012350 <__ieee754_sqrt+0x100>
 80123d4:	e9da 8900 	ldrd	r8, r9, [sl]
 80123d8:	f7ed ff68 	bl	80002ac <__adddf3>
 80123dc:	4602      	mov	r2, r0
 80123de:	460b      	mov	r3, r1
 80123e0:	4640      	mov	r0, r8
 80123e2:	4649      	mov	r1, r9
 80123e4:	f7ee fb8a 	bl	8000afc <__aeabi_dcmplt>
 80123e8:	b128      	cbz	r0, 80123f6 <__ieee754_sqrt+0x1a6>
 80123ea:	1ca0      	adds	r0, r4, #2
 80123ec:	f104 0402 	add.w	r4, r4, #2
 80123f0:	bf08      	it	eq
 80123f2:	3601      	addeq	r6, #1
 80123f4:	e7dd      	b.n	80123b2 <__ieee754_sqrt+0x162>
 80123f6:	1c63      	adds	r3, r4, #1
 80123f8:	f023 0401 	bic.w	r4, r3, #1
 80123fc:	e7d9      	b.n	80123b2 <__ieee754_sqrt+0x162>
 80123fe:	bf00      	nop
 8012400:	7ff00000 	.word	0x7ff00000
 8012404:	200001f8 	.word	0x200001f8
 8012408:	200001f0 	.word	0x200001f0

0801240c <_init>:
 801240c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801240e:	bf00      	nop
 8012410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012412:	bc08      	pop	{r3}
 8012414:	469e      	mov	lr, r3
 8012416:	4770      	bx	lr

08012418 <_fini>:
 8012418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801241a:	bf00      	nop
 801241c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801241e:	bc08      	pop	{r3}
 8012420:	469e      	mov	lr, r3
 8012422:	4770      	bx	lr
