
SCU_SMPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001150c  08000250  08000250  00001250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c8  08011760  08011760  00012760  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011d28  08011d28  000131f0  2**0
                  CONTENTS
  4 .ARM          00000008  08011d28  08011d28  00012d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011d30  08011d30  000131f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011d30  08011d30  00012d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011d34  08011d34  00012d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08011d38  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005bf4  200001f0  08011f28  000131f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005de4  08011f28  00013de4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000131f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a136  00000000  00000000  00013226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030d6  00000000  00000000  0002d35c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001068  00000000  00000000  00030438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c93  00000000  00000000  000314a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000346a0  00000000  00000000  00032133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019e8c  00000000  00000000  000667d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00140c4d  00000000  00000000  0008065f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c12ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005540  00000000  00000000  001c12f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001c6830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	200001f0 	.word	0x200001f0
 800026c:	00000000 	.word	0x00000000
 8000270:	08011744 	.word	0x08011744

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	200001f4 	.word	0x200001f4
 800028c:	08011744 	.word	0x08011744

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b97e 	b.w	8000f7c <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c9c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000c9e:	460c      	mov	r4, r1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d14d      	bne.n	8000d40 <__udivmoddi4+0xa8>
 8000ca4:	428a      	cmp	r2, r1
 8000ca6:	460f      	mov	r7, r1
 8000ca8:	4684      	mov	ip, r0
 8000caa:	4696      	mov	lr, r2
 8000cac:	fab2 f382 	clz	r3, r2
 8000cb0:	d960      	bls.n	8000d74 <__udivmoddi4+0xdc>
 8000cb2:	b14b      	cbz	r3, 8000cc8 <__udivmoddi4+0x30>
 8000cb4:	fa02 fe03 	lsl.w	lr, r2, r3
 8000cb8:	f1c3 0220 	rsb	r2, r3, #32
 8000cbc:	409f      	lsls	r7, r3
 8000cbe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000cc2:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc6:	4317      	orrs	r7, r2
 8000cc8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000ccc:	fa1f f48e 	uxth.w	r4, lr
 8000cd0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000cd4:	fbb7 f1f6 	udiv	r1, r7, r6
 8000cd8:	fb06 7711 	mls	r7, r6, r1, r7
 8000cdc:	fb01 f004 	mul.w	r0, r1, r4
 8000ce0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ce4:	4290      	cmp	r0, r2
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce8:	eb1e 0202 	adds.w	r2, lr, r2
 8000cec:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cf0:	d202      	bcs.n	8000cf8 <__udivmoddi4+0x60>
 8000cf2:	4290      	cmp	r0, r2
 8000cf4:	f200 812d 	bhi.w	8000f52 <__udivmoddi4+0x2ba>
 8000cf8:	4639      	mov	r1, r7
 8000cfa:	1a12      	subs	r2, r2, r0
 8000cfc:	fa1f fc8c 	uxth.w	ip, ip
 8000d00:	fbb2 f0f6 	udiv	r0, r2, r6
 8000d04:	fb06 2210 	mls	r2, r6, r0, r2
 8000d08:	fb00 f404 	mul.w	r4, r0, r4
 8000d0c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000d10:	4564      	cmp	r4, ip
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x8e>
 8000d14:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x8c>
 8000d1e:	4564      	cmp	r4, ip
 8000d20:	f200 811a 	bhi.w	8000f58 <__udivmoddi4+0x2c0>
 8000d24:	4610      	mov	r0, r2
 8000d26:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2a:	ebac 0c04 	sub.w	ip, ip, r4
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b125      	cbz	r5, 8000d3c <__udivmoddi4+0xa4>
 8000d32:	fa2c f303 	lsr.w	r3, ip, r3
 8000d36:	2200      	movs	r2, #0
 8000d38:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d40:	428b      	cmp	r3, r1
 8000d42:	d905      	bls.n	8000d50 <__udivmoddi4+0xb8>
 8000d44:	b10d      	cbz	r5, 8000d4a <__udivmoddi4+0xb2>
 8000d46:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e7f5      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000d50:	fab3 f183 	clz	r1, r3
 8000d54:	2900      	cmp	r1, #0
 8000d56:	d14d      	bne.n	8000df4 <__udivmoddi4+0x15c>
 8000d58:	42a3      	cmp	r3, r4
 8000d5a:	f0c0 80f2 	bcc.w	8000f42 <__udivmoddi4+0x2aa>
 8000d5e:	4290      	cmp	r0, r2
 8000d60:	f080 80ef 	bcs.w	8000f42 <__udivmoddi4+0x2aa>
 8000d64:	4606      	mov	r6, r0
 8000d66:	4623      	mov	r3, r4
 8000d68:	4608      	mov	r0, r1
 8000d6a:	2d00      	cmp	r5, #0
 8000d6c:	d0e6      	beq.n	8000d3c <__udivmoddi4+0xa4>
 8000d6e:	e9c5 6300 	strd	r6, r3, [r5]
 8000d72:	e7e3      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	f040 80a2 	bne.w	8000ebe <__udivmoddi4+0x226>
 8000d7a:	1a8a      	subs	r2, r1, r2
 8000d7c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000d80:	fa1f f68e 	uxth.w	r6, lr
 8000d84:	2101      	movs	r1, #1
 8000d86:	fbb2 f4f7 	udiv	r4, r2, r7
 8000d8a:	fb07 2014 	mls	r0, r7, r4, r2
 8000d8e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d96:	fb06 f004 	mul.w	r0, r6, r4
 8000d9a:	4290      	cmp	r0, r2
 8000d9c:	d90f      	bls.n	8000dbe <__udivmoddi4+0x126>
 8000d9e:	eb1e 0202 	adds.w	r2, lr, r2
 8000da2:	f104 38ff 	add.w	r8, r4, #4294967295
 8000da6:	bf2c      	ite	cs
 8000da8:	f04f 0901 	movcs.w	r9, #1
 8000dac:	f04f 0900 	movcc.w	r9, #0
 8000db0:	4290      	cmp	r0, r2
 8000db2:	d903      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000db4:	f1b9 0f00 	cmp.w	r9, #0
 8000db8:	f000 80c8 	beq.w	8000f4c <__udivmoddi4+0x2b4>
 8000dbc:	4644      	mov	r4, r8
 8000dbe:	1a12      	subs	r2, r2, r0
 8000dc0:	fa1f fc8c 	uxth.w	ip, ip
 8000dc4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dc8:	fb07 2210 	mls	r2, r7, r0, r2
 8000dcc:	fb00 f606 	mul.w	r6, r0, r6
 8000dd0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000dd4:	4566      	cmp	r6, ip
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x152>
 8000dd8:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000ddc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de0:	d202      	bcs.n	8000de8 <__udivmoddi4+0x150>
 8000de2:	4566      	cmp	r6, ip
 8000de4:	f200 80bb 	bhi.w	8000f5e <__udivmoddi4+0x2c6>
 8000de8:	4610      	mov	r0, r2
 8000dea:	ebac 0c06 	sub.w	ip, ip, r6
 8000dee:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000df2:	e79d      	b.n	8000d30 <__udivmoddi4+0x98>
 8000df4:	f1c1 0620 	rsb	r6, r1, #32
 8000df8:	408b      	lsls	r3, r1
 8000dfa:	fa04 fe01 	lsl.w	lr, r4, r1
 8000dfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000e02:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e06:	40f4      	lsrs	r4, r6
 8000e08:	408a      	lsls	r2, r1
 8000e0a:	431f      	orrs	r7, r3
 8000e0c:	ea4e 030c 	orr.w	r3, lr, ip
 8000e10:	fa00 fe01 	lsl.w	lr, r0, r1
 8000e14:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e18:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e1c:	fa1f fc87 	uxth.w	ip, r7
 8000e20:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e24:	fb08 4410 	mls	r4, r8, r0, r4
 8000e28:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e2c:	fb00 f90c 	mul.w	r9, r0, ip
 8000e30:	45a1      	cmp	r9, r4
 8000e32:	d90e      	bls.n	8000e52 <__udivmoddi4+0x1ba>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e3a:	bf2c      	ite	cs
 8000e3c:	f04f 0b01 	movcs.w	fp, #1
 8000e40:	f04f 0b00 	movcc.w	fp, #0
 8000e44:	45a1      	cmp	r9, r4
 8000e46:	d903      	bls.n	8000e50 <__udivmoddi4+0x1b8>
 8000e48:	f1bb 0f00 	cmp.w	fp, #0
 8000e4c:	f000 8093 	beq.w	8000f76 <__udivmoddi4+0x2de>
 8000e50:	4650      	mov	r0, sl
 8000e52:	eba4 0409 	sub.w	r4, r4, r9
 8000e56:	fa1f f983 	uxth.w	r9, r3
 8000e5a:	fbb4 f3f8 	udiv	r3, r4, r8
 8000e5e:	fb08 4413 	mls	r4, r8, r3, r4
 8000e62:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e66:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e6a:	45a4      	cmp	ip, r4
 8000e6c:	d906      	bls.n	8000e7c <__udivmoddi4+0x1e4>
 8000e6e:	193c      	adds	r4, r7, r4
 8000e70:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e74:	d201      	bcs.n	8000e7a <__udivmoddi4+0x1e2>
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d87a      	bhi.n	8000f70 <__udivmoddi4+0x2d8>
 8000e7a:	4643      	mov	r3, r8
 8000e7c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e80:	eba4 040c 	sub.w	r4, r4, ip
 8000e84:	fba0 9802 	umull	r9, r8, r0, r2
 8000e88:	4544      	cmp	r4, r8
 8000e8a:	46cc      	mov	ip, r9
 8000e8c:	4643      	mov	r3, r8
 8000e8e:	d302      	bcc.n	8000e96 <__udivmoddi4+0x1fe>
 8000e90:	d106      	bne.n	8000ea0 <__udivmoddi4+0x208>
 8000e92:	45ce      	cmp	lr, r9
 8000e94:	d204      	bcs.n	8000ea0 <__udivmoddi4+0x208>
 8000e96:	3801      	subs	r0, #1
 8000e98:	ebb9 0c02 	subs.w	ip, r9, r2
 8000e9c:	eb68 0307 	sbc.w	r3, r8, r7
 8000ea0:	b15d      	cbz	r5, 8000eba <__udivmoddi4+0x222>
 8000ea2:	ebbe 020c 	subs.w	r2, lr, ip
 8000ea6:	eb64 0403 	sbc.w	r4, r4, r3
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	fa22 f301 	lsr.w	r3, r2, r1
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	431e      	orrs	r6, r3
 8000eb6:	e9c5 6400 	strd	r6, r4, [r5]
 8000eba:	2100      	movs	r1, #0
 8000ebc:	e73e      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000ebe:	fa02 fe03 	lsl.w	lr, r2, r3
 8000ec2:	f1c3 0120 	rsb	r1, r3, #32
 8000ec6:	fa04 f203 	lsl.w	r2, r4, r3
 8000eca:	fa00 fc03 	lsl.w	ip, r0, r3
 8000ece:	40cc      	lsrs	r4, r1
 8000ed0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000ed4:	fa20 f101 	lsr.w	r1, r0, r1
 8000ed8:	fa1f f68e 	uxth.w	r6, lr
 8000edc:	fbb4 f0f7 	udiv	r0, r4, r7
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	fb07 4410 	mls	r4, r7, r0, r4
 8000ee6:	0c11      	lsrs	r1, r2, #16
 8000ee8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000eec:	fb00 f406 	mul.w	r4, r0, r6
 8000ef0:	428c      	cmp	r4, r1
 8000ef2:	d90e      	bls.n	8000f12 <__udivmoddi4+0x27a>
 8000ef4:	eb1e 0101 	adds.w	r1, lr, r1
 8000ef8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000efc:	bf2c      	ite	cs
 8000efe:	f04f 0901 	movcs.w	r9, #1
 8000f02:	f04f 0900 	movcc.w	r9, #0
 8000f06:	428c      	cmp	r4, r1
 8000f08:	d902      	bls.n	8000f10 <__udivmoddi4+0x278>
 8000f0a:	f1b9 0f00 	cmp.w	r9, #0
 8000f0e:	d02c      	beq.n	8000f6a <__udivmoddi4+0x2d2>
 8000f10:	4640      	mov	r0, r8
 8000f12:	1b09      	subs	r1, r1, r4
 8000f14:	b292      	uxth	r2, r2
 8000f16:	fbb1 f4f7 	udiv	r4, r1, r7
 8000f1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000f1e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f22:	fb04 f106 	mul.w	r1, r4, r6
 8000f26:	4291      	cmp	r1, r2
 8000f28:	d907      	bls.n	8000f3a <__udivmoddi4+0x2a2>
 8000f2a:	eb1e 0202 	adds.w	r2, lr, r2
 8000f2e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000f32:	d201      	bcs.n	8000f38 <__udivmoddi4+0x2a0>
 8000f34:	4291      	cmp	r1, r2
 8000f36:	d815      	bhi.n	8000f64 <__udivmoddi4+0x2cc>
 8000f38:	4644      	mov	r4, r8
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000f40:	e721      	b.n	8000d86 <__udivmoddi4+0xee>
 8000f42:	1a86      	subs	r6, r0, r2
 8000f44:	eb64 0303 	sbc.w	r3, r4, r3
 8000f48:	2001      	movs	r0, #1
 8000f4a:	e70e      	b.n	8000d6a <__udivmoddi4+0xd2>
 8000f4c:	3c02      	subs	r4, #2
 8000f4e:	4472      	add	r2, lr
 8000f50:	e735      	b.n	8000dbe <__udivmoddi4+0x126>
 8000f52:	3902      	subs	r1, #2
 8000f54:	4472      	add	r2, lr
 8000f56:	e6d0      	b.n	8000cfa <__udivmoddi4+0x62>
 8000f58:	44f4      	add	ip, lr
 8000f5a:	3802      	subs	r0, #2
 8000f5c:	e6e3      	b.n	8000d26 <__udivmoddi4+0x8e>
 8000f5e:	44f4      	add	ip, lr
 8000f60:	3802      	subs	r0, #2
 8000f62:	e742      	b.n	8000dea <__udivmoddi4+0x152>
 8000f64:	3c02      	subs	r4, #2
 8000f66:	4472      	add	r2, lr
 8000f68:	e7e7      	b.n	8000f3a <__udivmoddi4+0x2a2>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4471      	add	r1, lr
 8000f6e:	e7d0      	b.n	8000f12 <__udivmoddi4+0x27a>
 8000f70:	3b02      	subs	r3, #2
 8000f72:	443c      	add	r4, r7
 8000f74:	e782      	b.n	8000e7c <__udivmoddi4+0x1e4>
 8000f76:	3802      	subs	r0, #2
 8000f78:	443c      	add	r4, r7
 8000f7a:	e76a      	b.n	8000e52 <__udivmoddi4+0x1ba>

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <ADC_operation>:
float temp_sensor_12=0;



uint8_t ADC_operation()
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0

	float sensor_value;

	for(uint8_t i = 1 ;i<=3;i++)
 8000f86:	2301      	movs	r3, #1
 8000f88:	71fb      	strb	r3, [r7, #7]
 8000f8a:	e038      	b.n	8000ffe <ADC_operation+0x7e>
	{
		for(uint8_t j = 1 ;j<=4;j++)
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	71bb      	strb	r3, [r7, #6]
 8000f90:	e02f      	b.n	8000ff2 <ADC_operation+0x72>
		{
			sensor_value =	ADC_READ(i,j);
 8000f92:	79ba      	ldrb	r2, [r7, #6]
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	4611      	mov	r1, r2
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 f849 	bl	8001030 <ADC_READ>
 8000f9e:	ed87 0a00 	vstr	s0, [r7]
			if(sensor_value > 1500 | sensor_value < -1000)
 8000fa2:	edd7 7a00 	vldr	s15, [r7]
 8000fa6:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001018 <ADC_operation+0x98>
 8000faa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb2:	bfcc      	ite	gt
 8000fb4:	2301      	movgt	r3, #1
 8000fb6:	2300      	movle	r3, #0
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	edd7 7a00 	vldr	s15, [r7]
 8000fbe:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800101c <ADC_operation+0x9c>
 8000fc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fca:	bf4c      	ite	mi
 8000fcc:	2301      	movmi	r3, #1
 8000fce:	2300      	movpl	r3, #0
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d005      	beq.n	8000fe6 <ADC_operation+0x66>
			{
				sprintf(buffer, "S%derrorE",j);
 8000fda:	79bb      	ldrb	r3, [r7, #6]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4910      	ldr	r1, [pc, #64]	@ (8001020 <ADC_operation+0xa0>)
 8000fe0:	4810      	ldr	r0, [pc, #64]	@ (8001024 <ADC_operation+0xa4>)
 8000fe2:	f00e fa69 	bl	800f4b8 <siprintf>
			{
				//sprintf(buffer, "S  %d  %.2fE",count++, sensor_value);
			}


			HAL_Delay(1);
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	f003 f816 	bl	8004018 <HAL_Delay>
		for(uint8_t j = 1 ;j<=4;j++)
 8000fec:	79bb      	ldrb	r3, [r7, #6]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	71bb      	strb	r3, [r7, #6]
 8000ff2:	79bb      	ldrb	r3, [r7, #6]
 8000ff4:	2b04      	cmp	r3, #4
 8000ff6:	d9cc      	bls.n	8000f92 <ADC_operation+0x12>
	for(uint8_t i = 1 ;i<=3;i++)
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	71fb      	strb	r3, [r7, #7]
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2b03      	cmp	r3, #3
 8001002:	d9c3      	bls.n	8000f8c <ADC_operation+0xc>
			//HAL_UART_Transmit_IT(&huart8, buffer, sizeof(buffer), 0xFFFF);
			//HAL_Delay(10);

		}
	}
	HAL_GPIO_TogglePin(GPIOE, LED1_Pin);
 8001004:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001008:	4807      	ldr	r0, [pc, #28]	@ (8001028 <ADC_operation+0xa8>)
 800100a:	f003 fbc9 	bl	80047a0 <HAL_GPIO_TogglePin>


}
 800100e:	bf00      	nop
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	44bb8000 	.word	0x44bb8000
 800101c:	c47a0000 	.word	0xc47a0000
 8001020:	08011760 	.word	0x08011760
 8001024:	2000020c 	.word	0x2000020c
 8001028:	42021000 	.word	0x42021000
 800102c:	00000000 	.word	0x00000000

08001030 <ADC_READ>:


#if 1

float ADC_READ(uint8_t adc_num,uint8_t channel)
{
 8001030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001034:	b0c5      	sub	sp, #276	@ 0x114
 8001036:	af1c      	add	r7, sp, #112	@ 0x70
 8001038:	4603      	mov	r3, r0
 800103a:	460a      	mov	r2, r1
 800103c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8001040:	4613      	mov	r3, r2
 8001042:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
	uint8_t txd_buf[30]={0};
 8001046:	2300      	movs	r3, #0
 8001048:	67bb      	str	r3, [r7, #120]	@ 0x78
 800104a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
 8001058:	611a      	str	r2, [r3, #16]
 800105a:	615a      	str	r2, [r3, #20]
 800105c:	831a      	strh	r2, [r3, #24]
	uint8_t rxd_buf[30]={0};
 800105e:	2300      	movs	r3, #0
 8001060:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001062:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]
 8001070:	611a      	str	r2, [r3, #16]
 8001072:	615a      	str	r2, [r3, #20]
 8001074:	831a      	strh	r2, [r3, #24]
	float resistance = 0;
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	//	uint16_t reg_data;//[4]= {0};
	//	uint8_t res;
	//	uint8_t read_register = 0;
	//	uint8_t write_reagister = 0;

	txd_buf[0] = 0x40;
 800107e:	2340      	movs	r3, #64	@ 0x40
 8001080:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
	txd_buf[1] = 0x11;
 8001084:	2311      	movs	r3, #17
 8001086:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
	txd_buf[2] = 0x0c; // WREG write AIN10-AINCOM,(1010 1100) binary,MUXP and MUXN selection
 800108a:	230c      	movs	r3, #12
 800108c:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
	txd_buf[3] = 0x80; // gain =1
 8001090:	2380      	movs	r3, #128	@ 0x80
 8001092:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
	txd_buf[4] = 0x76; // DATA RATE 20 SPS
 8001096:	2376      	movs	r3, #118	@ 0x76
 8001098:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
	txd_buf[5] = 0xEA; //REF on (0001 10-ref 01)
 800109c:	23ea      	movs	r3, #234	@ 0xea
 800109e:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
	txd_buf[6] = 0x1E; // IDAC MAG
 80010a2:	231e      	movs	r3, #30
 80010a4:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
	txd_buf[7] = 0x02; // IDAC MUX
 80010a8:	2302      	movs	r3, #2
 80010aa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	txd_buf[8] = 0x07; // Vbias
 80010ae:	2307      	movs	r3, #7
 80010b0:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
	txd_buf[9] = 0xfb; // Timeout bit second =1 ,default is 10h
 80010b4:	23fb      	movs	r3, #251	@ 0xfb
 80010b6:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
	txd_buf[10] = 0x00; // start converting command
 80010ba:	2300      	movs	r3, #0
 80010bc:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
	txd_buf[11] = 0x10; // start converting command
 80010c0:	2310      	movs	r3, #16
 80010c2:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
	txd_buf[12] = 0x0; // start converting command
 80010c6:	2300      	movs	r3, #0
 80010c8:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
	txd_buf[13] = 0x0; // start converting command
 80010cc:	2300      	movs	r3, #0
 80010ce:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
	txd_buf[14] = 0x0; // start converting command
 80010d2:	2300      	movs	r3, #0
 80010d4:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
	txd_buf[15] = 0x0; // start converting command
 80010d8:	2300      	movs	r3, #0
 80010da:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
	txd_buf[16] = 0x0; // start converting command
 80010de:	2300      	movs	r3, #0
 80010e0:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
	txd_buf[17] = 0x40; // start converting command
 80010e4:	2340      	movs	r3, #64	@ 0x40
 80010e6:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
	txd_buf[18] = 0x00; // start converting command
 80010ea:	2300      	movs	r3, #0
 80010ec:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	txd_buf[19] = 0x00; // start converting command
 80010f0:	2300      	movs	r3, #0
 80010f2:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
	txd_buf[20] = 0x00; // start converting command
 80010f6:	2300      	movs	r3, #0
 80010f8:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
	txd_buf[18] = 0x00; // start converting command
 80010fc:	2300      	movs	r3, #0
 80010fe:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	//	txd_buf[18] = 0x00; // start converting command
	//	txd_buf[19] = 0x00; // start converting command
	//	txd_buf[20] = 0x00; // start converting command
	//	txd_buf[18] = 0x00; // start converting command

	switch(channel)
 8001102:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001106:	3b01      	subs	r3, #1
 8001108:	2b03      	cmp	r3, #3
 800110a:	d833      	bhi.n	8001174 <ADC_READ+0x144>
 800110c:	a201      	add	r2, pc, #4	@ (adr r2, 8001114 <ADC_READ+0xe4>)
 800110e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001112:	bf00      	nop
 8001114:	08001125 	.word	0x08001125
 8001118:	08001139 	.word	0x08001139
 800111c:	0800114d 	.word	0x0800114d
 8001120:	08001161 	.word	0x08001161
	{
	case 1:
		txd_buf[4] = 0x43; // DATA RATE 20 SPS
 8001124:	2343      	movs	r3, #67	@ 0x43
 8001126:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
		txd_buf[7] = 0x02; // IDAC MUX
 800112a:	2302      	movs	r3, #2
 800112c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		txd_buf[9] = 0xf5; // Timeout bit second =1 ,default is 10h
 8001130:	23f5      	movs	r3, #245	@ 0xf5
 8001132:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
		break;
 8001136:	e01d      	b.n	8001174 <ADC_READ+0x144>

	case 2:
		txd_buf[4] = 0x10; // DATA RATE 20 SPS
 8001138:	2310      	movs	r3, #16
 800113a:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
		txd_buf[7] = 0x02; // IDAC MUX
 800113e:	2302      	movs	r3, #2
 8001140:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		txd_buf[9] = 0xf2; // Timeout bit second =1 ,default is 10h
 8001144:	23f2      	movs	r3, #242	@ 0xf2
 8001146:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
		break;
 800114a:	e013      	b.n	8001174 <ADC_READ+0x144>

	case 3:
		txd_buf[4] = 0x9A; // DATA RATE 20 SPS
 800114c:	239a      	movs	r3, #154	@ 0x9a
 800114e:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
		txd_buf[7] = 0x02; // IDAC MUX
 8001152:	2302      	movs	r3, #2
 8001154:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		txd_buf[9] = 0xf8; // Timeout bit second =1 ,default is 10h
 8001158:	23f8      	movs	r3, #248	@ 0xf8
 800115a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
		break;
 800115e:	e009      	b.n	8001174 <ADC_READ+0x144>
	case 4:
		txd_buf[4] = 0x76; // DATA RATE 20 SPS
 8001160:	2376      	movs	r3, #118	@ 0x76
 8001162:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
		txd_buf[7] = 0x02; // IDAC MUX
 8001166:	2302      	movs	r3, #2
 8001168:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		txd_buf[9] = 0xfb; // Timeout bit second =1 ,default is 10h
 800116c:	23fb      	movs	r3, #251	@ 0xfb
 800116e:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
		break;
 8001172:	bf00      	nop
	}

	switch(adc_num)
 8001174:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001178:	2b03      	cmp	r3, #3
 800117a:	f000 82d1 	beq.w	8001720 <ADC_READ+0x6f0>
 800117e:	2b03      	cmp	r3, #3
 8001180:	f300 8429 	bgt.w	80019d6 <ADC_READ+0x9a6>
 8001184:	2b01      	cmp	r3, #1
 8001186:	d004      	beq.n	8001192 <ADC_READ+0x162>
 8001188:	2b02      	cmp	r3, #2
 800118a:	f000 8167 	beq.w	800145c <ADC_READ+0x42c>
 800118e:	f000 bc22 	b.w	80019d6 <ADC_READ+0x9a6>
	{
	case 1:

		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 8001192:	2200      	movs	r2, #0
 8001194:	2140      	movs	r1, #64	@ 0x40
 8001196:	48a0      	ldr	r0, [pc, #640]	@ (8001418 <ADC_READ+0x3e8>)
 8001198:	f003 faea 	bl	8004770 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, START_1_Pin, 0);
 800119c:	2200      	movs	r2, #0
 800119e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011a2:	489d      	ldr	r0, [pc, #628]	@ (8001418 <ADC_READ+0x3e8>)
 80011a4:	f003 fae4 	bl	8004770 <HAL_GPIO_WritePin>

		//HAL_Delay(100);
		HAL_GPIO_WritePin(GPIOC, RESET_1_Pin, 0);
 80011a8:	2200      	movs	r2, #0
 80011aa:	2104      	movs	r1, #4
 80011ac:	489b      	ldr	r0, [pc, #620]	@ (800141c <ADC_READ+0x3ec>)
 80011ae:	f003 fadf 	bl	8004770 <HAL_GPIO_WritePin>
		//HAL_Delay(100);
		HAL_GPIO_WritePin(GPIOC, RESET_1_Pin, 1);
 80011b2:	2201      	movs	r2, #1
 80011b4:	2104      	movs	r1, #4
 80011b6:	4899      	ldr	r0, [pc, #612]	@ (800141c <ADC_READ+0x3ec>)
 80011b8:	f003 fada 	bl	8004770 <HAL_GPIO_WritePin>
		//HAL_Delay(100);



		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 80011bc:	2200      	movs	r2, #0
 80011be:	2140      	movs	r1, #64	@ 0x40
 80011c0:	4895      	ldr	r0, [pc, #596]	@ (8001418 <ADC_READ+0x3e8>)
 80011c2:	f003 fad5 	bl	8004770 <HAL_GPIO_WritePin>


		HAL_SPI_Transmit(&hspi5, (uint8_t*) &txd_buf,0x13, 0xFF);
 80011c6:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 80011ca:	23ff      	movs	r3, #255	@ 0xff
 80011cc:	2213      	movs	r2, #19
 80011ce:	4894      	ldr	r0, [pc, #592]	@ (8001420 <ADC_READ+0x3f0>)
 80011d0:	f00a fb42 	bl	800b858 <HAL_SPI_Transmit>
		HAL_Delay(2);
 80011d4:	2002      	movs	r0, #2
 80011d6:	f002 ff1f 	bl	8004018 <HAL_Delay>
		//HAL_SPI_Receive(&hspi5, (uint8_t*) &rxd_buf, 20, 0xFF);
		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 1);
 80011da:	2201      	movs	r2, #1
 80011dc:	2140      	movs	r1, #64	@ 0x40
 80011de:	488e      	ldr	r0, [pc, #568]	@ (8001418 <ADC_READ+0x3e8>)
 80011e0:	f003 fac6 	bl	8004770 <HAL_GPIO_WritePin>


		//HAL_Delay(200);

		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2140      	movs	r1, #64	@ 0x40
 80011e8:	488b      	ldr	r0, [pc, #556]	@ (8001418 <ADC_READ+0x3e8>)
 80011ea:	f003 fac1 	bl	8004770 <HAL_GPIO_WritePin>
		txd_buf[0] = 0x20;
 80011ee:	2320      	movs	r3, #32
 80011f0:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
		txd_buf[1] = 0x11;
 80011f4:	2311      	movs	r3, #17
 80011f6:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
		HAL_Delay(2);
 80011fa:	2002      	movs	r0, #2
 80011fc:	f002 ff0c 	bl	8004018 <HAL_Delay>
		HAL_SPI_Transmit(&hspi5, (uint8_t*) &txd_buf, 2, 0xFF);
 8001200:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8001204:	23ff      	movs	r3, #255	@ 0xff
 8001206:	2202      	movs	r2, #2
 8001208:	4885      	ldr	r0, [pc, #532]	@ (8001420 <ADC_READ+0x3f0>)
 800120a:	f00a fb25 	bl	800b858 <HAL_SPI_Transmit>
		HAL_Delay(2);
 800120e:	2002      	movs	r0, #2
 8001210:	f002 ff02 	bl	8004018 <HAL_Delay>
		HAL_SPI_Receive(&hspi5, (uint8_t*) &rxd_buf, 0x11, 0xFF);
 8001214:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8001218:	23ff      	movs	r3, #255	@ 0xff
 800121a:	2211      	movs	r2, #17
 800121c:	4880      	ldr	r0, [pc, #512]	@ (8001420 <ADC_READ+0x3f0>)
 800121e:	f00a fd31 	bl	800bc84 <HAL_SPI_Receive>
		HAL_Delay(2);
 8001222:	2002      	movs	r0, #2
 8001224:	f002 fef8 	bl	8004018 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 1);
 8001228:	2201      	movs	r2, #1
 800122a:	2140      	movs	r1, #64	@ 0x40
 800122c:	487a      	ldr	r0, [pc, #488]	@ (8001418 <ADC_READ+0x3e8>)
 800122e:	f003 fa9f 	bl	8004770 <HAL_GPIO_WritePin>
		if(rxd_buf[7]==txd_buf[9])
 8001232:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8001236:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 800123a:	429a      	cmp	r2, r3
 800123c:	d110      	bne.n	8001260 <ADC_READ+0x230>
		{
			HAL_Delay(1);
 800123e:	2001      	movs	r0, #1
 8001240:	f002 feea 	bl	8004018 <HAL_Delay>
			sprintf(buffer, "S  %d  %dE\n\r",adc_num,channel);
 8001244:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001248:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800124c:	4975      	ldr	r1, [pc, #468]	@ (8001424 <ADC_READ+0x3f4>)
 800124e:	4876      	ldr	r0, [pc, #472]	@ (8001428 <ADC_READ+0x3f8>)
 8001250:	f00e f932 	bl	800f4b8 <siprintf>
			HAL_UART_Transmit_IT(&huart5, buffer, sizeof(buffer));
 8001254:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001258:	4973      	ldr	r1, [pc, #460]	@ (8001428 <ADC_READ+0x3f8>)
 800125a:	4874      	ldr	r0, [pc, #464]	@ (800142c <ADC_READ+0x3fc>)
 800125c:	f00b f8d4 	bl	800c408 <HAL_UART_Transmit_IT>
		}
		HAL_Delay(2);
 8001260:	2002      	movs	r0, #2
 8001262:	f002 fed9 	bl	8004018 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOF, START_1_Pin, 1);
 8001266:	2201      	movs	r2, #1
 8001268:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800126c:	486a      	ldr	r0, [pc, #424]	@ (8001418 <ADC_READ+0x3e8>)
 800126e:	f003 fa7f 	bl	8004770 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001272:	2002      	movs	r0, #2
 8001274:	f002 fed0 	bl	8004018 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 8001278:	2200      	movs	r2, #0
 800127a:	2140      	movs	r1, #64	@ 0x40
 800127c:	4866      	ldr	r0, [pc, #408]	@ (8001418 <ADC_READ+0x3e8>)
 800127e:	f003 fa77 	bl	8004770 <HAL_GPIO_WritePin>
		txd_buf[0] = 0x19;
 8001282:	2319      	movs	r3, #25
 8001284:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
		HAL_Delay(2);
 8001288:	2002      	movs	r0, #2
 800128a:	f002 fec5 	bl	8004018 <HAL_Delay>
		HAL_SPI_Transmit(&hspi5, (uint8_t*) &txd_buf, 1, 0xFF);
 800128e:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8001292:	23ff      	movs	r3, #255	@ 0xff
 8001294:	2201      	movs	r2, #1
 8001296:	4862      	ldr	r0, [pc, #392]	@ (8001420 <ADC_READ+0x3f0>)
 8001298:	f00a fade 	bl	800b858 <HAL_SPI_Transmit>
		HAL_Delay(2);
 800129c:	2002      	movs	r0, #2
 800129e:	f002 febb 	bl	8004018 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 1);
 80012a2:	2201      	movs	r2, #1
 80012a4:	2140      	movs	r1, #64	@ 0x40
 80012a6:	485c      	ldr	r0, [pc, #368]	@ (8001418 <ADC_READ+0x3e8>)
 80012a8:	f003 fa62 	bl	8004770 <HAL_GPIO_WritePin>
		HAL_Delay(wait_time);
 80012ac:	4b60      	ldr	r3, [pc, #384]	@ (8001430 <ADC_READ+0x400>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f002 feb1 	bl	8004018 <HAL_Delay>


		//				while(1)
		//				{

		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2140      	movs	r1, #64	@ 0x40
 80012ba:	4857      	ldr	r0, [pc, #348]	@ (8001418 <ADC_READ+0x3e8>)
 80012bc:	f003 fa58 	bl	8004770 <HAL_GPIO_WritePin>
		txd_buf[0] = 0x13;
 80012c0:	2313      	movs	r3, #19
 80012c2:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
		//HAL_Delay(2);
		HAL_SPI_Transmit(&hspi5, (uint8_t*) &txd_buf, 1, 0xFF);
 80012c6:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 80012ca:	23ff      	movs	r3, #255	@ 0xff
 80012cc:	2201      	movs	r2, #1
 80012ce:	4854      	ldr	r0, [pc, #336]	@ (8001420 <ADC_READ+0x3f0>)
 80012d0:	f00a fac2 	bl	800b858 <HAL_SPI_Transmit>
		//HAL_Delay(2);
		HAL_SPI_Receive(&hspi5, (uint8_t*) &reg_data_ADC_1, 0x2, 0xFF);
 80012d4:	23ff      	movs	r3, #255	@ 0xff
 80012d6:	2202      	movs	r2, #2
 80012d8:	4956      	ldr	r1, [pc, #344]	@ (8001434 <ADC_READ+0x404>)
 80012da:	4851      	ldr	r0, [pc, #324]	@ (8001420 <ADC_READ+0x3f0>)
 80012dc:	f00a fcd2 	bl	800bc84 <HAL_SPI_Receive>

		reg_data_ADC_1 = (reg_data_ADC_1 >> 8 | reg_data_ADC_1 << 8 ) ;
 80012e0:	4b54      	ldr	r3, [pc, #336]	@ (8001434 <ADC_READ+0x404>)
 80012e2:	881b      	ldrh	r3, [r3, #0]
 80012e4:	0a1b      	lsrs	r3, r3, #8
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	b21a      	sxth	r2, r3
 80012ea:	4b52      	ldr	r3, [pc, #328]	@ (8001434 <ADC_READ+0x404>)
 80012ec:	881b      	ldrh	r3, [r3, #0]
 80012ee:	021b      	lsls	r3, r3, #8
 80012f0:	b21b      	sxth	r3, r3
 80012f2:	4313      	orrs	r3, r2
 80012f4:	b21b      	sxth	r3, r3
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	4b4e      	ldr	r3, [pc, #312]	@ (8001434 <ADC_READ+0x404>)
 80012fa:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 1);
 80012fc:	2201      	movs	r2, #1
 80012fe:	2140      	movs	r1, #64	@ 0x40
 8001300:	4845      	ldr	r0, [pc, #276]	@ (8001418 <ADC_READ+0x3e8>)
 8001302:	f003 fa35 	bl	8004770 <HAL_GPIO_WritePin>

		resistance = ((2*1000*(float)reg_data_ADC_1)/4) / 0xFFFF;
 8001306:	4b4b      	ldr	r3, [pc, #300]	@ (8001434 <ADC_READ+0x404>)
 8001308:	881b      	ldrh	r3, [r3, #0]
 800130a:	ee07 3a90 	vmov	s15, r3
 800130e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001312:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8001438 <ADC_READ+0x408>
 8001316:	ee67 7a87 	vmul.f32	s15, s15, s14
 800131a:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800131e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001322:	eddf 6a46 	vldr	s13, [pc, #280]	@ 800143c <ADC_READ+0x40c>
 8001326:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800132a:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
		temperature = (resistance - 100.0 ) / 0.385;
 800132e:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8001332:	f7ff f919 	bl	8000568 <__aeabi_f2d>
 8001336:	f04f 0200 	mov.w	r2, #0
 800133a:	4b41      	ldr	r3, [pc, #260]	@ (8001440 <ADC_READ+0x410>)
 800133c:	f7fe ffb4 	bl	80002a8 <__aeabi_dsub>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	a331      	add	r3, pc, #196	@ (adr r3, 8001410 <ADC_READ+0x3e0>)
 800134a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134e:	f7ff fa8d 	bl	800086c <__aeabi_ddiv>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	4610      	mov	r0, r2
 8001358:	4619      	mov	r1, r3
 800135a:	f7ff fc35 	bl	8000bc8 <__aeabi_d2f>
 800135e:	4603      	mov	r3, r0
 8001360:	4a38      	ldr	r2, [pc, #224]	@ (8001444 <ADC_READ+0x414>)
 8001362:	6013      	str	r3, [r2, #0]

		if(rxd_buf[7]==txd_buf[9] )
 8001364:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8001368:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 800136c:	429a      	cmp	r2, r3
 800136e:	d128      	bne.n	80013c2 <ADC_READ+0x392>
		{
			HAL_Delay(1);
 8001370:	2001      	movs	r0, #1
 8001372:	f002 fe51 	bl	8004018 <HAL_Delay>
			sprintf(buffer, "S  %d  %dE  %X  temp = %f  resis == %f\n\r",adc_num,channel,reg_data_ADC_1,temperature,resistance);
 8001376:	f897 604f 	ldrb.w	r6, [r7, #79]	@ 0x4f
 800137a:	f897 804e 	ldrb.w	r8, [r7, #78]	@ 0x4e
 800137e:	4b2d      	ldr	r3, [pc, #180]	@ (8001434 <ADC_READ+0x404>)
 8001380:	881b      	ldrh	r3, [r3, #0]
 8001382:	643b      	str	r3, [r7, #64]	@ 0x40
 8001384:	4b2f      	ldr	r3, [pc, #188]	@ (8001444 <ADC_READ+0x414>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff f8ed 	bl	8000568 <__aeabi_f2d>
 800138e:	4604      	mov	r4, r0
 8001390:	460d      	mov	r5, r1
 8001392:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8001396:	f7ff f8e7 	bl	8000568 <__aeabi_f2d>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80013a2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80013a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	4643      	mov	r3, r8
 80013ac:	4632      	mov	r2, r6
 80013ae:	4926      	ldr	r1, [pc, #152]	@ (8001448 <ADC_READ+0x418>)
 80013b0:	481d      	ldr	r0, [pc, #116]	@ (8001428 <ADC_READ+0x3f8>)
 80013b2:	f00e f881 	bl	800f4b8 <siprintf>
			HAL_UART_Transmit_IT(&huart5, buffer, sizeof(buffer));
 80013b6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80013ba:	491b      	ldr	r1, [pc, #108]	@ (8001428 <ADC_READ+0x3f8>)
 80013bc:	481b      	ldr	r0, [pc, #108]	@ (800142c <ADC_READ+0x3fc>)
 80013be:	f00b f823 	bl	800c408 <HAL_UART_Transmit_IT>
		}
		if(channel == 1)
 80013c2:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d104      	bne.n	80013d4 <ADC_READ+0x3a4>
		{
			temp_sensor_1 = temperature ;
 80013ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001444 <ADC_READ+0x414>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a1f      	ldr	r2, [pc, #124]	@ (800144c <ADC_READ+0x41c>)
 80013d0:	6013      	str	r3, [r2, #0]
			temp_sensor_4 = temperature ;

		}
		//HAL_Delay(100000000);

		break;
 80013d2:	e2d4      	b.n	800197e <ADC_READ+0x94e>
		else if(channel == 2)
 80013d4:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d104      	bne.n	80013e6 <ADC_READ+0x3b6>
			temp_sensor_2 = temperature ;
 80013dc:	4b19      	ldr	r3, [pc, #100]	@ (8001444 <ADC_READ+0x414>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001450 <ADC_READ+0x420>)
 80013e2:	6013      	str	r3, [r2, #0]
		break;
 80013e4:	e2cb      	b.n	800197e <ADC_READ+0x94e>
		else if(channel == 3)
 80013e6:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d104      	bne.n	80013f8 <ADC_READ+0x3c8>
			temp_sensor_3 = temperature ;
 80013ee:	4b15      	ldr	r3, [pc, #84]	@ (8001444 <ADC_READ+0x414>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a18      	ldr	r2, [pc, #96]	@ (8001454 <ADC_READ+0x424>)
 80013f4:	6013      	str	r3, [r2, #0]
		break;
 80013f6:	e2c2      	b.n	800197e <ADC_READ+0x94e>
		else if(channel == 4)
 80013f8:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80013fc:	2b04      	cmp	r3, #4
 80013fe:	f040 82be 	bne.w	800197e <ADC_READ+0x94e>
			temp_sensor_4 = temperature ;
 8001402:	4b10      	ldr	r3, [pc, #64]	@ (8001444 <ADC_READ+0x414>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a14      	ldr	r2, [pc, #80]	@ (8001458 <ADC_READ+0x428>)
 8001408:	6013      	str	r3, [r2, #0]
		break;
 800140a:	e2b8      	b.n	800197e <ADC_READ+0x94e>
 800140c:	f3af 8000 	nop.w
 8001410:	0a3d70a4 	.word	0x0a3d70a4
 8001414:	3fd8a3d7 	.word	0x3fd8a3d7
 8001418:	42021400 	.word	0x42021400
 800141c:	42020800 	.word	0x42020800
 8001420:	200058d0 	.word	0x200058d0
 8001424:	0801176c 	.word	0x0801176c
 8001428:	2000020c 	.word	0x2000020c
 800142c:	200059f4 	.word	0x200059f4
 8001430:	20000000 	.word	0x20000000
 8001434:	20000464 	.word	0x20000464
 8001438:	44fa0000 	.word	0x44fa0000
 800143c:	477fff00 	.word	0x477fff00
 8001440:	40590000 	.word	0x40590000
 8001444:	2000046c 	.word	0x2000046c
 8001448:	0801177c 	.word	0x0801177c
 800144c:	20000470 	.word	0x20000470
 8001450:	20000474 	.word	0x20000474
 8001454:	20000478 	.word	0x20000478
 8001458:	2000047c 	.word	0x2000047c

	case 2:
		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 800145c:	2200      	movs	r2, #0
 800145e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001462:	489f      	ldr	r0, [pc, #636]	@ (80016e0 <ADC_READ+0x6b0>)
 8001464:	f003 f984 	bl	8004770 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, START_2_Pin, 0);
 8001468:	2200      	movs	r2, #0
 800146a:	2140      	movs	r1, #64	@ 0x40
 800146c:	489d      	ldr	r0, [pc, #628]	@ (80016e4 <ADC_READ+0x6b4>)
 800146e:	f003 f97f 	bl	8004770 <HAL_GPIO_WritePin>
		//HAL_Delay(100);
		HAL_GPIO_WritePin(GPIOG, RESET_2_Pin, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001478:	489a      	ldr	r0, [pc, #616]	@ (80016e4 <ADC_READ+0x6b4>)
 800147a:	f003 f979 	bl	8004770 <HAL_GPIO_WritePin>
		//HAL_Delay(100);
		HAL_GPIO_WritePin(GPIOG, RESET_2_Pin, 1);
 800147e:	2201      	movs	r2, #1
 8001480:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001484:	4897      	ldr	r0, [pc, #604]	@ (80016e4 <ADC_READ+0x6b4>)
 8001486:	f003 f973 	bl	8004770 <HAL_GPIO_WritePin>
		//HAL_Delay(100);



		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 800148a:	2200      	movs	r2, #0
 800148c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001490:	4893      	ldr	r0, [pc, #588]	@ (80016e0 <ADC_READ+0x6b0>)
 8001492:	f003 f96d 	bl	8004770 <HAL_GPIO_WritePin>

		HAL_Delay(2);
 8001496:	2002      	movs	r0, #2
 8001498:	f002 fdbe 	bl	8004018 <HAL_Delay>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &txd_buf,0x13, 0xFF);
 800149c:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 80014a0:	23ff      	movs	r3, #255	@ 0xff
 80014a2:	2213      	movs	r2, #19
 80014a4:	4890      	ldr	r0, [pc, #576]	@ (80016e8 <ADC_READ+0x6b8>)
 80014a6:	f00a f9d7 	bl	800b858 <HAL_SPI_Transmit>
		HAL_Delay(2);
 80014aa:	2002      	movs	r0, #2
 80014ac:	f002 fdb4 	bl	8004018 <HAL_Delay>
		//HAL_SPI_Receive(&hspi2, (uint8_t*) &rxd_buf, 20, 0xFF);
		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 1);
 80014b0:	2201      	movs	r2, #1
 80014b2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014b6:	488a      	ldr	r0, [pc, #552]	@ (80016e0 <ADC_READ+0x6b0>)
 80014b8:	f003 f95a 	bl	8004770 <HAL_GPIO_WritePin>


		//HAL_Delay(200);

		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 80014bc:	2200      	movs	r2, #0
 80014be:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014c2:	4887      	ldr	r0, [pc, #540]	@ (80016e0 <ADC_READ+0x6b0>)
 80014c4:	f003 f954 	bl	8004770 <HAL_GPIO_WritePin>
		txd_buf[0] = 0x20;
 80014c8:	2320      	movs	r3, #32
 80014ca:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
		txd_buf[1] = 0x11;
 80014ce:	2311      	movs	r3, #17
 80014d0:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
		HAL_Delay(2);
 80014d4:	2002      	movs	r0, #2
 80014d6:	f002 fd9f 	bl	8004018 <HAL_Delay>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &txd_buf, 2, 0xFF);
 80014da:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 80014de:	23ff      	movs	r3, #255	@ 0xff
 80014e0:	2202      	movs	r2, #2
 80014e2:	4881      	ldr	r0, [pc, #516]	@ (80016e8 <ADC_READ+0x6b8>)
 80014e4:	f00a f9b8 	bl	800b858 <HAL_SPI_Transmit>
		HAL_Delay(2);
 80014e8:	2002      	movs	r0, #2
 80014ea:	f002 fd95 	bl	8004018 <HAL_Delay>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &rxd_buf, 0x11, 0xFF);
 80014ee:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 80014f2:	23ff      	movs	r3, #255	@ 0xff
 80014f4:	2211      	movs	r2, #17
 80014f6:	487c      	ldr	r0, [pc, #496]	@ (80016e8 <ADC_READ+0x6b8>)
 80014f8:	f00a fbc4 	bl	800bc84 <HAL_SPI_Receive>
		HAL_Delay(2);
 80014fc:	2002      	movs	r0, #2
 80014fe:	f002 fd8b 	bl	8004018 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 1);
 8001502:	2201      	movs	r2, #1
 8001504:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001508:	4875      	ldr	r0, [pc, #468]	@ (80016e0 <ADC_READ+0x6b0>)
 800150a:	f003 f931 	bl	8004770 <HAL_GPIO_WritePin>

		HAL_Delay(2);
 800150e:	2002      	movs	r0, #2
 8001510:	f002 fd82 	bl	8004018 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOG, START_2_Pin, 1);
 8001514:	2201      	movs	r2, #1
 8001516:	2140      	movs	r1, #64	@ 0x40
 8001518:	4872      	ldr	r0, [pc, #456]	@ (80016e4 <ADC_READ+0x6b4>)
 800151a:	f003 f929 	bl	8004770 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800151e:	2002      	movs	r0, #2
 8001520:	f002 fd7a 	bl	8004018 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 8001524:	2200      	movs	r2, #0
 8001526:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800152a:	486d      	ldr	r0, [pc, #436]	@ (80016e0 <ADC_READ+0x6b0>)
 800152c:	f003 f920 	bl	8004770 <HAL_GPIO_WritePin>
		txd_buf[0] = 0x19;
 8001530:	2319      	movs	r3, #25
 8001532:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
		HAL_Delay(2);
 8001536:	2002      	movs	r0, #2
 8001538:	f002 fd6e 	bl	8004018 <HAL_Delay>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &txd_buf, 1, 0xFF);
 800153c:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8001540:	23ff      	movs	r3, #255	@ 0xff
 8001542:	2201      	movs	r2, #1
 8001544:	4868      	ldr	r0, [pc, #416]	@ (80016e8 <ADC_READ+0x6b8>)
 8001546:	f00a f987 	bl	800b858 <HAL_SPI_Transmit>
		HAL_Delay(2);
 800154a:	2002      	movs	r0, #2
 800154c:	f002 fd64 	bl	8004018 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 1);
 8001550:	2201      	movs	r2, #1
 8001552:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001556:	4862      	ldr	r0, [pc, #392]	@ (80016e0 <ADC_READ+0x6b0>)
 8001558:	f003 f90a 	bl	8004770 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800155c:	2002      	movs	r0, #2
 800155e:	f002 fd5b 	bl	8004018 <HAL_Delay>
		HAL_Delay(wait_time);
 8001562:	4b62      	ldr	r3, [pc, #392]	@ (80016ec <ADC_READ+0x6bc>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f002 fd56 	bl	8004018 <HAL_Delay>


		//				while(1)
		//				{

		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 800156c:	2200      	movs	r2, #0
 800156e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001572:	485b      	ldr	r0, [pc, #364]	@ (80016e0 <ADC_READ+0x6b0>)
 8001574:	f003 f8fc 	bl	8004770 <HAL_GPIO_WritePin>
		txd_buf[0] = 0x13;
 8001578:	2313      	movs	r3, #19
 800157a:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
		HAL_Delay(2);
 800157e:	2002      	movs	r0, #2
 8001580:	f002 fd4a 	bl	8004018 <HAL_Delay>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &txd_buf, 1, 0xFF);
 8001584:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8001588:	23ff      	movs	r3, #255	@ 0xff
 800158a:	2201      	movs	r2, #1
 800158c:	4856      	ldr	r0, [pc, #344]	@ (80016e8 <ADC_READ+0x6b8>)
 800158e:	f00a f963 	bl	800b858 <HAL_SPI_Transmit>
		HAL_Delay(2);
 8001592:	2002      	movs	r0, #2
 8001594:	f002 fd40 	bl	8004018 <HAL_Delay>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &reg_data_ADC_2, 0x2, 0xFF);
 8001598:	23ff      	movs	r3, #255	@ 0xff
 800159a:	2202      	movs	r2, #2
 800159c:	4954      	ldr	r1, [pc, #336]	@ (80016f0 <ADC_READ+0x6c0>)
 800159e:	4852      	ldr	r0, [pc, #328]	@ (80016e8 <ADC_READ+0x6b8>)
 80015a0:	f00a fb70 	bl	800bc84 <HAL_SPI_Receive>
		reg_data_ADC_2 = (reg_data_ADC_2 >> 8 | reg_data_ADC_2 << 8 ) ;
 80015a4:	4b52      	ldr	r3, [pc, #328]	@ (80016f0 <ADC_READ+0x6c0>)
 80015a6:	881b      	ldrh	r3, [r3, #0]
 80015a8:	0a1b      	lsrs	r3, r3, #8
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	b21a      	sxth	r2, r3
 80015ae:	4b50      	ldr	r3, [pc, #320]	@ (80016f0 <ADC_READ+0x6c0>)
 80015b0:	881b      	ldrh	r3, [r3, #0]
 80015b2:	021b      	lsls	r3, r3, #8
 80015b4:	b21b      	sxth	r3, r3
 80015b6:	4313      	orrs	r3, r2
 80015b8:	b21b      	sxth	r3, r3
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	4b4c      	ldr	r3, [pc, #304]	@ (80016f0 <ADC_READ+0x6c0>)
 80015be:	801a      	strh	r2, [r3, #0]
		HAL_Delay(2);
 80015c0:	2002      	movs	r0, #2
 80015c2:	f002 fd29 	bl	8004018 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 1);
 80015c6:	2201      	movs	r2, #1
 80015c8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015cc:	4844      	ldr	r0, [pc, #272]	@ (80016e0 <ADC_READ+0x6b0>)
 80015ce:	f003 f8cf 	bl	8004770 <HAL_GPIO_WritePin>
		resistance = ((2*1000*(float)reg_data_ADC_2)/4) / 0xFFFF;
 80015d2:	4b47      	ldr	r3, [pc, #284]	@ (80016f0 <ADC_READ+0x6c0>)
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	ee07 3a90 	vmov	s15, r3
 80015da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015de:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 80016f4 <ADC_READ+0x6c4>
 80015e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015e6:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80015ea:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80015ee:	eddf 6a42 	vldr	s13, [pc, #264]	@ 80016f8 <ADC_READ+0x6c8>
 80015f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015f6:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
		temperature = (resistance - 100.0 ) / 0.385;
 80015fa:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 80015fe:	f7fe ffb3 	bl	8000568 <__aeabi_f2d>
 8001602:	f04f 0200 	mov.w	r2, #0
 8001606:	4b3d      	ldr	r3, [pc, #244]	@ (80016fc <ADC_READ+0x6cc>)
 8001608:	f7fe fe4e 	bl	80002a8 <__aeabi_dsub>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4610      	mov	r0, r2
 8001612:	4619      	mov	r1, r3
 8001614:	a330      	add	r3, pc, #192	@ (adr r3, 80016d8 <ADC_READ+0x6a8>)
 8001616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161a:	f7ff f927 	bl	800086c <__aeabi_ddiv>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	4610      	mov	r0, r2
 8001624:	4619      	mov	r1, r3
 8001626:	f7ff facf 	bl	8000bc8 <__aeabi_d2f>
 800162a:	4603      	mov	r3, r0
 800162c:	4a34      	ldr	r2, [pc, #208]	@ (8001700 <ADC_READ+0x6d0>)
 800162e:	6013      	str	r3, [r2, #0]
		if(rxd_buf[7]==txd_buf[9] )
 8001630:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8001634:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 8001638:	429a      	cmp	r2, r3
 800163a:	d128      	bne.n	800168e <ADC_READ+0x65e>
		{
			HAL_Delay(1);
 800163c:	2001      	movs	r0, #1
 800163e:	f002 fceb 	bl	8004018 <HAL_Delay>
			sprintf(buffer, "S  %d  %dE  %X  temp = %f  resis == %f\n\r",adc_num,channel,reg_data_ADC_2,temperature,resistance);
 8001642:	f897 604f 	ldrb.w	r6, [r7, #79]	@ 0x4f
 8001646:	f897 804e 	ldrb.w	r8, [r7, #78]	@ 0x4e
 800164a:	4b29      	ldr	r3, [pc, #164]	@ (80016f0 <ADC_READ+0x6c0>)
 800164c:	881b      	ldrh	r3, [r3, #0]
 800164e:	643b      	str	r3, [r7, #64]	@ 0x40
 8001650:	4b2b      	ldr	r3, [pc, #172]	@ (8001700 <ADC_READ+0x6d0>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe ff87 	bl	8000568 <__aeabi_f2d>
 800165a:	4604      	mov	r4, r0
 800165c:	460d      	mov	r5, r1
 800165e:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8001662:	f7fe ff81 	bl	8000568 <__aeabi_f2d>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800166e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001672:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	4643      	mov	r3, r8
 8001678:	4632      	mov	r2, r6
 800167a:	4922      	ldr	r1, [pc, #136]	@ (8001704 <ADC_READ+0x6d4>)
 800167c:	4822      	ldr	r0, [pc, #136]	@ (8001708 <ADC_READ+0x6d8>)
 800167e:	f00d ff1b 	bl	800f4b8 <siprintf>
			HAL_UART_Transmit_IT(&huart5, buffer, sizeof(buffer));
 8001682:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001686:	4920      	ldr	r1, [pc, #128]	@ (8001708 <ADC_READ+0x6d8>)
 8001688:	4820      	ldr	r0, [pc, #128]	@ (800170c <ADC_READ+0x6dc>)
 800168a:	f00a febd 	bl	800c408 <HAL_UART_Transmit_IT>
		}
		if(channel == 1)
 800168e:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001692:	2b01      	cmp	r3, #1
 8001694:	d104      	bne.n	80016a0 <ADC_READ+0x670>
		{
			temp_sensor_5 = temperature ;
 8001696:	4b1a      	ldr	r3, [pc, #104]	@ (8001700 <ADC_READ+0x6d0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a1d      	ldr	r2, [pc, #116]	@ (8001710 <ADC_READ+0x6e0>)
 800169c:	6013      	str	r3, [r2, #0]
		else if(channel == 4)
		{
			temp_sensor_8 = temperature ;

		}
		break;
 800169e:	e170      	b.n	8001982 <ADC_READ+0x952>
		else if(channel == 2)
 80016a0:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d104      	bne.n	80016b2 <ADC_READ+0x682>
			temp_sensor_6 = temperature ;
 80016a8:	4b15      	ldr	r3, [pc, #84]	@ (8001700 <ADC_READ+0x6d0>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a19      	ldr	r2, [pc, #100]	@ (8001714 <ADC_READ+0x6e4>)
 80016ae:	6013      	str	r3, [r2, #0]
		break;
 80016b0:	e167      	b.n	8001982 <ADC_READ+0x952>
		else if(channel == 3)
 80016b2:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80016b6:	2b03      	cmp	r3, #3
 80016b8:	d104      	bne.n	80016c4 <ADC_READ+0x694>
			temp_sensor_7 = temperature ;
 80016ba:	4b11      	ldr	r3, [pc, #68]	@ (8001700 <ADC_READ+0x6d0>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a16      	ldr	r2, [pc, #88]	@ (8001718 <ADC_READ+0x6e8>)
 80016c0:	6013      	str	r3, [r2, #0]
		break;
 80016c2:	e15e      	b.n	8001982 <ADC_READ+0x952>
		else if(channel == 4)
 80016c4:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80016c8:	2b04      	cmp	r3, #4
 80016ca:	f040 815a 	bne.w	8001982 <ADC_READ+0x952>
			temp_sensor_8 = temperature ;
 80016ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001700 <ADC_READ+0x6d0>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a12      	ldr	r2, [pc, #72]	@ (800171c <ADC_READ+0x6ec>)
 80016d4:	6013      	str	r3, [r2, #0]
		break;
 80016d6:	e154      	b.n	8001982 <ADC_READ+0x952>
 80016d8:	0a3d70a4 	.word	0x0a3d70a4
 80016dc:	3fd8a3d7 	.word	0x3fd8a3d7
 80016e0:	42020400 	.word	0x42020400
 80016e4:	42021800 	.word	0x42021800
 80016e8:	200057b0 	.word	0x200057b0
 80016ec:	20000000 	.word	0x20000000
 80016f0:	20000466 	.word	0x20000466
 80016f4:	44fa0000 	.word	0x44fa0000
 80016f8:	477fff00 	.word	0x477fff00
 80016fc:	40590000 	.word	0x40590000
 8001700:	2000046c 	.word	0x2000046c
 8001704:	0801177c 	.word	0x0801177c
 8001708:	2000020c 	.word	0x2000020c
 800170c:	200059f4 	.word	0x200059f4
 8001710:	20000480 	.word	0x20000480
 8001714:	20000484 	.word	0x20000484
 8001718:	20000488 	.word	0x20000488
 800171c:	2000048c 	.word	0x2000048c

	case 3:
		HAL_GPIO_WritePin(GPIOA, RESET_3_Pin, 0);
 8001720:	2200      	movs	r2, #0
 8001722:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001726:	489a      	ldr	r0, [pc, #616]	@ (8001990 <ADC_READ+0x960>)
 8001728:	f003 f822 	bl	8004770 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 800172c:	200a      	movs	r0, #10
 800172e:	f002 fc73 	bl	8004018 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, RESET_3_Pin, 1);
 8001732:	2201      	movs	r2, #1
 8001734:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001738:	4895      	ldr	r0, [pc, #596]	@ (8001990 <ADC_READ+0x960>)
 800173a:	f003 f819 	bl	8004770 <HAL_GPIO_WritePin>
		//HAL_Delay(100);
		HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 800173e:	2200      	movs	r2, #0
 8001740:	2110      	movs	r1, #16
 8001742:	4894      	ldr	r0, [pc, #592]	@ (8001994 <ADC_READ+0x964>)
 8001744:	f003 f814 	bl	8004770 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, START_3_Pin, 0);
 8001748:	2200      	movs	r2, #0
 800174a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800174e:	4890      	ldr	r0, [pc, #576]	@ (8001990 <ADC_READ+0x960>)
 8001750:	f003 f80e 	bl	8004770 <HAL_GPIO_WritePin>


		HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 8001754:	2200      	movs	r2, #0
 8001756:	2110      	movs	r1, #16
 8001758:	488e      	ldr	r0, [pc, #568]	@ (8001994 <ADC_READ+0x964>)
 800175a:	f003 f809 	bl	8004770 <HAL_GPIO_WritePin>


		HAL_SPI_Transmit(&hspi3, (uint8_t*) &txd_buf,0x13, 0xFF);
 800175e:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8001762:	23ff      	movs	r3, #255	@ 0xff
 8001764:	2213      	movs	r2, #19
 8001766:	488c      	ldr	r0, [pc, #560]	@ (8001998 <ADC_READ+0x968>)
 8001768:	f00a f876 	bl	800b858 <HAL_SPI_Transmit>
		HAL_Delay(2);
 800176c:	2002      	movs	r0, #2
 800176e:	f002 fc53 	bl	8004018 <HAL_Delay>
		//HAL_SPI_Receive(&hspi3, (uint8_t*) &rxd_buf, 20, 0xFF);
		HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 1);
 8001772:	2201      	movs	r2, #1
 8001774:	2110      	movs	r1, #16
 8001776:	4887      	ldr	r0, [pc, #540]	@ (8001994 <ADC_READ+0x964>)
 8001778:	f002 fffa 	bl	8004770 <HAL_GPIO_WritePin>


		//HAL_Delay(200);

		HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 800177c:	2200      	movs	r2, #0
 800177e:	2110      	movs	r1, #16
 8001780:	4884      	ldr	r0, [pc, #528]	@ (8001994 <ADC_READ+0x964>)
 8001782:	f002 fff5 	bl	8004770 <HAL_GPIO_WritePin>
		txd_buf[0] = 0x20;
 8001786:	2320      	movs	r3, #32
 8001788:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
		txd_buf[1] = 0x11;
 800178c:	2311      	movs	r3, #17
 800178e:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
		HAL_SPI_Transmit(&hspi3, (uint8_t*) &txd_buf, 2, 0xFF);
 8001792:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8001796:	23ff      	movs	r3, #255	@ 0xff
 8001798:	2202      	movs	r2, #2
 800179a:	487f      	ldr	r0, [pc, #508]	@ (8001998 <ADC_READ+0x968>)
 800179c:	f00a f85c 	bl	800b858 <HAL_SPI_Transmit>
		HAL_Delay(2);
 80017a0:	2002      	movs	r0, #2
 80017a2:	f002 fc39 	bl	8004018 <HAL_Delay>
		HAL_SPI_Receive(&hspi3, (uint8_t*) &rxd_buf, 0x11, 0xFF);
 80017a6:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 80017aa:	23ff      	movs	r3, #255	@ 0xff
 80017ac:	2211      	movs	r2, #17
 80017ae:	487a      	ldr	r0, [pc, #488]	@ (8001998 <ADC_READ+0x968>)
 80017b0:	f00a fa68 	bl	800bc84 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 1);
 80017b4:	2201      	movs	r2, #1
 80017b6:	2110      	movs	r1, #16
 80017b8:	4876      	ldr	r0, [pc, #472]	@ (8001994 <ADC_READ+0x964>)
 80017ba:	f002 ffd9 	bl	8004770 <HAL_GPIO_WritePin>

		if(rxd_buf[7]==txd_buf[9])
 80017be:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 80017c2:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d110      	bne.n	80017ec <ADC_READ+0x7bc>
		{
			HAL_Delay(1);
 80017ca:	2001      	movs	r0, #1
 80017cc:	f002 fc24 	bl	8004018 <HAL_Delay>
			sprintf(buffer, "S  %d  %dE\n\r",adc_num,channel);
 80017d0:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80017d4:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80017d8:	4970      	ldr	r1, [pc, #448]	@ (800199c <ADC_READ+0x96c>)
 80017da:	4871      	ldr	r0, [pc, #452]	@ (80019a0 <ADC_READ+0x970>)
 80017dc:	f00d fe6c 	bl	800f4b8 <siprintf>
			HAL_UART_Transmit_IT(&huart5, buffer, sizeof(buffer));
 80017e0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80017e4:	496e      	ldr	r1, [pc, #440]	@ (80019a0 <ADC_READ+0x970>)
 80017e6:	486f      	ldr	r0, [pc, #444]	@ (80019a4 <ADC_READ+0x974>)
 80017e8:	f00a fe0e 	bl	800c408 <HAL_UART_Transmit_IT>
		}
		HAL_GPIO_WritePin(GPIOA, START_3_Pin, 1);
 80017ec:	2201      	movs	r2, #1
 80017ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80017f2:	4867      	ldr	r0, [pc, #412]	@ (8001990 <ADC_READ+0x960>)
 80017f4:	f002 ffbc 	bl	8004770 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 80017f8:	2200      	movs	r2, #0
 80017fa:	2110      	movs	r1, #16
 80017fc:	4865      	ldr	r0, [pc, #404]	@ (8001994 <ADC_READ+0x964>)
 80017fe:	f002 ffb7 	bl	8004770 <HAL_GPIO_WritePin>
		txd_buf[0] = 0x19;
 8001802:	2319      	movs	r3, #25
 8001804:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

		HAL_SPI_Transmit(&hspi3, (uint8_t*) &txd_buf, 1, 0xFF);
 8001808:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 800180c:	23ff      	movs	r3, #255	@ 0xff
 800180e:	2201      	movs	r2, #1
 8001810:	4861      	ldr	r0, [pc, #388]	@ (8001998 <ADC_READ+0x968>)
 8001812:	f00a f821 	bl	800b858 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 1);
 8001816:	2201      	movs	r2, #1
 8001818:	2110      	movs	r1, #16
 800181a:	485e      	ldr	r0, [pc, #376]	@ (8001994 <ADC_READ+0x964>)
 800181c:	f002 ffa8 	bl	8004770 <HAL_GPIO_WritePin>
		HAL_Delay(wait_time);
 8001820:	4b61      	ldr	r3, [pc, #388]	@ (80019a8 <ADC_READ+0x978>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f002 fbf7 	bl	8004018 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 800182a:	2200      	movs	r2, #0
 800182c:	2110      	movs	r1, #16
 800182e:	4859      	ldr	r0, [pc, #356]	@ (8001994 <ADC_READ+0x964>)
 8001830:	f002 ff9e 	bl	8004770 <HAL_GPIO_WritePin>
		txd_buf[0] = 0x13;
 8001834:	2313      	movs	r3, #19
 8001836:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

		HAL_SPI_Transmit(&hspi3, (uint8_t*) &txd_buf, 1, 0xFF);
 800183a:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 800183e:	23ff      	movs	r3, #255	@ 0xff
 8001840:	2201      	movs	r2, #1
 8001842:	4855      	ldr	r0, [pc, #340]	@ (8001998 <ADC_READ+0x968>)
 8001844:	f00a f808 	bl	800b858 <HAL_SPI_Transmit>

		HAL_SPI_Receive(&hspi3, (uint8_t*) &reg_data_ADC_3, 0x2, 0xFF);
 8001848:	23ff      	movs	r3, #255	@ 0xff
 800184a:	2202      	movs	r2, #2
 800184c:	4957      	ldr	r1, [pc, #348]	@ (80019ac <ADC_READ+0x97c>)
 800184e:	4852      	ldr	r0, [pc, #328]	@ (8001998 <ADC_READ+0x968>)
 8001850:	f00a fa18 	bl	800bc84 <HAL_SPI_Receive>
		reg_data_ADC_3 = (reg_data_ADC_3 >> 8 | reg_data_ADC_3 << 8 ) ;
 8001854:	4b55      	ldr	r3, [pc, #340]	@ (80019ac <ADC_READ+0x97c>)
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	0a1b      	lsrs	r3, r3, #8
 800185a:	b29b      	uxth	r3, r3
 800185c:	b21a      	sxth	r2, r3
 800185e:	4b53      	ldr	r3, [pc, #332]	@ (80019ac <ADC_READ+0x97c>)
 8001860:	881b      	ldrh	r3, [r3, #0]
 8001862:	021b      	lsls	r3, r3, #8
 8001864:	b21b      	sxth	r3, r3
 8001866:	4313      	orrs	r3, r2
 8001868:	b21b      	sxth	r3, r3
 800186a:	b29a      	uxth	r2, r3
 800186c:	4b4f      	ldr	r3, [pc, #316]	@ (80019ac <ADC_READ+0x97c>)
 800186e:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 1);
 8001870:	2201      	movs	r2, #1
 8001872:	2110      	movs	r1, #16
 8001874:	4847      	ldr	r0, [pc, #284]	@ (8001994 <ADC_READ+0x964>)
 8001876:	f002 ff7b 	bl	8004770 <HAL_GPIO_WritePin>
		resistance = ((2*1000*(float)reg_data_ADC_3)/4) / 0xFFFF;
 800187a:	4b4c      	ldr	r3, [pc, #304]	@ (80019ac <ADC_READ+0x97c>)
 800187c:	881b      	ldrh	r3, [r3, #0]
 800187e:	ee07 3a90 	vmov	s15, r3
 8001882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001886:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 80019b0 <ADC_READ+0x980>
 800188a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800188e:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001892:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001896:	eddf 6a47 	vldr	s13, [pc, #284]	@ 80019b4 <ADC_READ+0x984>
 800189a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800189e:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
		temperature = (resistance - 100.0 ) / 0.385;
 80018a2:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 80018a6:	f7fe fe5f 	bl	8000568 <__aeabi_f2d>
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	4b42      	ldr	r3, [pc, #264]	@ (80019b8 <ADC_READ+0x988>)
 80018b0:	f7fe fcfa 	bl	80002a8 <__aeabi_dsub>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4610      	mov	r0, r2
 80018ba:	4619      	mov	r1, r3
 80018bc:	a332      	add	r3, pc, #200	@ (adr r3, 8001988 <ADC_READ+0x958>)
 80018be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c2:	f7fe ffd3 	bl	800086c <__aeabi_ddiv>
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	4610      	mov	r0, r2
 80018cc:	4619      	mov	r1, r3
 80018ce:	f7ff f97b 	bl	8000bc8 <__aeabi_d2f>
 80018d2:	4603      	mov	r3, r0
 80018d4:	4a39      	ldr	r2, [pc, #228]	@ (80019bc <ADC_READ+0x98c>)
 80018d6:	6013      	str	r3, [r2, #0]
		if(rxd_buf[7]==txd_buf[9] )
 80018d8:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 80018dc:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d128      	bne.n	8001936 <ADC_READ+0x906>
		{
			HAL_Delay(1);
 80018e4:	2001      	movs	r0, #1
 80018e6:	f002 fb97 	bl	8004018 <HAL_Delay>
			sprintf(buffer, "S  %d  %dE  %X  temp = %f  resis == %f\n\r",adc_num,channel,reg_data_ADC_3,temperature,resistance);
 80018ea:	f897 604f 	ldrb.w	r6, [r7, #79]	@ 0x4f
 80018ee:	f897 804e 	ldrb.w	r8, [r7, #78]	@ 0x4e
 80018f2:	4b2e      	ldr	r3, [pc, #184]	@ (80019ac <ADC_READ+0x97c>)
 80018f4:	881b      	ldrh	r3, [r3, #0]
 80018f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80018f8:	4b30      	ldr	r3, [pc, #192]	@ (80019bc <ADC_READ+0x98c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7fe fe33 	bl	8000568 <__aeabi_f2d>
 8001902:	4604      	mov	r4, r0
 8001904:	460d      	mov	r5, r1
 8001906:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 800190a:	f7fe fe2d 	bl	8000568 <__aeabi_f2d>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001916:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800191a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	4643      	mov	r3, r8
 8001920:	4632      	mov	r2, r6
 8001922:	4927      	ldr	r1, [pc, #156]	@ (80019c0 <ADC_READ+0x990>)
 8001924:	481e      	ldr	r0, [pc, #120]	@ (80019a0 <ADC_READ+0x970>)
 8001926:	f00d fdc7 	bl	800f4b8 <siprintf>
			HAL_UART_Transmit_IT(&huart5, buffer, sizeof(buffer));
 800192a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800192e:	491c      	ldr	r1, [pc, #112]	@ (80019a0 <ADC_READ+0x970>)
 8001930:	481c      	ldr	r0, [pc, #112]	@ (80019a4 <ADC_READ+0x974>)
 8001932:	f00a fd69 	bl	800c408 <HAL_UART_Transmit_IT>
		}
		if(channel == 1)
 8001936:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800193a:	2b01      	cmp	r3, #1
 800193c:	d104      	bne.n	8001948 <ADC_READ+0x918>
		{
			temp_sensor_9 = temperature ;
 800193e:	4b1f      	ldr	r3, [pc, #124]	@ (80019bc <ADC_READ+0x98c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a20      	ldr	r2, [pc, #128]	@ (80019c4 <ADC_READ+0x994>)
 8001944:	6013      	str	r3, [r2, #0]
		else if(channel == 4)
		{
			temp_sensor_12 = temperature ;

		}
		break;
 8001946:	e045      	b.n	80019d4 <ADC_READ+0x9a4>
		else if(channel == 2)
 8001948:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800194c:	2b02      	cmp	r3, #2
 800194e:	d104      	bne.n	800195a <ADC_READ+0x92a>
			temp_sensor_10 = temperature ;
 8001950:	4b1a      	ldr	r3, [pc, #104]	@ (80019bc <ADC_READ+0x98c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a1c      	ldr	r2, [pc, #112]	@ (80019c8 <ADC_READ+0x998>)
 8001956:	6013      	str	r3, [r2, #0]
		break;
 8001958:	e03c      	b.n	80019d4 <ADC_READ+0x9a4>
		else if(channel == 3)
 800195a:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800195e:	2b03      	cmp	r3, #3
 8001960:	d104      	bne.n	800196c <ADC_READ+0x93c>
			temp_sensor_11 = temperature ;
 8001962:	4b16      	ldr	r3, [pc, #88]	@ (80019bc <ADC_READ+0x98c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a19      	ldr	r2, [pc, #100]	@ (80019cc <ADC_READ+0x99c>)
 8001968:	6013      	str	r3, [r2, #0]
		break;
 800196a:	e033      	b.n	80019d4 <ADC_READ+0x9a4>
		else if(channel == 4)
 800196c:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001970:	2b04      	cmp	r3, #4
 8001972:	d12f      	bne.n	80019d4 <ADC_READ+0x9a4>
			temp_sensor_12 = temperature ;
 8001974:	4b11      	ldr	r3, [pc, #68]	@ (80019bc <ADC_READ+0x98c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a15      	ldr	r2, [pc, #84]	@ (80019d0 <ADC_READ+0x9a0>)
 800197a:	6013      	str	r3, [r2, #0]
		break;
 800197c:	e02a      	b.n	80019d4 <ADC_READ+0x9a4>
		break;
 800197e:	bf00      	nop
 8001980:	e029      	b.n	80019d6 <ADC_READ+0x9a6>
		break;
 8001982:	bf00      	nop
 8001984:	e027      	b.n	80019d6 <ADC_READ+0x9a6>
 8001986:	bf00      	nop
 8001988:	0a3d70a4 	.word	0x0a3d70a4
 800198c:	3fd8a3d7 	.word	0x3fd8a3d7
 8001990:	42020000 	.word	0x42020000
 8001994:	42020c00 	.word	0x42020c00
 8001998:	20005840 	.word	0x20005840
 800199c:	0801176c 	.word	0x0801176c
 80019a0:	2000020c 	.word	0x2000020c
 80019a4:	200059f4 	.word	0x200059f4
 80019a8:	20000000 	.word	0x20000000
 80019ac:	20000468 	.word	0x20000468
 80019b0:	44fa0000 	.word	0x44fa0000
 80019b4:	477fff00 	.word	0x477fff00
 80019b8:	40590000 	.word	0x40590000
 80019bc:	2000046c 	.word	0x2000046c
 80019c0:	0801177c 	.word	0x0801177c
 80019c4:	20000490 	.word	0x20000490
 80019c8:	20000494 	.word	0x20000494
 80019cc:	20000498 	.word	0x20000498
 80019d0:	2000049c 	.word	0x2000049c
		break;
 80019d4:	bf00      	nop
	}


	if(channel == 4 && adc_num == 3)
 80019d6:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80019da:	2b04      	cmp	r3, #4
 80019dc:	f040 80de 	bne.w	8001b9c <ADC_READ+0xb6c>
 80019e0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80019e4:	2b03      	cmp	r3, #3
 80019e6:	f040 80d9 	bne.w	8001b9c <ADC_READ+0xb6c>
	{
		uint8_t time_data[8]={0};
 80019ea:	2300      	movs	r3, #0
 80019ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80019ee:	2300      	movs	r3, #0
 80019f0:	657b      	str	r3, [r7, #84]	@ 0x54
		uint32_t sec_addr = 0x60000000 | 0x7FFF9;
 80019f2:	4b6f      	ldr	r3, [pc, #444]	@ (8001bb0 <ADC_READ+0xb80>)
 80019f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		HAL_SRAM_Read_8b(&hsram1, (uint32_t *)sec_addr, (uint8_t *)&time_data,7);
 80019f8:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80019fc:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8001a00:	2307      	movs	r3, #7
 8001a02:	486c      	ldr	r0, [pc, #432]	@ (8001bb4 <ADC_READ+0xb84>)
 8001a04:	f00a fc22 	bl	800c24c <HAL_SRAM_Read_8b>
		memset(buffer_1,0,sizeof(buffer));
 8001a08:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	486a      	ldr	r0, [pc, #424]	@ (8001bb8 <ADC_READ+0xb88>)
 8001a10:	f00d fdb5 	bl	800f57e <memset>
		HAL_Delay(50);
 8001a14:	2032      	movs	r0, #50	@ 0x32
 8001a16:	f002 faff 	bl	8004018 <HAL_Delay>
		sprintf(buffer_1,
 8001a1a:	4b68      	ldr	r3, [pc, #416]	@ (8001bbc <ADC_READ+0xb8c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7fe fda2 	bl	8000568 <__aeabi_f2d>
 8001a24:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 8001a28:	4b65      	ldr	r3, [pc, #404]	@ (8001bc0 <ADC_READ+0xb90>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe fd9b 	bl	8000568 <__aeabi_f2d>
 8001a32:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 8001a36:	4b63      	ldr	r3, [pc, #396]	@ (8001bc4 <ADC_READ+0xb94>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7fe fd94 	bl	8000568 <__aeabi_f2d>
 8001a40:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
 8001a44:	4b60      	ldr	r3, [pc, #384]	@ (8001bc8 <ADC_READ+0xb98>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7fe fd8d 	bl	8000568 <__aeabi_f2d>
 8001a4e:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 8001a52:	4b5e      	ldr	r3, [pc, #376]	@ (8001bcc <ADC_READ+0xb9c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7fe fd86 	bl	8000568 <__aeabi_f2d>
 8001a5c:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8001a60:	4b5b      	ldr	r3, [pc, #364]	@ (8001bd0 <ADC_READ+0xba0>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7fe fd7f 	bl	8000568 <__aeabi_f2d>
 8001a6a:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001a6e:	4b59      	ldr	r3, [pc, #356]	@ (8001bd4 <ADC_READ+0xba4>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7fe fd78 	bl	8000568 <__aeabi_f2d>
 8001a78:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001a7c:	4b56      	ldr	r3, [pc, #344]	@ (8001bd8 <ADC_READ+0xba8>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7fe fd71 	bl	8000568 <__aeabi_f2d>
 8001a86:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001a8a:	4b54      	ldr	r3, [pc, #336]	@ (8001bdc <ADC_READ+0xbac>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe fd6a 	bl	8000568 <__aeabi_f2d>
 8001a94:	e9c7 0100 	strd	r0, r1, [r7]
 8001a98:	4b51      	ldr	r3, [pc, #324]	@ (8001be0 <ADC_READ+0xbb0>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7fe fd63 	bl	8000568 <__aeabi_f2d>
 8001aa2:	4682      	mov	sl, r0
 8001aa4:	468b      	mov	fp, r1
 8001aa6:	4b4f      	ldr	r3, [pc, #316]	@ (8001be4 <ADC_READ+0xbb4>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7fe fd5c 	bl	8000568 <__aeabi_f2d>
 8001ab0:	4680      	mov	r8, r0
 8001ab2:	4689      	mov	r9, r1
 8001ab4:	4b4c      	ldr	r3, [pc, #304]	@ (8001be8 <ADC_READ+0xbb8>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7fe fd55 	bl	8000568 <__aeabi_f2d>
				"{\"TS1\": \"%.2f\", \"TS2\": \"%.2f\", \"TS3\": \"%.2f\", \"TS4\": \"%.2f\", \"TS5\": \"%.2f\", "
				"\"TS6\": \"%.2f\", \"TS7\": \"%.2f\", \"TS8\": \"%.2f\", \"TS9\": \"%.2f\", \"TS10\": \"%.2f\", "
				"\"TS11\": \"%.2f\", \"TS12\": \"%.2f\", \"TIME\": \"%x:%x:%x\",\"DATE\": \"%x-%x-20%x}\"\n\r",
				temp_sensor_1, temp_sensor_2, temp_sensor_3, temp_sensor_4, temp_sensor_5, temp_sensor_6,
				temp_sensor_7, temp_sensor_8, temp_sensor_9, temp_sensor_10, temp_sensor_11, temp_sensor_12,time_data[2],time_data[1],time_data[0],time_data[4],time_data[5],time_data[6]);
 8001abe:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
		sprintf(buffer_1,
 8001ac2:	64bb      	str	r3, [r7, #72]	@ 0x48
				temp_sensor_7, temp_sensor_8, temp_sensor_9, temp_sensor_10, temp_sensor_11, temp_sensor_12,time_data[2],time_data[1],time_data[0],time_data[4],time_data[5],time_data[6]);
 8001ac4:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
		sprintf(buffer_1,
 8001ac8:	461e      	mov	r6, r3
				temp_sensor_7, temp_sensor_8, temp_sensor_9, temp_sensor_10, temp_sensor_11, temp_sensor_12,time_data[2],time_data[1],time_data[0],time_data[4],time_data[5],time_data[6]);
 8001aca:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
		sprintf(buffer_1,
 8001ace:	461d      	mov	r5, r3
				temp_sensor_7, temp_sensor_8, temp_sensor_9, temp_sensor_10, temp_sensor_11, temp_sensor_12,time_data[2],time_data[1],time_data[0],time_data[4],time_data[5],time_data[6]);
 8001ad0:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
		sprintf(buffer_1,
 8001ad4:	461c      	mov	r4, r3
				temp_sensor_7, temp_sensor_8, temp_sensor_9, temp_sensor_10, temp_sensor_11, temp_sensor_12,time_data[2],time_data[1],time_data[0],time_data[4],time_data[5],time_data[6]);
 8001ad6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
		sprintf(buffer_1,
 8001ada:	461a      	mov	r2, r3
				temp_sensor_7, temp_sensor_8, temp_sensor_9, temp_sensor_10, temp_sensor_11, temp_sensor_12,time_data[2],time_data[1],time_data[0],time_data[4],time_data[5],time_data[6]);
 8001adc:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
		sprintf(buffer_1,
 8001ae0:	931b      	str	r3, [sp, #108]	@ 0x6c
 8001ae2:	921a      	str	r2, [sp, #104]	@ 0x68
 8001ae4:	9419      	str	r4, [sp, #100]	@ 0x64
 8001ae6:	9518      	str	r5, [sp, #96]	@ 0x60
 8001ae8:	9617      	str	r6, [sp, #92]	@ 0x5c
 8001aea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001aec:	9316      	str	r3, [sp, #88]	@ 0x58
 8001aee:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8001af2:	e9cd 8912 	strd	r8, r9, [sp, #72]	@ 0x48
 8001af6:	e9cd ab10 	strd	sl, fp, [sp, #64]	@ 0x40
 8001afa:	ed97 7b00 	vldr	d7, [r7]
 8001afe:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8001b02:	ed97 7b02 	vldr	d7, [r7, #8]
 8001b06:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8001b0a:	ed97 7b04 	vldr	d7, [r7, #16]
 8001b0e:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8001b12:	ed97 7b06 	vldr	d7, [r7, #24]
 8001b16:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001b1a:	ed97 7b08 	vldr	d7, [r7, #32]
 8001b1e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001b22:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8001b26:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001b2a:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8001b2e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001b32:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8001b36:	ed8d 7b00 	vstr	d7, [sp]
 8001b3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001b3e:	492b      	ldr	r1, [pc, #172]	@ (8001bec <ADC_READ+0xbbc>)
 8001b40:	481d      	ldr	r0, [pc, #116]	@ (8001bb8 <ADC_READ+0xb88>)
 8001b42:	f00d fcb9 	bl	800f4b8 <siprintf>
		HAL_UART_Transmit_IT(&huart8, buffer_1, strlen(buffer_1));
 8001b46:	481c      	ldr	r0, [pc, #112]	@ (8001bb8 <ADC_READ+0xb88>)
 8001b48:	f7fe fba2 	bl	8000290 <strlen>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	461a      	mov	r2, r3
 8001b52:	4919      	ldr	r1, [pc, #100]	@ (8001bb8 <ADC_READ+0xb88>)
 8001b54:	4826      	ldr	r0, [pc, #152]	@ (8001bf0 <ADC_READ+0xbc0>)
 8001b56:	f00a fc57 	bl	800c408 <HAL_UART_Transmit_IT>
		HAL_UART_Transmit_IT(&huart4, buffer, strlen(buffer));
 8001b5a:	4826      	ldr	r0, [pc, #152]	@ (8001bf4 <ADC_READ+0xbc4>)
 8001b5c:	f7fe fb98 	bl	8000290 <strlen>
 8001b60:	4603      	mov	r3, r0
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	461a      	mov	r2, r3
 8001b66:	4923      	ldr	r1, [pc, #140]	@ (8001bf4 <ADC_READ+0xbc4>)
 8001b68:	4823      	ldr	r0, [pc, #140]	@ (8001bf8 <ADC_READ+0xbc8>)
 8001b6a:	f00a fc4d 	bl	800c408 <HAL_UART_Transmit_IT>
		HAL_UART_Transmit_IT(&huart5, buffer, strlen(buffer));
 8001b6e:	4821      	ldr	r0, [pc, #132]	@ (8001bf4 <ADC_READ+0xbc4>)
 8001b70:	f7fe fb8e 	bl	8000290 <strlen>
 8001b74:	4603      	mov	r3, r0
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	461a      	mov	r2, r3
 8001b7a:	491e      	ldr	r1, [pc, #120]	@ (8001bf4 <ADC_READ+0xbc4>)
 8001b7c:	481f      	ldr	r0, [pc, #124]	@ (8001bfc <ADC_READ+0xbcc>)
 8001b7e:	f00a fc43 	bl	800c408 <HAL_UART_Transmit_IT>
		HAL_UART_Transmit_IT(&huart10, buffer, strlen(buffer));
 8001b82:	481c      	ldr	r0, [pc, #112]	@ (8001bf4 <ADC_READ+0xbc4>)
 8001b84:	f7fe fb84 	bl	8000290 <strlen>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4919      	ldr	r1, [pc, #100]	@ (8001bf4 <ADC_READ+0xbc4>)
 8001b90:	481b      	ldr	r0, [pc, #108]	@ (8001c00 <ADC_READ+0xbd0>)
 8001b92:	f00a fc39 	bl	800c408 <HAL_UART_Transmit_IT>
		HAL_Delay(50);
 8001b96:	2032      	movs	r0, #50	@ 0x32
 8001b98:	f002 fa3e 	bl	8004018 <HAL_Delay>

	}

	//HAL_Delay(500);

	return temperature;
 8001b9c:	4b19      	ldr	r3, [pc, #100]	@ (8001c04 <ADC_READ+0xbd4>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	ee07 3a90 	vmov	s15, r3

	//}

}
 8001ba4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ba8:	37a4      	adds	r7, #164	@ 0xa4
 8001baa:	46bd      	mov	sp, r7
 8001bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001bb0:	6007fff9 	.word	0x6007fff9
 8001bb4:	20005bb0 	.word	0x20005bb0
 8001bb8:	20000338 	.word	0x20000338
 8001bbc:	20000470 	.word	0x20000470
 8001bc0:	20000474 	.word	0x20000474
 8001bc4:	20000478 	.word	0x20000478
 8001bc8:	2000047c 	.word	0x2000047c
 8001bcc:	20000480 	.word	0x20000480
 8001bd0:	20000484 	.word	0x20000484
 8001bd4:	20000488 	.word	0x20000488
 8001bd8:	2000048c 	.word	0x2000048c
 8001bdc:	20000490 	.word	0x20000490
 8001be0:	20000494 	.word	0x20000494
 8001be4:	20000498 	.word	0x20000498
 8001be8:	2000049c 	.word	0x2000049c
 8001bec:	080117a8 	.word	0x080117a8
 8001bf0:	20005a88 	.word	0x20005a88
 8001bf4:	2000020c 	.word	0x2000020c
 8001bf8:	20005960 	.word	0x20005960
 8001bfc:	200059f4 	.word	0x200059f4
 8001c00:	20005b1c 	.word	0x20005b1c
 8001c04:	2000046c 	.word	0x2000046c

08001c08 <NAND_operation>:
 * @brief Performs NAND operations like writing, reading, and checking block status.
 * This function writes data to NAND, reads it back to verify, checks and updates
 * block status based on the comparison result.
 */
void NAND_operation(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOE, LED1_Pin, 1); // Toggle LED for visual feedback
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c14:	4833      	ldr	r0, [pc, #204]	@ (8001ce4 <NAND_operation+0xdc>)
 8001c16:	f002 fdab 	bl	8004770 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001c1a:	2001      	movs	r0, #1
 8001c1c:	f002 f9fc 	bl	8004018 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOE, LED1_Pin, 0);
 8001c20:	2200      	movs	r2, #0
 8001c22:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c26:	482f      	ldr	r0, [pc, #188]	@ (8001ce4 <NAND_operation+0xdc>)
 8001c28:	f002 fda2 	bl	8004770 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	f002 f9f3 	bl	8004018 <HAL_Delay>

    if (nand_update)
 8001c32:	4b2d      	ldr	r3, [pc, #180]	@ (8001ce8 <NAND_operation+0xe0>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d04f      	beq.n	8001cda <NAND_operation+0xd2>
    {
        // Prepare data for NAND write
        memset(read_data, 0, 8192);
 8001c3a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c3e:	2100      	movs	r1, #0
 8001c40:	482a      	ldr	r0, [pc, #168]	@ (8001cec <NAND_operation+0xe4>)
 8001c42:	f00d fc9c 	bl	800f57e <memset>
        nand_update = 0;
 8001c46:	4b28      	ldr	r3, [pc, #160]	@ (8001ce8 <NAND_operation+0xe0>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	701a      	strb	r2, [r3, #0]
        get_NAND_data(NAND_data);
 8001c4c:	4828      	ldr	r0, [pc, #160]	@ (8001cf0 <NAND_operation+0xe8>)
 8001c4e:	f000 faa7 	bl	80021a0 <get_NAND_data>

        // Write data to NAND flash
        HAL_NAND_Write_Page_8b(&hnand1, &nand_address, NAND_data, 1);
 8001c52:	2301      	movs	r3, #1
 8001c54:	4a26      	ldr	r2, [pc, #152]	@ (8001cf0 <NAND_operation+0xe8>)
 8001c56:	4927      	ldr	r1, [pc, #156]	@ (8001cf4 <NAND_operation+0xec>)
 8001c58:	4827      	ldr	r0, [pc, #156]	@ (8001cf8 <NAND_operation+0xf0>)
 8001c5a:	f002 ffcb 	bl	8004bf4 <HAL_NAND_Write_Page_8b>

        // Read data back from NAND flash for verification
        HAL_NAND_Read_Page_8b(&hnand1, (const NAND_AddressTypeDef *) &nand_address, read_data, 1);
 8001c5e:	2301      	movs	r3, #1
 8001c60:	4a22      	ldr	r2, [pc, #136]	@ (8001cec <NAND_operation+0xe4>)
 8001c62:	4924      	ldr	r1, [pc, #144]	@ (8001cf4 <NAND_operation+0xec>)
 8001c64:	4824      	ldr	r0, [pc, #144]	@ (8001cf8 <NAND_operation+0xf0>)
 8001c66:	f002 fe6b 	bl	8004940 <HAL_NAND_Read_Page_8b>

        // Calculate bit difference between written and read data
        uint16_t bit_difference = calculate_hamming_distance(NAND_data, read_data, 8192);
 8001c6a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c6e:	491f      	ldr	r1, [pc, #124]	@ (8001cec <NAND_operation+0xe4>)
 8001c70:	481f      	ldr	r0, [pc, #124]	@ (8001cf0 <NAND_operation+0xe8>)
 8001c72:	f000 f8c6 	bl	8001e02 <calculate_hamming_distance>
 8001c76:	4603      	mov	r3, r0
 8001c78:	80fb      	strh	r3, [r7, #6]

        // Check if data read matches data written
        if (bit_difference <50) // Data matches
 8001c7a:	88fb      	ldrh	r3, [r7, #6]
 8001c7c:	2b31      	cmp	r3, #49	@ 0x31
 8001c7e:	d816      	bhi.n	8001cae <NAND_operation+0xa6>
        {
            if (nand_address.Page == 0)
 8001c80:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf4 <NAND_operation+0xec>)
 8001c82:	881b      	ldrh	r3, [r3, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10b      	bne.n	8001ca0 <NAND_operation+0x98>
            {
                set_NAND_block_status(nand_address.Page, nand_address.Block, nand_address.Plane, 1); // Mark block as good
 8001c88:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf4 <NAND_operation+0xec>)
 8001c8a:	881b      	ldrh	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	4b19      	ldr	r3, [pc, #100]	@ (8001cf4 <NAND_operation+0xec>)
 8001c90:	889b      	ldrh	r3, [r3, #4]
 8001c92:	4619      	mov	r1, r3
 8001c94:	4b17      	ldr	r3, [pc, #92]	@ (8001cf4 <NAND_operation+0xec>)
 8001c96:	885b      	ldrh	r3, [r3, #2]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	f000 f85c 	bl	8001d58 <set_NAND_block_status>
            }
            nand_address.Page++;
 8001ca0:	4b14      	ldr	r3, [pc, #80]	@ (8001cf4 <NAND_operation+0xec>)
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	4b12      	ldr	r3, [pc, #72]	@ (8001cf4 <NAND_operation+0xec>)
 8001caa:	801a      	strh	r2, [r3, #0]
 8001cac:	e001      	b.n	8001cb2 <NAND_operation+0xaa>
        }
        else // Data mismatch - possible bad block
        {
            handle_bad_block(); // Call function to handle the bad block scenario
 8001cae:	f000 f8d1 	bl	8001e54 <handle_bad_block>
        }

        // Move to the next block if all pages in the current block have been written
        if (nand_address.Page > 127)
 8001cb2:	4b10      	ldr	r3, [pc, #64]	@ (8001cf4 <NAND_operation+0xec>)
 8001cb4:	881b      	ldrh	r3, [r3, #0]
 8001cb6:	2b7f      	cmp	r3, #127	@ 0x7f
 8001cb8:	d90f      	bls.n	8001cda <NAND_operation+0xd2>
        {
            nand_address.Block++;
 8001cba:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf4 <NAND_operation+0xec>)
 8001cbc:	889b      	ldrh	r3, [r3, #4]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf4 <NAND_operation+0xec>)
 8001cc4:	809a      	strh	r2, [r3, #4]
            nand_address.Page = 0;
 8001cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf4 <NAND_operation+0xec>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	801a      	strh	r2, [r3, #0]
            HAL_NAND_Erase_Block(&hnand1, &nand_address);
 8001ccc:	4909      	ldr	r1, [pc, #36]	@ (8001cf4 <NAND_operation+0xec>)
 8001cce:	480a      	ldr	r0, [pc, #40]	@ (8001cf8 <NAND_operation+0xf0>)
 8001cd0:	f003 fbc4 	bl	800545c <HAL_NAND_Erase_Block>
            HAL_Delay(100);
 8001cd4:	2064      	movs	r0, #100	@ 0x64
 8001cd6:	f002 f99f 	bl	8004018 <HAL_Delay>
        }
    }
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	42021000 	.word	0x42021000
 8001ce8:	2000567c 	.word	0x2000567c
 8001cec:	200004bc 	.word	0x200004bc
 8001cf0:	200024bc 	.word	0x200024bc
 8001cf4:	200004b4 	.word	0x200004b4
 8001cf8:	20005c08 	.word	0x20005c08

08001cfc <get_NAND_block_status>:
/**
 * @brief Reads and updates the status of each block in NAND.
 * Sets the block status array based on whether the block is good (0xFF) or bad (0x00).
 */
void get_NAND_block_status()
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
    for (uint16_t i = 0; i < 4096; i++)
 8001d02:	2300      	movs	r3, #0
 8001d04:	80fb      	strh	r3, [r7, #6]
 8001d06:	e016      	b.n	8001d36 <get_NAND_block_status+0x3a>
    {
        nand_address.Block = i;
 8001d08:	4a0f      	ldr	r2, [pc, #60]	@ (8001d48 <get_NAND_block_status+0x4c>)
 8001d0a:	88fb      	ldrh	r3, [r7, #6]
 8001d0c:	8093      	strh	r3, [r2, #4]
        HAL_NAND_Read_SpareArea_8b(&hnand1, &nand_address, spare_buffer, 1);
 8001d0e:	2301      	movs	r3, #1
 8001d10:	4a0e      	ldr	r2, [pc, #56]	@ (8001d4c <get_NAND_block_status+0x50>)
 8001d12:	490d      	ldr	r1, [pc, #52]	@ (8001d48 <get_NAND_block_status+0x4c>)
 8001d14:	480e      	ldr	r0, [pc, #56]	@ (8001d50 <get_NAND_block_status+0x54>)
 8001d16:	f003 f8c5 	bl	8004ea4 <HAL_NAND_Read_SpareArea_8b>
        nand_block_status[i] = (spare_buffer[0] == 0xFF) ? 1 : 0;
 8001d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d4c <get_NAND_block_status+0x50>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2bff      	cmp	r3, #255	@ 0xff
 8001d20:	bf0c      	ite	eq
 8001d22:	2301      	moveq	r3, #1
 8001d24:	2300      	movne	r3, #0
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	88fb      	ldrh	r3, [r7, #6]
 8001d2a:	4611      	mov	r1, r2
 8001d2c:	4a09      	ldr	r2, [pc, #36]	@ (8001d54 <get_NAND_block_status+0x58>)
 8001d2e:	54d1      	strb	r1, [r2, r3]
    for (uint16_t i = 0; i < 4096; i++)
 8001d30:	88fb      	ldrh	r3, [r7, #6]
 8001d32:	3301      	adds	r3, #1
 8001d34:	80fb      	strh	r3, [r7, #6]
 8001d36:	88fb      	ldrh	r3, [r7, #6]
 8001d38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d3c:	d3e4      	bcc.n	8001d08 <get_NAND_block_status+0xc>
    }
}
 8001d3e:	bf00      	nop
 8001d40:	bf00      	nop
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	200004b4 	.word	0x200004b4
 8001d4c:	200044bc 	.word	0x200044bc
 8001d50:	20005c08 	.word	0x20005c08
 8001d54:	2000467c 	.word	0x2000467c

08001d58 <set_NAND_block_status>:
 * @param block The block number to update.
 * @param plane The NAND plane number.
 * @param block_state 1 for good block, 0 for bad block.
 */
void set_NAND_block_status(uint16_t page, uint16_t block, uint16_t plane, uint8_t block_state)
{
 8001d58:	b590      	push	{r4, r7, lr}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4604      	mov	r4, r0
 8001d60:	4608      	mov	r0, r1
 8001d62:	4611      	mov	r1, r2
 8001d64:	461a      	mov	r2, r3
 8001d66:	4623      	mov	r3, r4
 8001d68:	80fb      	strh	r3, [r7, #6]
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	80bb      	strh	r3, [r7, #4]
 8001d6e:	460b      	mov	r3, r1
 8001d70:	807b      	strh	r3, [r7, #2]
 8001d72:	4613      	mov	r3, r2
 8001d74:	707b      	strb	r3, [r7, #1]
    NAND_AddressTypeDef nand_address_block = {0, block, plane};
 8001d76:	2300      	movs	r3, #0
 8001d78:	813b      	strh	r3, [r7, #8]
 8001d7a:	88bb      	ldrh	r3, [r7, #4]
 8001d7c:	817b      	strh	r3, [r7, #10]
 8001d7e:	887b      	ldrh	r3, [r7, #2]
 8001d80:	81bb      	strh	r3, [r7, #12]
    HAL_NAND_Read_SpareArea_8b(&hnand1, &nand_address_block, spare_buffer, 1);
 8001d82:	f107 0108 	add.w	r1, r7, #8
 8001d86:	2301      	movs	r3, #1
 8001d88:	4a0d      	ldr	r2, [pc, #52]	@ (8001dc0 <set_NAND_block_status+0x68>)
 8001d8a:	480e      	ldr	r0, [pc, #56]	@ (8001dc4 <set_NAND_block_status+0x6c>)
 8001d8c:	f003 f88a 	bl	8004ea4 <HAL_NAND_Read_SpareArea_8b>

    spare_buffer[0] = (block_state) ? 0xFF : 0x00;  // Set good (0xFF) or bad (0x00)
 8001d90:	787b      	ldrb	r3, [r7, #1]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <set_NAND_block_status+0x42>
 8001d96:	22ff      	movs	r2, #255	@ 0xff
 8001d98:	e000      	b.n	8001d9c <set_NAND_block_status+0x44>
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	4b08      	ldr	r3, [pc, #32]	@ (8001dc0 <set_NAND_block_status+0x68>)
 8001d9e:	701a      	strb	r2, [r3, #0]
    nand_block_status[block] = block_state;          // Update block status array
 8001da0:	88bb      	ldrh	r3, [r7, #4]
 8001da2:	4909      	ldr	r1, [pc, #36]	@ (8001dc8 <set_NAND_block_status+0x70>)
 8001da4:	787a      	ldrb	r2, [r7, #1]
 8001da6:	54ca      	strb	r2, [r1, r3]
    HAL_NAND_Write_SpareArea_8b(&hnand1, &nand_address_block, spare_buffer, 1);
 8001da8:	f107 0108 	add.w	r1, r7, #8
 8001dac:	2301      	movs	r3, #1
 8001dae:	4a04      	ldr	r2, [pc, #16]	@ (8001dc0 <set_NAND_block_status+0x68>)
 8001db0:	4804      	ldr	r0, [pc, #16]	@ (8001dc4 <set_NAND_block_status+0x6c>)
 8001db2:	f003 f9e2 	bl	800517a <HAL_NAND_Write_SpareArea_8b>
}
 8001db6:	bf00      	nop
 8001db8:	3714      	adds	r7, #20
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd90      	pop	{r4, r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	200044bc 	.word	0x200044bc
 8001dc4:	20005c08 	.word	0x20005c08
 8001dc8:	2000467c 	.word	0x2000467c

08001dcc <count_set_bits>:
 * @brief Counts the number of set bits (1s) in a byte.
 * @param byte The byte to analyze.
 * @return The number of set bits in the byte.
 */
int count_set_bits(uint8_t byte)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	71fb      	strb	r3, [r7, #7]
    int count = 0;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
    while (byte)
 8001dda:	e008      	b.n	8001dee <count_set_bits+0x22>
    {
        count += byte & 1;
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	4413      	add	r3, r2
 8001de6:	60fb      	str	r3, [r7, #12]
        byte >>= 1;
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	085b      	lsrs	r3, r3, #1
 8001dec:	71fb      	strb	r3, [r7, #7]
    while (byte)
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1f3      	bne.n	8001ddc <count_set_bits+0x10>
    }
    return count;
 8001df4:	68fb      	ldr	r3, [r7, #12]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <calculate_hamming_distance>:
 * @param str2 Pointer to the second 8192-byte string.
 * @param length Length of the strings to compare (8192 bytes).
 * @return The number of differing bits between the two strings.
 */
int calculate_hamming_distance(const uint8_t *str1, const uint8_t *str2, size_t length)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b086      	sub	sp, #24
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	60f8      	str	r0, [r7, #12]
 8001e0a:	60b9      	str	r1, [r7, #8]
 8001e0c:	607a      	str	r2, [r7, #4]
    int differing_bits = 0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < length; i++)
 8001e12:	2300      	movs	r3, #0
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	e013      	b.n	8001e40 <calculate_hamming_distance+0x3e>
    {
        differing_bits += count_set_bits(str1[i] ^ str2[i]);  // XOR and count set bits in result
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	781a      	ldrb	r2, [r3, #0]
 8001e20:	68b9      	ldr	r1, [r7, #8]
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	440b      	add	r3, r1
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	4053      	eors	r3, r2
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff ffcd 	bl	8001dcc <count_set_bits>
 8001e32:	4602      	mov	r2, r0
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	4413      	add	r3, r2
 8001e38:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < length; i++)
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	613b      	str	r3, [r7, #16]
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d3e7      	bcc.n	8001e18 <calculate_hamming_distance+0x16>
    }
    return differing_bits;
 8001e48:	697b      	ldr	r3, [r7, #20]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
	...

08001e54 <handle_bad_block>:
 * @brief Handles bad block processing in NAND by erasing and relocating data.
 * If data verification fails, the function marks the block as bad, and attempts to write data
 * to the next available block.
 */
void handle_bad_block(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
    nand_address.Page = 0;
 8001e58:	4b34      	ldr	r3, [pc, #208]	@ (8001f2c <handle_bad_block+0xd8>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	801a      	strh	r2, [r3, #0]
    HAL_NAND_Erase_Block(&hnand1, &nand_address);
 8001e5e:	4933      	ldr	r1, [pc, #204]	@ (8001f2c <handle_bad_block+0xd8>)
 8001e60:	4833      	ldr	r0, [pc, #204]	@ (8001f30 <handle_bad_block+0xdc>)
 8001e62:	f003 fafb 	bl	800545c <HAL_NAND_Erase_Block>
    HAL_Delay(1000);
 8001e66:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e6a:	f002 f8d5 	bl	8004018 <HAL_Delay>

    // Attempt to rewrite data after erasing the block
    HAL_NAND_Write_Page_8b(&hnand1, &nand_address, NAND_data, 1);
 8001e6e:	2301      	movs	r3, #1
 8001e70:	4a30      	ldr	r2, [pc, #192]	@ (8001f34 <handle_bad_block+0xe0>)
 8001e72:	492e      	ldr	r1, [pc, #184]	@ (8001f2c <handle_bad_block+0xd8>)
 8001e74:	482e      	ldr	r0, [pc, #184]	@ (8001f30 <handle_bad_block+0xdc>)
 8001e76:	f002 febd 	bl	8004bf4 <HAL_NAND_Write_Page_8b>
    HAL_NAND_Read_Page_8b(&hnand1, (const NAND_AddressTypeDef *)&nand_address, read_data, 1);
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	4a2e      	ldr	r2, [pc, #184]	@ (8001f38 <handle_bad_block+0xe4>)
 8001e7e:	492b      	ldr	r1, [pc, #172]	@ (8001f2c <handle_bad_block+0xd8>)
 8001e80:	482b      	ldr	r0, [pc, #172]	@ (8001f30 <handle_bad_block+0xdc>)
 8001e82:	f002 fd5d 	bl	8004940 <HAL_NAND_Read_Page_8b>

    // Verify written data again
    if (calculate_hamming_distance(NAND_data, read_data, 8192) < 50) // Data matches
 8001e86:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e8a:	492b      	ldr	r1, [pc, #172]	@ (8001f38 <handle_bad_block+0xe4>)
 8001e8c:	4829      	ldr	r0, [pc, #164]	@ (8001f34 <handle_bad_block+0xe0>)
 8001e8e:	f7ff ffb8 	bl	8001e02 <calculate_hamming_distance>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b31      	cmp	r3, #49	@ 0x31
 8001e96:	dc13      	bgt.n	8001ec0 <handle_bad_block+0x6c>
    {
        if (nand_address.Page == 0)
 8001e98:	4b24      	ldr	r3, [pc, #144]	@ (8001f2c <handle_bad_block+0xd8>)
 8001e9a:	881b      	ldrh	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d108      	bne.n	8001eb2 <handle_bad_block+0x5e>
        {
            set_NAND_block_status(nand_address.Page, nand_address.Block, nand_address.Plane, 1);
 8001ea0:	4b22      	ldr	r3, [pc, #136]	@ (8001f2c <handle_bad_block+0xd8>)
 8001ea2:	8818      	ldrh	r0, [r3, #0]
 8001ea4:	4b21      	ldr	r3, [pc, #132]	@ (8001f2c <handle_bad_block+0xd8>)
 8001ea6:	8899      	ldrh	r1, [r3, #4]
 8001ea8:	4b20      	ldr	r3, [pc, #128]	@ (8001f2c <handle_bad_block+0xd8>)
 8001eaa:	885a      	ldrh	r2, [r3, #2]
 8001eac:	2301      	movs	r3, #1
 8001eae:	f7ff ff53 	bl	8001d58 <set_NAND_block_status>
        }
        nand_address.Page++;
 8001eb2:	4b1e      	ldr	r3, [pc, #120]	@ (8001f2c <handle_bad_block+0xd8>)
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	4b1c      	ldr	r3, [pc, #112]	@ (8001f2c <handle_bad_block+0xd8>)
 8001ebc:	801a      	strh	r2, [r3, #0]
        }

       // HAL_NAND_Erase_Block(&hnand1, &nand_address);  // Erase new block
        HAL_Delay(1000);
    }
}
 8001ebe:	e032      	b.n	8001f26 <handle_bad_block+0xd2>
        set_NAND_block_status(nand_address.Page, nand_address.Block, nand_address.Plane, 0); // Mark as bad
 8001ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f2c <handle_bad_block+0xd8>)
 8001ec2:	8818      	ldrh	r0, [r3, #0]
 8001ec4:	4b19      	ldr	r3, [pc, #100]	@ (8001f2c <handle_bad_block+0xd8>)
 8001ec6:	8899      	ldrh	r1, [r3, #4]
 8001ec8:	4b18      	ldr	r3, [pc, #96]	@ (8001f2c <handle_bad_block+0xd8>)
 8001eca:	885a      	ldrh	r2, [r3, #2]
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f7ff ff43 	bl	8001d58 <set_NAND_block_status>
        nand_address.Page = 0;
 8001ed2:	4b16      	ldr	r3, [pc, #88]	@ (8001f2c <handle_bad_block+0xd8>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	801a      	strh	r2, [r3, #0]
        if (nand_block_status[nand_address.Block + 1] == 1)
 8001ed8:	4b14      	ldr	r3, [pc, #80]	@ (8001f2c <handle_bad_block+0xd8>)
 8001eda:	889b      	ldrh	r3, [r3, #4]
 8001edc:	3301      	adds	r3, #1
 8001ede:	4a17      	ldr	r2, [pc, #92]	@ (8001f3c <handle_bad_block+0xe8>)
 8001ee0:	5cd3      	ldrb	r3, [r2, r3]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d108      	bne.n	8001ef8 <handle_bad_block+0xa4>
            nand_address.Block++;
 8001ee6:	4b11      	ldr	r3, [pc, #68]	@ (8001f2c <handle_bad_block+0xd8>)
 8001ee8:	889b      	ldrh	r3, [r3, #4]
 8001eea:	3301      	adds	r3, #1
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	4b0f      	ldr	r3, [pc, #60]	@ (8001f2c <handle_bad_block+0xd8>)
 8001ef0:	809a      	strh	r2, [r3, #4]
            handle_bad_block();
 8001ef2:	f7ff ffaf 	bl	8001e54 <handle_bad_block>
 8001ef6:	e007      	b.n	8001f08 <handle_bad_block+0xb4>
            nand_address.Block += 2; // Skip bad block and move further
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f2c <handle_bad_block+0xd8>)
 8001efa:	889b      	ldrh	r3, [r3, #4]
 8001efc:	3302      	adds	r3, #2
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	4b0a      	ldr	r3, [pc, #40]	@ (8001f2c <handle_bad_block+0xd8>)
 8001f02:	809a      	strh	r2, [r3, #4]
            handle_bad_block();
 8001f04:	f7ff ffa6 	bl	8001e54 <handle_bad_block>
        if (nand_address.Block > 4095)
 8001f08:	4b08      	ldr	r3, [pc, #32]	@ (8001f2c <handle_bad_block+0xd8>)
 8001f0a:	889b      	ldrh	r3, [r3, #4]
 8001f0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f10:	d305      	bcc.n	8001f1e <handle_bad_block+0xca>
            nand_address.Block = 0;
 8001f12:	4b06      	ldr	r3, [pc, #24]	@ (8001f2c <handle_bad_block+0xd8>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	809a      	strh	r2, [r3, #4]
            nand_cyclic_run = 1;
 8001f18:	4b09      	ldr	r3, [pc, #36]	@ (8001f40 <handle_bad_block+0xec>)
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	701a      	strb	r2, [r3, #0]
        HAL_Delay(1000);
 8001f1e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f22:	f002 f879 	bl	8004018 <HAL_Delay>
}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	200004b4 	.word	0x200004b4
 8001f30:	20005c08 	.word	0x20005c08
 8001f34:	200024bc 	.word	0x200024bc
 8001f38:	200004bc 	.word	0x200004bc
 8001f3c:	2000467c 	.word	0x2000467c
 8001f40:	2000567d 	.word	0x2000567d

08001f44 <SRAM_operation>:

void time_setter( );
void update_NAND_addr();

uint8_t SRAM_operation()
{
 8001f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f48:	b0b5      	sub	sp, #212	@ 0xd4
 8001f4a:	af1c      	add	r7, sp, #112	@ 0x70

	uint8_t time_data[8]={0};
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	657b      	str	r3, [r7, #84]	@ 0x54
 8001f50:	2300      	movs	r3, #0
 8001f52:	65bb      	str	r3, [r7, #88]	@ 0x58
	uint16_t bufSize=0;
 8001f54:	2300      	movs	r3, #0
 8001f56:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e

	//HAL_SRAM_Read_8b(&hsram1, (uint32_t *)sec_addr, (uint8_t *)&cur_sec,1);
	HAL_SRAM_Read_8b(&hsram1, (uint32_t *)sec_addr, (uint8_t *)&time_data,7);
 8001f5a:	4b7b      	ldr	r3, [pc, #492]	@ (8002148 <SRAM_operation+0x204>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4619      	mov	r1, r3
 8001f60:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8001f64:	2307      	movs	r3, #7
 8001f66:	4879      	ldr	r0, [pc, #484]	@ (800214c <SRAM_operation+0x208>)
 8001f68:	f00a f970 	bl	800c24c <HAL_SRAM_Read_8b>

	if(time_data[0] != old_sec)
 8001f6c:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8001f70:	4b77      	ldr	r3, [pc, #476]	@ (8002150 <SRAM_operation+0x20c>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	f000 80d7 	beq.w	8002128 <SRAM_operation+0x1e4>
	{
		memset(SRAM_buffer,0,sizeof(SRAM_buffer));
 8001f7a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f7e:	2100      	movs	r1, #0
 8001f80:	4874      	ldr	r0, [pc, #464]	@ (8002154 <SRAM_operation+0x210>)
 8001f82:	f00d fafc 	bl	800f57e <memset>
		bufSize= sprintf((char *)SRAM_buffer,
 8001f86:	4b74      	ldr	r3, [pc, #464]	@ (8002158 <SRAM_operation+0x214>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe faec 	bl	8000568 <__aeabi_f2d>
 8001f90:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
 8001f94:	4b71      	ldr	r3, [pc, #452]	@ (800215c <SRAM_operation+0x218>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe fae5 	bl	8000568 <__aeabi_f2d>
 8001f9e:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 8001fa2:	4b6f      	ldr	r3, [pc, #444]	@ (8002160 <SRAM_operation+0x21c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7fe fade 	bl	8000568 <__aeabi_f2d>
 8001fac:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 8001fb0:	4b6c      	ldr	r3, [pc, #432]	@ (8002164 <SRAM_operation+0x220>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe fad7 	bl	8000568 <__aeabi_f2d>
 8001fba:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
 8001fbe:	4b6a      	ldr	r3, [pc, #424]	@ (8002168 <SRAM_operation+0x224>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7fe fad0 	bl	8000568 <__aeabi_f2d>
 8001fc8:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 8001fcc:	4b67      	ldr	r3, [pc, #412]	@ (800216c <SRAM_operation+0x228>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7fe fac9 	bl	8000568 <__aeabi_f2d>
 8001fd6:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8001fda:	4b65      	ldr	r3, [pc, #404]	@ (8002170 <SRAM_operation+0x22c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe fac2 	bl	8000568 <__aeabi_f2d>
 8001fe4:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001fe8:	4b62      	ldr	r3, [pc, #392]	@ (8002174 <SRAM_operation+0x230>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7fe fabb 	bl	8000568 <__aeabi_f2d>
 8001ff2:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001ff6:	4b60      	ldr	r3, [pc, #384]	@ (8002178 <SRAM_operation+0x234>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe fab4 	bl	8000568 <__aeabi_f2d>
 8002000:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002004:	4b5d      	ldr	r3, [pc, #372]	@ (800217c <SRAM_operation+0x238>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe faad 	bl	8000568 <__aeabi_f2d>
 800200e:	4682      	mov	sl, r0
 8002010:	468b      	mov	fp, r1
 8002012:	4b5b      	ldr	r3, [pc, #364]	@ (8002180 <SRAM_operation+0x23c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe faa6 	bl	8000568 <__aeabi_f2d>
 800201c:	4680      	mov	r8, r0
 800201e:	4689      	mov	r9, r1
 8002020:	4b58      	ldr	r3, [pc, #352]	@ (8002184 <SRAM_operation+0x240>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f7fe fa9f 	bl	8000568 <__aeabi_f2d>
				"{\"TS1\": \"%.2f\", \"TS2\": \"%.2f\", \"TS3\": \"%.2f\", \"TS4\": \"%.2f\", \"TS5\": \"%.2f\", "
				"\"TS6\": \"%.2f\", \"TS7\": \"%.2f\", \"TS8\": \"%.2f\", \"TS9\": \"%.2f\", \"TS10\": \"%.2f\", "
				"\"TS11\": \"%.2f\", \"TS12\": \"%.2f\", \"TIME\": \"%x:%x:%x\",\"DATE\": \"%x-%x-20%x}\"\n\r",
				temp_sensor_1, temp_sensor_2, temp_sensor_3, temp_sensor_4, temp_sensor_5, temp_sensor_6,
				temp_sensor_7, temp_sensor_8, temp_sensor_9, temp_sensor_10, temp_sensor_11, temp_sensor_12,time_data[2],time_data[1],time_data[0],time_data[4],time_data[5],time_data[6]);
 800202a:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
		bufSize= sprintf((char *)SRAM_buffer,
 800202e:	607b      	str	r3, [r7, #4]
				temp_sensor_7, temp_sensor_8, temp_sensor_9, temp_sensor_10, temp_sensor_11, temp_sensor_12,time_data[2],time_data[1],time_data[0],time_data[4],time_data[5],time_data[6]);
 8002030:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
		bufSize= sprintf((char *)SRAM_buffer,
 8002034:	461e      	mov	r6, r3
				temp_sensor_7, temp_sensor_8, temp_sensor_9, temp_sensor_10, temp_sensor_11, temp_sensor_12,time_data[2],time_data[1],time_data[0],time_data[4],time_data[5],time_data[6]);
 8002036:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
		bufSize= sprintf((char *)SRAM_buffer,
 800203a:	461d      	mov	r5, r3
				temp_sensor_7, temp_sensor_8, temp_sensor_9, temp_sensor_10, temp_sensor_11, temp_sensor_12,time_data[2],time_data[1],time_data[0],time_data[4],time_data[5],time_data[6]);
 800203c:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
		bufSize= sprintf((char *)SRAM_buffer,
 8002040:	461c      	mov	r4, r3
				temp_sensor_7, temp_sensor_8, temp_sensor_9, temp_sensor_10, temp_sensor_11, temp_sensor_12,time_data[2],time_data[1],time_data[0],time_data[4],time_data[5],time_data[6]);
 8002042:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
		bufSize= sprintf((char *)SRAM_buffer,
 8002046:	461a      	mov	r2, r3
				temp_sensor_7, temp_sensor_8, temp_sensor_9, temp_sensor_10, temp_sensor_11, temp_sensor_12,time_data[2],time_data[1],time_data[0],time_data[4],time_data[5],time_data[6]);
 8002048:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
		bufSize= sprintf((char *)SRAM_buffer,
 800204c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800204e:	921a      	str	r2, [sp, #104]	@ 0x68
 8002050:	9419      	str	r4, [sp, #100]	@ 0x64
 8002052:	9518      	str	r5, [sp, #96]	@ 0x60
 8002054:	9617      	str	r6, [sp, #92]	@ 0x5c
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	9316      	str	r3, [sp, #88]	@ 0x58
 800205a:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 800205e:	e9cd 8912 	strd	r8, r9, [sp, #72]	@ 0x48
 8002062:	e9cd ab10 	strd	sl, fp, [sp, #64]	@ 0x40
 8002066:	ed97 7b02 	vldr	d7, [r7, #8]
 800206a:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800206e:	ed97 7b04 	vldr	d7, [r7, #16]
 8002072:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8002076:	ed97 7b06 	vldr	d7, [r7, #24]
 800207a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800207e:	ed97 7b08 	vldr	d7, [r7, #32]
 8002082:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002086:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 800208a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800208e:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8002092:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002096:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800209a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800209e:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 80020a2:	ed8d 7b00 	vstr	d7, [sp]
 80020a6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80020aa:	4937      	ldr	r1, [pc, #220]	@ (8002188 <SRAM_operation+0x244>)
 80020ac:	4829      	ldr	r0, [pc, #164]	@ (8002154 <SRAM_operation+0x210>)
 80020ae:	f00d fa03 	bl	800f4b8 <siprintf>
 80020b2:	4603      	mov	r3, r0
 80020b4:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sram_location, (uint8_t *)&SRAM_buffer, bufSize);
 80020b8:	4b34      	ldr	r3, [pc, #208]	@ (800218c <SRAM_operation+0x248>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4619      	mov	r1, r3
 80020be:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80020c2:	4a24      	ldr	r2, [pc, #144]	@ (8002154 <SRAM_operation+0x210>)
 80020c4:	4821      	ldr	r0, [pc, #132]	@ (800214c <SRAM_operation+0x208>)
 80020c6:	f00a f90b 	bl	800c2e0 <HAL_SRAM_Write_8b>
		sram_location = sram_location + bufSize;
 80020ca:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 80020ce:	4b2f      	ldr	r3, [pc, #188]	@ (800218c <SRAM_operation+0x248>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4413      	add	r3, r2
 80020d4:	4a2d      	ldr	r2, [pc, #180]	@ (800218c <SRAM_operation+0x248>)
 80020d6:	6013      	str	r3, [r2, #0]
		size_counter += bufSize;
 80020d8:	4b2d      	ldr	r3, [pc, #180]	@ (8002190 <SRAM_operation+0x24c>)
 80020da:	881a      	ldrh	r2, [r3, #0]
 80020dc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80020e0:	4413      	add	r3, r2
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002190 <SRAM_operation+0x24c>)
 80020e6:	801a      	strh	r2, [r3, #0]
		if(size_counter + bufSize > NAND_PAGE_SIZE)
 80020e8:	4b29      	ldr	r3, [pc, #164]	@ (8002190 <SRAM_operation+0x24c>)
 80020ea:	881b      	ldrh	r3, [r3, #0]
 80020ec:	461a      	mov	r2, r3
 80020ee:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80020f2:	4413      	add	r3, r2
 80020f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020f8:	dd12      	ble.n	8002120 <SRAM_operation+0x1dc>
		{
			sram_location = sram_base_location ;
 80020fa:	4b26      	ldr	r3, [pc, #152]	@ (8002194 <SRAM_operation+0x250>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a23      	ldr	r2, [pc, #140]	@ (800218c <SRAM_operation+0x248>)
 8002100:	6013      	str	r3, [r2, #0]
			bufSize=0;
 8002102:	2300      	movs	r3, #0
 8002104:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
			size_counter = 0 ;
 8002108:	4b21      	ldr	r3, [pc, #132]	@ (8002190 <SRAM_operation+0x24c>)
 800210a:	2200      	movs	r2, #0
 800210c:	801a      	strh	r2, [r3, #0]
			nand_update = 1;
 800210e:	4b22      	ldr	r3, [pc, #136]	@ (8002198 <SRAM_operation+0x254>)
 8002110:	2201      	movs	r2, #1
 8002112:	701a      	strb	r2, [r3, #0]
			update_NAND_addr();
 8002114:	f000 f88e 	bl	8002234 <update_NAND_addr>
			HAL_Delay(1000);
 8002118:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800211c:	f001 ff7c 	bl	8004018 <HAL_Delay>

		}

		old_sec = time_data[0];
 8002120:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8002124:	4b0a      	ldr	r3, [pc, #40]	@ (8002150 <SRAM_operation+0x20c>)
 8002126:	701a      	strb	r2, [r3, #0]

	}

	if(time_set)
 8002128:	4b1c      	ldr	r3, [pc, #112]	@ (800219c <SRAM_operation+0x258>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d004      	beq.n	800213a <SRAM_operation+0x1f6>
	{
		time_set = 0 ;
 8002130:	4b1a      	ldr	r3, [pc, #104]	@ (800219c <SRAM_operation+0x258>)
 8002132:	2200      	movs	r2, #0
 8002134:	701a      	strb	r2, [r3, #0]
		time_setter();
 8002136:	f000 f891 	bl	800225c <time_setter>

	}

}
 800213a:	bf00      	nop
 800213c:	4618      	mov	r0, r3
 800213e:	3764      	adds	r7, #100	@ 0x64
 8002140:	46bd      	mov	sp, r7
 8002142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002146:	bf00      	nop
 8002148:	20000010 	.word	0x20000010
 800214c:	20005bb0 	.word	0x20005bb0
 8002150:	200057ae 	.word	0x200057ae
 8002154:	20005680 	.word	0x20005680
 8002158:	20000470 	.word	0x20000470
 800215c:	20000474 	.word	0x20000474
 8002160:	20000478 	.word	0x20000478
 8002164:	2000047c 	.word	0x2000047c
 8002168:	20000480 	.word	0x20000480
 800216c:	20000484 	.word	0x20000484
 8002170:	20000488 	.word	0x20000488
 8002174:	2000048c 	.word	0x2000048c
 8002178:	20000490 	.word	0x20000490
 800217c:	20000494 	.word	0x20000494
 8002180:	20000498 	.word	0x20000498
 8002184:	2000049c 	.word	0x2000049c
 8002188:	0801188c 	.word	0x0801188c
 800218c:	20000004 	.word	0x20000004
 8002190:	200057ac 	.word	0x200057ac
 8002194:	20000008 	.word	0x20000008
 8002198:	2000567c 	.word	0x2000567c
 800219c:	20005c70 	.word	0x20005c70

080021a0 <get_NAND_data>:


void get_NAND_data(uint8_t *sram_data)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	f5ad 5d00 	sub.w	sp, sp, #8192	@ 0x2000
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	f107 0308 	add.w	r3, r7, #8
 80021ae:	f843 0c04 	str.w	r0, [r3, #-4]
	uint8_t CLEAN_DATA[8192] = {0};
 80021b2:	f107 0308 	add.w	r3, r7, #8
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	3304      	adds	r3, #4
 80021bc:	f641 72fc 	movw	r2, #8188	@ 0x1ffc
 80021c0:	2100      	movs	r1, #0
 80021c2:	4618      	mov	r0, r3
 80021c4:	f00d f9db 	bl	800f57e <memset>
	HAL_SRAM_Read_8b(&hsram1, (uint32_t *)sram_base_location, sram_data, NAND_PAGE_SIZE);
 80021c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002204 <get_NAND_data+0x64>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4619      	mov	r1, r3
 80021ce:	f107 0308 	add.w	r3, r7, #8
 80021d2:	461a      	mov	r2, r3
 80021d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021d8:	f852 2c04 	ldr.w	r2, [r2, #-4]
 80021dc:	480a      	ldr	r0, [pc, #40]	@ (8002208 <get_NAND_data+0x68>)
 80021de:	f00a f835 	bl	800c24c <HAL_SRAM_Read_8b>
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sram_base_location, CLEAN_DATA, NAND_PAGE_SIZE);
 80021e2:	4b08      	ldr	r3, [pc, #32]	@ (8002204 <get_NAND_data+0x64>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4619      	mov	r1, r3
 80021e8:	f107 0208 	add.w	r2, r7, #8
 80021ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021f0:	4805      	ldr	r0, [pc, #20]	@ (8002208 <get_NAND_data+0x68>)
 80021f2:	f00a f875 	bl	800c2e0 <HAL_SRAM_Write_8b>
	//HAL_UART_Transmit_IT(&huart8, sram_data, strlen(sram_data));
	//	HAL_Delay(100);
}
 80021f6:	bf00      	nop
 80021f8:	f507 5700 	add.w	r7, r7, #8192	@ 0x2000
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20000008 	.word	0x20000008
 8002208:	20005bb0 	.word	0x20005bb0

0800220c <get_NAND_address>:

uint8_t get_NAND_address(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0

	HAL_SRAM_Read_8b(&hsram1, (uint32_t *)sramAddr_base_addr+2,(uint8_t *)&nand_address, sizeof(nand_address));
 8002210:	4b05      	ldr	r3, [pc, #20]	@ (8002228 <get_NAND_address+0x1c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	3308      	adds	r3, #8
 8002216:	4619      	mov	r1, r3
 8002218:	2306      	movs	r3, #6
 800221a:	4a04      	ldr	r2, [pc, #16]	@ (800222c <get_NAND_address+0x20>)
 800221c:	4804      	ldr	r0, [pc, #16]	@ (8002230 <get_NAND_address+0x24>)
 800221e:	f00a f815 	bl	800c24c <HAL_SRAM_Read_8b>

}
 8002222:	bf00      	nop
 8002224:	4618      	mov	r0, r3
 8002226:	bd80      	pop	{r7, pc}
 8002228:	2000000c 	.word	0x2000000c
 800222c:	200004b4 	.word	0x200004b4
 8002230:	20005bb0 	.word	0x20005bb0

08002234 <update_NAND_addr>:


void update_NAND_addr()
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr_base_addr+2, (uint8_t * )&nand_address, sizeof(nand_address));
 8002238:	4b05      	ldr	r3, [pc, #20]	@ (8002250 <update_NAND_addr+0x1c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	3308      	adds	r3, #8
 800223e:	4619      	mov	r1, r3
 8002240:	2306      	movs	r3, #6
 8002242:	4a04      	ldr	r2, [pc, #16]	@ (8002254 <update_NAND_addr+0x20>)
 8002244:	4804      	ldr	r0, [pc, #16]	@ (8002258 <update_NAND_addr+0x24>)
 8002246:	f00a f84b 	bl	800c2e0 <HAL_SRAM_Write_8b>


}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	2000000c 	.word	0x2000000c
 8002254:	200004b4 	.word	0x200004b4
 8002258:	20005bb0 	.word	0x20005bb0

0800225c <time_setter>:



void time_setter( )
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
	//	0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
	//	S D D - M M - Y Y Y  Y     H  H  :  M  M  :  S  S  E
	uint8_t day, month, year, hours, minutes, seconds;
	if (time_str[0] == 'S' && time_str[20] == 'E' && time_str[5] == '-' && time_str[8] == '-' && time_str[11] == ' ' && time_str[14] == ':' && time_str[17] == ':') // && time_str[11] == ' ' &&
 8002262:	4b7b      	ldr	r3, [pc, #492]	@ (8002450 <time_setter+0x1f4>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b53      	cmp	r3, #83	@ 0x53
 8002268:	f040 80ed 	bne.w	8002446 <time_setter+0x1ea>
 800226c:	4b78      	ldr	r3, [pc, #480]	@ (8002450 <time_setter+0x1f4>)
 800226e:	7d1b      	ldrb	r3, [r3, #20]
 8002270:	2b45      	cmp	r3, #69	@ 0x45
 8002272:	f040 80e8 	bne.w	8002446 <time_setter+0x1ea>
 8002276:	4b76      	ldr	r3, [pc, #472]	@ (8002450 <time_setter+0x1f4>)
 8002278:	795b      	ldrb	r3, [r3, #5]
 800227a:	2b2d      	cmp	r3, #45	@ 0x2d
 800227c:	f040 80e3 	bne.w	8002446 <time_setter+0x1ea>
 8002280:	4b73      	ldr	r3, [pc, #460]	@ (8002450 <time_setter+0x1f4>)
 8002282:	7a1b      	ldrb	r3, [r3, #8]
 8002284:	2b2d      	cmp	r3, #45	@ 0x2d
 8002286:	f040 80de 	bne.w	8002446 <time_setter+0x1ea>
 800228a:	4b71      	ldr	r3, [pc, #452]	@ (8002450 <time_setter+0x1f4>)
 800228c:	7adb      	ldrb	r3, [r3, #11]
 800228e:	2b20      	cmp	r3, #32
 8002290:	f040 80d9 	bne.w	8002446 <time_setter+0x1ea>
 8002294:	4b6e      	ldr	r3, [pc, #440]	@ (8002450 <time_setter+0x1f4>)
 8002296:	7b9b      	ldrb	r3, [r3, #14]
 8002298:	2b3a      	cmp	r3, #58	@ 0x3a
 800229a:	f040 80d4 	bne.w	8002446 <time_setter+0x1ea>
 800229e:	4b6c      	ldr	r3, [pc, #432]	@ (8002450 <time_setter+0x1f4>)
 80022a0:	7c5b      	ldrb	r3, [r3, #17]
 80022a2:	2b3a      	cmp	r3, #58	@ 0x3a
 80022a4:	f040 80cf 	bne.w	8002446 <time_setter+0x1ea>
	{
		month = (time_str[6] - 48) * 16 + (time_str[7] - 48);
 80022a8:	4b69      	ldr	r3, [pc, #420]	@ (8002450 <time_setter+0x1f4>)
 80022aa:	799b      	ldrb	r3, [r3, #6]
 80022ac:	3b30      	subs	r3, #48	@ 0x30
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	011b      	lsls	r3, r3, #4
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	4b66      	ldr	r3, [pc, #408]	@ (8002450 <time_setter+0x1f4>)
 80022b6:	79db      	ldrb	r3, [r3, #7]
 80022b8:	4413      	add	r3, r2
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	3b30      	subs	r3, #48	@ 0x30
 80022be:	71fb      	strb	r3, [r7, #7]
		year = (time_str[3] - 48) * 16 + (time_str[4] - 48);
 80022c0:	4b63      	ldr	r3, [pc, #396]	@ (8002450 <time_setter+0x1f4>)
 80022c2:	78db      	ldrb	r3, [r3, #3]
 80022c4:	3b30      	subs	r3, #48	@ 0x30
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	011b      	lsls	r3, r3, #4
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	4b60      	ldr	r3, [pc, #384]	@ (8002450 <time_setter+0x1f4>)
 80022ce:	791b      	ldrb	r3, [r3, #4]
 80022d0:	4413      	add	r3, r2
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	3b30      	subs	r3, #48	@ 0x30
 80022d6:	71bb      	strb	r3, [r7, #6]
		day = (time_str[9] - 48) * 16 + (time_str[10] - 48);
 80022d8:	4b5d      	ldr	r3, [pc, #372]	@ (8002450 <time_setter+0x1f4>)
 80022da:	7a5b      	ldrb	r3, [r3, #9]
 80022dc:	3b30      	subs	r3, #48	@ 0x30
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	011b      	lsls	r3, r3, #4
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	4b5a      	ldr	r3, [pc, #360]	@ (8002450 <time_setter+0x1f4>)
 80022e6:	7a9b      	ldrb	r3, [r3, #10]
 80022e8:	4413      	add	r3, r2
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	3b30      	subs	r3, #48	@ 0x30
 80022ee:	717b      	strb	r3, [r7, #5]
		minutes = (time_str[15] - 48) * 16 + (time_str[16] - 48);
 80022f0:	4b57      	ldr	r3, [pc, #348]	@ (8002450 <time_setter+0x1f4>)
 80022f2:	7bdb      	ldrb	r3, [r3, #15]
 80022f4:	3b30      	subs	r3, #48	@ 0x30
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	011b      	lsls	r3, r3, #4
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	4b54      	ldr	r3, [pc, #336]	@ (8002450 <time_setter+0x1f4>)
 80022fe:	7c1b      	ldrb	r3, [r3, #16]
 8002300:	4413      	add	r3, r2
 8002302:	b2db      	uxtb	r3, r3
 8002304:	3b30      	subs	r3, #48	@ 0x30
 8002306:	713b      	strb	r3, [r7, #4]
		hours = (time_str[12] - 48) * 16 + (time_str[13] - 48);
 8002308:	4b51      	ldr	r3, [pc, #324]	@ (8002450 <time_setter+0x1f4>)
 800230a:	7b1b      	ldrb	r3, [r3, #12]
 800230c:	3b30      	subs	r3, #48	@ 0x30
 800230e:	b2db      	uxtb	r3, r3
 8002310:	011b      	lsls	r3, r3, #4
 8002312:	b2da      	uxtb	r2, r3
 8002314:	4b4e      	ldr	r3, [pc, #312]	@ (8002450 <time_setter+0x1f4>)
 8002316:	7b5b      	ldrb	r3, [r3, #13]
 8002318:	4413      	add	r3, r2
 800231a:	b2db      	uxtb	r3, r3
 800231c:	3b30      	subs	r3, #48	@ 0x30
 800231e:	70fb      	strb	r3, [r7, #3]
		seconds = (time_str[18] - 48) * 16 + (time_str[19] - 48);
 8002320:	4b4b      	ldr	r3, [pc, #300]	@ (8002450 <time_setter+0x1f4>)
 8002322:	7c9b      	ldrb	r3, [r3, #18]
 8002324:	3b30      	subs	r3, #48	@ 0x30
 8002326:	b2db      	uxtb	r3, r3
 8002328:	011b      	lsls	r3, r3, #4
 800232a:	b2da      	uxtb	r2, r3
 800232c:	4b48      	ldr	r3, [pc, #288]	@ (8002450 <time_setter+0x1f4>)
 800232e:	7cdb      	ldrb	r3, [r3, #19]
 8002330:	4413      	add	r3, r2
 8002332:	b2db      	uxtb	r3, r3
 8002334:	3b30      	subs	r3, #48	@ 0x30
 8002336:	70bb      	strb	r3, [r7, #2]


		sramAddr = 0x60000000 | 0x7FFF8;
 8002338:	4b46      	ldr	r3, [pc, #280]	@ (8002454 <time_setter+0x1f8>)
 800233a:	4a47      	ldr	r2, [pc, #284]	@ (8002458 <time_setter+0x1fc>)
 800233c:	601a      	str	r2, [r3, #0]
		pSrcBuffer = 0x80;
 800233e:	4b47      	ldr	r3, [pc, #284]	@ (800245c <time_setter+0x200>)
 8002340:	2280      	movs	r2, #128	@ 0x80
 8002342:	701a      	strb	r2, [r3, #0]
		HAL_SRAM_Write_8b(&hsram1,(uint32_t *)sramAddr,&pSrcBuffer,BufferSize);
 8002344:	4b43      	ldr	r3, [pc, #268]	@ (8002454 <time_setter+0x1f8>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4619      	mov	r1, r3
 800234a:	4b45      	ldr	r3, [pc, #276]	@ (8002460 <time_setter+0x204>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a43      	ldr	r2, [pc, #268]	@ (800245c <time_setter+0x200>)
 8002350:	4844      	ldr	r0, [pc, #272]	@ (8002464 <time_setter+0x208>)
 8002352:	f009 ffc5 	bl	800c2e0 <HAL_SRAM_Write_8b>


		sramAddr = 0x60000000 | 0x7FFF9;
 8002356:	4b3f      	ldr	r3, [pc, #252]	@ (8002454 <time_setter+0x1f8>)
 8002358:	4a43      	ldr	r2, [pc, #268]	@ (8002468 <time_setter+0x20c>)
 800235a:	601a      	str	r2, [r3, #0]
		pSrcBuffer = seconds;
 800235c:	4a3f      	ldr	r2, [pc, #252]	@ (800245c <time_setter+0x200>)
 800235e:	78bb      	ldrb	r3, [r7, #2]
 8002360:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1,(uint32_t *)sramAddr,&pSrcBuffer,BufferSize);
 8002362:	4b3c      	ldr	r3, [pc, #240]	@ (8002454 <time_setter+0x1f8>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4619      	mov	r1, r3
 8002368:	4b3d      	ldr	r3, [pc, #244]	@ (8002460 <time_setter+0x204>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a3b      	ldr	r2, [pc, #236]	@ (800245c <time_setter+0x200>)
 800236e:	483d      	ldr	r0, [pc, #244]	@ (8002464 <time_setter+0x208>)
 8002370:	f009 ffb6 	bl	800c2e0 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFa;
 8002374:	4b37      	ldr	r3, [pc, #220]	@ (8002454 <time_setter+0x1f8>)
 8002376:	4a3d      	ldr	r2, [pc, #244]	@ (800246c <time_setter+0x210>)
 8002378:	601a      	str	r2, [r3, #0]
		pSrcBuffer =  minutes;
 800237a:	4a38      	ldr	r2, [pc, #224]	@ (800245c <time_setter+0x200>)
 800237c:	793b      	ldrb	r3, [r7, #4]
 800237e:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1,(uint32_t *)sramAddr,&pSrcBuffer,BufferSize);
 8002380:	4b34      	ldr	r3, [pc, #208]	@ (8002454 <time_setter+0x1f8>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4619      	mov	r1, r3
 8002386:	4b36      	ldr	r3, [pc, #216]	@ (8002460 <time_setter+0x204>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a34      	ldr	r2, [pc, #208]	@ (800245c <time_setter+0x200>)
 800238c:	4835      	ldr	r0, [pc, #212]	@ (8002464 <time_setter+0x208>)
 800238e:	f009 ffa7 	bl	800c2e0 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFb;
 8002392:	4b30      	ldr	r3, [pc, #192]	@ (8002454 <time_setter+0x1f8>)
 8002394:	4a36      	ldr	r2, [pc, #216]	@ (8002470 <time_setter+0x214>)
 8002396:	601a      	str	r2, [r3, #0]
		pSrcBuffer =  hours;
 8002398:	4a30      	ldr	r2, [pc, #192]	@ (800245c <time_setter+0x200>)
 800239a:	78fb      	ldrb	r3, [r7, #3]
 800239c:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1,(uint32_t *)sramAddr,&pSrcBuffer,BufferSize);
 800239e:	4b2d      	ldr	r3, [pc, #180]	@ (8002454 <time_setter+0x1f8>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4619      	mov	r1, r3
 80023a4:	4b2e      	ldr	r3, [pc, #184]	@ (8002460 <time_setter+0x204>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a2c      	ldr	r2, [pc, #176]	@ (800245c <time_setter+0x200>)
 80023aa:	482e      	ldr	r0, [pc, #184]	@ (8002464 <time_setter+0x208>)
 80023ac:	f009 ff98 	bl	800c2e0 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFc;
 80023b0:	4b28      	ldr	r3, [pc, #160]	@ (8002454 <time_setter+0x1f8>)
 80023b2:	4a30      	ldr	r2, [pc, #192]	@ (8002474 <time_setter+0x218>)
 80023b4:	601a      	str	r2, [r3, #0]
		pSrcBuffer = 0x02;
 80023b6:	4b29      	ldr	r3, [pc, #164]	@ (800245c <time_setter+0x200>)
 80023b8:	2202      	movs	r2, #2
 80023ba:	701a      	strb	r2, [r3, #0]
		HAL_SRAM_Write_8b(&hsram1,(uint32_t *)sramAddr,&pSrcBuffer,BufferSize);
 80023bc:	4b25      	ldr	r3, [pc, #148]	@ (8002454 <time_setter+0x1f8>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4619      	mov	r1, r3
 80023c2:	4b27      	ldr	r3, [pc, #156]	@ (8002460 <time_setter+0x204>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a25      	ldr	r2, [pc, #148]	@ (800245c <time_setter+0x200>)
 80023c8:	4826      	ldr	r0, [pc, #152]	@ (8002464 <time_setter+0x208>)
 80023ca:	f009 ff89 	bl	800c2e0 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFd;
 80023ce:	4b21      	ldr	r3, [pc, #132]	@ (8002454 <time_setter+0x1f8>)
 80023d0:	4a29      	ldr	r2, [pc, #164]	@ (8002478 <time_setter+0x21c>)
 80023d2:	601a      	str	r2, [r3, #0]
		pSrcBuffer =  day;
 80023d4:	4a21      	ldr	r2, [pc, #132]	@ (800245c <time_setter+0x200>)
 80023d6:	797b      	ldrb	r3, [r7, #5]
 80023d8:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1,(uint32_t *)sramAddr,&pSrcBuffer,BufferSize);
 80023da:	4b1e      	ldr	r3, [pc, #120]	@ (8002454 <time_setter+0x1f8>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4619      	mov	r1, r3
 80023e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002460 <time_setter+0x204>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a1d      	ldr	r2, [pc, #116]	@ (800245c <time_setter+0x200>)
 80023e6:	481f      	ldr	r0, [pc, #124]	@ (8002464 <time_setter+0x208>)
 80023e8:	f009 ff7a 	bl	800c2e0 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFe;
 80023ec:	4b19      	ldr	r3, [pc, #100]	@ (8002454 <time_setter+0x1f8>)
 80023ee:	4a23      	ldr	r2, [pc, #140]	@ (800247c <time_setter+0x220>)
 80023f0:	601a      	str	r2, [r3, #0]
		pSrcBuffer =   month;
 80023f2:	4a1a      	ldr	r2, [pc, #104]	@ (800245c <time_setter+0x200>)
 80023f4:	79fb      	ldrb	r3, [r7, #7]
 80023f6:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1,(uint32_t *)sramAddr,&pSrcBuffer,BufferSize);
 80023f8:	4b16      	ldr	r3, [pc, #88]	@ (8002454 <time_setter+0x1f8>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4619      	mov	r1, r3
 80023fe:	4b18      	ldr	r3, [pc, #96]	@ (8002460 <time_setter+0x204>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a16      	ldr	r2, [pc, #88]	@ (800245c <time_setter+0x200>)
 8002404:	4817      	ldr	r0, [pc, #92]	@ (8002464 <time_setter+0x208>)
 8002406:	f009 ff6b 	bl	800c2e0 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFf;
 800240a:	4b12      	ldr	r3, [pc, #72]	@ (8002454 <time_setter+0x1f8>)
 800240c:	4a1c      	ldr	r2, [pc, #112]	@ (8002480 <time_setter+0x224>)
 800240e:	601a      	str	r2, [r3, #0]
		pSrcBuffer =  year ;
 8002410:	4a12      	ldr	r2, [pc, #72]	@ (800245c <time_setter+0x200>)
 8002412:	79bb      	ldrb	r3, [r7, #6]
 8002414:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1,(uint32_t *)sramAddr,&pSrcBuffer,BufferSize);
 8002416:	4b0f      	ldr	r3, [pc, #60]	@ (8002454 <time_setter+0x1f8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4619      	mov	r1, r3
 800241c:	4b10      	ldr	r3, [pc, #64]	@ (8002460 <time_setter+0x204>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a0e      	ldr	r2, [pc, #56]	@ (800245c <time_setter+0x200>)
 8002422:	4810      	ldr	r0, [pc, #64]	@ (8002464 <time_setter+0x208>)
 8002424:	f009 ff5c 	bl	800c2e0 <HAL_SRAM_Write_8b>


		sramAddr = 0x60000000 | 0x7FFF8;
 8002428:	4b0a      	ldr	r3, [pc, #40]	@ (8002454 <time_setter+0x1f8>)
 800242a:	4a0b      	ldr	r2, [pc, #44]	@ (8002458 <time_setter+0x1fc>)
 800242c:	601a      	str	r2, [r3, #0]
		pSrcBuffer = 0x00;
 800242e:	4b0b      	ldr	r3, [pc, #44]	@ (800245c <time_setter+0x200>)
 8002430:	2200      	movs	r2, #0
 8002432:	701a      	strb	r2, [r3, #0]
		HAL_SRAM_Write_8b(&hsram1,sramAddr,&pSrcBuffer,BufferSize);
 8002434:	4b07      	ldr	r3, [pc, #28]	@ (8002454 <time_setter+0x1f8>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4619      	mov	r1, r3
 800243a:	4b09      	ldr	r3, [pc, #36]	@ (8002460 <time_setter+0x204>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a07      	ldr	r2, [pc, #28]	@ (800245c <time_setter+0x200>)
 8002440:	4808      	ldr	r0, [pc, #32]	@ (8002464 <time_setter+0x208>)
 8002442:	f009 ff4d 	bl	800c2e0 <HAL_SRAM_Write_8b>

	}

}
 8002446:	bf00      	nop
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20005c4c 	.word	0x20005c4c
 8002454:	20005c48 	.word	0x20005c48
 8002458:	6007fff8 	.word	0x6007fff8
 800245c:	20000014 	.word	0x20000014
 8002460:	20000018 	.word	0x20000018
 8002464:	20005bb0 	.word	0x20005bb0
 8002468:	6007fff9 	.word	0x6007fff9
 800246c:	6007fffa 	.word	0x6007fffa
 8002470:	6007fffb 	.word	0x6007fffb
 8002474:	6007fffc 	.word	0x6007fffc
 8002478:	6007fffd 	.word	0x6007fffd
 800247c:	6007fffe 	.word	0x6007fffe
 8002480:	6007ffff 	.word	0x6007ffff

08002484 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800248a:	f001 fd07 	bl	8003e9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800248e:	f000 f89d 	bl	80025cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002492:	f000 fc0b 	bl	8002cac <MX_GPIO_Init>
  MX_FMC_Init();
 8002496:	f000 fb3d 	bl	8002b14 <MX_FMC_Init>
  MX_SPI2_Init();
 800249a:	f000 f907 	bl	80026ac <MX_SPI2_Init>
  MX_SPI3_Init();
 800249e:	f000 f95b 	bl	8002758 <MX_SPI3_Init>
  MX_SPI5_Init();
 80024a2:	f000 f9af 	bl	8002804 <MX_SPI5_Init>
  MX_UART4_Init();
 80024a6:	f000 fa03 	bl	80028b0 <MX_UART4_Init>
  MX_UART5_Init();
 80024aa:	f000 fa4d 	bl	8002948 <MX_UART5_Init>
  MX_UART8_Init();
 80024ae:	f000 fa97 	bl	80029e0 <MX_UART8_Init>
  MX_USART10_UART_Init();
 80024b2:	f000 fae3 	bl	8002a7c <MX_USART10_UART_Init>
  /* USER CODE BEGIN 2 */
	UART_InitAllHandlers();
 80024b6:	f000 fda9 	bl	800300c <UART_InitAllHandlers>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	sramAddr = 0x60000000 | 0x7FFF8;
 80024ba:	4b3b      	ldr	r3, [pc, #236]	@ (80025a8 <main+0x124>)
 80024bc:	4a3b      	ldr	r2, [pc, #236]	@ (80025ac <main+0x128>)
 80024be:	601a      	str	r2, [r3, #0]
	pSrcBuffer = 0x00;
 80024c0:	4b3b      	ldr	r3, [pc, #236]	@ (80025b0 <main+0x12c>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	701a      	strb	r2, [r3, #0]
	HAL_SRAM_Write_8b(&hsram1,(uint32_t *)sramAddr,&pSrcBuffer,BufferSize);
 80024c6:	4b38      	ldr	r3, [pc, #224]	@ (80025a8 <main+0x124>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4619      	mov	r1, r3
 80024cc:	2301      	movs	r3, #1
 80024ce:	4a38      	ldr	r2, [pc, #224]	@ (80025b0 <main+0x12c>)
 80024d0:	4838      	ldr	r0, [pc, #224]	@ (80025b4 <main+0x130>)
 80024d2:	f009 ff05 	bl	800c2e0 <HAL_SRAM_Write_8b>
	HAL_NAND_Reset(&hnand1);
 80024d6:	4838      	ldr	r0, [pc, #224]	@ (80025b8 <main+0x134>)
 80024d8:	f002 f9f8 	bl	80048cc <HAL_NAND_Reset>

	HAL_GPIO_WritePin(GPIOC, RESET_1_Pin, 1);
 80024dc:	2201      	movs	r2, #1
 80024de:	2104      	movs	r1, #4
 80024e0:	4836      	ldr	r0, [pc, #216]	@ (80025bc <main+0x138>)
 80024e2:	f002 f945 	bl	8004770 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80024e6:	2001      	movs	r0, #1
 80024e8:	f001 fd96 	bl	8004018 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, RESET_1_Pin, 0);
 80024ec:	2200      	movs	r2, #0
 80024ee:	2104      	movs	r1, #4
 80024f0:	4832      	ldr	r0, [pc, #200]	@ (80025bc <main+0x138>)
 80024f2:	f002 f93d 	bl	8004770 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80024f6:	2001      	movs	r0, #1
 80024f8:	f001 fd8e 	bl	8004018 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, RESET_1_Pin, 1);
 80024fc:	2201      	movs	r2, #1
 80024fe:	2104      	movs	r1, #4
 8002500:	482e      	ldr	r0, [pc, #184]	@ (80025bc <main+0x138>)
 8002502:	f002 f935 	bl	8004770 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002506:	2001      	movs	r0, #1
 8002508:	f001 fd86 	bl	8004018 <HAL_Delay>


	HAL_GPIO_WritePin(GPIOG, RESET_2_Pin, 1);
 800250c:	2201      	movs	r2, #1
 800250e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002512:	482b      	ldr	r0, [pc, #172]	@ (80025c0 <main+0x13c>)
 8002514:	f002 f92c 	bl	8004770 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002518:	2001      	movs	r0, #1
 800251a:	f001 fd7d 	bl	8004018 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, RESET_2_Pin, 0);
 800251e:	2200      	movs	r2, #0
 8002520:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002524:	4826      	ldr	r0, [pc, #152]	@ (80025c0 <main+0x13c>)
 8002526:	f002 f923 	bl	8004770 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800252a:	2001      	movs	r0, #1
 800252c:	f001 fd74 	bl	8004018 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, RESET_2_Pin, 1);
 8002530:	2201      	movs	r2, #1
 8002532:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002536:	4822      	ldr	r0, [pc, #136]	@ (80025c0 <main+0x13c>)
 8002538:	f002 f91a 	bl	8004770 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800253c:	2001      	movs	r0, #1
 800253e:	f001 fd6b 	bl	8004018 <HAL_Delay>


	HAL_GPIO_WritePin(GPIOA, RESET_3_Pin, 1);
 8002542:	2201      	movs	r2, #1
 8002544:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002548:	481e      	ldr	r0, [pc, #120]	@ (80025c4 <main+0x140>)
 800254a:	f002 f911 	bl	8004770 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800254e:	2001      	movs	r0, #1
 8002550:	f001 fd62 	bl	8004018 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, RESET_3_Pin, 0);
 8002554:	2200      	movs	r2, #0
 8002556:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800255a:	481a      	ldr	r0, [pc, #104]	@ (80025c4 <main+0x140>)
 800255c:	f002 f908 	bl	8004770 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002560:	2001      	movs	r0, #1
 8002562:	f001 fd59 	bl	8004018 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, RESET_3_Pin, 1);
 8002566:	2201      	movs	r2, #1
 8002568:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800256c:	4815      	ldr	r0, [pc, #84]	@ (80025c4 <main+0x140>)
 800256e:	f002 f8ff 	bl	8004770 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8002572:	200a      	movs	r0, #10
 8002574:	f001 fd50 	bl	8004018 <HAL_Delay>
	//set_NAND_block_status();
	get_NAND_block_status();
 8002578:	f7ff fbc0 	bl	8001cfc <get_NAND_block_status>
	get_NAND_address();
 800257c:	f7ff fe46 	bl	800220c <get_NAND_address>
	HAL_GPIO_WritePin(GPIOA, RS485_CTRL2_Pin, GPIO_PIN_RESET);
 8002580:	2200      	movs	r2, #0
 8002582:	2104      	movs	r1, #4
 8002584:	480f      	ldr	r0, [pc, #60]	@ (80025c4 <main+0x140>)
 8002586:	f002 f8f3 	bl	8004770 <HAL_GPIO_WritePin>
	char buffe33r[] = "HELLO";
 800258a:	4a0f      	ldr	r2, [pc, #60]	@ (80025c8 <main+0x144>)
 800258c:	463b      	mov	r3, r7
 800258e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002592:	6018      	str	r0, [r3, #0]
 8002594:	3304      	adds	r3, #4
 8002596:	8019      	strh	r1, [r3, #0]
			update_NAND_addr();
			while (1);
		}
#endif

		ADC_operation();
 8002598:	f7fe fcf2 	bl	8000f80 <ADC_operation>
		NAND_operation();
 800259c:	f7ff fb34 	bl	8001c08 <NAND_operation>
		SRAM_operation();
 80025a0:	f7ff fcd0 	bl	8001f44 <SRAM_operation>
	{
 80025a4:	bf00      	nop
 80025a6:	e7f7      	b.n	8002598 <main+0x114>
 80025a8:	20005c48 	.word	0x20005c48
 80025ac:	6007fff8 	.word	0x6007fff8
 80025b0:	20000014 	.word	0x20000014
 80025b4:	20005bb0 	.word	0x20005bb0
 80025b8:	20005c08 	.word	0x20005c08
 80025bc:	42020800 	.word	0x42020800
 80025c0:	42021800 	.word	0x42021800
 80025c4:	42020000 	.word	0x42020000
 80025c8:	08011970 	.word	0x08011970

080025cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b09c      	sub	sp, #112	@ 0x70
 80025d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025d2:	f107 0320 	add.w	r3, r7, #32
 80025d6:	2250      	movs	r2, #80	@ 0x50
 80025d8:	2100      	movs	r1, #0
 80025da:	4618      	mov	r0, r3
 80025dc:	f00c ffcf 	bl	800f57e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025e0:	f107 0308 	add.w	r3, r7, #8
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	605a      	str	r2, [r3, #4]
 80025ea:	609a      	str	r2, [r3, #8]
 80025ec:	60da      	str	r2, [r3, #12]
 80025ee:	611a      	str	r2, [r3, #16]
 80025f0:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80025f2:	4b2c      	ldr	r3, [pc, #176]	@ (80026a4 <SystemClock_Config+0xd8>)
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	4a2b      	ldr	r2, [pc, #172]	@ (80026a4 <SystemClock_Config+0xd8>)
 80025f8:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80025fc:	6113      	str	r3, [r2, #16]
 80025fe:	4b29      	ldr	r3, [pc, #164]	@ (80026a4 <SystemClock_Config+0xd8>)
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002606:	607b      	str	r3, [r7, #4]
 8002608:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800260a:	bf00      	nop
 800260c:	4b25      	ldr	r3, [pc, #148]	@ (80026a4 <SystemClock_Config+0xd8>)
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	f003 0308 	and.w	r3, r3, #8
 8002614:	2b08      	cmp	r3, #8
 8002616:	d1f9      	bne.n	800260c <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002618:	2301      	movs	r3, #1
 800261a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800261c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002620:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002622:	2302      	movs	r3, #2
 8002624:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8002626:	2303      	movs	r3, #3
 8002628:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800262a:	2304      	movs	r3, #4
 800262c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 80;
 800262e:	2350      	movs	r3, #80	@ 0x50
 8002630:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002632:	2302      	movs	r3, #2
 8002634:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002636:	2302      	movs	r3, #2
 8002638:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800263a:	2302      	movs	r3, #2
 800263c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 800263e:	2308      	movs	r3, #8
 8002640:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8002642:	2300      	movs	r3, #0
 8002644:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002646:	2300      	movs	r3, #0
 8002648:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800264a:	f107 0320 	add.w	r3, r7, #32
 800264e:	4618      	mov	r0, r3
 8002650:	f002 ffc6 	bl	80055e0 <HAL_RCC_OscConfig>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800265a:	f000 fe3c 	bl	80032d6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800265e:	231f      	movs	r3, #31
 8002660:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002662:	2303      	movs	r3, #3
 8002664:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002666:	2300      	movs	r3, #0
 8002668:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800266e:	2300      	movs	r3, #0
 8002670:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8002672:	2300      	movs	r3, #0
 8002674:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002676:	f107 0308 	add.w	r3, r7, #8
 800267a:	2105      	movs	r1, #5
 800267c:	4618      	mov	r0, r3
 800267e:	f003 fbe7 	bl	8005e50 <HAL_RCC_ClockConfig>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002688:	f000 fe25 	bl	80032d6 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 800268c:	4b06      	ldr	r3, [pc, #24]	@ (80026a8 <SystemClock_Config+0xdc>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002694:	4a04      	ldr	r2, [pc, #16]	@ (80026a8 <SystemClock_Config+0xdc>)
 8002696:	f043 0320 	orr.w	r3, r3, #32
 800269a:	6013      	str	r3, [r2, #0]
}
 800269c:	bf00      	nop
 800269e:	3770      	adds	r7, #112	@ 0x70
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	44020800 	.word	0x44020800
 80026a8:	40022000 	.word	0x40022000

080026ac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80026b0:	4b27      	ldr	r3, [pc, #156]	@ (8002750 <MX_SPI2_Init+0xa4>)
 80026b2:	4a28      	ldr	r2, [pc, #160]	@ (8002754 <MX_SPI2_Init+0xa8>)
 80026b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80026b6:	4b26      	ldr	r3, [pc, #152]	@ (8002750 <MX_SPI2_Init+0xa4>)
 80026b8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80026bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80026be:	4b24      	ldr	r3, [pc, #144]	@ (8002750 <MX_SPI2_Init+0xa4>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80026c4:	4b22      	ldr	r3, [pc, #136]	@ (8002750 <MX_SPI2_Init+0xa4>)
 80026c6:	2207      	movs	r2, #7
 80026c8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026ca:	4b21      	ldr	r3, [pc, #132]	@ (8002750 <MX_SPI2_Init+0xa4>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80026d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002750 <MX_SPI2_Init+0xa4>)
 80026d2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80026d6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80026d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002750 <MX_SPI2_Init+0xa4>)
 80026da:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80026de:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80026e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002750 <MX_SPI2_Init+0xa4>)
 80026e2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80026e6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026e8:	4b19      	ldr	r3, [pc, #100]	@ (8002750 <MX_SPI2_Init+0xa4>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80026ee:	4b18      	ldr	r3, [pc, #96]	@ (8002750 <MX_SPI2_Init+0xa4>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026f4:	4b16      	ldr	r3, [pc, #88]	@ (8002750 <MX_SPI2_Init+0xa4>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 80026fa:	4b15      	ldr	r3, [pc, #84]	@ (8002750 <MX_SPI2_Init+0xa4>)
 80026fc:	2207      	movs	r2, #7
 80026fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002700:	4b13      	ldr	r3, [pc, #76]	@ (8002750 <MX_SPI2_Init+0xa4>)
 8002702:	2200      	movs	r2, #0
 8002704:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002706:	4b12      	ldr	r3, [pc, #72]	@ (8002750 <MX_SPI2_Init+0xa4>)
 8002708:	2200      	movs	r2, #0
 800270a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800270c:	4b10      	ldr	r3, [pc, #64]	@ (8002750 <MX_SPI2_Init+0xa4>)
 800270e:	2200      	movs	r2, #0
 8002710:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002712:	4b0f      	ldr	r3, [pc, #60]	@ (8002750 <MX_SPI2_Init+0xa4>)
 8002714:	2200      	movs	r2, #0
 8002716:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002718:	4b0d      	ldr	r3, [pc, #52]	@ (8002750 <MX_SPI2_Init+0xa4>)
 800271a:	2200      	movs	r2, #0
 800271c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800271e:	4b0c      	ldr	r3, [pc, #48]	@ (8002750 <MX_SPI2_Init+0xa4>)
 8002720:	2200      	movs	r2, #0
 8002722:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002724:	4b0a      	ldr	r3, [pc, #40]	@ (8002750 <MX_SPI2_Init+0xa4>)
 8002726:	2200      	movs	r2, #0
 8002728:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800272a:	4b09      	ldr	r3, [pc, #36]	@ (8002750 <MX_SPI2_Init+0xa4>)
 800272c:	2200      	movs	r2, #0
 800272e:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8002730:	4b07      	ldr	r3, [pc, #28]	@ (8002750 <MX_SPI2_Init+0xa4>)
 8002732:	2200      	movs	r2, #0
 8002734:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8002736:	4b06      	ldr	r3, [pc, #24]	@ (8002750 <MX_SPI2_Init+0xa4>)
 8002738:	2200      	movs	r2, #0
 800273a:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800273c:	4804      	ldr	r0, [pc, #16]	@ (8002750 <MX_SPI2_Init+0xa4>)
 800273e:	f008 ff1b 	bl	800b578 <HAL_SPI_Init>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8002748:	f000 fdc5 	bl	80032d6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800274c:	bf00      	nop
 800274e:	bd80      	pop	{r7, pc}
 8002750:	200057b0 	.word	0x200057b0
 8002754:	40003800 	.word	0x40003800

08002758 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800275c:	4b27      	ldr	r3, [pc, #156]	@ (80027fc <MX_SPI3_Init+0xa4>)
 800275e:	4a28      	ldr	r2, [pc, #160]	@ (8002800 <MX_SPI3_Init+0xa8>)
 8002760:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002762:	4b26      	ldr	r3, [pc, #152]	@ (80027fc <MX_SPI3_Init+0xa4>)
 8002764:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002768:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800276a:	4b24      	ldr	r3, [pc, #144]	@ (80027fc <MX_SPI3_Init+0xa4>)
 800276c:	2200      	movs	r2, #0
 800276e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002770:	4b22      	ldr	r3, [pc, #136]	@ (80027fc <MX_SPI3_Init+0xa4>)
 8002772:	2207      	movs	r2, #7
 8002774:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002776:	4b21      	ldr	r3, [pc, #132]	@ (80027fc <MX_SPI3_Init+0xa4>)
 8002778:	2200      	movs	r2, #0
 800277a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800277c:	4b1f      	ldr	r3, [pc, #124]	@ (80027fc <MX_SPI3_Init+0xa4>)
 800277e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002782:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002784:	4b1d      	ldr	r3, [pc, #116]	@ (80027fc <MX_SPI3_Init+0xa4>)
 8002786:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800278a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800278c:	4b1b      	ldr	r3, [pc, #108]	@ (80027fc <MX_SPI3_Init+0xa4>)
 800278e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002792:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002794:	4b19      	ldr	r3, [pc, #100]	@ (80027fc <MX_SPI3_Init+0xa4>)
 8002796:	2200      	movs	r2, #0
 8002798:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800279a:	4b18      	ldr	r3, [pc, #96]	@ (80027fc <MX_SPI3_Init+0xa4>)
 800279c:	2200      	movs	r2, #0
 800279e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027a0:	4b16      	ldr	r3, [pc, #88]	@ (80027fc <MX_SPI3_Init+0xa4>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x7;
 80027a6:	4b15      	ldr	r3, [pc, #84]	@ (80027fc <MX_SPI3_Init+0xa4>)
 80027a8:	2207      	movs	r2, #7
 80027aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80027ac:	4b13      	ldr	r3, [pc, #76]	@ (80027fc <MX_SPI3_Init+0xa4>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80027b2:	4b12      	ldr	r3, [pc, #72]	@ (80027fc <MX_SPI3_Init+0xa4>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80027b8:	4b10      	ldr	r3, [pc, #64]	@ (80027fc <MX_SPI3_Init+0xa4>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80027be:	4b0f      	ldr	r3, [pc, #60]	@ (80027fc <MX_SPI3_Init+0xa4>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80027c4:	4b0d      	ldr	r3, [pc, #52]	@ (80027fc <MX_SPI3_Init+0xa4>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80027ca:	4b0c      	ldr	r3, [pc, #48]	@ (80027fc <MX_SPI3_Init+0xa4>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80027d0:	4b0a      	ldr	r3, [pc, #40]	@ (80027fc <MX_SPI3_Init+0xa4>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80027d6:	4b09      	ldr	r3, [pc, #36]	@ (80027fc <MX_SPI3_Init+0xa4>)
 80027d8:	2200      	movs	r2, #0
 80027da:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi3.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80027dc:	4b07      	ldr	r3, [pc, #28]	@ (80027fc <MX_SPI3_Init+0xa4>)
 80027de:	2200      	movs	r2, #0
 80027e0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi3.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80027e2:	4b06      	ldr	r3, [pc, #24]	@ (80027fc <MX_SPI3_Init+0xa4>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80027e8:	4804      	ldr	r0, [pc, #16]	@ (80027fc <MX_SPI3_Init+0xa4>)
 80027ea:	f008 fec5 	bl	800b578 <HAL_SPI_Init>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 80027f4:	f000 fd6f 	bl	80032d6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80027f8:	bf00      	nop
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	20005840 	.word	0x20005840
 8002800:	40003c00 	.word	0x40003c00

08002804 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002808:	4b27      	ldr	r3, [pc, #156]	@ (80028a8 <MX_SPI5_Init+0xa4>)
 800280a:	4a28      	ldr	r2, [pc, #160]	@ (80028ac <MX_SPI5_Init+0xa8>)
 800280c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800280e:	4b26      	ldr	r3, [pc, #152]	@ (80028a8 <MX_SPI5_Init+0xa4>)
 8002810:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002814:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002816:	4b24      	ldr	r3, [pc, #144]	@ (80028a8 <MX_SPI5_Init+0xa4>)
 8002818:	2200      	movs	r2, #0
 800281a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800281c:	4b22      	ldr	r3, [pc, #136]	@ (80028a8 <MX_SPI5_Init+0xa4>)
 800281e:	2207      	movs	r2, #7
 8002820:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002822:	4b21      	ldr	r3, [pc, #132]	@ (80028a8 <MX_SPI5_Init+0xa4>)
 8002824:	2200      	movs	r2, #0
 8002826:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002828:	4b1f      	ldr	r3, [pc, #124]	@ (80028a8 <MX_SPI5_Init+0xa4>)
 800282a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800282e:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002830:	4b1d      	ldr	r3, [pc, #116]	@ (80028a8 <MX_SPI5_Init+0xa4>)
 8002832:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002836:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002838:	4b1b      	ldr	r3, [pc, #108]	@ (80028a8 <MX_SPI5_Init+0xa4>)
 800283a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800283e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002840:	4b19      	ldr	r3, [pc, #100]	@ (80028a8 <MX_SPI5_Init+0xa4>)
 8002842:	2200      	movs	r2, #0
 8002844:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002846:	4b18      	ldr	r3, [pc, #96]	@ (80028a8 <MX_SPI5_Init+0xa4>)
 8002848:	2200      	movs	r2, #0
 800284a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800284c:	4b16      	ldr	r3, [pc, #88]	@ (80028a8 <MX_SPI5_Init+0xa4>)
 800284e:	2200      	movs	r2, #0
 8002850:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x7;
 8002852:	4b15      	ldr	r3, [pc, #84]	@ (80028a8 <MX_SPI5_Init+0xa4>)
 8002854:	2207      	movs	r2, #7
 8002856:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002858:	4b13      	ldr	r3, [pc, #76]	@ (80028a8 <MX_SPI5_Init+0xa4>)
 800285a:	2200      	movs	r2, #0
 800285c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800285e:	4b12      	ldr	r3, [pc, #72]	@ (80028a8 <MX_SPI5_Init+0xa4>)
 8002860:	2200      	movs	r2, #0
 8002862:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002864:	4b10      	ldr	r3, [pc, #64]	@ (80028a8 <MX_SPI5_Init+0xa4>)
 8002866:	2200      	movs	r2, #0
 8002868:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800286a:	4b0f      	ldr	r3, [pc, #60]	@ (80028a8 <MX_SPI5_Init+0xa4>)
 800286c:	2200      	movs	r2, #0
 800286e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002870:	4b0d      	ldr	r3, [pc, #52]	@ (80028a8 <MX_SPI5_Init+0xa4>)
 8002872:	2200      	movs	r2, #0
 8002874:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002876:	4b0c      	ldr	r3, [pc, #48]	@ (80028a8 <MX_SPI5_Init+0xa4>)
 8002878:	2200      	movs	r2, #0
 800287a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800287c:	4b0a      	ldr	r3, [pc, #40]	@ (80028a8 <MX_SPI5_Init+0xa4>)
 800287e:	2200      	movs	r2, #0
 8002880:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002882:	4b09      	ldr	r3, [pc, #36]	@ (80028a8 <MX_SPI5_Init+0xa4>)
 8002884:	2200      	movs	r2, #0
 8002886:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi5.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8002888:	4b07      	ldr	r3, [pc, #28]	@ (80028a8 <MX_SPI5_Init+0xa4>)
 800288a:	2200      	movs	r2, #0
 800288c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi5.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800288e:	4b06      	ldr	r3, [pc, #24]	@ (80028a8 <MX_SPI5_Init+0xa4>)
 8002890:	2200      	movs	r2, #0
 8002892:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002894:	4804      	ldr	r0, [pc, #16]	@ (80028a8 <MX_SPI5_Init+0xa4>)
 8002896:	f008 fe6f 	bl	800b578 <HAL_SPI_Init>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <MX_SPI5_Init+0xa0>
  {
    Error_Handler();
 80028a0:	f000 fd19 	bl	80032d6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80028a4:	bf00      	nop
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	200058d0 	.word	0x200058d0
 80028ac:	44002000 	.word	0x44002000

080028b0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80028b4:	4b22      	ldr	r3, [pc, #136]	@ (8002940 <MX_UART4_Init+0x90>)
 80028b6:	4a23      	ldr	r2, [pc, #140]	@ (8002944 <MX_UART4_Init+0x94>)
 80028b8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80028ba:	4b21      	ldr	r3, [pc, #132]	@ (8002940 <MX_UART4_Init+0x90>)
 80028bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80028c0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80028c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002940 <MX_UART4_Init+0x90>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80028c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002940 <MX_UART4_Init+0x90>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80028ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002940 <MX_UART4_Init+0x90>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80028d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002940 <MX_UART4_Init+0x90>)
 80028d6:	220c      	movs	r2, #12
 80028d8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028da:	4b19      	ldr	r3, [pc, #100]	@ (8002940 <MX_UART4_Init+0x90>)
 80028dc:	2200      	movs	r2, #0
 80028de:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80028e0:	4b17      	ldr	r3, [pc, #92]	@ (8002940 <MX_UART4_Init+0x90>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028e6:	4b16      	ldr	r3, [pc, #88]	@ (8002940 <MX_UART4_Init+0x90>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028ec:	4b14      	ldr	r3, [pc, #80]	@ (8002940 <MX_UART4_Init+0x90>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028f2:	4b13      	ldr	r3, [pc, #76]	@ (8002940 <MX_UART4_Init+0x90>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80028f8:	4811      	ldr	r0, [pc, #68]	@ (8002940 <MX_UART4_Init+0x90>)
 80028fa:	f009 fd35 	bl	800c368 <HAL_UART_Init>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002904:	f000 fce7 	bl	80032d6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002908:	2100      	movs	r1, #0
 800290a:	480d      	ldr	r0, [pc, #52]	@ (8002940 <MX_UART4_Init+0x90>)
 800290c:	f00b fe33 	bl	800e576 <HAL_UARTEx_SetTxFifoThreshold>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002916:	f000 fcde 	bl	80032d6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800291a:	2100      	movs	r1, #0
 800291c:	4808      	ldr	r0, [pc, #32]	@ (8002940 <MX_UART4_Init+0x90>)
 800291e:	f00b fe68 	bl	800e5f2 <HAL_UARTEx_SetRxFifoThreshold>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002928:	f000 fcd5 	bl	80032d6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800292c:	4804      	ldr	r0, [pc, #16]	@ (8002940 <MX_UART4_Init+0x90>)
 800292e:	f00b fde9 	bl	800e504 <HAL_UARTEx_DisableFifoMode>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002938:	f000 fccd 	bl	80032d6 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800293c:	bf00      	nop
 800293e:	bd80      	pop	{r7, pc}
 8002940:	20005960 	.word	0x20005960
 8002944:	40004c00 	.word	0x40004c00

08002948 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800294c:	4b22      	ldr	r3, [pc, #136]	@ (80029d8 <MX_UART5_Init+0x90>)
 800294e:	4a23      	ldr	r2, [pc, #140]	@ (80029dc <MX_UART5_Init+0x94>)
 8002950:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002952:	4b21      	ldr	r3, [pc, #132]	@ (80029d8 <MX_UART5_Init+0x90>)
 8002954:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002958:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800295a:	4b1f      	ldr	r3, [pc, #124]	@ (80029d8 <MX_UART5_Init+0x90>)
 800295c:	2200      	movs	r2, #0
 800295e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002960:	4b1d      	ldr	r3, [pc, #116]	@ (80029d8 <MX_UART5_Init+0x90>)
 8002962:	2200      	movs	r2, #0
 8002964:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002966:	4b1c      	ldr	r3, [pc, #112]	@ (80029d8 <MX_UART5_Init+0x90>)
 8002968:	2200      	movs	r2, #0
 800296a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800296c:	4b1a      	ldr	r3, [pc, #104]	@ (80029d8 <MX_UART5_Init+0x90>)
 800296e:	220c      	movs	r2, #12
 8002970:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002972:	4b19      	ldr	r3, [pc, #100]	@ (80029d8 <MX_UART5_Init+0x90>)
 8002974:	2200      	movs	r2, #0
 8002976:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002978:	4b17      	ldr	r3, [pc, #92]	@ (80029d8 <MX_UART5_Init+0x90>)
 800297a:	2200      	movs	r2, #0
 800297c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800297e:	4b16      	ldr	r3, [pc, #88]	@ (80029d8 <MX_UART5_Init+0x90>)
 8002980:	2200      	movs	r2, #0
 8002982:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002984:	4b14      	ldr	r3, [pc, #80]	@ (80029d8 <MX_UART5_Init+0x90>)
 8002986:	2200      	movs	r2, #0
 8002988:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800298a:	4b13      	ldr	r3, [pc, #76]	@ (80029d8 <MX_UART5_Init+0x90>)
 800298c:	2200      	movs	r2, #0
 800298e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002990:	4811      	ldr	r0, [pc, #68]	@ (80029d8 <MX_UART5_Init+0x90>)
 8002992:	f009 fce9 	bl	800c368 <HAL_UART_Init>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 800299c:	f000 fc9b 	bl	80032d6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029a0:	2100      	movs	r1, #0
 80029a2:	480d      	ldr	r0, [pc, #52]	@ (80029d8 <MX_UART5_Init+0x90>)
 80029a4:	f00b fde7 	bl	800e576 <HAL_UARTEx_SetTxFifoThreshold>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80029ae:	f000 fc92 	bl	80032d6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029b2:	2100      	movs	r1, #0
 80029b4:	4808      	ldr	r0, [pc, #32]	@ (80029d8 <MX_UART5_Init+0x90>)
 80029b6:	f00b fe1c 	bl	800e5f2 <HAL_UARTEx_SetRxFifoThreshold>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80029c0:	f000 fc89 	bl	80032d6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80029c4:	4804      	ldr	r0, [pc, #16]	@ (80029d8 <MX_UART5_Init+0x90>)
 80029c6:	f00b fd9d 	bl	800e504 <HAL_UARTEx_DisableFifoMode>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80029d0:	f000 fc81 	bl	80032d6 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80029d4:	bf00      	nop
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	200059f4 	.word	0x200059f4
 80029dc:	40005000 	.word	0x40005000

080029e0 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80029e4:	4b23      	ldr	r3, [pc, #140]	@ (8002a74 <MX_UART8_Init+0x94>)
 80029e6:	4a24      	ldr	r2, [pc, #144]	@ (8002a78 <MX_UART8_Init+0x98>)
 80029e8:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80029ea:	4b22      	ldr	r3, [pc, #136]	@ (8002a74 <MX_UART8_Init+0x94>)
 80029ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80029f0:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80029f2:	4b20      	ldr	r3, [pc, #128]	@ (8002a74 <MX_UART8_Init+0x94>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80029f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002a74 <MX_UART8_Init+0x94>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80029fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002a74 <MX_UART8_Init+0x94>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8002a04:	4b1b      	ldr	r3, [pc, #108]	@ (8002a74 <MX_UART8_Init+0x94>)
 8002a06:	220c      	movs	r2, #12
 8002a08:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8002a74 <MX_UART8_Init+0x94>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a10:	4b18      	ldr	r3, [pc, #96]	@ (8002a74 <MX_UART8_Init+0x94>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a16:	4b17      	ldr	r3, [pc, #92]	@ (8002a74 <MX_UART8_Init+0x94>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a1c:	4b15      	ldr	r3, [pc, #84]	@ (8002a74 <MX_UART8_Init+0x94>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a22:	4b14      	ldr	r3, [pc, #80]	@ (8002a74 <MX_UART8_Init+0x94>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8002a28:	4812      	ldr	r0, [pc, #72]	@ (8002a74 <MX_UART8_Init+0x94>)
 8002a2a:	f009 fc9d 	bl	800c368 <HAL_UART_Init>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8002a34:	f000 fc4f 	bl	80032d6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8002a38:	f04f 4120 	mov.w	r1, #2684354560	@ 0xa0000000
 8002a3c:	480d      	ldr	r0, [pc, #52]	@ (8002a74 <MX_UART8_Init+0x94>)
 8002a3e:	f00b fd9a 	bl	800e576 <HAL_UARTEx_SetTxFifoThreshold>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <MX_UART8_Init+0x6c>
  {
    Error_Handler();
 8002a48:	f000 fc45 	bl	80032d6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	4809      	ldr	r0, [pc, #36]	@ (8002a74 <MX_UART8_Init+0x94>)
 8002a50:	f00b fdcf 	bl	800e5f2 <HAL_UARTEx_SetRxFifoThreshold>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <MX_UART8_Init+0x7e>
  {
    Error_Handler();
 8002a5a:	f000 fc3c 	bl	80032d6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8002a5e:	4805      	ldr	r0, [pc, #20]	@ (8002a74 <MX_UART8_Init+0x94>)
 8002a60:	f00b fd50 	bl	800e504 <HAL_UARTEx_DisableFifoMode>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <MX_UART8_Init+0x8e>
  {
    Error_Handler();
 8002a6a:	f000 fc34 	bl	80032d6 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8002a6e:	bf00      	nop
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	20005a88 	.word	0x20005a88
 8002a78:	40007c00 	.word	0x40007c00

08002a7c <MX_USART10_UART_Init>:
  * @brief USART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART10_UART_Init(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 8002a80:	4b22      	ldr	r3, [pc, #136]	@ (8002b0c <MX_USART10_UART_Init+0x90>)
 8002a82:	4a23      	ldr	r2, [pc, #140]	@ (8002b10 <MX_USART10_UART_Init+0x94>)
 8002a84:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8002a86:	4b21      	ldr	r3, [pc, #132]	@ (8002b0c <MX_USART10_UART_Init+0x90>)
 8002a88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a8c:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8002a8e:	4b1f      	ldr	r3, [pc, #124]	@ (8002b0c <MX_USART10_UART_Init+0x90>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8002a94:	4b1d      	ldr	r3, [pc, #116]	@ (8002b0c <MX_USART10_UART_Init+0x90>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8002a9a:	4b1c      	ldr	r3, [pc, #112]	@ (8002b0c <MX_USART10_UART_Init+0x90>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8002aa0:	4b1a      	ldr	r3, [pc, #104]	@ (8002b0c <MX_USART10_UART_Init+0x90>)
 8002aa2:	220c      	movs	r2, #12
 8002aa4:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aa6:	4b19      	ldr	r3, [pc, #100]	@ (8002b0c <MX_USART10_UART_Init+0x90>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8002aac:	4b17      	ldr	r3, [pc, #92]	@ (8002b0c <MX_USART10_UART_Init+0x90>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ab2:	4b16      	ldr	r3, [pc, #88]	@ (8002b0c <MX_USART10_UART_Init+0x90>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ab8:	4b14      	ldr	r3, [pc, #80]	@ (8002b0c <MX_USART10_UART_Init+0x90>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002abe:	4b13      	ldr	r3, [pc, #76]	@ (8002b0c <MX_USART10_UART_Init+0x90>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8002ac4:	4811      	ldr	r0, [pc, #68]	@ (8002b0c <MX_USART10_UART_Init+0x90>)
 8002ac6:	f009 fc4f 	bl	800c368 <HAL_UART_Init>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <MX_USART10_UART_Init+0x58>
  {
    Error_Handler();
 8002ad0:	f000 fc01 	bl	80032d6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	480d      	ldr	r0, [pc, #52]	@ (8002b0c <MX_USART10_UART_Init+0x90>)
 8002ad8:	f00b fd4d 	bl	800e576 <HAL_UARTEx_SetTxFifoThreshold>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <MX_USART10_UART_Init+0x6a>
  {
    Error_Handler();
 8002ae2:	f000 fbf8 	bl	80032d6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	4808      	ldr	r0, [pc, #32]	@ (8002b0c <MX_USART10_UART_Init+0x90>)
 8002aea:	f00b fd82 	bl	800e5f2 <HAL_UARTEx_SetRxFifoThreshold>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <MX_USART10_UART_Init+0x7c>
  {
    Error_Handler();
 8002af4:	f000 fbef 	bl	80032d6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 8002af8:	4804      	ldr	r0, [pc, #16]	@ (8002b0c <MX_USART10_UART_Init+0x90>)
 8002afa:	f00b fd03 	bl	800e504 <HAL_UARTEx_DisableFifoMode>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <MX_USART10_UART_Init+0x8c>
  {
    Error_Handler();
 8002b04:	f000 fbe7 	bl	80032d6 <Error_Handler>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */

}
 8002b08:	bf00      	nop
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	20005b1c 	.word	0x20005b1c
 8002b10:	40006800 	.word	0x40006800

08002b14 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b090      	sub	sp, #64	@ 0x40
 8002b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8002b1a:	f107 0320 	add.w	r3, r7, #32
 8002b1e:	2220      	movs	r2, #32
 8002b20:	2100      	movs	r1, #0
 8002b22:	4618      	mov	r0, r3
 8002b24:	f00c fd2b 	bl	800f57e <memset>
  FMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 8002b28:	f107 0310 	add.w	r3, r7, #16
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	605a      	str	r2, [r3, #4]
 8002b32:	609a      	str	r2, [r3, #8]
 8002b34:	60da      	str	r2, [r3, #12]
  FMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 8002b36:	463b      	mov	r3, r7
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	605a      	str	r2, [r3, #4]
 8002b3e:	609a      	str	r2, [r3, #8]
 8002b40:	60da      	str	r2, [r3, #12]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8002b42:	4b55      	ldr	r3, [pc, #340]	@ (8002c98 <MX_FMC_Init+0x184>)
 8002b44:	4a55      	ldr	r2, [pc, #340]	@ (8002c9c <MX_FMC_Init+0x188>)
 8002b46:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8002b48:	4b53      	ldr	r3, [pc, #332]	@ (8002c98 <MX_FMC_Init+0x184>)
 8002b4a:	4a55      	ldr	r2, [pc, #340]	@ (8002ca0 <MX_FMC_Init+0x18c>)
 8002b4c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8002b4e:	4b52      	ldr	r3, [pc, #328]	@ (8002c98 <MX_FMC_Init+0x184>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8002b54:	4b50      	ldr	r3, [pc, #320]	@ (8002c98 <MX_FMC_Init+0x184>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8002b5a:	4b4f      	ldr	r3, [pc, #316]	@ (8002c98 <MX_FMC_Init+0x184>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 8002b60:	4b4d      	ldr	r3, [pc, #308]	@ (8002c98 <MX_FMC_Init+0x184>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8002b66:	4b4c      	ldr	r3, [pc, #304]	@ (8002c98 <MX_FMC_Init+0x184>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8002b6c:	4b4a      	ldr	r3, [pc, #296]	@ (8002c98 <MX_FMC_Init+0x184>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8002b72:	4b49      	ldr	r3, [pc, #292]	@ (8002c98 <MX_FMC_Init+0x184>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8002b78:	4b47      	ldr	r3, [pc, #284]	@ (8002c98 <MX_FMC_Init+0x184>)
 8002b7a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002b7e:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8002b80:	4b45      	ldr	r3, [pc, #276]	@ (8002c98 <MX_FMC_Init+0x184>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8002b86:	4b44      	ldr	r3, [pc, #272]	@ (8002c98 <MX_FMC_Init+0x184>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002b8c:	4b42      	ldr	r3, [pc, #264]	@ (8002c98 <MX_FMC_Init+0x184>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8002b92:	4b41      	ldr	r3, [pc, #260]	@ (8002c98 <MX_FMC_Init+0x184>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8002b98:	4b3f      	ldr	r3, [pc, #252]	@ (8002c98 <MX_FMC_Init+0x184>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8002b9e:	4b3e      	ldr	r3, [pc, #248]	@ (8002c98 <MX_FMC_Init+0x184>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsram1.Init.NBLSetupTime = 0;
 8002ba4:	4b3c      	ldr	r3, [pc, #240]	@ (8002c98 <MX_FMC_Init+0x184>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	645a      	str	r2, [r3, #68]	@ 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8002baa:	4b3b      	ldr	r3, [pc, #236]	@ (8002c98 <MX_FMC_Init+0x184>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	641a      	str	r2, [r3, #64]	@ 0x40
  hsram1.Init.MaxChipSelectPulse = DISABLE;
 8002bb0:	4b39      	ldr	r3, [pc, #228]	@ (8002c98 <MX_FMC_Init+0x184>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  /* Timing */
  Timing.AddressSetupTime = 15;
 8002bb8:	230f      	movs	r3, #15
 8002bba:	623b      	str	r3, [r7, #32]
  Timing.AddressHoldTime = 15;
 8002bbc:	230f      	movs	r3, #15
 8002bbe:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.DataSetupTime = 255;
 8002bc0:	23ff      	movs	r3, #255	@ 0xff
 8002bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.DataHoldTime = 3;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.BusTurnAroundDuration = 15;
 8002bc8:	230f      	movs	r3, #15
 8002bca:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.CLKDivision = 16;
 8002bcc:	2310      	movs	r3, #16
 8002bce:	637b      	str	r3, [r7, #52]	@ 0x34
  Timing.DataLatency = 17;
 8002bd0:	2311      	movs	r3, #17
 8002bd2:	63bb      	str	r3, [r7, #56]	@ 0x38
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8002bd8:	f107 0320 	add.w	r3, r7, #32
 8002bdc:	2200      	movs	r2, #0
 8002bde:	4619      	mov	r1, r3
 8002be0:	482d      	ldr	r0, [pc, #180]	@ (8002c98 <MX_FMC_Init+0x184>)
 8002be2:	f009 fae3 	bl	800c1ac <HAL_SRAM_Init>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <MX_FMC_Init+0xdc>
  {
    Error_Handler( );
 8002bec:	f000 fb73 	bl	80032d6 <Error_Handler>
  }

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FMC_NAND_DEVICE;
 8002bf0:	4b2c      	ldr	r3, [pc, #176]	@ (8002ca4 <MX_FMC_Init+0x190>)
 8002bf2:	4a2d      	ldr	r2, [pc, #180]	@ (8002ca8 <MX_FMC_Init+0x194>)
 8002bf4:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FMC_NAND_BANK3;
 8002bf6:	4b2b      	ldr	r3, [pc, #172]	@ (8002ca4 <MX_FMC_Init+0x190>)
 8002bf8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002bfc:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FMC_NAND_WAIT_FEATURE_ENABLE;
 8002bfe:	4b29      	ldr	r3, [pc, #164]	@ (8002ca4 <MX_FMC_Init+0x190>)
 8002c00:	2202      	movs	r2, #2
 8002c02:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FMC_NAND_MEM_BUS_WIDTH_8;
 8002c04:	4b27      	ldr	r3, [pc, #156]	@ (8002ca4 <MX_FMC_Init+0x190>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FMC_NAND_ECC_ENABLE;
 8002c0a:	4b26      	ldr	r3, [pc, #152]	@ (8002ca4 <MX_FMC_Init+0x190>)
 8002c0c:	2240      	movs	r2, #64	@ 0x40
 8002c0e:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FMC_NAND_ECC_PAGE_SIZE_8192BYTE;
 8002c10:	4b24      	ldr	r3, [pc, #144]	@ (8002ca4 <MX_FMC_Init+0x190>)
 8002c12:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8002c16:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 15;
 8002c18:	4b22      	ldr	r3, [pc, #136]	@ (8002ca4 <MX_FMC_Init+0x190>)
 8002c1a:	220f      	movs	r2, #15
 8002c1c:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 15;
 8002c1e:	4b21      	ldr	r3, [pc, #132]	@ (8002ca4 <MX_FMC_Init+0x190>)
 8002c20:	220f      	movs	r2, #15
 8002c22:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 8192;
 8002c24:	4b1f      	ldr	r3, [pc, #124]	@ (8002ca4 <MX_FMC_Init+0x190>)
 8002c26:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c2a:	625a      	str	r2, [r3, #36]	@ 0x24
  hnand1.Config.SpareAreaSize = 448;
 8002c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ca4 <MX_FMC_Init+0x190>)
 8002c2e:	f44f 72e0 	mov.w	r2, #448	@ 0x1c0
 8002c32:	629a      	str	r2, [r3, #40]	@ 0x28
  hnand1.Config.BlockSize = 128;
 8002c34:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca4 <MX_FMC_Init+0x190>)
 8002c36:	2280      	movs	r2, #128	@ 0x80
 8002c38:	62da      	str	r2, [r3, #44]	@ 0x2c
  hnand1.Config.BlockNbr = 4096;
 8002c3a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ca4 <MX_FMC_Init+0x190>)
 8002c3c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002c40:	631a      	str	r2, [r3, #48]	@ 0x30
  hnand1.Config.PlaneNbr = 2;
 8002c42:	4b18      	ldr	r3, [pc, #96]	@ (8002ca4 <MX_FMC_Init+0x190>)
 8002c44:	2202      	movs	r2, #2
 8002c46:	635a      	str	r2, [r3, #52]	@ 0x34
  hnand1.Config.PlaneSize = 2048;
 8002c48:	4b16      	ldr	r3, [pc, #88]	@ (8002ca4 <MX_FMC_Init+0x190>)
 8002c4a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002c4e:	639a      	str	r2, [r3, #56]	@ 0x38
  hnand1.Config.ExtraCommandEnable = DISABLE;
 8002c50:	4b14      	ldr	r3, [pc, #80]	@ (8002ca4 <MX_FMC_Init+0x190>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 19;
 8002c58:	2313      	movs	r3, #19
 8002c5a:	613b      	str	r3, [r7, #16]
  ComSpaceTiming.WaitSetupTime = 19;
 8002c5c:	2313      	movs	r3, #19
 8002c5e:	617b      	str	r3, [r7, #20]
  ComSpaceTiming.HoldSetupTime = 6;
 8002c60:	2306      	movs	r3, #6
 8002c62:	61bb      	str	r3, [r7, #24]
  ComSpaceTiming.HiZSetupTime = 3;
 8002c64:	2303      	movs	r3, #3
 8002c66:	61fb      	str	r3, [r7, #28]
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 19;
 8002c68:	2313      	movs	r3, #19
 8002c6a:	603b      	str	r3, [r7, #0]
  AttSpaceTiming.WaitSetupTime = 19;
 8002c6c:	2313      	movs	r3, #19
 8002c6e:	607b      	str	r3, [r7, #4]
  AttSpaceTiming.HoldSetupTime = 10;
 8002c70:	230a      	movs	r3, #10
 8002c72:	60bb      	str	r3, [r7, #8]
  AttSpaceTiming.HiZSetupTime = 9;
 8002c74:	2309      	movs	r3, #9
 8002c76:	60fb      	str	r3, [r7, #12]

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 8002c78:	463a      	mov	r2, r7
 8002c7a:	f107 0310 	add.w	r3, r7, #16
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4808      	ldr	r0, [pc, #32]	@ (8002ca4 <MX_FMC_Init+0x190>)
 8002c82:	f001 fdd9 	bl	8004838 <HAL_NAND_Init>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <MX_FMC_Init+0x17c>
  {
    Error_Handler( );
 8002c8c:	f000 fb23 	bl	80032d6 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002c90:	bf00      	nop
 8002c92:	3740      	adds	r7, #64	@ 0x40
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	20005bb0 	.word	0x20005bb0
 8002c9c:	47000400 	.word	0x47000400
 8002ca0:	47000504 	.word	0x47000504
 8002ca4:	20005c08 	.word	0x20005c08
 8002ca8:	47000480 	.word	0x47000480

08002cac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08e      	sub	sp, #56	@ 0x38
 8002cb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	605a      	str	r2, [r3, #4]
 8002cbc:	609a      	str	r2, [r3, #8]
 8002cbe:	60da      	str	r2, [r3, #12]
 8002cc0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cc2:	4bc2      	ldr	r3, [pc, #776]	@ (8002fcc <MX_GPIO_Init+0x320>)
 8002cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cc8:	4ac0      	ldr	r2, [pc, #768]	@ (8002fcc <MX_GPIO_Init+0x320>)
 8002cca:	f043 0310 	orr.w	r3, r3, #16
 8002cce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002cd2:	4bbe      	ldr	r3, [pc, #760]	@ (8002fcc <MX_GPIO_Init+0x320>)
 8002cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cd8:	f003 0310 	and.w	r3, r3, #16
 8002cdc:	623b      	str	r3, [r7, #32]
 8002cde:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ce0:	4bba      	ldr	r3, [pc, #744]	@ (8002fcc <MX_GPIO_Init+0x320>)
 8002ce2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ce6:	4ab9      	ldr	r2, [pc, #740]	@ (8002fcc <MX_GPIO_Init+0x320>)
 8002ce8:	f043 0304 	orr.w	r3, r3, #4
 8002cec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002cf0:	4bb6      	ldr	r3, [pc, #728]	@ (8002fcc <MX_GPIO_Init+0x320>)
 8002cf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cf6:	f003 0304 	and.w	r3, r3, #4
 8002cfa:	61fb      	str	r3, [r7, #28]
 8002cfc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002cfe:	4bb3      	ldr	r3, [pc, #716]	@ (8002fcc <MX_GPIO_Init+0x320>)
 8002d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d04:	4ab1      	ldr	r2, [pc, #708]	@ (8002fcc <MX_GPIO_Init+0x320>)
 8002d06:	f043 0320 	orr.w	r3, r3, #32
 8002d0a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002d0e:	4baf      	ldr	r3, [pc, #700]	@ (8002fcc <MX_GPIO_Init+0x320>)
 8002d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d14:	f003 0320 	and.w	r3, r3, #32
 8002d18:	61bb      	str	r3, [r7, #24]
 8002d1a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d1c:	4bab      	ldr	r3, [pc, #684]	@ (8002fcc <MX_GPIO_Init+0x320>)
 8002d1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d22:	4aaa      	ldr	r2, [pc, #680]	@ (8002fcc <MX_GPIO_Init+0x320>)
 8002d24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d28:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002d2c:	4ba7      	ldr	r3, [pc, #668]	@ (8002fcc <MX_GPIO_Init+0x320>)
 8002d2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d36:	617b      	str	r3, [r7, #20]
 8002d38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d3a:	4ba4      	ldr	r3, [pc, #656]	@ (8002fcc <MX_GPIO_Init+0x320>)
 8002d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d40:	4aa2      	ldr	r2, [pc, #648]	@ (8002fcc <MX_GPIO_Init+0x320>)
 8002d42:	f043 0301 	orr.w	r3, r3, #1
 8002d46:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002d4a:	4ba0      	ldr	r3, [pc, #640]	@ (8002fcc <MX_GPIO_Init+0x320>)
 8002d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	613b      	str	r3, [r7, #16]
 8002d56:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d58:	4b9c      	ldr	r3, [pc, #624]	@ (8002fcc <MX_GPIO_Init+0x320>)
 8002d5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d5e:	4a9b      	ldr	r2, [pc, #620]	@ (8002fcc <MX_GPIO_Init+0x320>)
 8002d60:	f043 0302 	orr.w	r3, r3, #2
 8002d64:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002d68:	4b98      	ldr	r3, [pc, #608]	@ (8002fcc <MX_GPIO_Init+0x320>)
 8002d6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d76:	4b95      	ldr	r3, [pc, #596]	@ (8002fcc <MX_GPIO_Init+0x320>)
 8002d78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d7c:	4a93      	ldr	r2, [pc, #588]	@ (8002fcc <MX_GPIO_Init+0x320>)
 8002d7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d82:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002d86:	4b91      	ldr	r3, [pc, #580]	@ (8002fcc <MX_GPIO_Init+0x320>)
 8002d88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d94:	4b8d      	ldr	r3, [pc, #564]	@ (8002fcc <MX_GPIO_Init+0x320>)
 8002d96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d9a:	4a8c      	ldr	r2, [pc, #560]	@ (8002fcc <MX_GPIO_Init+0x320>)
 8002d9c:	f043 0308 	orr.w	r3, r3, #8
 8002da0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002da4:	4b89      	ldr	r3, [pc, #548]	@ (8002fcc <MX_GPIO_Init+0x320>)
 8002da6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002daa:	f003 0308 	and.w	r3, r3, #8
 8002dae:	607b      	str	r3, [r7, #4]
 8002db0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CS_1_Pin|START_1_Pin|RTC_RST_Pin, GPIO_PIN_RESET);
 8002db2:	2200      	movs	r2, #0
 8002db4:	f44f 6144 	mov.w	r1, #3136	@ 0xc40
 8002db8:	4885      	ldr	r0, [pc, #532]	@ (8002fd0 <MX_GPIO_Init+0x324>)
 8002dba:	f001 fcd9 	bl	8004770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_1_GPIO_Port, RESET_1_Pin, GPIO_PIN_RESET);
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	2104      	movs	r1, #4
 8002dc2:	4884      	ldr	r0, [pc, #528]	@ (8002fd4 <MX_GPIO_Init+0x328>)
 8002dc4:	f001 fcd4 	bl	8004770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RS422_CTRL_Pin|RS485_CTRL1_Pin|RS485_CTRL2_Pin|Pwr_Ctrl1_Pin
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f241 4167 	movw	r1, #5223	@ 0x1467
 8002dce:	4882      	ldr	r0, [pc, #520]	@ (8002fd8 <MX_GPIO_Init+0x32c>)
 8002dd0:	f001 fcce 	bl	8004770 <HAL_GPIO_WritePin>
                          |Pwr_Ctrl2_Pin|START_3_Pin|RESET_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPO_1_Pin|GPO_2_Pin|CS_2_Pin, GPIO_PIN_RESET);
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f640 0103 	movw	r1, #2051	@ 0x803
 8002dda:	4880      	ldr	r0, [pc, #512]	@ (8002fdc <MX_GPIO_Init+0x330>)
 8002ddc:	f001 fcc8 	bl	8004770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8002de0:	2200      	movs	r2, #0
 8002de2:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 8002de6:	487e      	ldr	r0, [pc, #504]	@ (8002fe0 <MX_GPIO_Init+0x334>)
 8002de8:	f001 fcc2 	bl	8004770 <HAL_GPIO_WritePin>
                          |LED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8002dec:	2201      	movs	r2, #1
 8002dee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002df2:	487a      	ldr	r0, [pc, #488]	@ (8002fdc <MX_GPIO_Init+0x330>)
 8002df4:	f001 fcbc 	bl	8004770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, START_2_Pin|RESET_2_Pin, GPIO_PIN_RESET);
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8002dfe:	4879      	ldr	r0, [pc, #484]	@ (8002fe4 <MX_GPIO_Init+0x338>)
 8002e00:	f001 fcb6 	bl	8004770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_3_GPIO_Port, CS_3_Pin, GPIO_PIN_RESET);
 8002e04:	2200      	movs	r2, #0
 8002e06:	2110      	movs	r1, #16
 8002e08:	4877      	ldr	r0, [pc, #476]	@ (8002fe8 <MX_GPIO_Init+0x33c>)
 8002e0a:	f001 fcb1 	bl	8004770 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPI_3_Pin GPI_4_Pin GPI_5_Pin */
  GPIO_InitStruct.Pin = GPI_3_Pin|GPI_4_Pin|GPI_5_Pin;
 8002e0e:	2370      	movs	r3, #112	@ 0x70
 8002e10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e12:	2300      	movs	r3, #0
 8002e14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e16:	2300      	movs	r3, #0
 8002e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e1e:	4619      	mov	r1, r3
 8002e20:	486f      	ldr	r0, [pc, #444]	@ (8002fe0 <MX_GPIO_Init+0x334>)
 8002e22:	f001 fb53 	bl	80044cc <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_1_Pin START_1_Pin */
  GPIO_InitStruct.Pin = CS_1_Pin|START_1_Pin;
 8002e26:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 8002e2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e30:	2300      	movs	r3, #0
 8002e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e34:	2303      	movs	r3, #3
 8002e36:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4864      	ldr	r0, [pc, #400]	@ (8002fd0 <MX_GPIO_Init+0x324>)
 8002e40:	f001 fb44 	bl	80044cc <HAL_GPIO_Init>

  /*Configure GPIO pin : DRDY_1_Pin */
  GPIO_InitStruct.Pin = DRDY_1_Pin;
 8002e44:	2302      	movs	r3, #2
 8002e46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002e48:	4b68      	ldr	r3, [pc, #416]	@ (8002fec <MX_GPIO_Init+0x340>)
 8002e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(DRDY_1_GPIO_Port, &GPIO_InitStruct);
 8002e50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e54:	4619      	mov	r1, r3
 8002e56:	485f      	ldr	r0, [pc, #380]	@ (8002fd4 <MX_GPIO_Init+0x328>)
 8002e58:	f001 fb38 	bl	80044cc <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_1_Pin */
  GPIO_InitStruct.Pin = RESET_1_Pin;
 8002e5c:	2304      	movs	r3, #4
 8002e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e60:	2301      	movs	r3, #1
 8002e62:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e64:	2300      	movs	r3, #0
 8002e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(RESET_1_GPIO_Port, &GPIO_InitStruct);
 8002e6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e70:	4619      	mov	r1, r3
 8002e72:	4858      	ldr	r0, [pc, #352]	@ (8002fd4 <MX_GPIO_Init+0x328>)
 8002e74:	f001 fb2a 	bl	80044cc <HAL_GPIO_Init>

  /*Configure GPIO pins : RS422_CTRL_Pin RS485_CTRL1_Pin RS485_CTRL2_Pin Pwr_Ctrl1_Pin
                           Pwr_Ctrl2_Pin */
  GPIO_InitStruct.Pin = RS422_CTRL_Pin|RS485_CTRL1_Pin|RS485_CTRL2_Pin|Pwr_Ctrl1_Pin
 8002e78:	2367      	movs	r3, #103	@ 0x67
 8002e7a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |Pwr_Ctrl2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e80:	2300      	movs	r3, #0
 8002e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e84:	2300      	movs	r3, #0
 8002e86:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4852      	ldr	r0, [pc, #328]	@ (8002fd8 <MX_GPIO_Init+0x32c>)
 8002e90:	f001 fb1c 	bl	80044cc <HAL_GPIO_Init>

  /*Configure GPIO pins : GPO_1_Pin GPO_2_Pin */
  GPIO_InitStruct.Pin = GPO_1_Pin|GPO_2_Pin;
 8002e94:	2303      	movs	r3, #3
 8002e96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ea4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	484c      	ldr	r0, [pc, #304]	@ (8002fdc <MX_GPIO_Init+0x330>)
 8002eac:	f001 fb0e 	bl	80044cc <HAL_GPIO_Init>

  /*Configure GPIO pin : RTC_RST_Pin */
  GPIO_InitStruct.Pin = RTC_RST_Pin;
 8002eb0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002eb4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(RTC_RST_GPIO_Port, &GPIO_InitStruct);
 8002ec2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	4841      	ldr	r0, [pc, #260]	@ (8002fd0 <MX_GPIO_Init+0x324>)
 8002eca:	f001 faff 	bl	80044cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8002ece:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002ed2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002edc:	2300      	movs	r3, #0
 8002ede:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ee0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	483e      	ldr	r0, [pc, #248]	@ (8002fe0 <MX_GPIO_Init+0x334>)
 8002ee8:	f001 faf0 	bl	80044cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 CS_2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|CS_2_Pin;
 8002eec:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002ef0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002efa:	2303      	movs	r3, #3
 8002efc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002efe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f02:	4619      	mov	r1, r3
 8002f04:	4835      	ldr	r0, [pc, #212]	@ (8002fdc <MX_GPIO_Init+0x330>)
 8002f06:	f001 fae1 	bl	80044cc <HAL_GPIO_Init>

  /*Configure GPIO pins : START_2_Pin RESET_2_Pin */
  GPIO_InitStruct.Pin = START_2_Pin|RESET_2_Pin;
 8002f0a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002f0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f10:	2301      	movs	r3, #1
 8002f12:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f14:	2300      	movs	r3, #0
 8002f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f20:	4619      	mov	r1, r3
 8002f22:	4830      	ldr	r0, [pc, #192]	@ (8002fe4 <MX_GPIO_Init+0x338>)
 8002f24:	f001 fad2 	bl	80044cc <HAL_GPIO_Init>

  /*Configure GPIO pin : DRDY_2_Pin */
  GPIO_InitStruct.Pin = DRDY_2_Pin;
 8002f28:	2380      	movs	r3, #128	@ 0x80
 8002f2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f2c:	4b2f      	ldr	r3, [pc, #188]	@ (8002fec <MX_GPIO_Init+0x340>)
 8002f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f30:	2300      	movs	r3, #0
 8002f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(DRDY_2_GPIO_Port, &GPIO_InitStruct);
 8002f34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f38:	4619      	mov	r1, r3
 8002f3a:	482a      	ldr	r0, [pc, #168]	@ (8002fe4 <MX_GPIO_Init+0x338>)
 8002f3c:	f001 fac6 	bl	80044cc <HAL_GPIO_Init>

  /*Configure GPIO pins : START_3_Pin RESET_3_Pin */
  GPIO_InitStruct.Pin = START_3_Pin|RESET_3_Pin;
 8002f40:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002f44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f46:	2301      	movs	r3, #1
 8002f48:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f56:	4619      	mov	r1, r3
 8002f58:	481f      	ldr	r0, [pc, #124]	@ (8002fd8 <MX_GPIO_Init+0x32c>)
 8002f5a:	f001 fab7 	bl	80044cc <HAL_GPIO_Init>

  /*Configure GPIO pin : DRDY_3_Pin */
  GPIO_InitStruct.Pin = DRDY_3_Pin;
 8002f5e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002f62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f64:	4b21      	ldr	r3, [pc, #132]	@ (8002fec <MX_GPIO_Init+0x340>)
 8002f66:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(DRDY_3_GPIO_Port, &GPIO_InitStruct);
 8002f6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f70:	4619      	mov	r1, r3
 8002f72:	4819      	ldr	r0, [pc, #100]	@ (8002fd8 <MX_GPIO_Init+0x32c>)
 8002f74:	f001 faaa 	bl	80044cc <HAL_GPIO_Init>

  /*Configure GPIO pins : GPI_1_Pin GPI_2_Pin */
  GPIO_InitStruct.Pin = GPI_1_Pin|GPI_2_Pin;
 8002f78:	230c      	movs	r3, #12
 8002f7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f80:	2300      	movs	r3, #0
 8002f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4817      	ldr	r0, [pc, #92]	@ (8002fe8 <MX_GPIO_Init+0x33c>)
 8002f8c:	f001 fa9e 	bl	80044cc <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_3_Pin */
  GPIO_InitStruct.Pin = CS_3_Pin;
 8002f90:	2310      	movs	r3, #16
 8002f92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f94:	2301      	movs	r3, #1
 8002f96:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CS_3_GPIO_Port, &GPIO_InitStruct);
 8002fa0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4810      	ldr	r0, [pc, #64]	@ (8002fe8 <MX_GPIO_Init+0x33c>)
 8002fa8:	f001 fa90 	bl	80044cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002fac:	2200      	movs	r2, #0
 8002fae:	2100      	movs	r1, #0
 8002fb0:	200c      	movs	r0, #12
 8002fb2:	f001 f90d 	bl	80041d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002fb6:	200c      	movs	r0, #12
 8002fb8:	f001 f924 	bl	8004204 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI7_IRQn, 0, 0);
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	2012      	movs	r0, #18
 8002fc2:	f001 f905 	bl	80041d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI7_IRQn);
 8002fc6:	2012      	movs	r0, #18
 8002fc8:	e012      	b.n	8002ff0 <MX_GPIO_Init+0x344>
 8002fca:	bf00      	nop
 8002fcc:	44020c00 	.word	0x44020c00
 8002fd0:	42021400 	.word	0x42021400
 8002fd4:	42020800 	.word	0x42020800
 8002fd8:	42020000 	.word	0x42020000
 8002fdc:	42020400 	.word	0x42020400
 8002fe0:	42021000 	.word	0x42021000
 8002fe4:	42021800 	.word	0x42021800
 8002fe8:	42020c00 	.word	0x42020c00
 8002fec:	10210000 	.word	0x10210000
 8002ff0:	f001 f908 	bl	8004204 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI11_IRQn, 0, 0);
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	2016      	movs	r0, #22
 8002ffa:	f001 f8e9 	bl	80041d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 8002ffe:	2016      	movs	r0, #22
 8003000:	f001 f900 	bl	8004204 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003004:	bf00      	nop
 8003006:	3738      	adds	r7, #56	@ 0x38
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <UART_InitAllHandlers>:

/* USER CODE BEGIN 4 */



void UART_InitAllHandlers(void) {
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
	// Start receiving data on all four UARTs
	HAL_UART_Receive_IT(&huart4, uart1_rx_buffer, sizeof(uart1_rx_buffer));
 8003010:	2201      	movs	r2, #1
 8003012:	490b      	ldr	r1, [pc, #44]	@ (8003040 <UART_InitAllHandlers+0x34>)
 8003014:	480b      	ldr	r0, [pc, #44]	@ (8003044 <UART_InitAllHandlers+0x38>)
 8003016:	f009 fa9b 	bl	800c550 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart8, uart2_rx_buffer, sizeof(uart2_rx_buffer));
 800301a:	2201      	movs	r2, #1
 800301c:	490a      	ldr	r1, [pc, #40]	@ (8003048 <UART_InitAllHandlers+0x3c>)
 800301e:	480b      	ldr	r0, [pc, #44]	@ (800304c <UART_InitAllHandlers+0x40>)
 8003020:	f009 fa96 	bl	800c550 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart5, uart5_rx_buffer, sizeof(uart5_rx_buffer));
 8003024:	4b0a      	ldr	r3, [pc, #40]	@ (8003050 <UART_InitAllHandlers+0x44>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2201      	movs	r2, #1
 800302a:	4619      	mov	r1, r3
 800302c:	4809      	ldr	r0, [pc, #36]	@ (8003054 <UART_InitAllHandlers+0x48>)
 800302e:	f009 fa8f 	bl	800c550 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart10, uart4_rx_buffer, sizeof(uart4_rx_buffer));
 8003032:	2201      	movs	r2, #1
 8003034:	4908      	ldr	r1, [pc, #32]	@ (8003058 <UART_InitAllHandlers+0x4c>)
 8003036:	4809      	ldr	r0, [pc, #36]	@ (800305c <UART_InitAllHandlers+0x50>)
 8003038:	f009 fa8a 	bl	800c550 <HAL_UART_Receive_IT>
}
 800303c:	bf00      	nop
 800303e:	bd80      	pop	{r7, pc}
 8003040:	20005c68 	.word	0x20005c68
 8003044:	20005960 	.word	0x20005960
 8003048:	20005c6c 	.word	0x20005c6c
 800304c:	20005a88 	.word	0x20005a88
 8003050:	20005c6d 	.word	0x20005c6d
 8003054:	200059f4 	.word	0x200059f4
 8003058:	20005c74 	.word	0x20005c74
 800305c:	20005b1c 	.word	0x20005b1c

08003060 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART4) {
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a7d      	ldr	r2, [pc, #500]	@ (8003264 <HAL_UART_RxCpltCallback+0x204>)
 800306e:	4293      	cmp	r3, r2
 8003070:	f040 8099 	bne.w	80031a6 <HAL_UART_RxCpltCallback+0x146>
		// Handle data received from UART1
		// Restart reception


		HAL_UART_Receive_IT(&huart4, &rcv,1);
 8003074:	2201      	movs	r2, #1
 8003076:	497c      	ldr	r1, [pc, #496]	@ (8003268 <HAL_UART_RxCpltCallback+0x208>)
 8003078:	487c      	ldr	r0, [pc, #496]	@ (800326c <HAL_UART_RxCpltCallback+0x20c>)
 800307a:	f009 fa69 	bl	800c550 <HAL_UART_Receive_IT>

		if(rcv == 'S' )
 800307e:	4b7a      	ldr	r3, [pc, #488]	@ (8003268 <HAL_UART_RxCpltCallback+0x208>)
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	2b53      	cmp	r3, #83	@ 0x53
 8003084:	d111      	bne.n	80030aa <HAL_UART_RxCpltCallback+0x4a>
		{
			time_str_length=0;
 8003086:	4b7a      	ldr	r3, [pc, #488]	@ (8003270 <HAL_UART_RxCpltCallback+0x210>)
 8003088:	2200      	movs	r2, #0
 800308a:	701a      	strb	r2, [r3, #0]
			time_str[time_str_length++] = rcv;
 800308c:	4b78      	ldr	r3, [pc, #480]	@ (8003270 <HAL_UART_RxCpltCallback+0x210>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	1c5a      	adds	r2, r3, #1
 8003092:	b2d1      	uxtb	r1, r2
 8003094:	4a76      	ldr	r2, [pc, #472]	@ (8003270 <HAL_UART_RxCpltCallback+0x210>)
 8003096:	7011      	strb	r1, [r2, #0]
 8003098:	461a      	mov	r2, r3
 800309a:	4b73      	ldr	r3, [pc, #460]	@ (8003268 <HAL_UART_RxCpltCallback+0x208>)
 800309c:	7819      	ldrb	r1, [r3, #0]
 800309e:	4b75      	ldr	r3, [pc, #468]	@ (8003274 <HAL_UART_RxCpltCallback+0x214>)
 80030a0:	5499      	strb	r1, [r3, r2]
			time_rcv =1;
 80030a2:	4b75      	ldr	r3, [pc, #468]	@ (8003278 <HAL_UART_RxCpltCallback+0x218>)
 80030a4:	2201      	movs	r2, #1
 80030a6:	701a      	strb	r2, [r3, #0]
 80030a8:	e018      	b.n	80030dc <HAL_UART_RxCpltCallback+0x7c>
		}
		else if(time_rcv==1)
 80030aa:	4b73      	ldr	r3, [pc, #460]	@ (8003278 <HAL_UART_RxCpltCallback+0x218>)
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d114      	bne.n	80030dc <HAL_UART_RxCpltCallback+0x7c>
		{
			time_str[time_str_length++] = rcv;
 80030b2:	4b6f      	ldr	r3, [pc, #444]	@ (8003270 <HAL_UART_RxCpltCallback+0x210>)
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	1c5a      	adds	r2, r3, #1
 80030b8:	b2d1      	uxtb	r1, r2
 80030ba:	4a6d      	ldr	r2, [pc, #436]	@ (8003270 <HAL_UART_RxCpltCallback+0x210>)
 80030bc:	7011      	strb	r1, [r2, #0]
 80030be:	461a      	mov	r2, r3
 80030c0:	4b69      	ldr	r3, [pc, #420]	@ (8003268 <HAL_UART_RxCpltCallback+0x208>)
 80030c2:	7819      	ldrb	r1, [r3, #0]
 80030c4:	4b6b      	ldr	r3, [pc, #428]	@ (8003274 <HAL_UART_RxCpltCallback+0x214>)
 80030c6:	5499      	strb	r1, [r3, r2]
			if(time_str_length > 22)
 80030c8:	4b69      	ldr	r3, [pc, #420]	@ (8003270 <HAL_UART_RxCpltCallback+0x210>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	2b16      	cmp	r3, #22
 80030ce:	d905      	bls.n	80030dc <HAL_UART_RxCpltCallback+0x7c>
			{
				time_str_length = 0 ;
 80030d0:	4b67      	ldr	r3, [pc, #412]	@ (8003270 <HAL_UART_RxCpltCallback+0x210>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	701a      	strb	r2, [r3, #0]
				time_rcv = 0 ;
 80030d6:	4b68      	ldr	r3, [pc, #416]	@ (8003278 <HAL_UART_RxCpltCallback+0x218>)
 80030d8:	2200      	movs	r2, #0
 80030da:	701a      	strb	r2, [r3, #0]
			}
		}
		if(rcv == 'E' )
 80030dc:	4b62      	ldr	r3, [pc, #392]	@ (8003268 <HAL_UART_RxCpltCallback+0x208>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b45      	cmp	r3, #69	@ 0x45
 80030e2:	d112      	bne.n	800310a <HAL_UART_RxCpltCallback+0xaa>
		{
			if(time_str_length == 21)
 80030e4:	4b62      	ldr	r3, [pc, #392]	@ (8003270 <HAL_UART_RxCpltCallback+0x210>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b15      	cmp	r3, #21
 80030ea:	d103      	bne.n	80030f4 <HAL_UART_RxCpltCallback+0x94>
			{
				//time_str[time_str_length++] = rcv;
				time_set = 1;
 80030ec:	4b63      	ldr	r3, [pc, #396]	@ (800327c <HAL_UART_RxCpltCallback+0x21c>)
 80030ee:	2201      	movs	r2, #1
 80030f0:	701a      	strb	r2, [r3, #0]
 80030f2:	e00a      	b.n	800310a <HAL_UART_RxCpltCallback+0xaa>
			}
			else
			{
				time_rcv = 0 ;
 80030f4:	4b60      	ldr	r3, [pc, #384]	@ (8003278 <HAL_UART_RxCpltCallback+0x218>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	701a      	strb	r2, [r3, #0]
				time_str_length = 0 ;
 80030fa:	4b5d      	ldr	r3, [pc, #372]	@ (8003270 <HAL_UART_RxCpltCallback+0x210>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	701a      	strb	r2, [r3, #0]
				memset(time_str,0,sizeof(time_str));
 8003100:	2219      	movs	r2, #25
 8003102:	2100      	movs	r1, #0
 8003104:	485b      	ldr	r0, [pc, #364]	@ (8003274 <HAL_UART_RxCpltCallback+0x214>)
 8003106:	f00c fa3a 	bl	800f57e <memset>
			}
		}

		if(rcv == 'T')
 800310a:	4b57      	ldr	r3, [pc, #348]	@ (8003268 <HAL_UART_RxCpltCallback+0x208>)
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	2b54      	cmp	r3, #84	@ 0x54
 8003110:	d10e      	bne.n	8003130 <HAL_UART_RxCpltCallback+0xd0>
		{
			command_str[command_str_index++] = rcv ;
 8003112:	4b5b      	ldr	r3, [pc, #364]	@ (8003280 <HAL_UART_RxCpltCallback+0x220>)
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	1c5a      	adds	r2, r3, #1
 8003118:	b2d1      	uxtb	r1, r2
 800311a:	4a59      	ldr	r2, [pc, #356]	@ (8003280 <HAL_UART_RxCpltCallback+0x220>)
 800311c:	7011      	strb	r1, [r2, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	4b51      	ldr	r3, [pc, #324]	@ (8003268 <HAL_UART_RxCpltCallback+0x208>)
 8003122:	7819      	ldrb	r1, [r3, #0]
 8003124:	4b57      	ldr	r3, [pc, #348]	@ (8003284 <HAL_UART_RxCpltCallback+0x224>)
 8003126:	5499      	strb	r1, [r3, r2]
			command_rcv  =1 ;
 8003128:	4b57      	ldr	r3, [pc, #348]	@ (8003288 <HAL_UART_RxCpltCallback+0x228>)
 800312a:	2201      	movs	r2, #1
 800312c:	701a      	strb	r2, [r3, #0]
 800312e:	e018      	b.n	8003162 <HAL_UART_RxCpltCallback+0x102>

		}
		else if(command_rcv==1)
 8003130:	4b55      	ldr	r3, [pc, #340]	@ (8003288 <HAL_UART_RxCpltCallback+0x228>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d114      	bne.n	8003162 <HAL_UART_RxCpltCallback+0x102>
		{
			command_str[command_str_index++] = rcv ;
 8003138:	4b51      	ldr	r3, [pc, #324]	@ (8003280 <HAL_UART_RxCpltCallback+0x220>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	1c5a      	adds	r2, r3, #1
 800313e:	b2d1      	uxtb	r1, r2
 8003140:	4a4f      	ldr	r2, [pc, #316]	@ (8003280 <HAL_UART_RxCpltCallback+0x220>)
 8003142:	7011      	strb	r1, [r2, #0]
 8003144:	461a      	mov	r2, r3
 8003146:	4b48      	ldr	r3, [pc, #288]	@ (8003268 <HAL_UART_RxCpltCallback+0x208>)
 8003148:	7819      	ldrb	r1, [r3, #0]
 800314a:	4b4e      	ldr	r3, [pc, #312]	@ (8003284 <HAL_UART_RxCpltCallback+0x224>)
 800314c:	5499      	strb	r1, [r3, r2]
			if(command_str_index > 10)
 800314e:	4b4c      	ldr	r3, [pc, #304]	@ (8003280 <HAL_UART_RxCpltCallback+0x220>)
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2b0a      	cmp	r3, #10
 8003154:	d905      	bls.n	8003162 <HAL_UART_RxCpltCallback+0x102>
			{
				command_str_index = 0 ;
 8003156:	4b4a      	ldr	r3, [pc, #296]	@ (8003280 <HAL_UART_RxCpltCallback+0x220>)
 8003158:	2200      	movs	r2, #0
 800315a:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 800315c:	4b4a      	ldr	r3, [pc, #296]	@ (8003288 <HAL_UART_RxCpltCallback+0x228>)
 800315e:	2200      	movs	r2, #0
 8003160:	701a      	strb	r2, [r3, #0]
			}
		}
		if(command_rcv == 1 && rcv == 'E')
 8003162:	4b49      	ldr	r3, [pc, #292]	@ (8003288 <HAL_UART_RxCpltCallback+0x228>)
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d177      	bne.n	800325a <HAL_UART_RxCpltCallback+0x1fa>
 800316a:	4b3f      	ldr	r3, [pc, #252]	@ (8003268 <HAL_UART_RxCpltCallback+0x208>)
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	2b45      	cmp	r3, #69	@ 0x45
 8003170:	d173      	bne.n	800325a <HAL_UART_RxCpltCallback+0x1fa>
		{
			if(command_str_index == 4)
 8003172:	4b43      	ldr	r3, [pc, #268]	@ (8003280 <HAL_UART_RxCpltCallback+0x220>)
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	2b04      	cmp	r3, #4
 8003178:	d109      	bne.n	800318e <HAL_UART_RxCpltCallback+0x12e>
			{
				ATP_test  = 1;
 800317a:	4b44      	ldr	r3, [pc, #272]	@ (800328c <HAL_UART_RxCpltCallback+0x22c>)
 800317c:	2201      	movs	r2, #1
 800317e:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 8003180:	4b3f      	ldr	r3, [pc, #252]	@ (8003280 <HAL_UART_RxCpltCallback+0x220>)
 8003182:	2200      	movs	r2, #0
 8003184:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8003186:	4b40      	ldr	r3, [pc, #256]	@ (8003288 <HAL_UART_RxCpltCallback+0x228>)
 8003188:	2200      	movs	r2, #0
 800318a:	701a      	strb	r2, [r3, #0]
	else if (huart->Instance == USART10) {
		// Handle data received from UART4

		HAL_UART_Receive_IT(&huart10, uart4_rx_buffer, sizeof(uart4_rx_buffer));
	}
}
 800318c:	e065      	b.n	800325a <HAL_UART_RxCpltCallback+0x1fa>
				command_str_index = 0 ;
 800318e:	4b3c      	ldr	r3, [pc, #240]	@ (8003280 <HAL_UART_RxCpltCallback+0x220>)
 8003190:	2200      	movs	r2, #0
 8003192:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8003194:	4b3c      	ldr	r3, [pc, #240]	@ (8003288 <HAL_UART_RxCpltCallback+0x228>)
 8003196:	2200      	movs	r2, #0
 8003198:	701a      	strb	r2, [r3, #0]
				memset(command_str,0,sizeof(command_str));
 800319a:	220f      	movs	r2, #15
 800319c:	2100      	movs	r1, #0
 800319e:	4839      	ldr	r0, [pc, #228]	@ (8003284 <HAL_UART_RxCpltCallback+0x224>)
 80031a0:	f00c f9ed 	bl	800f57e <memset>
}
 80031a4:	e059      	b.n	800325a <HAL_UART_RxCpltCallback+0x1fa>
	else if (huart->Instance == UART5) {
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a39      	ldr	r2, [pc, #228]	@ (8003290 <HAL_UART_RxCpltCallback+0x230>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d13f      	bne.n	8003230 <HAL_UART_RxCpltCallback+0x1d0>
		HAL_UART_Receive_IT(&huart5, &uart5_rx_buffer, sizeof(uart5_rx_buffer));
 80031b0:	2201      	movs	r2, #1
 80031b2:	4938      	ldr	r1, [pc, #224]	@ (8003294 <HAL_UART_RxCpltCallback+0x234>)
 80031b4:	4838      	ldr	r0, [pc, #224]	@ (8003298 <HAL_UART_RxCpltCallback+0x238>)
 80031b6:	f009 f9cb 	bl	800c550 <HAL_UART_Receive_IT>
		if(uart5_rx_buffer == 'N')
 80031ba:	4b36      	ldr	r3, [pc, #216]	@ (8003294 <HAL_UART_RxCpltCallback+0x234>)
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	2b4e      	cmp	r3, #78	@ 0x4e
 80031c0:	d10e      	bne.n	80031e0 <HAL_UART_RxCpltCallback+0x180>
			NAND_Buf[NAND_index++] = uart5_rx_buffer ;
 80031c2:	4b36      	ldr	r3, [pc, #216]	@ (800329c <HAL_UART_RxCpltCallback+0x23c>)
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	1c5a      	adds	r2, r3, #1
 80031c8:	b2d1      	uxtb	r1, r2
 80031ca:	4a34      	ldr	r2, [pc, #208]	@ (800329c <HAL_UART_RxCpltCallback+0x23c>)
 80031cc:	7011      	strb	r1, [r2, #0]
 80031ce:	461a      	mov	r2, r3
 80031d0:	4b30      	ldr	r3, [pc, #192]	@ (8003294 <HAL_UART_RxCpltCallback+0x234>)
 80031d2:	7819      	ldrb	r1, [r3, #0]
 80031d4:	4b32      	ldr	r3, [pc, #200]	@ (80032a0 <HAL_UART_RxCpltCallback+0x240>)
 80031d6:	5499      	strb	r1, [r3, r2]
			NAND_flag  =1 ;
 80031d8:	4b32      	ldr	r3, [pc, #200]	@ (80032a4 <HAL_UART_RxCpltCallback+0x244>)
 80031da:	2201      	movs	r2, #1
 80031dc:	701a      	strb	r2, [r3, #0]
 80031de:	e018      	b.n	8003212 <HAL_UART_RxCpltCallback+0x1b2>
		else if(NAND_flag==1)
 80031e0:	4b30      	ldr	r3, [pc, #192]	@ (80032a4 <HAL_UART_RxCpltCallback+0x244>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d114      	bne.n	8003212 <HAL_UART_RxCpltCallback+0x1b2>
			NAND_Buf[NAND_index++] = uart5_rx_buffer ;
 80031e8:	4b2c      	ldr	r3, [pc, #176]	@ (800329c <HAL_UART_RxCpltCallback+0x23c>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	1c5a      	adds	r2, r3, #1
 80031ee:	b2d1      	uxtb	r1, r2
 80031f0:	4a2a      	ldr	r2, [pc, #168]	@ (800329c <HAL_UART_RxCpltCallback+0x23c>)
 80031f2:	7011      	strb	r1, [r2, #0]
 80031f4:	461a      	mov	r2, r3
 80031f6:	4b27      	ldr	r3, [pc, #156]	@ (8003294 <HAL_UART_RxCpltCallback+0x234>)
 80031f8:	7819      	ldrb	r1, [r3, #0]
 80031fa:	4b29      	ldr	r3, [pc, #164]	@ (80032a0 <HAL_UART_RxCpltCallback+0x240>)
 80031fc:	5499      	strb	r1, [r3, r2]
			if(NAND_index > 15)
 80031fe:	4b27      	ldr	r3, [pc, #156]	@ (800329c <HAL_UART_RxCpltCallback+0x23c>)
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	2b0f      	cmp	r3, #15
 8003204:	d905      	bls.n	8003212 <HAL_UART_RxCpltCallback+0x1b2>
				NAND_index = 0 ;
 8003206:	4b25      	ldr	r3, [pc, #148]	@ (800329c <HAL_UART_RxCpltCallback+0x23c>)
 8003208:	2200      	movs	r2, #0
 800320a:	701a      	strb	r2, [r3, #0]
				NAND_flag = 0 ;
 800320c:	4b25      	ldr	r3, [pc, #148]	@ (80032a4 <HAL_UART_RxCpltCallback+0x244>)
 800320e:	2200      	movs	r2, #0
 8003210:	701a      	strb	r2, [r3, #0]
		if(NAND_flag == 1 && uart5_rx_buffer == 'E')
 8003212:	4b24      	ldr	r3, [pc, #144]	@ (80032a4 <HAL_UART_RxCpltCallback+0x244>)
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d11f      	bne.n	800325a <HAL_UART_RxCpltCallback+0x1fa>
 800321a:	4b1e      	ldr	r3, [pc, #120]	@ (8003294 <HAL_UART_RxCpltCallback+0x234>)
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	2b45      	cmp	r3, #69	@ 0x45
 8003220:	d11b      	bne.n	800325a <HAL_UART_RxCpltCallback+0x1fa>
			NAND_flag = 0 ;
 8003222:	4b20      	ldr	r3, [pc, #128]	@ (80032a4 <HAL_UART_RxCpltCallback+0x244>)
 8003224:	2200      	movs	r2, #0
 8003226:	701a      	strb	r2, [r3, #0]
			NAND_index = 0 ;
 8003228:	4b1c      	ldr	r3, [pc, #112]	@ (800329c <HAL_UART_RxCpltCallback+0x23c>)
 800322a:	2200      	movs	r2, #0
 800322c:	701a      	strb	r2, [r3, #0]
}
 800322e:	e014      	b.n	800325a <HAL_UART_RxCpltCallback+0x1fa>
	else if (huart->Instance == UART8) {
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a1c      	ldr	r2, [pc, #112]	@ (80032a8 <HAL_UART_RxCpltCallback+0x248>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d105      	bne.n	8003246 <HAL_UART_RxCpltCallback+0x1e6>
		HAL_UART_Receive_IT(&huart8, uart2_rx_buffer, sizeof(uart2_rx_buffer));
 800323a:	2201      	movs	r2, #1
 800323c:	491b      	ldr	r1, [pc, #108]	@ (80032ac <HAL_UART_RxCpltCallback+0x24c>)
 800323e:	481c      	ldr	r0, [pc, #112]	@ (80032b0 <HAL_UART_RxCpltCallback+0x250>)
 8003240:	f009 f986 	bl	800c550 <HAL_UART_Receive_IT>
}
 8003244:	e009      	b.n	800325a <HAL_UART_RxCpltCallback+0x1fa>
	else if (huart->Instance == USART10) {
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a1a      	ldr	r2, [pc, #104]	@ (80032b4 <HAL_UART_RxCpltCallback+0x254>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d104      	bne.n	800325a <HAL_UART_RxCpltCallback+0x1fa>
		HAL_UART_Receive_IT(&huart10, uart4_rx_buffer, sizeof(uart4_rx_buffer));
 8003250:	2201      	movs	r2, #1
 8003252:	4919      	ldr	r1, [pc, #100]	@ (80032b8 <HAL_UART_RxCpltCallback+0x258>)
 8003254:	4819      	ldr	r0, [pc, #100]	@ (80032bc <HAL_UART_RxCpltCallback+0x25c>)
 8003256:	f009 f97b 	bl	800c550 <HAL_UART_Receive_IT>
}
 800325a:	bf00      	nop
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	40004c00 	.word	0x40004c00
 8003268:	20005c6e 	.word	0x20005c6e
 800326c:	20005960 	.word	0x20005960
 8003270:	20005c65 	.word	0x20005c65
 8003274:	20005c4c 	.word	0x20005c4c
 8003278:	20005c6f 	.word	0x20005c6f
 800327c:	20005c70 	.word	0x20005c70
 8003280:	200004af 	.word	0x200004af
 8003284:	200004a0 	.word	0x200004a0
 8003288:	20005c66 	.word	0x20005c66
 800328c:	200004b0 	.word	0x200004b0
 8003290:	40005000 	.word	0x40005000
 8003294:	20005c6d 	.word	0x20005c6d
 8003298:	200059f4 	.word	0x200059f4
 800329c:	20005c87 	.word	0x20005c87
 80032a0:	20005c78 	.word	0x20005c78
 80032a4:	20005c88 	.word	0x20005c88
 80032a8:	40007c00 	.word	0x40007c00
 80032ac:	20005c6c 	.word	0x20005c6c
 80032b0:	20005a88 	.word	0x20005a88
 80032b4:	40006800 	.word	0x40006800
 80032b8:	20005c74 	.word	0x20005c74
 80032bc:	20005b1c 	.word	0x20005b1c

080032c0 <HAL_GPIO_EXTI_Falling_Callback>:



// User-defined callback to handle the data-ready event
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	80fb      	strh	r3, [r7, #6]
		//HAL_UART_Transmit_IT(&huart8, "DR_3\n\r", strlen("DR_1\n\r"));
		//HAL_Delay(1);
		// Data ready logic
		// For example, read data from a sensor using SPI/I2C
	}
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032d6:	b480      	push	{r7}
 80032d8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032da:	b672      	cpsid	i
}
 80032dc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80032de:	bf00      	nop
 80032e0:	e7fd      	b.n	80032de <Error_Handler+0x8>

080032e2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032e2:	b480      	push	{r7}
 80032e4:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032e6:	bf00      	nop
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b0d0      	sub	sp, #320	@ 0x140
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80032fa:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032fe:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003300:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	605a      	str	r2, [r3, #4]
 800330a:	609a      	str	r2, [r3, #8]
 800330c:	60da      	str	r2, [r3, #12]
 800330e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003310:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003314:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003318:	4618      	mov	r0, r3
 800331a:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800331e:	461a      	mov	r2, r3
 8003320:	2100      	movs	r1, #0
 8003322:	f00c f92c 	bl	800f57e <memset>
  if(hspi->Instance==SPI2)
 8003326:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800332a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a9c      	ldr	r2, [pc, #624]	@ (80035a4 <HAL_SPI_MspInit+0x2b4>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d15f      	bne.n	80033f8 <HAL_SPI_MspInit+0x108>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8003338:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800333c:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8003340:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003344:	f04f 0300 	mov.w	r3, #0
 8003348:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi2ClockSelection = RCC_SPI2CLKSOURCE_PLL1Q;
 800334c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003350:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003354:	2200      	movs	r2, #0
 8003356:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800335a:	f107 0320 	add.w	r3, r7, #32
 800335e:	4618      	mov	r0, r3
 8003360:	f003 f8b8 	bl	80064d4 <HAL_RCCEx_PeriphCLKConfig>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <HAL_SPI_MspInit+0x7e>
    {
      Error_Handler();
 800336a:	f7ff ffb4 	bl	80032d6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800336e:	4b8e      	ldr	r3, [pc, #568]	@ (80035a8 <HAL_SPI_MspInit+0x2b8>)
 8003370:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003374:	4a8c      	ldr	r2, [pc, #560]	@ (80035a8 <HAL_SPI_MspInit+0x2b8>)
 8003376:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800337a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800337e:	4b8a      	ldr	r3, [pc, #552]	@ (80035a8 <HAL_SPI_MspInit+0x2b8>)
 8003380:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003384:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8003388:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800338c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003396:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800339a:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800339c:	4b82      	ldr	r3, [pc, #520]	@ (80035a8 <HAL_SPI_MspInit+0x2b8>)
 800339e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033a2:	4a81      	ldr	r2, [pc, #516]	@ (80035a8 <HAL_SPI_MspInit+0x2b8>)
 80033a4:	f043 0302 	orr.w	r3, r3, #2
 80033a8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80033ac:	4b7e      	ldr	r3, [pc, #504]	@ (80035a8 <HAL_SPI_MspInit+0x2b8>)
 80033ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033b2:	f003 0202 	and.w	r2, r3, #2
 80033b6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80033ba:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80033be:	601a      	str	r2, [r3, #0]
 80033c0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80033c4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80033c8:	681b      	ldr	r3, [r3, #0]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SCKL_2_Pin|MISO_2_Pin|MOSI_2_Pin;
 80033ca:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80033ce:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d2:	2302      	movs	r3, #2
 80033d4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d8:	2300      	movs	r3, #0
 80033da:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033de:	2300      	movs	r3, #0
 80033e0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80033e4:	2305      	movs	r3, #5
 80033e6:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033ea:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80033ee:	4619      	mov	r1, r3
 80033f0:	486e      	ldr	r0, [pc, #440]	@ (80035ac <HAL_SPI_MspInit+0x2bc>)
 80033f2:	f001 f86b 	bl	80044cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80033f6:	e0d0      	b.n	800359a <HAL_SPI_MspInit+0x2aa>
  else if(hspi->Instance==SPI3)
 80033f8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80033fc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a6a      	ldr	r2, [pc, #424]	@ (80035b0 <HAL_SPI_MspInit+0x2c0>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d15f      	bne.n	80034ca <HAL_SPI_MspInit+0x1da>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 800340a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800340e:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8003412:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003416:	f04f 0300 	mov.w	r3, #0
 800341a:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi3ClockSelection = RCC_SPI3CLKSOURCE_PLL1Q;
 800341e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003422:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003426:	2200      	movs	r2, #0
 8003428:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800342c:	f107 0320 	add.w	r3, r7, #32
 8003430:	4618      	mov	r0, r3
 8003432:	f003 f84f 	bl	80064d4 <HAL_RCCEx_PeriphCLKConfig>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <HAL_SPI_MspInit+0x150>
      Error_Handler();
 800343c:	f7ff ff4b 	bl	80032d6 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003440:	4b59      	ldr	r3, [pc, #356]	@ (80035a8 <HAL_SPI_MspInit+0x2b8>)
 8003442:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003446:	4a58      	ldr	r2, [pc, #352]	@ (80035a8 <HAL_SPI_MspInit+0x2b8>)
 8003448:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800344c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003450:	4b55      	ldr	r3, [pc, #340]	@ (80035a8 <HAL_SPI_MspInit+0x2b8>)
 8003452:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003456:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 800345a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800345e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003468:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800346c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800346e:	4b4e      	ldr	r3, [pc, #312]	@ (80035a8 <HAL_SPI_MspInit+0x2b8>)
 8003470:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003474:	4a4c      	ldr	r2, [pc, #304]	@ (80035a8 <HAL_SPI_MspInit+0x2b8>)
 8003476:	f043 0304 	orr.w	r3, r3, #4
 800347a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800347e:	4b4a      	ldr	r3, [pc, #296]	@ (80035a8 <HAL_SPI_MspInit+0x2b8>)
 8003480:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003484:	f003 0204 	and.w	r2, r3, #4
 8003488:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800348c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003496:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800349a:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = SCKL_3_Pin|MISO_3_Pin|MOSI_3_Pin;
 800349c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80034a0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a4:	2302      	movs	r3, #2
 80034a6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034aa:	2300      	movs	r3, #0
 80034ac:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b0:	2300      	movs	r3, #0
 80034b2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80034b6:	2306      	movs	r3, #6
 80034b8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034bc:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80034c0:	4619      	mov	r1, r3
 80034c2:	483c      	ldr	r0, [pc, #240]	@ (80035b4 <HAL_SPI_MspInit+0x2c4>)
 80034c4:	f001 f802 	bl	80044cc <HAL_GPIO_Init>
}
 80034c8:	e067      	b.n	800359a <HAL_SPI_MspInit+0x2aa>
  else if(hspi->Instance==SPI5)
 80034ca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80034ce:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a38      	ldr	r2, [pc, #224]	@ (80035b8 <HAL_SPI_MspInit+0x2c8>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d15e      	bne.n	800359a <HAL_SPI_MspInit+0x2aa>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 80034dc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80034e0:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80034e4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80034e8:	f04f 0300 	mov.w	r3, #0
 80034ec:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi5ClockSelection = RCC_SPI5CLKSOURCE_PCLK3;
 80034f0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80034f4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80034f8:	2200      	movs	r2, #0
 80034fa:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034fe:	f107 0320 	add.w	r3, r7, #32
 8003502:	4618      	mov	r0, r3
 8003504:	f002 ffe6 	bl	80064d4 <HAL_RCCEx_PeriphCLKConfig>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <HAL_SPI_MspInit+0x222>
      Error_Handler();
 800350e:	f7ff fee2 	bl	80032d6 <Error_Handler>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003512:	4b25      	ldr	r3, [pc, #148]	@ (80035a8 <HAL_SPI_MspInit+0x2b8>)
 8003514:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003518:	4a23      	ldr	r2, [pc, #140]	@ (80035a8 <HAL_SPI_MspInit+0x2b8>)
 800351a:	f043 0320 	orr.w	r3, r3, #32
 800351e:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8003522:	4b21      	ldr	r3, [pc, #132]	@ (80035a8 <HAL_SPI_MspInit+0x2b8>)
 8003524:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003528:	f003 0220 	and.w	r2, r3, #32
 800352c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003530:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003534:	601a      	str	r2, [r3, #0]
 8003536:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800353a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800353e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003540:	4b19      	ldr	r3, [pc, #100]	@ (80035a8 <HAL_SPI_MspInit+0x2b8>)
 8003542:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003546:	4a18      	ldr	r2, [pc, #96]	@ (80035a8 <HAL_SPI_MspInit+0x2b8>)
 8003548:	f043 0320 	orr.w	r3, r3, #32
 800354c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003550:	4b15      	ldr	r3, [pc, #84]	@ (80035a8 <HAL_SPI_MspInit+0x2b8>)
 8003552:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003556:	f003 0220 	and.w	r2, r3, #32
 800355a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800355e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003568:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800356c:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = SCKL_1_Pin|MISO_1_Pin|MOSI_1_Pin;
 800356e:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003572:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003576:	2302      	movs	r3, #2
 8003578:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357c:	2300      	movs	r3, #0
 800357e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003582:	2300      	movs	r3, #0
 8003584:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003588:	2305      	movs	r3, #5
 800358a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800358e:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8003592:	4619      	mov	r1, r3
 8003594:	4809      	ldr	r0, [pc, #36]	@ (80035bc <HAL_SPI_MspInit+0x2cc>)
 8003596:	f000 ff99 	bl	80044cc <HAL_GPIO_Init>
}
 800359a:	bf00      	nop
 800359c:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40003800 	.word	0x40003800
 80035a8:	44020c00 	.word	0x44020c00
 80035ac:	42020400 	.word	0x42020400
 80035b0:	40003c00 	.word	0x40003c00
 80035b4:	42020800 	.word	0x42020800
 80035b8:	44002000 	.word	0x44002000
 80035bc:	42021400 	.word	0x42021400

080035c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b0d2      	sub	sp, #328	@ 0x148
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80035ca:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80035ce:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035d0:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80035d4:	2200      	movs	r2, #0
 80035d6:	601a      	str	r2, [r3, #0]
 80035d8:	605a      	str	r2, [r3, #4]
 80035da:	609a      	str	r2, [r3, #8]
 80035dc:	60da      	str	r2, [r3, #12]
 80035de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035e0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80035e4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80035e8:	4618      	mov	r0, r3
 80035ea:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80035ee:	461a      	mov	r2, r3
 80035f0:	2100      	movs	r1, #0
 80035f2:	f00b ffc4 	bl	800f57e <memset>
  if(huart->Instance==UART4)
 80035f6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80035fa:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4aa4      	ldr	r2, [pc, #656]	@ (8003894 <HAL_UART_MspInit+0x2d4>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d166      	bne.n	80036d6 <HAL_UART_MspInit+0x116>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003608:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800360c:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8003610:	f04f 0208 	mov.w	r2, #8
 8003614:	f04f 0300 	mov.w	r3, #0
 8003618:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800361c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003620:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003624:	2200      	movs	r2, #0
 8003626:	669a      	str	r2, [r3, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003628:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800362c:	4618      	mov	r0, r3
 800362e:	f002 ff51 	bl	80064d4 <HAL_RCCEx_PeriphCLKConfig>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 8003638:	f7ff fe4d 	bl	80032d6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800363c:	4b96      	ldr	r3, [pc, #600]	@ (8003898 <HAL_UART_MspInit+0x2d8>)
 800363e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003642:	4a95      	ldr	r2, [pc, #596]	@ (8003898 <HAL_UART_MspInit+0x2d8>)
 8003644:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003648:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800364c:	4b92      	ldr	r3, [pc, #584]	@ (8003898 <HAL_UART_MspInit+0x2d8>)
 800364e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003652:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 8003656:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800365a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800365e:	601a      	str	r2, [r3, #0]
 8003660:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003664:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003668:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800366a:	4b8b      	ldr	r3, [pc, #556]	@ (8003898 <HAL_UART_MspInit+0x2d8>)
 800366c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003670:	4a89      	ldr	r2, [pc, #548]	@ (8003898 <HAL_UART_MspInit+0x2d8>)
 8003672:	f043 0302 	orr.w	r3, r3, #2
 8003676:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800367a:	4b87      	ldr	r3, [pc, #540]	@ (8003898 <HAL_UART_MspInit+0x2d8>)
 800367c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003680:	f003 0202 	and.w	r2, r3, #2
 8003684:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003688:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003692:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003696:	681b      	ldr	r3, [r3, #0]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = UART_RX2_Pin|UART_TX2_Pin;
 8003698:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800369c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a0:	2302      	movs	r3, #2
 80036a2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a6:	2300      	movs	r3, #0
 80036a8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ac:	2300      	movs	r3, #0
 80036ae:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80036b2:	2308      	movs	r3, #8
 80036b4:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036b8:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80036bc:	4619      	mov	r1, r3
 80036be:	4877      	ldr	r0, [pc, #476]	@ (800389c <HAL_UART_MspInit+0x2dc>)
 80036c0:	f000 ff04 	bl	80044cc <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80036c4:	2200      	movs	r2, #0
 80036c6:	2100      	movs	r1, #0
 80036c8:	203d      	movs	r0, #61	@ 0x3d
 80036ca:	f000 fd81 	bl	80041d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80036ce:	203d      	movs	r0, #61	@ 0x3d
 80036d0:	f000 fd98 	bl	8004204 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART10_MspInit 1 */

  /* USER CODE END USART10_MspInit 1 */
  }

}
 80036d4:	e151      	b.n	800397a <HAL_UART_MspInit+0x3ba>
  else if(huart->Instance==UART5)
 80036d6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80036da:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a6f      	ldr	r2, [pc, #444]	@ (80038a0 <HAL_UART_MspInit+0x2e0>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d165      	bne.n	80037b4 <HAL_UART_MspInit+0x1f4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80036e8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80036ec:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80036f0:	f04f 0210 	mov.w	r2, #16
 80036f4:	f04f 0300 	mov.w	r3, #0
 80036f8:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80036fc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003700:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003704:	2200      	movs	r2, #0
 8003706:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003708:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800370c:	4618      	mov	r0, r3
 800370e:	f002 fee1 	bl	80064d4 <HAL_RCCEx_PeriphCLKConfig>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <HAL_UART_MspInit+0x15c>
      Error_Handler();
 8003718:	f7ff fddd 	bl	80032d6 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 800371c:	4b5e      	ldr	r3, [pc, #376]	@ (8003898 <HAL_UART_MspInit+0x2d8>)
 800371e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003722:	4a5d      	ldr	r2, [pc, #372]	@ (8003898 <HAL_UART_MspInit+0x2d8>)
 8003724:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003728:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800372c:	4b5a      	ldr	r3, [pc, #360]	@ (8003898 <HAL_UART_MspInit+0x2d8>)
 800372e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003732:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8003736:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800373a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003744:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003748:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800374a:	4b53      	ldr	r3, [pc, #332]	@ (8003898 <HAL_UART_MspInit+0x2d8>)
 800374c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003750:	4a51      	ldr	r2, [pc, #324]	@ (8003898 <HAL_UART_MspInit+0x2d8>)
 8003752:	f043 0302 	orr.w	r3, r3, #2
 8003756:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800375a:	4b4f      	ldr	r3, [pc, #316]	@ (8003898 <HAL_UART_MspInit+0x2d8>)
 800375c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003760:	f003 0202 	and.w	r2, r3, #2
 8003764:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003768:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003772:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003776:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = UART_RX3_Pin|UART_TX3_Pin;
 8003778:	2360      	movs	r3, #96	@ 0x60
 800377a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800377e:	2302      	movs	r3, #2
 8003780:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003784:	2300      	movs	r3, #0
 8003786:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800378a:	2300      	movs	r3, #0
 800378c:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8003790:	230e      	movs	r3, #14
 8003792:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003796:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 800379a:	4619      	mov	r1, r3
 800379c:	483f      	ldr	r0, [pc, #252]	@ (800389c <HAL_UART_MspInit+0x2dc>)
 800379e:	f000 fe95 	bl	80044cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80037a2:	2200      	movs	r2, #0
 80037a4:	2100      	movs	r1, #0
 80037a6:	203e      	movs	r0, #62	@ 0x3e
 80037a8:	f000 fd12 	bl	80041d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80037ac:	203e      	movs	r0, #62	@ 0x3e
 80037ae:	f000 fd29 	bl	8004204 <HAL_NVIC_EnableIRQ>
}
 80037b2:	e0e2      	b.n	800397a <HAL_UART_MspInit+0x3ba>
  else if(huart->Instance==UART8)
 80037b4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80037b8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a38      	ldr	r2, [pc, #224]	@ (80038a4 <HAL_UART_MspInit+0x2e4>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d172      	bne.n	80038ac <HAL_UART_MspInit+0x2ec>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 80037c6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80037ca:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80037ce:	f04f 0280 	mov.w	r2, #128	@ 0x80
 80037d2:	f04f 0300 	mov.w	r3, #0
 80037d6:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 80037da:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80037de:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80037e2:	2200      	movs	r2, #0
 80037e4:	679a      	str	r2, [r3, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80037ea:	4618      	mov	r0, r3
 80037ec:	f002 fe72 	bl	80064d4 <HAL_RCCEx_PeriphCLKConfig>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <HAL_UART_MspInit+0x23a>
      Error_Handler();
 80037f6:	f7ff fd6e 	bl	80032d6 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 80037fa:	4b27      	ldr	r3, [pc, #156]	@ (8003898 <HAL_UART_MspInit+0x2d8>)
 80037fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003800:	4a25      	ldr	r2, [pc, #148]	@ (8003898 <HAL_UART_MspInit+0x2d8>)
 8003802:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003806:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800380a:	4b23      	ldr	r3, [pc, #140]	@ (8003898 <HAL_UART_MspInit+0x2d8>)
 800380c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003810:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003814:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003818:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003822:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003826:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003828:	4b1b      	ldr	r3, [pc, #108]	@ (8003898 <HAL_UART_MspInit+0x2d8>)
 800382a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800382e:	4a1a      	ldr	r2, [pc, #104]	@ (8003898 <HAL_UART_MspInit+0x2d8>)
 8003830:	f043 0310 	orr.w	r3, r3, #16
 8003834:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003838:	4b17      	ldr	r3, [pc, #92]	@ (8003898 <HAL_UART_MspInit+0x2d8>)
 800383a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800383e:	f003 0210 	and.w	r2, r3, #16
 8003842:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003846:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003850:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003854:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = UART_RX1_Pin|UART_TX1_Pin;
 8003856:	2303      	movs	r3, #3
 8003858:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800385c:	2302      	movs	r3, #2
 800385e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003862:	2300      	movs	r3, #0
 8003864:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003868:	2300      	movs	r3, #0
 800386a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800386e:	2308      	movs	r3, #8
 8003870:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003874:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8003878:	4619      	mov	r1, r3
 800387a:	480b      	ldr	r0, [pc, #44]	@ (80038a8 <HAL_UART_MspInit+0x2e8>)
 800387c:	f000 fe26 	bl	80044cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8003880:	2200      	movs	r2, #0
 8003882:	2100      	movs	r1, #0
 8003884:	2063      	movs	r0, #99	@ 0x63
 8003886:	f000 fca3 	bl	80041d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 800388a:	2063      	movs	r0, #99	@ 0x63
 800388c:	f000 fcba 	bl	8004204 <HAL_NVIC_EnableIRQ>
}
 8003890:	e073      	b.n	800397a <HAL_UART_MspInit+0x3ba>
 8003892:	bf00      	nop
 8003894:	40004c00 	.word	0x40004c00
 8003898:	44020c00 	.word	0x44020c00
 800389c:	42020400 	.word	0x42020400
 80038a0:	40005000 	.word	0x40005000
 80038a4:	40007c00 	.word	0x40007c00
 80038a8:	42021000 	.word	0x42021000
  else if(huart->Instance==USART10)
 80038ac:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80038b0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a32      	ldr	r2, [pc, #200]	@ (8003984 <HAL_UART_MspInit+0x3c4>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d15d      	bne.n	800397a <HAL_UART_MspInit+0x3ba>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART10;
 80038be:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80038c2:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80038c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038ca:	f04f 0300 	mov.w	r3, #0
 80038ce:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart10ClockSelection = RCC_USART10CLKSOURCE_PCLK1;
 80038d2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80038d6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80038da:	2200      	movs	r2, #0
 80038dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038e0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80038e4:	4618      	mov	r0, r3
 80038e6:	f002 fdf5 	bl	80064d4 <HAL_RCCEx_PeriphCLKConfig>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <HAL_UART_MspInit+0x334>
      Error_Handler();
 80038f0:	f7ff fcf1 	bl	80032d6 <Error_Handler>
    __HAL_RCC_USART10_CLK_ENABLE();
 80038f4:	4b24      	ldr	r3, [pc, #144]	@ (8003988 <HAL_UART_MspInit+0x3c8>)
 80038f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80038fa:	4a23      	ldr	r2, [pc, #140]	@ (8003988 <HAL_UART_MspInit+0x3c8>)
 80038fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003900:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003904:	4b20      	ldr	r3, [pc, #128]	@ (8003988 <HAL_UART_MspInit+0x3c8>)
 8003906:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800390a:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 800390e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003912:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800391c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003920:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003922:	4b19      	ldr	r3, [pc, #100]	@ (8003988 <HAL_UART_MspInit+0x3c8>)
 8003924:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003928:	4a17      	ldr	r2, [pc, #92]	@ (8003988 <HAL_UART_MspInit+0x3c8>)
 800392a:	f043 0310 	orr.w	r3, r3, #16
 800392e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003932:	4b15      	ldr	r3, [pc, #84]	@ (8003988 <HAL_UART_MspInit+0x3c8>)
 8003934:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003938:	f003 0210 	and.w	r2, r3, #16
 800393c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003940:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800394a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800394e:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = UART_RX4_Pin|UART_TX4_Pin;
 8003950:	230c      	movs	r3, #12
 8003952:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003956:	2302      	movs	r3, #2
 8003958:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800395c:	2300      	movs	r3, #0
 800395e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003962:	2300      	movs	r3, #0
 8003964:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART10;
 8003968:	2307      	movs	r3, #7
 800396a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800396e:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8003972:	4619      	mov	r1, r3
 8003974:	4805      	ldr	r0, [pc, #20]	@ (800398c <HAL_UART_MspInit+0x3cc>)
 8003976:	f000 fda9 	bl	80044cc <HAL_GPIO_Init>
}
 800397a:	bf00      	nop
 800397c:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	40006800 	.word	0x40006800
 8003988:	44020c00 	.word	0x44020c00
 800398c:	42021000 	.word	0x42021000

08003990 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003996:	1d3b      	adds	r3, r7, #4
 8003998:	2200      	movs	r2, #0
 800399a:	601a      	str	r2, [r3, #0]
 800399c:	605a      	str	r2, [r3, #4]
 800399e:	609a      	str	r2, [r3, #8]
 80039a0:	60da      	str	r2, [r3, #12]
 80039a2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80039a4:	4b43      	ldr	r3, [pc, #268]	@ (8003ab4 <HAL_FMC_MspInit+0x124>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d17f      	bne.n	8003aac <HAL_FMC_MspInit+0x11c>
    return;
  }
  FMC_Initialized = 1;
 80039ac:	4b41      	ldr	r3, [pc, #260]	@ (8003ab4 <HAL_FMC_MspInit+0x124>)
 80039ae:	2201      	movs	r2, #1
 80039b0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80039b2:	4b41      	ldr	r3, [pc, #260]	@ (8003ab8 <HAL_FMC_MspInit+0x128>)
 80039b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039b8:	4a3f      	ldr	r2, [pc, #252]	@ (8003ab8 <HAL_FMC_MspInit+0x128>)
 80039ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80039c2:	4b3d      	ldr	r3, [pc, #244]	@ (8003ab8 <HAL_FMC_MspInit+0x128>)
 80039c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039cc:	603b      	str	r3, [r7, #0]
 80039ce:	683b      	ldr	r3, [r7, #0]
  PA8   ------> FMC_NOE
  PD0   ------> FMC_D2
  PD1   ------> FMC_D3
  PD7   ------> FMC_NCE
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80039d0:	f24f 033f 	movw	r3, #61503	@ 0xf03f
 80039d4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d6:	2302      	movs	r3, #2
 80039d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039da:	2300      	movs	r3, #0
 80039dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039de:	2303      	movs	r3, #3
 80039e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80039e2:	230c      	movs	r3, #12
 80039e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80039e6:	1d3b      	adds	r3, r7, #4
 80039e8:	4619      	mov	r1, r3
 80039ea:	4834      	ldr	r0, [pc, #208]	@ (8003abc <HAL_FMC_MspInit+0x12c>)
 80039ec:	f000 fd6e 	bl	80044cc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80039f0:	2380      	movs	r3, #128	@ 0x80
 80039f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f4:	2302      	movs	r3, #2
 80039f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f8:	2300      	movs	r3, #0
 80039fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039fc:	2303      	movs	r3, #3
 80039fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF13_FMC;
 8003a00:	230d      	movs	r3, #13
 8003a02:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a04:	1d3b      	adds	r3, r7, #4
 8003a06:	4619      	mov	r1, r3
 8003a08:	482d      	ldr	r0, [pc, #180]	@ (8003ac0 <HAL_FMC_MspInit+0x130>)
 8003a0a:	f000 fd5f 	bl	80044cc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003a0e:	233f      	movs	r3, #63	@ 0x3f
 8003a10:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a12:	2302      	movs	r3, #2
 8003a14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a16:	2300      	movs	r3, #0
 8003a18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003a1e:	230c      	movs	r3, #12
 8003a20:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a22:	1d3b      	adds	r3, r7, #4
 8003a24:	4619      	mov	r1, r3
 8003a26:	4827      	ldr	r0, [pc, #156]	@ (8003ac4 <HAL_FMC_MspInit+0x134>)
 8003a28:	f000 fd50 	bl	80044cc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8003a2c:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8003a30:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a32:	2302      	movs	r3, #2
 8003a34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a36:	2300      	movs	r3, #0
 8003a38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003a3e:	230c      	movs	r3, #12
 8003a40:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a42:	1d3b      	adds	r3, r7, #4
 8003a44:	4619      	mov	r1, r3
 8003a46:	4820      	ldr	r0, [pc, #128]	@ (8003ac8 <HAL_FMC_MspInit+0x138>)
 8003a48:	f000 fd40 	bl	80044cc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8003a4c:	f64f 0383 	movw	r3, #63619	@ 0xf883
 8003a50:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a52:	2302      	movs	r3, #2
 8003a54:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a56:	2300      	movs	r3, #0
 8003a58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003a5e:	230c      	movs	r3, #12
 8003a60:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a62:	1d3b      	adds	r3, r7, #4
 8003a64:	4619      	mov	r1, r3
 8003a66:	4819      	ldr	r0, [pc, #100]	@ (8003acc <HAL_FMC_MspInit+0x13c>)
 8003a68:	f000 fd30 	bl	80044cc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003a6c:	23c0      	movs	r3, #192	@ 0xc0
 8003a6e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a70:	2302      	movs	r3, #2
 8003a72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a74:	2300      	movs	r3, #0
 8003a76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 8003a7c:	2309      	movs	r3, #9
 8003a7e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a80:	1d3b      	adds	r3, r7, #4
 8003a82:	4619      	mov	r1, r3
 8003a84:	4812      	ldr	r0, [pc, #72]	@ (8003ad0 <HAL_FMC_MspInit+0x140>)
 8003a86:	f000 fd21 	bl	80044cc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003a8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a8e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a90:	2302      	movs	r3, #2
 8003a92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a94:	2300      	movs	r3, #0
 8003a96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003a9c:	230c      	movs	r3, #12
 8003a9e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aa0:	1d3b      	adds	r3, r7, #4
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	4806      	ldr	r0, [pc, #24]	@ (8003ac0 <HAL_FMC_MspInit+0x130>)
 8003aa6:	f000 fd11 	bl	80044cc <HAL_GPIO_Init>
 8003aaa:	e000      	b.n	8003aae <HAL_FMC_MspInit+0x11e>
    return;
 8003aac:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003aae:	3718      	adds	r7, #24
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	20005c8c 	.word	0x20005c8c
 8003ab8:	44020c00 	.word	0x44020c00
 8003abc:	42021400 	.word	0x42021400
 8003ac0:	42020000 	.word	0x42020000
 8003ac4:	42021800 	.word	0x42021800
 8003ac8:	42021000 	.word	0x42021000
 8003acc:	42020c00 	.word	0x42020c00
 8003ad0:	42020800 	.word	0x42020800

08003ad4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003adc:	f7ff ff58 	bl	8003990 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8003ae0:	bf00      	nop
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* hnand){
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FMC_MspInit();
 8003af0:	f7ff ff4e 	bl	8003990 <HAL_FMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 8003af4:	bf00      	nop
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b00:	bf00      	nop
 8003b02:	e7fd      	b.n	8003b00 <NMI_Handler+0x4>

08003b04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b08:	bf00      	nop
 8003b0a:	e7fd      	b.n	8003b08 <HardFault_Handler+0x4>

08003b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b10:	bf00      	nop
 8003b12:	e7fd      	b.n	8003b10 <MemManage_Handler+0x4>

08003b14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b18:	bf00      	nop
 8003b1a:	e7fd      	b.n	8003b18 <BusFault_Handler+0x4>

08003b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b20:	bf00      	nop
 8003b22:	e7fd      	b.n	8003b20 <UsageFault_Handler+0x4>

08003b24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b28:	bf00      	nop
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b32:	b480      	push	{r7}
 8003b34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b36:	bf00      	nop
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b44:	bf00      	nop
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b52:	f000 fa41 	bl	8003fd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b56:	bf00      	nop
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY_1_Pin);
 8003b5e:	2002      	movs	r0, #2
 8003b60:	f000 fe38 	bl	80047d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003b64:	bf00      	nop
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <EXTI7_IRQHandler>:

/**
  * @brief This function handles EXTI Line7 interrupt.
  */
void EXTI7_IRQHandler(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI7_IRQn 0 */

  /* USER CODE END EXTI7_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY_2_Pin);
 8003b6c:	2080      	movs	r0, #128	@ 0x80
 8003b6e:	f000 fe31 	bl	80047d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI7_IRQn 1 */

  /* USER CODE END EXTI7_IRQn 1 */
}
 8003b72:	bf00      	nop
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <EXTI11_IRQHandler>:

/**
  * @brief This function handles EXTI Line11 interrupt.
  */
void EXTI11_IRQHandler(void)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI11_IRQn 0 */

  /* USER CODE END EXTI11_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY_3_Pin);
 8003b7a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003b7e:	f000 fe29 	bl	80047d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI11_IRQn 1 */

  /* USER CODE END EXTI11_IRQn 1 */
}
 8003b82:	bf00      	nop
 8003b84:	bd80      	pop	{r7, pc}
	...

08003b88 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003b8c:	4802      	ldr	r0, [pc, #8]	@ (8003b98 <UART4_IRQHandler+0x10>)
 8003b8e:	f008 fd41 	bl	800c614 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003b92:	bf00      	nop
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	20005960 	.word	0x20005960

08003b9c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003ba0:	4802      	ldr	r0, [pc, #8]	@ (8003bac <UART5_IRQHandler+0x10>)
 8003ba2:	f008 fd37 	bl	800c614 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003ba6:	bf00      	nop
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	200059f4 	.word	0x200059f4

08003bb0 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8003bb4:	4802      	ldr	r0, [pc, #8]	@ (8003bc0 <UART8_IRQHandler+0x10>)
 8003bb6:	f008 fd2d 	bl	800c614 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8003bba:	bf00      	nop
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	20005a88 	.word	0x20005a88

08003bc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
  return 1;
 8003bc8:	2301      	movs	r3, #1
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <_kill>:

int _kill(int pid, int sig)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003bde:	f00b fd21 	bl	800f624 <__errno>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2216      	movs	r2, #22
 8003be6:	601a      	str	r2, [r3, #0]
  return -1;
 8003be8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3708      	adds	r7, #8
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <_exit>:

void _exit (int status)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f7ff ffe7 	bl	8003bd4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003c06:	bf00      	nop
 8003c08:	e7fd      	b.n	8003c06 <_exit+0x12>

08003c0a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b086      	sub	sp, #24
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	60f8      	str	r0, [r7, #12]
 8003c12:	60b9      	str	r1, [r7, #8]
 8003c14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c16:	2300      	movs	r3, #0
 8003c18:	617b      	str	r3, [r7, #20]
 8003c1a:	e00a      	b.n	8003c32 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003c1c:	f3af 8000 	nop.w
 8003c20:	4601      	mov	r1, r0
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	1c5a      	adds	r2, r3, #1
 8003c26:	60ba      	str	r2, [r7, #8]
 8003c28:	b2ca      	uxtb	r2, r1
 8003c2a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	617b      	str	r3, [r7, #20]
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	dbf0      	blt.n	8003c1c <_read+0x12>
  }

  return len;
 8003c3a:	687b      	ldr	r3, [r7, #4]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3718      	adds	r7, #24
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c50:	2300      	movs	r3, #0
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	e009      	b.n	8003c6a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	1c5a      	adds	r2, r3, #1
 8003c5a:	60ba      	str	r2, [r7, #8]
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	3301      	adds	r3, #1
 8003c68:	617b      	str	r3, [r7, #20]
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	dbf1      	blt.n	8003c56 <_write+0x12>
  }
  return len;
 8003c72:	687b      	ldr	r3, [r7, #4]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3718      	adds	r7, #24
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <_close>:

int _close(int file)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003c84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ca4:	605a      	str	r2, [r3, #4]
  return 0;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <_isatty>:

int _isatty(int file)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003cbc:	2301      	movs	r3, #1
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr

08003cca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b085      	sub	sp, #20
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	60f8      	str	r0, [r7, #12]
 8003cd2:	60b9      	str	r1, [r7, #8]
 8003cd4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3714      	adds	r7, #20
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cec:	4a14      	ldr	r2, [pc, #80]	@ (8003d40 <_sbrk+0x5c>)
 8003cee:	4b15      	ldr	r3, [pc, #84]	@ (8003d44 <_sbrk+0x60>)
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003cf8:	4b13      	ldr	r3, [pc, #76]	@ (8003d48 <_sbrk+0x64>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d102      	bne.n	8003d06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d00:	4b11      	ldr	r3, [pc, #68]	@ (8003d48 <_sbrk+0x64>)
 8003d02:	4a12      	ldr	r2, [pc, #72]	@ (8003d4c <_sbrk+0x68>)
 8003d04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d06:	4b10      	ldr	r3, [pc, #64]	@ (8003d48 <_sbrk+0x64>)
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d207      	bcs.n	8003d24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d14:	f00b fc86 	bl	800f624 <__errno>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	220c      	movs	r2, #12
 8003d1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d22:	e009      	b.n	8003d38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d24:	4b08      	ldr	r3, [pc, #32]	@ (8003d48 <_sbrk+0x64>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d2a:	4b07      	ldr	r3, [pc, #28]	@ (8003d48 <_sbrk+0x64>)
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4413      	add	r3, r2
 8003d32:	4a05      	ldr	r2, [pc, #20]	@ (8003d48 <_sbrk+0x64>)
 8003d34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d36:	68fb      	ldr	r3, [r7, #12]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3718      	adds	r7, #24
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	200a0000 	.word	0x200a0000
 8003d44:	00000400 	.word	0x00000400
 8003d48:	20005c90 	.word	0x20005c90
 8003d4c:	20005de8 	.word	0x20005de8

08003d50 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003d56:	4b35      	ldr	r3, [pc, #212]	@ (8003e2c <SystemInit+0xdc>)
 8003d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d5c:	4a33      	ldr	r2, [pc, #204]	@ (8003e2c <SystemInit+0xdc>)
 8003d5e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003d62:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8003d66:	4b32      	ldr	r3, [pc, #200]	@ (8003e30 <SystemInit+0xe0>)
 8003d68:	2201      	movs	r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8003d6c:	4b30      	ldr	r3, [pc, #192]	@ (8003e30 <SystemInit+0xe0>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8003d72:	4b2f      	ldr	r3, [pc, #188]	@ (8003e30 <SystemInit+0xe0>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8003d78:	4b2d      	ldr	r3, [pc, #180]	@ (8003e30 <SystemInit+0xe0>)
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	492c      	ldr	r1, [pc, #176]	@ (8003e30 <SystemInit+0xe0>)
 8003d7e:	4b2d      	ldr	r3, [pc, #180]	@ (8003e34 <SystemInit+0xe4>)
 8003d80:	4013      	ands	r3, r2
 8003d82:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8003d84:	4b2a      	ldr	r3, [pc, #168]	@ (8003e30 <SystemInit+0xe0>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8003d8a:	4b29      	ldr	r3, [pc, #164]	@ (8003e30 <SystemInit+0xe0>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8003d90:	4b27      	ldr	r3, [pc, #156]	@ (8003e30 <SystemInit+0xe0>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8003d96:	4b26      	ldr	r3, [pc, #152]	@ (8003e30 <SystemInit+0xe0>)
 8003d98:	4a27      	ldr	r2, [pc, #156]	@ (8003e38 <SystemInit+0xe8>)
 8003d9a:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8003d9c:	4b24      	ldr	r3, [pc, #144]	@ (8003e30 <SystemInit+0xe0>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8003da2:	4b23      	ldr	r3, [pc, #140]	@ (8003e30 <SystemInit+0xe0>)
 8003da4:	4a24      	ldr	r2, [pc, #144]	@ (8003e38 <SystemInit+0xe8>)
 8003da6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8003da8:	4b21      	ldr	r3, [pc, #132]	@ (8003e30 <SystemInit+0xe0>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8003dae:	4b20      	ldr	r3, [pc, #128]	@ (8003e30 <SystemInit+0xe0>)
 8003db0:	4a21      	ldr	r2, [pc, #132]	@ (8003e38 <SystemInit+0xe8>)
 8003db2:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8003db4:	4b1e      	ldr	r3, [pc, #120]	@ (8003e30 <SystemInit+0xe0>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8003dba:	4b1d      	ldr	r3, [pc, #116]	@ (8003e30 <SystemInit+0xe0>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a1c      	ldr	r2, [pc, #112]	@ (8003e30 <SystemInit+0xe0>)
 8003dc0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dc4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8003dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8003e30 <SystemInit+0xe0>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003dcc:	4b17      	ldr	r3, [pc, #92]	@ (8003e2c <SystemInit+0xdc>)
 8003dce:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003dd2:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8003dd4:	4b19      	ldr	r3, [pc, #100]	@ (8003e3c <SystemInit+0xec>)
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8003ddc:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8003de4:	d003      	beq.n	8003dee <SystemInit+0x9e>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003dec:	d117      	bne.n	8003e1e <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8003dee:	4b13      	ldr	r3, [pc, #76]	@ (8003e3c <SystemInit+0xec>)
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d005      	beq.n	8003e06 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8003dfa:	4b10      	ldr	r3, [pc, #64]	@ (8003e3c <SystemInit+0xec>)
 8003dfc:	4a10      	ldr	r2, [pc, #64]	@ (8003e40 <SystemInit+0xf0>)
 8003dfe:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8003e00:	4b0e      	ldr	r3, [pc, #56]	@ (8003e3c <SystemInit+0xec>)
 8003e02:	4a10      	ldr	r2, [pc, #64]	@ (8003e44 <SystemInit+0xf4>)
 8003e04:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8003e06:	4b0d      	ldr	r3, [pc, #52]	@ (8003e3c <SystemInit+0xec>)
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	4a0c      	ldr	r2, [pc, #48]	@ (8003e3c <SystemInit+0xec>)
 8003e0c:	f043 0302 	orr.w	r3, r3, #2
 8003e10:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8003e12:	4b0a      	ldr	r3, [pc, #40]	@ (8003e3c <SystemInit+0xec>)
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	4a09      	ldr	r2, [pc, #36]	@ (8003e3c <SystemInit+0xec>)
 8003e18:	f043 0301 	orr.w	r3, r3, #1
 8003e1c:	61d3      	str	r3, [r2, #28]
  }
}
 8003e1e:	bf00      	nop
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	e000ed00 	.word	0xe000ed00
 8003e30:	44020c00 	.word	0x44020c00
 8003e34:	eae2eae3 	.word	0xeae2eae3
 8003e38:	01010280 	.word	0x01010280
 8003e3c:	40022000 	.word	0x40022000
 8003e40:	08192a3b 	.word	0x08192a3b
 8003e44:	4c5d6e7f 	.word	0x4c5d6e7f

08003e48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003e48:	480d      	ldr	r0, [pc, #52]	@ (8003e80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003e4a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003e4c:	f7ff ff80 	bl	8003d50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e50:	480c      	ldr	r0, [pc, #48]	@ (8003e84 <LoopForever+0x6>)
  ldr r1, =_edata
 8003e52:	490d      	ldr	r1, [pc, #52]	@ (8003e88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003e54:	4a0d      	ldr	r2, [pc, #52]	@ (8003e8c <LoopForever+0xe>)
  movs r3, #0
 8003e56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e58:	e002      	b.n	8003e60 <LoopCopyDataInit>

08003e5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e5e:	3304      	adds	r3, #4

08003e60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e64:	d3f9      	bcc.n	8003e5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e66:	4a0a      	ldr	r2, [pc, #40]	@ (8003e90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003e68:	4c0a      	ldr	r4, [pc, #40]	@ (8003e94 <LoopForever+0x16>)
  movs r3, #0
 8003e6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e6c:	e001      	b.n	8003e72 <LoopFillZerobss>

08003e6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e70:	3204      	adds	r2, #4

08003e72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e74:	d3fb      	bcc.n	8003e6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003e76:	f00b fbdb 	bl	800f630 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003e7a:	f7fe fb03 	bl	8002484 <main>

08003e7e <LoopForever>:

LoopForever:
    b LoopForever
 8003e7e:	e7fe      	b.n	8003e7e <LoopForever>
  ldr   r0, =_estack
 8003e80:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8003e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e88:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8003e8c:	08011d38 	.word	0x08011d38
  ldr r2, =_sbss
 8003e90:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003e94:	20005de4 	.word	0x20005de4

08003e98 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003e98:	e7fe      	b.n	8003e98 <ADC1_IRQHandler>
	...

08003e9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ea0:	2003      	movs	r0, #3
 8003ea2:	f000 f98a 	bl	80041ba <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003ea6:	f002 f98b 	bl	80061c0 <HAL_RCC_GetSysClockFreq>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	4b0c      	ldr	r3, [pc, #48]	@ (8003ee0 <HAL_Init+0x44>)
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	f003 030f 	and.w	r3, r3, #15
 8003eb4:	490b      	ldr	r1, [pc, #44]	@ (8003ee4 <HAL_Init+0x48>)
 8003eb6:	5ccb      	ldrb	r3, [r1, r3]
 8003eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8003ebc:	4a0a      	ldr	r2, [pc, #40]	@ (8003ee8 <HAL_Init+0x4c>)
 8003ebe:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003ec0:	2004      	movs	r0, #4
 8003ec2:	f000 f9cf 	bl	8004264 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ec6:	200f      	movs	r0, #15
 8003ec8:	f000 f810 	bl	8003eec <HAL_InitTick>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e002      	b.n	8003edc <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003ed6:	f7ff fa04 	bl	80032e2 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	44020c00 	.word	0x44020c00
 8003ee4:	08011978 	.word	0x08011978
 8003ee8:	2000001c 	.word	0x2000001c

08003eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8003ef8:	4b33      	ldr	r3, [pc, #204]	@ (8003fc8 <HAL_InitTick+0xdc>)
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d101      	bne.n	8003f04 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e05c      	b.n	8003fbe <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8003f04:	4b31      	ldr	r3, [pc, #196]	@ (8003fcc <HAL_InitTick+0xe0>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b04      	cmp	r3, #4
 8003f0e:	d10c      	bne.n	8003f2a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8003f10:	4b2f      	ldr	r3, [pc, #188]	@ (8003fd0 <HAL_InitTick+0xe4>)
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	4b2c      	ldr	r3, [pc, #176]	@ (8003fc8 <HAL_InitTick+0xdc>)
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	4619      	mov	r1, r3
 8003f1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f26:	60fb      	str	r3, [r7, #12]
 8003f28:	e037      	b.n	8003f9a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8003f2a:	f000 f9f3 	bl	8004314 <HAL_SYSTICK_GetCLKSourceConfig>
 8003f2e:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d023      	beq.n	8003f7e <HAL_InitTick+0x92>
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d82d      	bhi.n	8003f98 <HAL_InitTick+0xac>
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d003      	beq.n	8003f4a <HAL_InitTick+0x5e>
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d00d      	beq.n	8003f64 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8003f48:	e026      	b.n	8003f98 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8003f4a:	4b21      	ldr	r3, [pc, #132]	@ (8003fd0 <HAL_InitTick+0xe4>)
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8003fc8 <HAL_InitTick+0xdc>)
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	4619      	mov	r1, r3
 8003f54:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8003f58:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f60:	60fb      	str	r3, [r7, #12]
        break;
 8003f62:	e01a      	b.n	8003f9a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8003f64:	4b18      	ldr	r3, [pc, #96]	@ (8003fc8 <HAL_InitTick+0xdc>)
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	461a      	mov	r2, r3
 8003f6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f72:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8003f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f7a:	60fb      	str	r3, [r7, #12]
        break;
 8003f7c:	e00d      	b.n	8003f9a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8003f7e:	4b12      	ldr	r3, [pc, #72]	@ (8003fc8 <HAL_InitTick+0xdc>)
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	461a      	mov	r2, r3
 8003f84:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f88:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f8c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f94:	60fb      	str	r3, [r7, #12]
        break;
 8003f96:	e000      	b.n	8003f9a <HAL_InitTick+0xae>
        break;
 8003f98:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 f940 	bl	8004220 <HAL_SYSTICK_Config>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e009      	b.n	8003fbe <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003faa:	2200      	movs	r2, #0
 8003fac:	6879      	ldr	r1, [r7, #4]
 8003fae:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb2:	f000 f90d 	bl	80041d0 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8003fb6:	4a07      	ldr	r2, [pc, #28]	@ (8003fd4 <HAL_InitTick+0xe8>)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	20000024 	.word	0x20000024
 8003fcc:	e000e010 	.word	0xe000e010
 8003fd0:	2000001c 	.word	0x2000001c
 8003fd4:	20000020 	.word	0x20000020

08003fd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003fdc:	4b06      	ldr	r3, [pc, #24]	@ (8003ff8 <HAL_IncTick+0x20>)
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	4b06      	ldr	r3, [pc, #24]	@ (8003ffc <HAL_IncTick+0x24>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	4a04      	ldr	r2, [pc, #16]	@ (8003ffc <HAL_IncTick+0x24>)
 8003fea:	6013      	str	r3, [r2, #0]
}
 8003fec:	bf00      	nop
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	20000024 	.word	0x20000024
 8003ffc:	20005c94 	.word	0x20005c94

08004000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
  return uwTick;
 8004004:	4b03      	ldr	r3, [pc, #12]	@ (8004014 <HAL_GetTick+0x14>)
 8004006:	681b      	ldr	r3, [r3, #0]
}
 8004008:	4618      	mov	r0, r3
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	20005c94 	.word	0x20005c94

08004018 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004020:	f7ff ffee 	bl	8004000 <HAL_GetTick>
 8004024:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004030:	d005      	beq.n	800403e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004032:	4b0a      	ldr	r3, [pc, #40]	@ (800405c <HAL_Delay+0x44>)
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	461a      	mov	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4413      	add	r3, r2
 800403c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800403e:	bf00      	nop
 8004040:	f7ff ffde 	bl	8004000 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	429a      	cmp	r2, r3
 800404e:	d8f7      	bhi.n	8004040 <HAL_Delay+0x28>
  {
  }
}
 8004050:	bf00      	nop
 8004052:	bf00      	nop
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	20000024 	.word	0x20000024

08004060 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f003 0307 	and.w	r3, r3, #7
 800406e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004070:	4b0c      	ldr	r3, [pc, #48]	@ (80040a4 <__NVIC_SetPriorityGrouping+0x44>)
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004076:	68ba      	ldr	r2, [r7, #8]
 8004078:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800407c:	4013      	ands	r3, r2
 800407e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004088:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800408c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004090:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004092:	4a04      	ldr	r2, [pc, #16]	@ (80040a4 <__NVIC_SetPriorityGrouping+0x44>)
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	60d3      	str	r3, [r2, #12]
}
 8004098:	bf00      	nop
 800409a:	3714      	adds	r7, #20
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	e000ed00 	.word	0xe000ed00

080040a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040a8:	b480      	push	{r7}
 80040aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040ac:	4b04      	ldr	r3, [pc, #16]	@ (80040c0 <__NVIC_GetPriorityGrouping+0x18>)
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	0a1b      	lsrs	r3, r3, #8
 80040b2:	f003 0307 	and.w	r3, r3, #7
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	e000ed00 	.word	0xe000ed00

080040c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	4603      	mov	r3, r0
 80040cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80040ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	db0b      	blt.n	80040ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040d6:	88fb      	ldrh	r3, [r7, #6]
 80040d8:	f003 021f 	and.w	r2, r3, #31
 80040dc:	4907      	ldr	r1, [pc, #28]	@ (80040fc <__NVIC_EnableIRQ+0x38>)
 80040de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040e2:	095b      	lsrs	r3, r3, #5
 80040e4:	2001      	movs	r0, #1
 80040e6:	fa00 f202 	lsl.w	r2, r0, r2
 80040ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80040ee:	bf00      	nop
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	e000e100 	.word	0xe000e100

08004100 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	4603      	mov	r3, r0
 8004108:	6039      	str	r1, [r7, #0]
 800410a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800410c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004110:	2b00      	cmp	r3, #0
 8004112:	db0a      	blt.n	800412a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	b2da      	uxtb	r2, r3
 8004118:	490c      	ldr	r1, [pc, #48]	@ (800414c <__NVIC_SetPriority+0x4c>)
 800411a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800411e:	0112      	lsls	r2, r2, #4
 8004120:	b2d2      	uxtb	r2, r2
 8004122:	440b      	add	r3, r1
 8004124:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004128:	e00a      	b.n	8004140 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	b2da      	uxtb	r2, r3
 800412e:	4908      	ldr	r1, [pc, #32]	@ (8004150 <__NVIC_SetPriority+0x50>)
 8004130:	88fb      	ldrh	r3, [r7, #6]
 8004132:	f003 030f 	and.w	r3, r3, #15
 8004136:	3b04      	subs	r3, #4
 8004138:	0112      	lsls	r2, r2, #4
 800413a:	b2d2      	uxtb	r2, r2
 800413c:	440b      	add	r3, r1
 800413e:	761a      	strb	r2, [r3, #24]
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	e000e100 	.word	0xe000e100
 8004150:	e000ed00 	.word	0xe000ed00

08004154 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004154:	b480      	push	{r7}
 8004156:	b089      	sub	sp, #36	@ 0x24
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f003 0307 	and.w	r3, r3, #7
 8004166:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	f1c3 0307 	rsb	r3, r3, #7
 800416e:	2b04      	cmp	r3, #4
 8004170:	bf28      	it	cs
 8004172:	2304      	movcs	r3, #4
 8004174:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	3304      	adds	r3, #4
 800417a:	2b06      	cmp	r3, #6
 800417c:	d902      	bls.n	8004184 <NVIC_EncodePriority+0x30>
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	3b03      	subs	r3, #3
 8004182:	e000      	b.n	8004186 <NVIC_EncodePriority+0x32>
 8004184:	2300      	movs	r3, #0
 8004186:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004188:	f04f 32ff 	mov.w	r2, #4294967295
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	fa02 f303 	lsl.w	r3, r2, r3
 8004192:	43da      	mvns	r2, r3
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	401a      	ands	r2, r3
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800419c:	f04f 31ff 	mov.w	r1, #4294967295
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	fa01 f303 	lsl.w	r3, r1, r3
 80041a6:	43d9      	mvns	r1, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041ac:	4313      	orrs	r3, r2
         );
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3724      	adds	r7, #36	@ 0x24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b082      	sub	sp, #8
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7ff ff4c 	bl	8004060 <__NVIC_SetPriorityGrouping>
}
 80041c8:	bf00      	nop
 80041ca:	3708      	adds	r7, #8
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	4603      	mov	r3, r0
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
 80041dc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80041de:	f7ff ff63 	bl	80040a8 <__NVIC_GetPriorityGrouping>
 80041e2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	68b9      	ldr	r1, [r7, #8]
 80041e8:	6978      	ldr	r0, [r7, #20]
 80041ea:	f7ff ffb3 	bl	8004154 <NVIC_EncodePriority>
 80041ee:	4602      	mov	r2, r0
 80041f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80041f4:	4611      	mov	r1, r2
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7ff ff82 	bl	8004100 <__NVIC_SetPriority>
}
 80041fc:	bf00      	nop
 80041fe:	3718      	adds	r7, #24
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	4603      	mov	r3, r0
 800420c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800420e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004212:	4618      	mov	r0, r3
 8004214:	f7ff ff56 	bl	80040c4 <__NVIC_EnableIRQ>
}
 8004218:	bf00      	nop
 800421a:	3708      	adds	r7, #8
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	3b01      	subs	r3, #1
 800422c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004230:	d301      	bcc.n	8004236 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8004232:	2301      	movs	r3, #1
 8004234:	e00d      	b.n	8004252 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8004236:	4a0a      	ldr	r2, [pc, #40]	@ (8004260 <HAL_SYSTICK_Config+0x40>)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	3b01      	subs	r3, #1
 800423c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800423e:	4b08      	ldr	r3, [pc, #32]	@ (8004260 <HAL_SYSTICK_Config+0x40>)
 8004240:	2200      	movs	r2, #0
 8004242:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8004244:	4b06      	ldr	r3, [pc, #24]	@ (8004260 <HAL_SYSTICK_Config+0x40>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a05      	ldr	r2, [pc, #20]	@ (8004260 <HAL_SYSTICK_Config+0x40>)
 800424a:	f043 0303 	orr.w	r3, r3, #3
 800424e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	e000e010 	.word	0xe000e010

08004264 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b04      	cmp	r3, #4
 8004270:	d844      	bhi.n	80042fc <HAL_SYSTICK_CLKSourceConfig+0x98>
 8004272:	a201      	add	r2, pc, #4	@ (adr r2, 8004278 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8004274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004278:	0800429b 	.word	0x0800429b
 800427c:	080042b9 	.word	0x080042b9
 8004280:	080042db 	.word	0x080042db
 8004284:	080042fd 	.word	0x080042fd
 8004288:	0800428d 	.word	0x0800428d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800428c:	4b1f      	ldr	r3, [pc, #124]	@ (800430c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a1e      	ldr	r2, [pc, #120]	@ (800430c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004292:	f043 0304 	orr.w	r3, r3, #4
 8004296:	6013      	str	r3, [r2, #0]
      break;
 8004298:	e031      	b.n	80042fe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800429a:	4b1c      	ldr	r3, [pc, #112]	@ (800430c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a1b      	ldr	r2, [pc, #108]	@ (800430c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80042a0:	f023 0304 	bic.w	r3, r3, #4
 80042a4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80042a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004310 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80042a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80042ac:	4a18      	ldr	r2, [pc, #96]	@ (8004310 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80042ae:	f023 030c 	bic.w	r3, r3, #12
 80042b2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80042b6:	e022      	b.n	80042fe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80042b8:	4b14      	ldr	r3, [pc, #80]	@ (800430c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a13      	ldr	r2, [pc, #76]	@ (800430c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80042be:	f023 0304 	bic.w	r3, r3, #4
 80042c2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 80042c4:	4b12      	ldr	r3, [pc, #72]	@ (8004310 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80042c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80042ca:	f023 030c 	bic.w	r3, r3, #12
 80042ce:	4a10      	ldr	r2, [pc, #64]	@ (8004310 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80042d0:	f043 0304 	orr.w	r3, r3, #4
 80042d4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80042d8:	e011      	b.n	80042fe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80042da:	4b0c      	ldr	r3, [pc, #48]	@ (800430c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a0b      	ldr	r2, [pc, #44]	@ (800430c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80042e0:	f023 0304 	bic.w	r3, r3, #4
 80042e4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 80042e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004310 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80042e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80042ec:	f023 030c 	bic.w	r3, r3, #12
 80042f0:	4a07      	ldr	r2, [pc, #28]	@ (8004310 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80042f2:	f043 0308 	orr.w	r3, r3, #8
 80042f6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80042fa:	e000      	b.n	80042fe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80042fc:	bf00      	nop
  }
}
 80042fe:	bf00      	nop
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	e000e010 	.word	0xe000e010
 8004310:	44020c00 	.word	0x44020c00

08004314 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800431a:	4b17      	ldr	r3, [pc, #92]	@ (8004378 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0304 	and.w	r3, r3, #4
 8004322:	2b00      	cmp	r3, #0
 8004324:	d002      	beq.n	800432c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8004326:	2304      	movs	r3, #4
 8004328:	607b      	str	r3, [r7, #4]
 800432a:	e01e      	b.n	800436a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 800432c:	4b13      	ldr	r3, [pc, #76]	@ (800437c <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 800432e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004332:	f003 030c 	and.w	r3, r3, #12
 8004336:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	2b08      	cmp	r3, #8
 800433c:	d00f      	beq.n	800435e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	2b08      	cmp	r3, #8
 8004342:	d80f      	bhi.n	8004364 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	2b04      	cmp	r3, #4
 800434e:	d003      	beq.n	8004358 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8004350:	e008      	b.n	8004364 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8004352:	2300      	movs	r3, #0
 8004354:	607b      	str	r3, [r7, #4]
        break;
 8004356:	e008      	b.n	800436a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8004358:	2301      	movs	r3, #1
 800435a:	607b      	str	r3, [r7, #4]
        break;
 800435c:	e005      	b.n	800436a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 800435e:	2302      	movs	r3, #2
 8004360:	607b      	str	r3, [r7, #4]
        break;
 8004362:	e002      	b.n	800436a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8004364:	2300      	movs	r3, #0
 8004366:	607b      	str	r3, [r7, #4]
        break;
 8004368:	bf00      	nop
    }
  }
  return systick_source;
 800436a:	687b      	ldr	r3, [r7, #4]
}
 800436c:	4618      	mov	r0, r3
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr
 8004378:	e000e010 	.word	0xe000e010
 800437c:	44020c00 	.word	0x44020c00

08004380 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8004388:	f7ff fe3a 	bl	8004000 <HAL_GetTick>
 800438c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e06b      	b.n	8004470 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d008      	beq.n	80043b6 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2220      	movs	r2, #32
 80043a8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e05c      	b.n	8004470 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	695a      	ldr	r2, [r3, #20]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f042 0204 	orr.w	r2, r2, #4
 80043c4:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2205      	movs	r2, #5
 80043ca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80043ce:	e020      	b.n	8004412 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80043d0:	f7ff fe16 	bl	8004000 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b05      	cmp	r3, #5
 80043dc:	d919      	bls.n	8004412 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043e2:	f043 0210 	orr.w	r2, r3, #16
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2203      	movs	r2, #3
 80043ee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d003      	beq.n	8004406 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004402:	2201      	movs	r2, #1
 8004404:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e02e      	b.n	8004470 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d0d7      	beq.n	80043d0 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	695a      	ldr	r2, [r3, #20]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f042 0202 	orr.w	r2, r2, #2
 800442e:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2204      	movs	r2, #4
 8004434:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8004440:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800444e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004452:	2b00      	cmp	r3, #0
 8004454:	d007      	beq.n	8004466 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800445a:	2201      	movs	r2, #1
 800445c:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2200      	movs	r2, #0
 8004464:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e019      	b.n	80044be <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d004      	beq.n	80044a0 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2220      	movs	r2, #32
 800449a:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e00e      	b.n	80044be <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2204      	movs	r2, #4
 80044a4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	6812      	ldr	r2, [r2, #0]
 80044b2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80044b6:	f043 0304 	orr.w	r3, r3, #4
 80044ba:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
	...

080044cc <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80044d6:	2300      	movs	r3, #0
 80044d8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80044da:	e136      	b.n	800474a <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	2101      	movs	r1, #1
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	fa01 f303 	lsl.w	r3, r1, r3
 80044e8:	4013      	ands	r3, r2
 80044ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f000 8128 	beq.w	8004744 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d003      	beq.n	8004504 <HAL_GPIO_Init+0x38>
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	2b12      	cmp	r3, #18
 8004502:	d125      	bne.n	8004550 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	08da      	lsrs	r2, r3, #3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	3208      	adds	r2, #8
 800450c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004510:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	220f      	movs	r2, #15
 800451c:	fa02 f303 	lsl.w	r3, r2, r3
 8004520:	43db      	mvns	r3, r3
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	4013      	ands	r3, r2
 8004526:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	f003 020f 	and.w	r2, r3, #15
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	f003 0307 	and.w	r3, r3, #7
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	fa02 f303 	lsl.w	r3, r2, r3
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	4313      	orrs	r3, r2
 8004540:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	08da      	lsrs	r2, r3, #3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	3208      	adds	r2, #8
 800454a:	6979      	ldr	r1, [r7, #20]
 800454c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	2203      	movs	r2, #3
 800455c:	fa02 f303 	lsl.w	r3, r2, r3
 8004560:	43db      	mvns	r3, r3
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	4013      	ands	r3, r2
 8004566:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f003 0203 	and.w	r2, r3, #3
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	005b      	lsls	r3, r3, #1
 8004574:	fa02 f303 	lsl.w	r3, r2, r3
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	4313      	orrs	r3, r2
 800457c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d00b      	beq.n	80045a4 <HAL_GPIO_Init+0xd8>
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	2b02      	cmp	r3, #2
 8004592:	d007      	beq.n	80045a4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004598:	2b11      	cmp	r3, #17
 800459a:	d003      	beq.n	80045a4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	2b12      	cmp	r3, #18
 80045a2:	d130      	bne.n	8004606 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	2203      	movs	r2, #3
 80045b0:	fa02 f303 	lsl.w	r3, r2, r3
 80045b4:	43db      	mvns	r3, r3
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	4013      	ands	r3, r2
 80045ba:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	68da      	ldr	r2, [r3, #12]
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	005b      	lsls	r3, r3, #1
 80045c4:	fa02 f303 	lsl.w	r3, r2, r3
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045da:	2201      	movs	r2, #1
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	fa02 f303 	lsl.w	r3, r2, r3
 80045e2:	43db      	mvns	r3, r3
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	4013      	ands	r3, r2
 80045e8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	091b      	lsrs	r3, r3, #4
 80045f0:	f003 0201 	and.w	r2, r3, #1
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	fa02 f303 	lsl.w	r3, r2, r3
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	2b03      	cmp	r3, #3
 800460c:	d017      	beq.n	800463e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	005b      	lsls	r3, r3, #1
 8004618:	2203      	movs	r2, #3
 800461a:	fa02 f303 	lsl.w	r3, r2, r3
 800461e:	43db      	mvns	r3, r3
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	4013      	ands	r3, r2
 8004624:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	689a      	ldr	r2, [r3, #8]
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	fa02 f303 	lsl.w	r3, r2, r3
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	4313      	orrs	r3, r2
 8004636:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d07c      	beq.n	8004744 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800464a:	4a47      	ldr	r2, [pc, #284]	@ (8004768 <HAL_GPIO_Init+0x29c>)
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	089b      	lsrs	r3, r3, #2
 8004650:	3318      	adds	r3, #24
 8004652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004656:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	f003 0303 	and.w	r3, r3, #3
 800465e:	00db      	lsls	r3, r3, #3
 8004660:	220f      	movs	r2, #15
 8004662:	fa02 f303 	lsl.w	r3, r2, r3
 8004666:	43db      	mvns	r3, r3
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	4013      	ands	r3, r2
 800466c:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	0a9a      	lsrs	r2, r3, #10
 8004672:	4b3e      	ldr	r3, [pc, #248]	@ (800476c <HAL_GPIO_Init+0x2a0>)
 8004674:	4013      	ands	r3, r2
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	f002 0203 	and.w	r2, r2, #3
 800467c:	00d2      	lsls	r2, r2, #3
 800467e:	4093      	lsls	r3, r2
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	4313      	orrs	r3, r2
 8004684:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8004686:	4938      	ldr	r1, [pc, #224]	@ (8004768 <HAL_GPIO_Init+0x29c>)
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	089b      	lsrs	r3, r3, #2
 800468c:	3318      	adds	r3, #24
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004694:	4b34      	ldr	r3, [pc, #208]	@ (8004768 <HAL_GPIO_Init+0x29c>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	43db      	mvns	r3, r3
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	4013      	ands	r3, r2
 80046a2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d003      	beq.n	80046b8 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80046b8:	4a2b      	ldr	r2, [pc, #172]	@ (8004768 <HAL_GPIO_Init+0x29c>)
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80046be:	4b2a      	ldr	r3, [pc, #168]	@ (8004768 <HAL_GPIO_Init+0x29c>)
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	43db      	mvns	r3, r3
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	4013      	ands	r3, r2
 80046cc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	4313      	orrs	r3, r2
 80046e0:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80046e2:	4a21      	ldr	r2, [pc, #132]	@ (8004768 <HAL_GPIO_Init+0x29c>)
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80046e8:	4b1f      	ldr	r3, [pc, #124]	@ (8004768 <HAL_GPIO_Init+0x29c>)
 80046ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046ee:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	43db      	mvns	r3, r3
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	4013      	ands	r3, r2
 80046f8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d003      	beq.n	800470e <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4313      	orrs	r3, r2
 800470c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800470e:	4a16      	ldr	r2, [pc, #88]	@ (8004768 <HAL_GPIO_Init+0x29c>)
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8004716:	4b14      	ldr	r3, [pc, #80]	@ (8004768 <HAL_GPIO_Init+0x29c>)
 8004718:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800471c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	43db      	mvns	r3, r3
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	4013      	ands	r3, r2
 8004726:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d003      	beq.n	800473c <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	4313      	orrs	r3, r2
 800473a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800473c:	4a0a      	ldr	r2, [pc, #40]	@ (8004768 <HAL_GPIO_Init+0x29c>)
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	3301      	adds	r3, #1
 8004748:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	fa22 f303 	lsr.w	r3, r2, r3
 8004754:	2b00      	cmp	r3, #0
 8004756:	f47f aec1 	bne.w	80044dc <HAL_GPIO_Init+0x10>
  }
}
 800475a:	bf00      	nop
 800475c:	bf00      	nop
 800475e:	371c      	adds	r7, #28
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr
 8004768:	44022000 	.word	0x44022000
 800476c:	002f7f7f 	.word	0x002f7f7f

08004770 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	460b      	mov	r3, r1
 800477a:	807b      	strh	r3, [r7, #2]
 800477c:	4613      	mov	r3, r2
 800477e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004780:	787b      	ldrb	r3, [r7, #1]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004786:	887a      	ldrh	r2, [r7, #2]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800478c:	e002      	b.n	8004794 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800478e:	887a      	ldrh	r2, [r7, #2]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	460b      	mov	r3, r1
 80047aa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	695b      	ldr	r3, [r3, #20]
 80047b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80047b2:	887a      	ldrh	r2, [r7, #2]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	4013      	ands	r3, r2
 80047b8:	041a      	lsls	r2, r3, #16
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	43d9      	mvns	r1, r3
 80047be:	887b      	ldrh	r3, [r7, #2]
 80047c0:	400b      	ands	r3, r1
 80047c2:	431a      	orrs	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	619a      	str	r2, [r3, #24]
}
 80047c8:	bf00      	nop
 80047ca:	3714      	adds	r7, #20
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	4603      	mov	r3, r0
 80047dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80047de:	4b0f      	ldr	r3, [pc, #60]	@ (800481c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80047e0:	68da      	ldr	r2, [r3, #12]
 80047e2:	88fb      	ldrh	r3, [r7, #6]
 80047e4:	4013      	ands	r3, r2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d006      	beq.n	80047f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80047ea:	4a0c      	ldr	r2, [pc, #48]	@ (800481c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80047ec:	88fb      	ldrh	r3, [r7, #6]
 80047ee:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80047f0:	88fb      	ldrh	r3, [r7, #6]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f000 f814 	bl	8004820 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80047f8:	4b08      	ldr	r3, [pc, #32]	@ (800481c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80047fa:	691a      	ldr	r2, [r3, #16]
 80047fc:	88fb      	ldrh	r3, [r7, #6]
 80047fe:	4013      	ands	r3, r2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d006      	beq.n	8004812 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004804:	4a05      	ldr	r2, [pc, #20]	@ (800481c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004806:	88fb      	ldrh	r3, [r7, #6]
 8004808:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800480a:	88fb      	ldrh	r3, [r7, #6]
 800480c:	4618      	mov	r0, r3
 800480e:	f7fe fd57 	bl	80032c0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004812:	bf00      	nop
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	44022000 	.word	0x44022000

08004820 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	4603      	mov	r3, r0
 8004828:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800482a:	bf00      	nop
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
	...

08004838 <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e037      	b.n	80048be <HAL_NAND_Init+0x86>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d106      	bne.n	8004868 <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f7ff f940 	bl	8003ae8 <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	3304      	adds	r3, #4
 8004870:	4619      	mov	r1, r3
 8004872:	4610      	mov	r0, r2
 8004874:	f00a f8a0 	bl	800e9b8 <FMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6818      	ldr	r0, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	461a      	mov	r2, r3
 8004882:	68b9      	ldr	r1, [r7, #8]
 8004884:	f00a f8c2 	bl	800ea0c <FMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6818      	ldr	r0, [r3, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	461a      	mov	r2, r3
 8004892:	6879      	ldr	r1, [r7, #4]
 8004894:	f00a f8d7 	bl	800ea46 <FMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
  __FMC_NAND_ENABLE(hnand->Instance);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f042 0204 	orr.w	r2, r2, #4
 80048a6:	601a      	str	r2, [r3, #0]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80048a8:	4b07      	ldr	r3, [pc, #28]	@ (80048c8 <HAL_NAND_Init+0x90>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a06      	ldr	r2, [pc, #24]	@ (80048c8 <HAL_NAND_Init+0x90>)
 80048ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80048b2:	6013      	str	r3, [r2, #0]
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	47000400 	.word	0x47000400

080048cc <HAL_NAND_Reset>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Reset(NAND_HandleTypeDef *hnand)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  uint32_t deviceaddress;

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d101      	bne.n	80048e4 <HAL_NAND_Reset+0x18>
  {
    return HAL_BUSY;
 80048e0:	2302      	movs	r3, #2
 80048e2:	e027      	b.n	8004934 <HAL_NAND_Reset+0x68>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d120      	bne.n	8004932 <HAL_NAND_Reset+0x66>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d101      	bne.n	80048fe <HAL_NAND_Reset+0x32>
 80048fa:	2302      	movs	r3, #2
 80048fc:	e01a      	b.n	8004934 <HAL_NAND_Reset+0x68>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2202      	movs	r2, #2
 800490a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 800490e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004912:	60fb      	str	r3, [r7, #12]

    /* Send NAND reset command */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = 0xFF;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800491a:	22ff      	movs	r2, #255	@ 0xff
 800491c:	701a      	strb	r2, [r3, #0]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800492e:	2300      	movs	r3, #0
 8004930:	e000      	b.n	8004934 <HAL_NAND_Reset+0x68>
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1

}
 8004934:	4618      	mov	r0, r3
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <HAL_NAND_Read_Page_8b>:
  * @param  NumPageToRead  number of pages to read from block
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Read_Page_8b(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress,
                                        uint8_t *pBuffer, uint32_t NumPageToRead)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b08c      	sub	sp, #48	@ 0x30
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
 800494c:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t tickstart;
  uint32_t deviceaddress;
  uint32_t numpagesread = 0U;
 800494e:	2300      	movs	r3, #0
 8004950:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t nandaddress;
  uint32_t nbpages = NumPageToRead;
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	623b      	str	r3, [r7, #32]
  uint8_t *buff = pBuffer;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	61fb      	str	r3, [r7, #28]

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d101      	bne.n	800496a <HAL_NAND_Read_Page_8b+0x2a>
  {
    return HAL_BUSY;
 8004966:	2302      	movs	r3, #2
 8004968:	e140      	b.n	8004bec <HAL_NAND_Read_Page_8b+0x2ac>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b01      	cmp	r3, #1
 8004974:	f040 8139 	bne.w	8004bea <HAL_NAND_Read_Page_8b+0x2aa>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d101      	bne.n	8004986 <HAL_NAND_Read_Page_8b+0x46>
 8004982:	2302      	movs	r3, #2
 8004984:	e132      	b.n	8004bec <HAL_NAND_Read_Page_8b+0x2ac>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2202      	movs	r2, #2
 8004992:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 8004996:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800499a:	61bb      	str	r3, [r7, #24]

    /* NAND raw address calculation */
    nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	881b      	ldrh	r3, [r3, #0]
 80049a0:	4619      	mov	r1, r3
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	889b      	ldrh	r3, [r3, #4]
 80049a6:	461a      	mov	r2, r3
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	885b      	ldrh	r3, [r3, #2]
 80049ac:	4618      	mov	r0, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b2:	fb00 f303 	mul.w	r3, r0, r3
 80049b6:	4413      	add	r3, r2
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80049bc:	fb02 f303 	mul.w	r3, r2, r3
 80049c0:	440b      	add	r3, r1
 80049c2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Page(s) read loop */
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 80049c4:	e0fa      	b.n	8004bbc <HAL_NAND_Read_Page_8b+0x27c>
    {
      /* Send read page command sequence */
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049cc:	2200      	movs	r2, #0
 80049ce:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80049d0:	f3bf 8f4f 	dsb	sy
}
 80049d4:	bf00      	nop
      __DSB();

      /* Cards with page size <= 512 bytes */
      if ((hnand->Config.PageSize) <= 512U)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049de:	d848      	bhi.n	8004a72 <HAL_NAND_Read_Page_8b+0x132>
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80049e8:	fb02 f303 	mul.w	r3, r2, r3
 80049ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049f0:	d21a      	bcs.n	8004a28 <HAL_NAND_Read_Page_8b+0xe8>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049f8:	2200      	movs	r2, #0
 80049fa:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80049fc:	f3bf 8f4f 	dsb	sy
}
 8004a00:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a0a:	b2d2      	uxtb	r2, r2
 8004a0c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004a0e:	f3bf 8f4f 	dsb	sy
}
 8004a12:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8004a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a16:	0a1a      	lsrs	r2, r3, #8
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a1e:	b2d2      	uxtb	r2, r2
 8004a20:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004a22:	f3bf 8f4f 	dsb	sy
}
 8004a26:	e07d      	b.n	8004b24 <HAL_NAND_Read_Page_8b+0x1e4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a2e:	2200      	movs	r2, #0
 8004a30:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004a32:	f3bf 8f4f 	dsb	sy
}
 8004a36:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a40:	b2d2      	uxtb	r2, r2
 8004a42:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004a44:	f3bf 8f4f 	dsb	sy
}
 8004a48:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4c:	0a1a      	lsrs	r2, r3, #8
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a54:	b2d2      	uxtb	r2, r2
 8004a56:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004a58:	f3bf 8f4f 	dsb	sy
}
 8004a5c:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a60:	0c1a      	lsrs	r2, r3, #16
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a68:	b2d2      	uxtb	r2, r2
 8004a6a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004a6c:	f3bf 8f4f 	dsb	sy
}
 8004a70:	e058      	b.n	8004b24 <HAL_NAND_Read_Page_8b+0x1e4>
          __DSB();
        }
      }
      else /* (hnand->Config.PageSize) > 512 */
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004a7a:	fb02 f303 	mul.w	r3, r2, r3
 8004a7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a82:	d222      	bcs.n	8004aca <HAL_NAND_Read_Page_8b+0x18a>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004a8e:	f3bf 8f4f 	dsb	sy
}
 8004a92:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004a9e:	f3bf 8f4f 	dsb	sy
}
 8004aa2:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004aaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aac:	b2d2      	uxtb	r2, r2
 8004aae:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004ab0:	f3bf 8f4f 	dsb	sy
}
 8004ab4:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab8:	0a1a      	lsrs	r2, r3, #8
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ac0:	b2d2      	uxtb	r2, r2
 8004ac2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004ac4:	f3bf 8f4f 	dsb	sy
}
 8004ac8:	e02c      	b.n	8004b24 <HAL_NAND_Read_Page_8b+0x1e4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004ad4:	f3bf 8f4f 	dsb	sy
}
 8004ad8:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004ae4:	f3bf 8f4f 	dsb	sy
}
 8004ae8:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004af0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004af2:	b2d2      	uxtb	r2, r2
 8004af4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004af6:	f3bf 8f4f 	dsb	sy
}
 8004afa:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8004afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004afe:	0a1a      	lsrs	r2, r3, #8
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b06:	b2d2      	uxtb	r2, r2
 8004b08:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004b0a:	f3bf 8f4f 	dsb	sy
}
 8004b0e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8004b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b12:	0c1a      	lsrs	r2, r3, #16
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b1a:	b2d2      	uxtb	r2, r2
 8004b1c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004b1e:	f3bf 8f4f 	dsb	sy
}
 8004b22:	bf00      	nop
          __DSB();
        }
      }

      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b2a:	2230      	movs	r2, #48	@ 0x30
 8004b2c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004b2e:	f3bf 8f4f 	dsb	sy
}
 8004b32:	bf00      	nop
      __DSB();


      if (hnand->Config.ExtraCommandEnable == ENABLE)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d123      	bne.n	8004b86 <HAL_NAND_Read_Page_8b+0x246>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004b3e:	f7ff fa5f 	bl	8004000 <HAL_GetTick>
 8004b42:	6178      	str	r0, [r7, #20]

        /* Read status until NAND is ready */
        while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8004b44:	e011      	b.n	8004b6a <HAL_NAND_Read_Page_8b+0x22a>
        {
          if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 8004b46:	f7ff fa5b 	bl	8004000 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b54:	d909      	bls.n	8004b6a <HAL_NAND_Read_Page_8b+0x22a>
          {
            /* Update the NAND controller state */
            hnand->State = HAL_NAND_STATE_ERROR;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2203      	movs	r2, #3
 8004b5a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

            /* Process unlocked */
            __HAL_UNLOCK(hnand);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2020 	strb.w	r2, [r3, #32]

            return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e040      	b.n	8004bec <HAL_NAND_Read_Page_8b+0x2ac>
        while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f000 fd13 	bl	8005596 <HAL_NAND_Read_Status>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b40      	cmp	r3, #64	@ 0x40
 8004b74:	d1e7      	bne.n	8004b46 <HAL_NAND_Read_Page_8b+0x206>
          }
        }

        /* Go back to read mode */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = ((uint8_t)0x00);
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004b80:	f3bf 8f4f 	dsb	sy
}
 8004b84:	bf00      	nop
        __DSB();
      }

      /* Get Data into Buffer */
      for (index = 0U; index < hnand->Config.PageSize; index++)
 8004b86:	2300      	movs	r3, #0
 8004b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b8a:	e009      	b.n	8004ba0 <HAL_NAND_Read_Page_8b+0x260>
      {
        *buff = *(uint8_t *)deviceaddress;
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	781a      	ldrb	r2, [r3, #0]
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	701a      	strb	r2, [r3, #0]
        buff++;
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	3301      	adds	r3, #1
 8004b98:	61fb      	str	r3, [r7, #28]
      for (index = 0U; index < hnand->Config.PageSize; index++)
 8004b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d3f0      	bcc.n	8004b8c <HAL_NAND_Read_Page_8b+0x24c>
      }

      /* Increment read pages number */
      numpagesread++;
 8004baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bac:	3301      	adds	r3, #1
 8004bae:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Decrement pages to read */
      nbpages--;
 8004bb0:	6a3b      	ldr	r3, [r7, #32]
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	623b      	str	r3, [r7, #32]

      /* Increment the NAND address */
      nandaddress = (uint32_t)(nandaddress + 1U);
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb8:	3301      	adds	r3, #1
 8004bba:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8004bbc:	6a3b      	ldr	r3, [r7, #32]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d009      	beq.n	8004bd6 <HAL_NAND_Read_Page_8b+0x296>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004bca:	fb02 f303 	mul.w	r3, r2, r3
 8004bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	f4ff aef8 	bcc.w	80049c6 <HAL_NAND_Read_Page_8b+0x86>
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
 8004be8:	e000      	b.n	8004bec <HAL_NAND_Read_Page_8b+0x2ac>
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3730      	adds	r7, #48	@ 0x30
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_NAND_Write_Page_8b>:
  * @param  NumPageToWrite   number of pages to write to block
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Write_Page_8b(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress,
                                         const uint8_t *pBuffer, uint32_t NumPageToWrite)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b08c      	sub	sp, #48	@ 0x30
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
 8004c00:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t tickstart;
  uint32_t deviceaddress;
  uint32_t numpageswritten = 0U;
 8004c02:	2300      	movs	r3, #0
 8004c04:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t nandaddress;
  uint32_t nbpages = NumPageToWrite;
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	623b      	str	r3, [r7, #32]
  const uint8_t *buff = pBuffer;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	61fb      	str	r3, [r7, #28]

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d101      	bne.n	8004c1e <HAL_NAND_Write_Page_8b+0x2a>
  {
    return HAL_BUSY;
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	e13e      	b.n	8004e9c <HAL_NAND_Write_Page_8b+0x2a8>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	f040 8137 	bne.w	8004e9a <HAL_NAND_Write_Page_8b+0x2a6>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d101      	bne.n	8004c3a <HAL_NAND_Write_Page_8b+0x46>
 8004c36:	2302      	movs	r3, #2
 8004c38:	e130      	b.n	8004e9c <HAL_NAND_Write_Page_8b+0x2a8>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2202      	movs	r2, #2
 8004c46:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 8004c4a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004c4e:	61bb      	str	r3, [r7, #24]

    /* NAND raw address calculation */
    nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	881b      	ldrh	r3, [r3, #0]
 8004c54:	4619      	mov	r1, r3
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	889b      	ldrh	r3, [r3, #4]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	885b      	ldrh	r3, [r3, #2]
 8004c60:	4618      	mov	r0, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c66:	fb00 f303 	mul.w	r3, r0, r3
 8004c6a:	4413      	add	r3, r2
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004c70:	fb02 f303 	mul.w	r3, r2, r3
 8004c74:	440b      	add	r3, r1
 8004c76:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Page(s) write loop */
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8004c78:	e0f8      	b.n	8004e6c <HAL_NAND_Write_Page_8b+0x278>
    {
      /* Send write page command sequence */
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c80:	2200      	movs	r2, #0
 8004c82:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004c84:	f3bf 8f4f 	dsb	sy
}
 8004c88:	bf00      	nop
      __DSB();
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c90:	2280      	movs	r2, #128	@ 0x80
 8004c92:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004c94:	f3bf 8f4f 	dsb	sy
}
 8004c98:	bf00      	nop
      __DSB();

      /* Cards with page size <= 512 bytes */
      if ((hnand->Config.PageSize) <= 512U)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ca2:	d848      	bhi.n	8004d36 <HAL_NAND_Write_Page_8b+0x142>
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004cac:	fb02 f303 	mul.w	r3, r2, r3
 8004cb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cb4:	d21a      	bcs.n	8004cec <HAL_NAND_Write_Page_8b+0xf8>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004cc0:	f3bf 8f4f 	dsb	sy
}
 8004cc4:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ccc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cce:	b2d2      	uxtb	r2, r2
 8004cd0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004cd2:	f3bf 8f4f 	dsb	sy
}
 8004cd6:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cda:	0a1a      	lsrs	r2, r3, #8
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ce2:	b2d2      	uxtb	r2, r2
 8004ce4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004ce6:	f3bf 8f4f 	dsb	sy
}
 8004cea:	e07d      	b.n	8004de8 <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004cf6:	f3bf 8f4f 	dsb	sy
}
 8004cfa:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d04:	b2d2      	uxtb	r2, r2
 8004d06:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004d08:	f3bf 8f4f 	dsb	sy
}
 8004d0c:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d10:	0a1a      	lsrs	r2, r3, #8
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d18:	b2d2      	uxtb	r2, r2
 8004d1a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004d1c:	f3bf 8f4f 	dsb	sy
}
 8004d20:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8004d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d24:	0c1a      	lsrs	r2, r3, #16
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d2c:	b2d2      	uxtb	r2, r2
 8004d2e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004d30:	f3bf 8f4f 	dsb	sy
}
 8004d34:	e058      	b.n	8004de8 <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
      }
      else /* (hnand->Config.PageSize) > 512 */
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004d3e:	fb02 f303 	mul.w	r3, r2, r3
 8004d42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d46:	d222      	bcs.n	8004d8e <HAL_NAND_Write_Page_8b+0x19a>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d4e:	2200      	movs	r2, #0
 8004d50:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004d52:	f3bf 8f4f 	dsb	sy
}
 8004d56:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d5e:	2200      	movs	r2, #0
 8004d60:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004d62:	f3bf 8f4f 	dsb	sy
}
 8004d66:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d70:	b2d2      	uxtb	r2, r2
 8004d72:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004d74:	f3bf 8f4f 	dsb	sy
}
 8004d78:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7c:	0a1a      	lsrs	r2, r3, #8
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d84:	b2d2      	uxtb	r2, r2
 8004d86:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004d88:	f3bf 8f4f 	dsb	sy
}
 8004d8c:	e02c      	b.n	8004de8 <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d94:	2200      	movs	r2, #0
 8004d96:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004d98:	f3bf 8f4f 	dsb	sy
}
 8004d9c:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004da4:	2200      	movs	r2, #0
 8004da6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004da8:	f3bf 8f4f 	dsb	sy
}
 8004dac:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004db4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004db6:	b2d2      	uxtb	r2, r2
 8004db8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004dba:	f3bf 8f4f 	dsb	sy
}
 8004dbe:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc2:	0a1a      	lsrs	r2, r3, #8
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dca:	b2d2      	uxtb	r2, r2
 8004dcc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004dce:	f3bf 8f4f 	dsb	sy
}
 8004dd2:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd6:	0c1a      	lsrs	r2, r3, #16
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dde:	b2d2      	uxtb	r2, r2
 8004de0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004de2:	f3bf 8f4f 	dsb	sy
}
 8004de6:	bf00      	nop
          __DSB();
        }
      }

      /* Write data to memory */
      for (index = 0U; index < hnand->Config.PageSize; index++)
 8004de8:	2300      	movs	r3, #0
 8004dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dec:	e00c      	b.n	8004e08 <HAL_NAND_Write_Page_8b+0x214>
      {
        *(__IO uint8_t *)deviceaddress = *buff;
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	69fa      	ldr	r2, [r7, #28]
 8004df2:	7812      	ldrb	r2, [r2, #0]
 8004df4:	701a      	strb	r2, [r3, #0]
        buff++;
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("dsb 0xF":::"memory");
 8004dfc:	f3bf 8f4f 	dsb	sy
}
 8004e00:	bf00      	nop
      for (index = 0U; index < hnand->Config.PageSize; index++)
 8004e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e04:	3301      	adds	r3, #1
 8004e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d3ed      	bcc.n	8004dee <HAL_NAND_Write_Page_8b+0x1fa>
        __DSB();
      }

      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e18:	2210      	movs	r2, #16
 8004e1a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004e1c:	f3bf 8f4f 	dsb	sy
}
 8004e20:	bf00      	nop
      __DSB();

      /* Get tick */
      tickstart = HAL_GetTick();
 8004e22:	f7ff f8ed 	bl	8004000 <HAL_GetTick>
 8004e26:	6178      	str	r0, [r7, #20]

      /* Read status until NAND is ready */
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8004e28:	e011      	b.n	8004e4e <HAL_NAND_Write_Page_8b+0x25a>
      {
        if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 8004e2a:	f7ff f8e9 	bl	8004000 <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e38:	d909      	bls.n	8004e4e <HAL_NAND_Write_Page_8b+0x25a>
        {
          /* Update the NAND controller state */
          hnand->State = HAL_NAND_STATE_ERROR;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2203      	movs	r2, #3
 8004e3e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process unlocked */
          __HAL_UNLOCK(hnand);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e026      	b.n	8004e9c <HAL_NAND_Write_Page_8b+0x2a8>
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	f000 fba1 	bl	8005596 <HAL_NAND_Read_Status>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b40      	cmp	r3, #64	@ 0x40
 8004e58:	d1e7      	bne.n	8004e2a <HAL_NAND_Write_Page_8b+0x236>
        }
      }

      /* Increment written pages number */
      numpageswritten++;
 8004e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Decrement pages to write */
      nbpages--;
 8004e60:	6a3b      	ldr	r3, [r7, #32]
 8004e62:	3b01      	subs	r3, #1
 8004e64:	623b      	str	r3, [r7, #32]

      /* Increment the NAND address */
      nandaddress = (uint32_t)(nandaddress + 1U);
 8004e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e68:	3301      	adds	r3, #1
 8004e6a:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8004e6c:	6a3b      	ldr	r3, [r7, #32]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d009      	beq.n	8004e86 <HAL_NAND_Write_Page_8b+0x292>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004e7a:	fb02 f303 	mul.w	r3, r2, r3
 8004e7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e80:	429a      	cmp	r2, r3
 8004e82:	f4ff aefa 	bcc.w	8004c7a <HAL_NAND_Write_Page_8b+0x86>
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
 8004e98:	e000      	b.n	8004e9c <HAL_NAND_Write_Page_8b+0x2a8>
    return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3730      	adds	r7, #48	@ 0x30
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <HAL_NAND_Read_SpareArea_8b>:
  * @param  NumSpareAreaToRead Number of spare area to read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Read_SpareArea_8b(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress,
                                             uint8_t *pBuffer, uint32_t NumSpareAreaToRead)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b08c      	sub	sp, #48	@ 0x30
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]
 8004eb0:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t tickstart;
  uint32_t deviceaddress;
  uint32_t numsparearearead = 0U;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t nandaddress;
  uint32_t columnaddress;
  uint32_t nbspare = NumSpareAreaToRead;
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	623b      	str	r3, [r7, #32]
  uint8_t *buff = pBuffer;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	61fb      	str	r3, [r7, #28]

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d101      	bne.n	8004ece <HAL_NAND_Read_SpareArea_8b+0x2a>
  {
    return HAL_BUSY;
 8004eca:	2302      	movs	r3, #2
 8004ecc:	e151      	b.n	8005172 <HAL_NAND_Read_SpareArea_8b+0x2ce>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	f040 814a 	bne.w	8005170 <HAL_NAND_Read_SpareArea_8b+0x2cc>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d101      	bne.n	8004eea <HAL_NAND_Read_SpareArea_8b+0x46>
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	e143      	b.n	8005172 <HAL_NAND_Read_SpareArea_8b+0x2ce>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2202      	movs	r2, #2
 8004ef6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 8004efa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004efe:	61bb      	str	r3, [r7, #24]

    /* NAND raw address calculation */
    nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	881b      	ldrh	r3, [r3, #0]
 8004f04:	4619      	mov	r1, r3
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	889b      	ldrh	r3, [r3, #4]
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	885b      	ldrh	r3, [r3, #2]
 8004f10:	4618      	mov	r0, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f16:	fb00 f303 	mul.w	r3, r0, r3
 8004f1a:	4413      	add	r3, r2
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004f20:	fb02 f303 	mul.w	r3, r2, r3
 8004f24:	440b      	add	r3, r1
 8004f26:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Column in page address */
    columnaddress = COLUMN_ADDRESS(hnand);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2c:	617b      	str	r3, [r7, #20]

    /* Spare area(s) read loop */
    while ((nbspare != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8004f2e:	e108      	b.n	8005142 <HAL_NAND_Read_SpareArea_8b+0x29e>
    {
      /* Cards with page size <= 512 bytes */
      if ((hnand->Config.PageSize) <= 512U)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f38:	d850      	bhi.n	8004fdc <HAL_NAND_Read_SpareArea_8b+0x138>
      {
        /* Send read spare area command sequence */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_C;
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f40:	2250      	movs	r2, #80	@ 0x50
 8004f42:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004f44:	f3bf 8f4f 	dsb	sy
}
 8004f48:	bf00      	nop
        __DSB();

        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004f52:	fb02 f303 	mul.w	r3, r2, r3
 8004f56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f5a:	d21a      	bcs.n	8004f92 <HAL_NAND_Read_SpareArea_8b+0xee>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f62:	2200      	movs	r2, #0
 8004f64:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004f66:	f3bf 8f4f 	dsb	sy
}
 8004f6a:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f74:	b2d2      	uxtb	r2, r2
 8004f76:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004f78:	f3bf 8f4f 	dsb	sy
}
 8004f7c:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f80:	0a1a      	lsrs	r2, r3, #8
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f88:	b2d2      	uxtb	r2, r2
 8004f8a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004f8c:	f3bf 8f4f 	dsb	sy
}
 8004f90:	e08b      	b.n	80050aa <HAL_NAND_Read_SpareArea_8b+0x206>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f98:	2200      	movs	r2, #0
 8004f9a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004f9c:	f3bf 8f4f 	dsb	sy
}
 8004fa0:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004faa:	b2d2      	uxtb	r2, r2
 8004fac:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004fae:	f3bf 8f4f 	dsb	sy
}
 8004fb2:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb6:	0a1a      	lsrs	r2, r3, #8
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fbe:	b2d2      	uxtb	r2, r2
 8004fc0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004fc2:	f3bf 8f4f 	dsb	sy
}
 8004fc6:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8004fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fca:	0c1a      	lsrs	r2, r3, #16
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fd2:	b2d2      	uxtb	r2, r2
 8004fd4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004fd6:	f3bf 8f4f 	dsb	sy
}
 8004fda:	e066      	b.n	80050aa <HAL_NAND_Read_SpareArea_8b+0x206>
        }
      }
      else /* (hnand->Config.PageSize) > 512 */
      {
        /* Send read spare area command sequence */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004fe6:	f3bf 8f4f 	dsb	sy
}
 8004fea:	bf00      	nop
        __DSB();

        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004ff4:	fb02 f303 	mul.w	r3, r2, r3
 8004ff8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ffc:	d225      	bcs.n	800504a <HAL_NAND_Read_SpareArea_8b+0x1a6>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnaddress);
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	b2d2      	uxtb	r2, r2
 8005008:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800500a:	f3bf 8f4f 	dsb	sy
}
 800500e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnaddress);
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	0a1a      	lsrs	r2, r3, #8
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800501a:	b2d2      	uxtb	r2, r2
 800501c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800501e:	f3bf 8f4f 	dsb	sy
}
 8005022:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800502a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800502c:	b2d2      	uxtb	r2, r2
 800502e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005030:	f3bf 8f4f 	dsb	sy
}
 8005034:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005038:	0a1a      	lsrs	r2, r3, #8
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005040:	b2d2      	uxtb	r2, r2
 8005042:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005044:	f3bf 8f4f 	dsb	sy
}
 8005048:	e02f      	b.n	80050aa <HAL_NAND_Read_SpareArea_8b+0x206>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnaddress);
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	b2d2      	uxtb	r2, r2
 8005054:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005056:	f3bf 8f4f 	dsb	sy
}
 800505a:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnaddress);
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	0a1a      	lsrs	r2, r3, #8
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005066:	b2d2      	uxtb	r2, r2
 8005068:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800506a:	f3bf 8f4f 	dsb	sy
}
 800506e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005076:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005078:	b2d2      	uxtb	r2, r2
 800507a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800507c:	f3bf 8f4f 	dsb	sy
}
 8005080:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005084:	0a1a      	lsrs	r2, r3, #8
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800508c:	b2d2      	uxtb	r2, r2
 800508e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005090:	f3bf 8f4f 	dsb	sy
}
 8005094:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8005096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005098:	0c1a      	lsrs	r2, r3, #16
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050a0:	b2d2      	uxtb	r2, r2
 80050a2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80050a4:	f3bf 8f4f 	dsb	sy
}
 80050a8:	bf00      	nop
          __DSB();
        }
      }

      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_TRUE1;
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050b0:	2230      	movs	r2, #48	@ 0x30
 80050b2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80050b4:	f3bf 8f4f 	dsb	sy
}
 80050b8:	bf00      	nop
      __DSB();

      if (hnand->Config.ExtraCommandEnable == ENABLE)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d123      	bne.n	800510c <HAL_NAND_Read_SpareArea_8b+0x268>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80050c4:	f7fe ff9c 	bl	8004000 <HAL_GetTick>
 80050c8:	6138      	str	r0, [r7, #16]

        /* Read status until NAND is ready */
        while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 80050ca:	e011      	b.n	80050f0 <HAL_NAND_Read_SpareArea_8b+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 80050cc:	f7fe ff98 	bl	8004000 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050da:	d909      	bls.n	80050f0 <HAL_NAND_Read_SpareArea_8b+0x24c>
          {
            /* Update the NAND controller state */
            hnand->State = HAL_NAND_STATE_ERROR;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2203      	movs	r2, #3
 80050e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

            /* Process unlocked */
            __HAL_UNLOCK(hnand);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 2020 	strb.w	r2, [r3, #32]

            return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e040      	b.n	8005172 <HAL_NAND_Read_SpareArea_8b+0x2ce>
        while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f000 fa50 	bl	8005596 <HAL_NAND_Read_Status>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b40      	cmp	r3, #64	@ 0x40
 80050fa:	d1e7      	bne.n	80050cc <HAL_NAND_Read_SpareArea_8b+0x228>
          }
        }

        /* Go back to read mode */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = ((uint8_t)0x00);
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005102:	2200      	movs	r2, #0
 8005104:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005106:	f3bf 8f4f 	dsb	sy
}
 800510a:	bf00      	nop
        __DSB();
      }

      /* Get Data into Buffer */
      for (index = 0U; index < hnand->Config.SpareAreaSize; index++)
 800510c:	2300      	movs	r3, #0
 800510e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005110:	e009      	b.n	8005126 <HAL_NAND_Read_SpareArea_8b+0x282>
      {
        *buff = *(uint8_t *)deviceaddress;
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	781a      	ldrb	r2, [r3, #0]
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	701a      	strb	r2, [r3, #0]
        buff++;
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	3301      	adds	r3, #1
 800511e:	61fb      	str	r3, [r7, #28]
      for (index = 0U; index < hnand->Config.SpareAreaSize; index++)
 8005120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005122:	3301      	adds	r3, #1
 8005124:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800512a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800512c:	429a      	cmp	r2, r3
 800512e:	d3f0      	bcc.n	8005112 <HAL_NAND_Read_SpareArea_8b+0x26e>
      }

      /* Increment read spare areas number */
      numsparearearead++;
 8005130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005132:	3301      	adds	r3, #1
 8005134:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Decrement spare areas to read */
      nbspare--;
 8005136:	6a3b      	ldr	r3, [r7, #32]
 8005138:	3b01      	subs	r3, #1
 800513a:	623b      	str	r3, [r7, #32]

      /* Increment the NAND address */
      nandaddress = (uint32_t)(nandaddress + 1U);
 800513c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513e:	3301      	adds	r3, #1
 8005140:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((nbspare != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8005142:	6a3b      	ldr	r3, [r7, #32]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d009      	beq.n	800515c <HAL_NAND_Read_SpareArea_8b+0x2b8>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005150:	fb02 f303 	mul.w	r3, r2, r3
 8005154:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005156:	429a      	cmp	r2, r3
 8005158:	f4ff aeea 	bcc.w	8004f30 <HAL_NAND_Read_SpareArea_8b+0x8c>
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800516c:	2300      	movs	r3, #0
 800516e:	e000      	b.n	8005172 <HAL_NAND_Read_SpareArea_8b+0x2ce>
    return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
}
 8005172:	4618      	mov	r0, r3
 8005174:	3730      	adds	r7, #48	@ 0x30
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <HAL_NAND_Write_SpareArea_8b>:
  * @param  NumSpareAreaTowrite   number of spare areas to write to block
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Write_SpareArea_8b(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress,
                                              const uint8_t *pBuffer, uint32_t NumSpareAreaTowrite)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b08c      	sub	sp, #48	@ 0x30
 800517e:	af00      	add	r7, sp, #0
 8005180:	60f8      	str	r0, [r7, #12]
 8005182:	60b9      	str	r1, [r7, #8]
 8005184:	607a      	str	r2, [r7, #4]
 8005186:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t tickstart;
  uint32_t deviceaddress;
  uint32_t numspareareawritten = 0U;
 8005188:	2300      	movs	r3, #0
 800518a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t nandaddress;
  uint32_t columnaddress;
  uint32_t nbspare = NumSpareAreaTowrite;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	623b      	str	r3, [r7, #32]
  const uint8_t *buff = pBuffer;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	61fb      	str	r3, [r7, #28]

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800519a:	b2db      	uxtb	r3, r3
 800519c:	2b02      	cmp	r3, #2
 800519e:	d101      	bne.n	80051a4 <HAL_NAND_Write_SpareArea_8b+0x2a>
  {
    return HAL_BUSY;
 80051a0:	2302      	movs	r3, #2
 80051a2:	e157      	b.n	8005454 <HAL_NAND_Write_SpareArea_8b+0x2da>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	f040 8150 	bne.w	8005452 <HAL_NAND_Write_SpareArea_8b+0x2d8>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d101      	bne.n	80051c0 <HAL_NAND_Write_SpareArea_8b+0x46>
 80051bc:	2302      	movs	r3, #2
 80051be:	e149      	b.n	8005454 <HAL_NAND_Write_SpareArea_8b+0x2da>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2202      	movs	r2, #2
 80051cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 80051d0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80051d4:	61bb      	str	r3, [r7, #24]

    /* Page address calculation */
    nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	881b      	ldrh	r3, [r3, #0]
 80051da:	4619      	mov	r1, r3
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	889b      	ldrh	r3, [r3, #4]
 80051e0:	461a      	mov	r2, r3
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	885b      	ldrh	r3, [r3, #2]
 80051e6:	4618      	mov	r0, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ec:	fb00 f303 	mul.w	r3, r0, r3
 80051f0:	4413      	add	r3, r2
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80051f6:	fb02 f303 	mul.w	r3, r2, r3
 80051fa:	440b      	add	r3, r1
 80051fc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Column in page address */
    columnaddress = COLUMN_ADDRESS(hnand);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005202:	617b      	str	r3, [r7, #20]

    /* Spare area(s) write loop */
    while ((nbspare != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8005204:	e10e      	b.n	8005424 <HAL_NAND_Write_SpareArea_8b+0x2aa>
    {
      /* Cards with page size <= 512 bytes */
      if ((hnand->Config.PageSize) <= 512U)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800520e:	d858      	bhi.n	80052c2 <HAL_NAND_Write_SpareArea_8b+0x148>
      {
        /* Send write Spare area command sequence */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_C;
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005216:	2250      	movs	r2, #80	@ 0x50
 8005218:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800521a:	f3bf 8f4f 	dsb	sy
}
 800521e:	bf00      	nop
        __DSB();
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005226:	2280      	movs	r2, #128	@ 0x80
 8005228:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800522a:	f3bf 8f4f 	dsb	sy
}
 800522e:	bf00      	nop
        __DSB();

        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005238:	fb02 f303 	mul.w	r3, r2, r3
 800523c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005240:	d21a      	bcs.n	8005278 <HAL_NAND_Write_SpareArea_8b+0xfe>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005248:	2200      	movs	r2, #0
 800524a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800524c:	f3bf 8f4f 	dsb	sy
}
 8005250:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005258:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800525a:	b2d2      	uxtb	r2, r2
 800525c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800525e:	f3bf 8f4f 	dsb	sy
}
 8005262:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005266:	0a1a      	lsrs	r2, r3, #8
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800526e:	b2d2      	uxtb	r2, r2
 8005270:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005272:	f3bf 8f4f 	dsb	sy
}
 8005276:	e093      	b.n	80053a0 <HAL_NAND_Write_SpareArea_8b+0x226>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800527e:	2200      	movs	r2, #0
 8005280:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005282:	f3bf 8f4f 	dsb	sy
}
 8005286:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800528e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005290:	b2d2      	uxtb	r2, r2
 8005292:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005294:	f3bf 8f4f 	dsb	sy
}
 8005298:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 800529a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529c:	0a1a      	lsrs	r2, r3, #8
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052a4:	b2d2      	uxtb	r2, r2
 80052a6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80052a8:	f3bf 8f4f 	dsb	sy
}
 80052ac:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 80052ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b0:	0c1a      	lsrs	r2, r3, #16
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052b8:	b2d2      	uxtb	r2, r2
 80052ba:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80052bc:	f3bf 8f4f 	dsb	sy
}
 80052c0:	e06e      	b.n	80053a0 <HAL_NAND_Write_SpareArea_8b+0x226>
        }
      }
      else /* (hnand->Config.PageSize) > 512 */
      {
        /* Send write Spare area command sequence */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052c8:	2200      	movs	r2, #0
 80052ca:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80052cc:	f3bf 8f4f 	dsb	sy
}
 80052d0:	bf00      	nop
        __DSB();
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052d8:	2280      	movs	r2, #128	@ 0x80
 80052da:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80052dc:	f3bf 8f4f 	dsb	sy
}
 80052e0:	bf00      	nop
        __DSB();

        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80052ea:	fb02 f303 	mul.w	r3, r2, r3
 80052ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052f2:	d225      	bcs.n	8005340 <HAL_NAND_Write_SpareArea_8b+0x1c6>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnaddress);
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	b2d2      	uxtb	r2, r2
 80052fe:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005300:	f3bf 8f4f 	dsb	sy
}
 8005304:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnaddress);
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	0a1a      	lsrs	r2, r3, #8
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005310:	b2d2      	uxtb	r2, r2
 8005312:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005314:	f3bf 8f4f 	dsb	sy
}
 8005318:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005320:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005322:	b2d2      	uxtb	r2, r2
 8005324:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005326:	f3bf 8f4f 	dsb	sy
}
 800532a:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 800532c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532e:	0a1a      	lsrs	r2, r3, #8
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005336:	b2d2      	uxtb	r2, r2
 8005338:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800533a:	f3bf 8f4f 	dsb	sy
}
 800533e:	e02f      	b.n	80053a0 <HAL_NAND_Write_SpareArea_8b+0x226>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnaddress);
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	b2d2      	uxtb	r2, r2
 800534a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800534c:	f3bf 8f4f 	dsb	sy
}
 8005350:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnaddress);
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	0a1a      	lsrs	r2, r3, #8
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800535c:	b2d2      	uxtb	r2, r2
 800535e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005360:	f3bf 8f4f 	dsb	sy
}
 8005364:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800536c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800536e:	b2d2      	uxtb	r2, r2
 8005370:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005372:	f3bf 8f4f 	dsb	sy
}
 8005376:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537a:	0a1a      	lsrs	r2, r3, #8
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005382:	b2d2      	uxtb	r2, r2
 8005384:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005386:	f3bf 8f4f 	dsb	sy
}
 800538a:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 800538c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538e:	0c1a      	lsrs	r2, r3, #16
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005396:	b2d2      	uxtb	r2, r2
 8005398:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800539a:	f3bf 8f4f 	dsb	sy
}
 800539e:	bf00      	nop
          __DSB();
        }
      }

      /* Write data to memory */
      for (index = 0U; index < hnand->Config.SpareAreaSize; index++)
 80053a0:	2300      	movs	r3, #0
 80053a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053a4:	e00c      	b.n	80053c0 <HAL_NAND_Write_SpareArea_8b+0x246>
      {
        *(__IO uint8_t *)deviceaddress = *buff;
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	69fa      	ldr	r2, [r7, #28]
 80053aa:	7812      	ldrb	r2, [r2, #0]
 80053ac:	701a      	strb	r2, [r3, #0]
        buff++;
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	3301      	adds	r3, #1
 80053b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("dsb 0xF":::"memory");
 80053b4:	f3bf 8f4f 	dsb	sy
}
 80053b8:	bf00      	nop
      for (index = 0U; index < hnand->Config.SpareAreaSize; index++)
 80053ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053bc:	3301      	adds	r3, #1
 80053be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d3ed      	bcc.n	80053a6 <HAL_NAND_Write_SpareArea_8b+0x22c>
        __DSB();
      }

      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053d0:	2210      	movs	r2, #16
 80053d2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80053d4:	f3bf 8f4f 	dsb	sy
}
 80053d8:	bf00      	nop
      __DSB();

      /* Get tick */
      tickstart = HAL_GetTick();
 80053da:	f7fe fe11 	bl	8004000 <HAL_GetTick>
 80053de:	6138      	str	r0, [r7, #16]

      /* Read status until NAND is ready */
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 80053e0:	e011      	b.n	8005406 <HAL_NAND_Write_SpareArea_8b+0x28c>
      {
        if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 80053e2:	f7fe fe0d 	bl	8004000 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80053f0:	d909      	bls.n	8005406 <HAL_NAND_Write_SpareArea_8b+0x28c>
        {
          /* Update the NAND controller state */
          hnand->State = HAL_NAND_STATE_ERROR;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2203      	movs	r2, #3
 80053f6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process unlocked */
          __HAL_UNLOCK(hnand);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e026      	b.n	8005454 <HAL_NAND_Write_SpareArea_8b+0x2da>
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f000 f8c5 	bl	8005596 <HAL_NAND_Read_Status>
 800540c:	4603      	mov	r3, r0
 800540e:	2b40      	cmp	r3, #64	@ 0x40
 8005410:	d1e7      	bne.n	80053e2 <HAL_NAND_Write_SpareArea_8b+0x268>
        }
      }

      /* Increment written spare areas number */
      numspareareawritten++;
 8005412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005414:	3301      	adds	r3, #1
 8005416:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Decrement spare areas to write */
      nbspare--;
 8005418:	6a3b      	ldr	r3, [r7, #32]
 800541a:	3b01      	subs	r3, #1
 800541c:	623b      	str	r3, [r7, #32]

      /* Increment the NAND address */
      nandaddress = (uint32_t)(nandaddress + 1U);
 800541e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005420:	3301      	adds	r3, #1
 8005422:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((nbspare != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8005424:	6a3b      	ldr	r3, [r7, #32]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d009      	beq.n	800543e <HAL_NAND_Write_SpareArea_8b+0x2c4>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005432:	fb02 f303 	mul.w	r3, r2, r3
 8005436:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005438:	429a      	cmp	r2, r3
 800543a:	f4ff aee4 	bcc.w	8005206 <HAL_NAND_Write_SpareArea_8b+0x8c>
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800544e:	2300      	movs	r3, #0
 8005450:	e000      	b.n	8005454 <HAL_NAND_Write_SpareArea_8b+0x2da>
    return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
}
 8005454:	4618      	mov	r0, r3
 8005456:	3730      	adds	r7, #48	@ 0x30
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <HAL_NAND_Erase_Block>:
  *                the configuration information for NAND module.
  * @param  pAddress  pointer to NAND address structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Erase_Block(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress)
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  uint32_t deviceaddress;

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b02      	cmp	r3, #2
 8005470:	d101      	bne.n	8005476 <HAL_NAND_Erase_Block+0x1a>
  {
    return HAL_BUSY;
 8005472:	2302      	movs	r3, #2
 8005474:	e089      	b.n	800558a <HAL_NAND_Erase_Block+0x12e>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b01      	cmp	r3, #1
 8005480:	f040 8082 	bne.w	8005588 <HAL_NAND_Erase_Block+0x12c>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f893 3020 	ldrb.w	r3, [r3, #32]
 800548a:	2b01      	cmp	r3, #1
 800548c:	d101      	bne.n	8005492 <HAL_NAND_Erase_Block+0x36>
 800548e:	2302      	movs	r3, #2
 8005490:	e07b      	b.n	800558a <HAL_NAND_Erase_Block+0x12e>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2202      	movs	r2, #2
 800549e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 80054a2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80054a6:	60fb      	str	r3, [r7, #12]

    /* Send Erase block command sequence */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE0;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054ae:	2260      	movs	r2, #96	@ 0x60
 80054b0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80054b2:	f3bf 8f4f 	dsb	sy
}
 80054b6:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	881b      	ldrh	r3, [r3, #0]
 80054bc:	b2da      	uxtb	r2, r3
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	889b      	ldrh	r3, [r3, #4]
 80054c2:	4619      	mov	r1, r3
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	885b      	ldrh	r3, [r3, #2]
 80054c8:	4618      	mov	r0, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ce:	fb00 f303 	mul.w	r3, r0, r3
 80054d2:	440b      	add	r3, r1
 80054d4:	b2d9      	uxtb	r1, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	fb11 f303 	smulbb	r3, r1, r3
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	68f9      	ldr	r1, [r7, #12]
 80054e4:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80054e8:	4413      	add	r3, r2
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	700b      	strb	r3, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80054ee:	f3bf 8f4f 	dsb	sy
}
 80054f2:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	881b      	ldrh	r3, [r3, #0]
 80054f8:	4619      	mov	r1, r3
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	889b      	ldrh	r3, [r3, #4]
 80054fe:	461a      	mov	r2, r3
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	885b      	ldrh	r3, [r3, #2]
 8005504:	4618      	mov	r0, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800550a:	fb00 f303 	mul.w	r3, r0, r3
 800550e:	4413      	add	r3, r2
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005514:	fb02 f303 	mul.w	r3, r2, r3
 8005518:	440b      	add	r3, r1
 800551a:	0a1a      	lsrs	r2, r3, #8
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005522:	b2d2      	uxtb	r2, r2
 8005524:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005526:	f3bf 8f4f 	dsb	sy
}
 800552a:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	881b      	ldrh	r3, [r3, #0]
 8005530:	4619      	mov	r1, r3
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	889b      	ldrh	r3, [r3, #4]
 8005536:	461a      	mov	r2, r3
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	885b      	ldrh	r3, [r3, #2]
 800553c:	4618      	mov	r0, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005542:	fb00 f303 	mul.w	r3, r0, r3
 8005546:	4413      	add	r3, r2
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800554c:	fb02 f303 	mul.w	r3, r2, r3
 8005550:	440b      	add	r3, r1
 8005552:	0c1a      	lsrs	r2, r3, #16
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800555a:	b2d2      	uxtb	r2, r2
 800555c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800555e:	f3bf 8f4f 	dsb	sy
}
 8005562:	bf00      	nop
    __DSB();

    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE1;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800556a:	22d0      	movs	r2, #208	@ 0xd0
 800556c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800556e:	f3bf 8f4f 	dsb	sy
}
 8005572:	bf00      	nop
    __DSB();

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005584:	2300      	movs	r3, #0
 8005586:	e000      	b.n	800558a <HAL_NAND_Erase_Block+0x12e>
    return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
}
 800558a:	4618      	mov	r0, r3
 800558c:	3714      	adds	r7, #20
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr

08005596 <HAL_NAND_Read_Status>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval NAND status
  */
uint32_t HAL_NAND_Read_Status(const NAND_HandleTypeDef *hnand)
{
 8005596:	b480      	push	{r7}
 8005598:	b085      	sub	sp, #20
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  uint32_t data;
  uint32_t deviceaddress;
  UNUSED(hnand);

  /* Identify the device address */
  deviceaddress = NAND_DEVICE;
 800559e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80055a2:	60fb      	str	r3, [r7, #12]

  /* Send Read status operation command */
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_STATUS;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055aa:	2270      	movs	r2, #112	@ 0x70
 80055ac:	701a      	strb	r2, [r3, #0]

  /* Read status register data */
  data = *(__IO uint8_t *)deviceaddress;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	60bb      	str	r3, [r7, #8]

  /* Return the status */
  if ((data & NAND_ERROR) == NAND_ERROR)
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	f003 0301 	and.w	r3, r3, #1
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d001      	beq.n	80055c4 <HAL_NAND_Read_Status+0x2e>
  {
    return NAND_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e007      	b.n	80055d4 <HAL_NAND_Read_Status+0x3e>
  }
  else if ((data & NAND_READY) == NAND_READY)
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <HAL_NAND_Read_Status+0x3c>
  {
    return NAND_READY;
 80055ce:	2340      	movs	r3, #64	@ 0x40
 80055d0:	e000      	b.n	80055d4 <HAL_NAND_Read_Status+0x3e>
  }
  else
  {
    return NAND_BUSY;
 80055d2:	2300      	movs	r3, #0
  }
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3714      	adds	r7, #20
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b088      	sub	sp, #32
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d102      	bne.n	80055f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	f000 bc28 	b.w	8005e44 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055f4:	4b94      	ldr	r3, [pc, #592]	@ (8005848 <HAL_RCC_OscConfig+0x268>)
 80055f6:	69db      	ldr	r3, [r3, #28]
 80055f8:	f003 0318 	and.w	r3, r3, #24
 80055fc:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80055fe:	4b92      	ldr	r3, [pc, #584]	@ (8005848 <HAL_RCC_OscConfig+0x268>)
 8005600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005602:	f003 0303 	and.w	r3, r3, #3
 8005606:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0310 	and.w	r3, r3, #16
 8005610:	2b00      	cmp	r3, #0
 8005612:	d05b      	beq.n	80056cc <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	2b08      	cmp	r3, #8
 8005618:	d005      	beq.n	8005626 <HAL_RCC_OscConfig+0x46>
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	2b18      	cmp	r3, #24
 800561e:	d114      	bne.n	800564a <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	2b02      	cmp	r3, #2
 8005624:	d111      	bne.n	800564a <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	69db      	ldr	r3, [r3, #28]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d102      	bne.n	8005634 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	f000 bc08 	b.w	8005e44 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8005634:	4b84      	ldr	r3, [pc, #528]	@ (8005848 <HAL_RCC_OscConfig+0x268>)
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a1b      	ldr	r3, [r3, #32]
 8005640:	041b      	lsls	r3, r3, #16
 8005642:	4981      	ldr	r1, [pc, #516]	@ (8005848 <HAL_RCC_OscConfig+0x268>)
 8005644:	4313      	orrs	r3, r2
 8005646:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8005648:	e040      	b.n	80056cc <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d023      	beq.n	800569a <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005652:	4b7d      	ldr	r3, [pc, #500]	@ (8005848 <HAL_RCC_OscConfig+0x268>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a7c      	ldr	r2, [pc, #496]	@ (8005848 <HAL_RCC_OscConfig+0x268>)
 8005658:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800565c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800565e:	f7fe fccf 	bl	8004000 <HAL_GetTick>
 8005662:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005664:	e008      	b.n	8005678 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8005666:	f7fe fccb 	bl	8004000 <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	2b02      	cmp	r3, #2
 8005672:	d901      	bls.n	8005678 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e3e5      	b.n	8005e44 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005678:	4b73      	ldr	r3, [pc, #460]	@ (8005848 <HAL_RCC_OscConfig+0x268>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005680:	2b00      	cmp	r3, #0
 8005682:	d0f0      	beq.n	8005666 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8005684:	4b70      	ldr	r3, [pc, #448]	@ (8005848 <HAL_RCC_OscConfig+0x268>)
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a1b      	ldr	r3, [r3, #32]
 8005690:	041b      	lsls	r3, r3, #16
 8005692:	496d      	ldr	r1, [pc, #436]	@ (8005848 <HAL_RCC_OscConfig+0x268>)
 8005694:	4313      	orrs	r3, r2
 8005696:	618b      	str	r3, [r1, #24]
 8005698:	e018      	b.n	80056cc <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800569a:	4b6b      	ldr	r3, [pc, #428]	@ (8005848 <HAL_RCC_OscConfig+0x268>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a6a      	ldr	r2, [pc, #424]	@ (8005848 <HAL_RCC_OscConfig+0x268>)
 80056a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a6:	f7fe fcab 	bl	8004000 <HAL_GetTick>
 80056aa:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80056ac:	e008      	b.n	80056c0 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80056ae:	f7fe fca7 	bl	8004000 <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d901      	bls.n	80056c0 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e3c1      	b.n	8005e44 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80056c0:	4b61      	ldr	r3, [pc, #388]	@ (8005848 <HAL_RCC_OscConfig+0x268>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1f0      	bne.n	80056ae <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0301 	and.w	r3, r3, #1
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f000 80a0 	beq.w	800581a <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	2b10      	cmp	r3, #16
 80056de:	d005      	beq.n	80056ec <HAL_RCC_OscConfig+0x10c>
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	2b18      	cmp	r3, #24
 80056e4:	d109      	bne.n	80056fa <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	2b03      	cmp	r3, #3
 80056ea:	d106      	bne.n	80056fa <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f040 8092 	bne.w	800581a <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e3a4      	b.n	8005e44 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005702:	d106      	bne.n	8005712 <HAL_RCC_OscConfig+0x132>
 8005704:	4b50      	ldr	r3, [pc, #320]	@ (8005848 <HAL_RCC_OscConfig+0x268>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a4f      	ldr	r2, [pc, #316]	@ (8005848 <HAL_RCC_OscConfig+0x268>)
 800570a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800570e:	6013      	str	r3, [r2, #0]
 8005710:	e058      	b.n	80057c4 <HAL_RCC_OscConfig+0x1e4>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d112      	bne.n	8005740 <HAL_RCC_OscConfig+0x160>
 800571a:	4b4b      	ldr	r3, [pc, #300]	@ (8005848 <HAL_RCC_OscConfig+0x268>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a4a      	ldr	r2, [pc, #296]	@ (8005848 <HAL_RCC_OscConfig+0x268>)
 8005720:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005724:	6013      	str	r3, [r2, #0]
 8005726:	4b48      	ldr	r3, [pc, #288]	@ (8005848 <HAL_RCC_OscConfig+0x268>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a47      	ldr	r2, [pc, #284]	@ (8005848 <HAL_RCC_OscConfig+0x268>)
 800572c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005730:	6013      	str	r3, [r2, #0]
 8005732:	4b45      	ldr	r3, [pc, #276]	@ (8005848 <HAL_RCC_OscConfig+0x268>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a44      	ldr	r2, [pc, #272]	@ (8005848 <HAL_RCC_OscConfig+0x268>)
 8005738:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800573c:	6013      	str	r3, [r2, #0]
 800573e:	e041      	b.n	80057c4 <HAL_RCC_OscConfig+0x1e4>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005748:	d112      	bne.n	8005770 <HAL_RCC_OscConfig+0x190>
 800574a:	4b3f      	ldr	r3, [pc, #252]	@ (8005848 <HAL_RCC_OscConfig+0x268>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a3e      	ldr	r2, [pc, #248]	@ (8005848 <HAL_RCC_OscConfig+0x268>)
 8005750:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005754:	6013      	str	r3, [r2, #0]
 8005756:	4b3c      	ldr	r3, [pc, #240]	@ (8005848 <HAL_RCC_OscConfig+0x268>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a3b      	ldr	r2, [pc, #236]	@ (8005848 <HAL_RCC_OscConfig+0x268>)
 800575c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005760:	6013      	str	r3, [r2, #0]
 8005762:	4b39      	ldr	r3, [pc, #228]	@ (8005848 <HAL_RCC_OscConfig+0x268>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a38      	ldr	r2, [pc, #224]	@ (8005848 <HAL_RCC_OscConfig+0x268>)
 8005768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800576c:	6013      	str	r3, [r2, #0]
 800576e:	e029      	b.n	80057c4 <HAL_RCC_OscConfig+0x1e4>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8005778:	d112      	bne.n	80057a0 <HAL_RCC_OscConfig+0x1c0>
 800577a:	4b33      	ldr	r3, [pc, #204]	@ (8005848 <HAL_RCC_OscConfig+0x268>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a32      	ldr	r2, [pc, #200]	@ (8005848 <HAL_RCC_OscConfig+0x268>)
 8005780:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005784:	6013      	str	r3, [r2, #0]
 8005786:	4b30      	ldr	r3, [pc, #192]	@ (8005848 <HAL_RCC_OscConfig+0x268>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a2f      	ldr	r2, [pc, #188]	@ (8005848 <HAL_RCC_OscConfig+0x268>)
 800578c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005790:	6013      	str	r3, [r2, #0]
 8005792:	4b2d      	ldr	r3, [pc, #180]	@ (8005848 <HAL_RCC_OscConfig+0x268>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a2c      	ldr	r2, [pc, #176]	@ (8005848 <HAL_RCC_OscConfig+0x268>)
 8005798:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800579c:	6013      	str	r3, [r2, #0]
 800579e:	e011      	b.n	80057c4 <HAL_RCC_OscConfig+0x1e4>
 80057a0:	4b29      	ldr	r3, [pc, #164]	@ (8005848 <HAL_RCC_OscConfig+0x268>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a28      	ldr	r2, [pc, #160]	@ (8005848 <HAL_RCC_OscConfig+0x268>)
 80057a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057aa:	6013      	str	r3, [r2, #0]
 80057ac:	4b26      	ldr	r3, [pc, #152]	@ (8005848 <HAL_RCC_OscConfig+0x268>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a25      	ldr	r2, [pc, #148]	@ (8005848 <HAL_RCC_OscConfig+0x268>)
 80057b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057b6:	6013      	str	r3, [r2, #0]
 80057b8:	4b23      	ldr	r3, [pc, #140]	@ (8005848 <HAL_RCC_OscConfig+0x268>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a22      	ldr	r2, [pc, #136]	@ (8005848 <HAL_RCC_OscConfig+0x268>)
 80057be:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80057c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d013      	beq.n	80057f4 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057cc:	f7fe fc18 	bl	8004000 <HAL_GetTick>
 80057d0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057d2:	e008      	b.n	80057e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80057d4:	f7fe fc14 	bl	8004000 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	2b64      	cmp	r3, #100	@ 0x64
 80057e0:	d901      	bls.n	80057e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e32e      	b.n	8005e44 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057e6:	4b18      	ldr	r3, [pc, #96]	@ (8005848 <HAL_RCC_OscConfig+0x268>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d0f0      	beq.n	80057d4 <HAL_RCC_OscConfig+0x1f4>
 80057f2:	e012      	b.n	800581a <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057f4:	f7fe fc04 	bl	8004000 <HAL_GetTick>
 80057f8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057fa:	e008      	b.n	800580e <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80057fc:	f7fe fc00 	bl	8004000 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	2b64      	cmp	r3, #100	@ 0x64
 8005808:	d901      	bls.n	800580e <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e31a      	b.n	8005e44 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800580e:	4b0e      	ldr	r3, [pc, #56]	@ (8005848 <HAL_RCC_OscConfig+0x268>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1f0      	bne.n	80057fc <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b00      	cmp	r3, #0
 8005824:	f000 809a 	beq.w	800595c <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d005      	beq.n	800583a <HAL_RCC_OscConfig+0x25a>
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	2b18      	cmp	r3, #24
 8005832:	d149      	bne.n	80058c8 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d146      	bne.n	80058c8 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d104      	bne.n	800584c <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e2fe      	b.n	8005e44 <HAL_RCC_OscConfig+0x864>
 8005846:	bf00      	nop
 8005848:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d11c      	bne.n	800588c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8005852:	4b9a      	ldr	r3, [pc, #616]	@ (8005abc <HAL_RCC_OscConfig+0x4dc>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0218 	and.w	r2, r3, #24
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	429a      	cmp	r2, r3
 8005860:	d014      	beq.n	800588c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8005862:	4b96      	ldr	r3, [pc, #600]	@ (8005abc <HAL_RCC_OscConfig+0x4dc>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f023 0218 	bic.w	r2, r3, #24
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	4993      	ldr	r1, [pc, #588]	@ (8005abc <HAL_RCC_OscConfig+0x4dc>)
 8005870:	4313      	orrs	r3, r2
 8005872:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8005874:	f000 fdd0 	bl	8006418 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005878:	4b91      	ldr	r3, [pc, #580]	@ (8005ac0 <HAL_RCC_OscConfig+0x4e0>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4618      	mov	r0, r3
 800587e:	f7fe fb35 	bl	8003eec <HAL_InitTick>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d001      	beq.n	800588c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e2db      	b.n	8005e44 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800588c:	f7fe fbb8 	bl	8004000 <HAL_GetTick>
 8005890:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005892:	e008      	b.n	80058a6 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005894:	f7fe fbb4 	bl	8004000 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d901      	bls.n	80058a6 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e2ce      	b.n	8005e44 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058a6:	4b85      	ldr	r3, [pc, #532]	@ (8005abc <HAL_RCC_OscConfig+0x4dc>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0302 	and.w	r3, r3, #2
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d0f0      	beq.n	8005894 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80058b2:	4b82      	ldr	r3, [pc, #520]	@ (8005abc <HAL_RCC_OscConfig+0x4dc>)
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	041b      	lsls	r3, r3, #16
 80058c0:	497e      	ldr	r1, [pc, #504]	@ (8005abc <HAL_RCC_OscConfig+0x4dc>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80058c6:	e049      	b.n	800595c <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d02c      	beq.n	800592a <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80058d0:	4b7a      	ldr	r3, [pc, #488]	@ (8005abc <HAL_RCC_OscConfig+0x4dc>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f023 0218 	bic.w	r2, r3, #24
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	4977      	ldr	r1, [pc, #476]	@ (8005abc <HAL_RCC_OscConfig+0x4dc>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80058e2:	4b76      	ldr	r3, [pc, #472]	@ (8005abc <HAL_RCC_OscConfig+0x4dc>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a75      	ldr	r2, [pc, #468]	@ (8005abc <HAL_RCC_OscConfig+0x4dc>)
 80058e8:	f043 0301 	orr.w	r3, r3, #1
 80058ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ee:	f7fe fb87 	bl	8004000 <HAL_GetTick>
 80058f2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058f4:	e008      	b.n	8005908 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80058f6:	f7fe fb83 	bl	8004000 <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	2b02      	cmp	r3, #2
 8005902:	d901      	bls.n	8005908 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e29d      	b.n	8005e44 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005908:	4b6c      	ldr	r3, [pc, #432]	@ (8005abc <HAL_RCC_OscConfig+0x4dc>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0302 	and.w	r3, r3, #2
 8005910:	2b00      	cmp	r3, #0
 8005912:	d0f0      	beq.n	80058f6 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8005914:	4b69      	ldr	r3, [pc, #420]	@ (8005abc <HAL_RCC_OscConfig+0x4dc>)
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	041b      	lsls	r3, r3, #16
 8005922:	4966      	ldr	r1, [pc, #408]	@ (8005abc <HAL_RCC_OscConfig+0x4dc>)
 8005924:	4313      	orrs	r3, r2
 8005926:	610b      	str	r3, [r1, #16]
 8005928:	e018      	b.n	800595c <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800592a:	4b64      	ldr	r3, [pc, #400]	@ (8005abc <HAL_RCC_OscConfig+0x4dc>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a63      	ldr	r2, [pc, #396]	@ (8005abc <HAL_RCC_OscConfig+0x4dc>)
 8005930:	f023 0301 	bic.w	r3, r3, #1
 8005934:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005936:	f7fe fb63 	bl	8004000 <HAL_GetTick>
 800593a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800593c:	e008      	b.n	8005950 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800593e:	f7fe fb5f 	bl	8004000 <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	2b02      	cmp	r3, #2
 800594a:	d901      	bls.n	8005950 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	e279      	b.n	8005e44 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005950:	4b5a      	ldr	r3, [pc, #360]	@ (8005abc <HAL_RCC_OscConfig+0x4dc>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0302 	and.w	r3, r3, #2
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1f0      	bne.n	800593e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0308 	and.w	r3, r3, #8
 8005964:	2b00      	cmp	r3, #0
 8005966:	d03c      	beq.n	80059e2 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d01c      	beq.n	80059aa <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005970:	4b52      	ldr	r3, [pc, #328]	@ (8005abc <HAL_RCC_OscConfig+0x4dc>)
 8005972:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005976:	4a51      	ldr	r2, [pc, #324]	@ (8005abc <HAL_RCC_OscConfig+0x4dc>)
 8005978:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800597c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005980:	f7fe fb3e 	bl	8004000 <HAL_GetTick>
 8005984:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005986:	e008      	b.n	800599a <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8005988:	f7fe fb3a 	bl	8004000 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	2b02      	cmp	r3, #2
 8005994:	d901      	bls.n	800599a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e254      	b.n	8005e44 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800599a:	4b48      	ldr	r3, [pc, #288]	@ (8005abc <HAL_RCC_OscConfig+0x4dc>)
 800599c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80059a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d0ef      	beq.n	8005988 <HAL_RCC_OscConfig+0x3a8>
 80059a8:	e01b      	b.n	80059e2 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059aa:	4b44      	ldr	r3, [pc, #272]	@ (8005abc <HAL_RCC_OscConfig+0x4dc>)
 80059ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80059b0:	4a42      	ldr	r2, [pc, #264]	@ (8005abc <HAL_RCC_OscConfig+0x4dc>)
 80059b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80059b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ba:	f7fe fb21 	bl	8004000 <HAL_GetTick>
 80059be:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80059c0:	e008      	b.n	80059d4 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80059c2:	f7fe fb1d 	bl	8004000 <HAL_GetTick>
 80059c6:	4602      	mov	r2, r0
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d901      	bls.n	80059d4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80059d0:	2303      	movs	r3, #3
 80059d2:	e237      	b.n	8005e44 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80059d4:	4b39      	ldr	r3, [pc, #228]	@ (8005abc <HAL_RCC_OscConfig+0x4dc>)
 80059d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80059da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1ef      	bne.n	80059c2 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0304 	and.w	r3, r3, #4
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	f000 80d2 	beq.w	8005b94 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80059f0:	4b34      	ldr	r3, [pc, #208]	@ (8005ac4 <HAL_RCC_OscConfig+0x4e4>)
 80059f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f4:	f003 0301 	and.w	r3, r3, #1
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d118      	bne.n	8005a2e <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80059fc:	4b31      	ldr	r3, [pc, #196]	@ (8005ac4 <HAL_RCC_OscConfig+0x4e4>)
 80059fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a00:	4a30      	ldr	r2, [pc, #192]	@ (8005ac4 <HAL_RCC_OscConfig+0x4e4>)
 8005a02:	f043 0301 	orr.w	r3, r3, #1
 8005a06:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a08:	f7fe fafa 	bl	8004000 <HAL_GetTick>
 8005a0c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005a0e:	e008      	b.n	8005a22 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a10:	f7fe faf6 	bl	8004000 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d901      	bls.n	8005a22 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e210      	b.n	8005e44 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005a22:	4b28      	ldr	r3, [pc, #160]	@ (8005ac4 <HAL_RCC_OscConfig+0x4e4>)
 8005a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a26:	f003 0301 	and.w	r3, r3, #1
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d0f0      	beq.n	8005a10 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d108      	bne.n	8005a48 <HAL_RCC_OscConfig+0x468>
 8005a36:	4b21      	ldr	r3, [pc, #132]	@ (8005abc <HAL_RCC_OscConfig+0x4dc>)
 8005a38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a3c:	4a1f      	ldr	r2, [pc, #124]	@ (8005abc <HAL_RCC_OscConfig+0x4dc>)
 8005a3e:	f043 0301 	orr.w	r3, r3, #1
 8005a42:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005a46:	e074      	b.n	8005b32 <HAL_RCC_OscConfig+0x552>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d118      	bne.n	8005a82 <HAL_RCC_OscConfig+0x4a2>
 8005a50:	4b1a      	ldr	r3, [pc, #104]	@ (8005abc <HAL_RCC_OscConfig+0x4dc>)
 8005a52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a56:	4a19      	ldr	r2, [pc, #100]	@ (8005abc <HAL_RCC_OscConfig+0x4dc>)
 8005a58:	f023 0301 	bic.w	r3, r3, #1
 8005a5c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005a60:	4b16      	ldr	r3, [pc, #88]	@ (8005abc <HAL_RCC_OscConfig+0x4dc>)
 8005a62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a66:	4a15      	ldr	r2, [pc, #84]	@ (8005abc <HAL_RCC_OscConfig+0x4dc>)
 8005a68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a6c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005a70:	4b12      	ldr	r3, [pc, #72]	@ (8005abc <HAL_RCC_OscConfig+0x4dc>)
 8005a72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a76:	4a11      	ldr	r2, [pc, #68]	@ (8005abc <HAL_RCC_OscConfig+0x4dc>)
 8005a78:	f023 0304 	bic.w	r3, r3, #4
 8005a7c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005a80:	e057      	b.n	8005b32 <HAL_RCC_OscConfig+0x552>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	2b05      	cmp	r3, #5
 8005a88:	d11e      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x4e8>
 8005a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8005abc <HAL_RCC_OscConfig+0x4dc>)
 8005a8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a90:	4a0a      	ldr	r2, [pc, #40]	@ (8005abc <HAL_RCC_OscConfig+0x4dc>)
 8005a92:	f043 0304 	orr.w	r3, r3, #4
 8005a96:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005a9a:	4b08      	ldr	r3, [pc, #32]	@ (8005abc <HAL_RCC_OscConfig+0x4dc>)
 8005a9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005aa0:	4a06      	ldr	r2, [pc, #24]	@ (8005abc <HAL_RCC_OscConfig+0x4dc>)
 8005aa2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005aa6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005aaa:	4b04      	ldr	r3, [pc, #16]	@ (8005abc <HAL_RCC_OscConfig+0x4dc>)
 8005aac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ab0:	4a02      	ldr	r2, [pc, #8]	@ (8005abc <HAL_RCC_OscConfig+0x4dc>)
 8005ab2:	f043 0301 	orr.w	r3, r3, #1
 8005ab6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005aba:	e03a      	b.n	8005b32 <HAL_RCC_OscConfig+0x552>
 8005abc:	44020c00 	.word	0x44020c00
 8005ac0:	20000020 	.word	0x20000020
 8005ac4:	44020800 	.word	0x44020800
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	2b85      	cmp	r3, #133	@ 0x85
 8005ace:	d118      	bne.n	8005b02 <HAL_RCC_OscConfig+0x522>
 8005ad0:	4ba2      	ldr	r3, [pc, #648]	@ (8005d5c <HAL_RCC_OscConfig+0x77c>)
 8005ad2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ad6:	4aa1      	ldr	r2, [pc, #644]	@ (8005d5c <HAL_RCC_OscConfig+0x77c>)
 8005ad8:	f043 0304 	orr.w	r3, r3, #4
 8005adc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005ae0:	4b9e      	ldr	r3, [pc, #632]	@ (8005d5c <HAL_RCC_OscConfig+0x77c>)
 8005ae2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ae6:	4a9d      	ldr	r2, [pc, #628]	@ (8005d5c <HAL_RCC_OscConfig+0x77c>)
 8005ae8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005aec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005af0:	4b9a      	ldr	r3, [pc, #616]	@ (8005d5c <HAL_RCC_OscConfig+0x77c>)
 8005af2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005af6:	4a99      	ldr	r2, [pc, #612]	@ (8005d5c <HAL_RCC_OscConfig+0x77c>)
 8005af8:	f043 0301 	orr.w	r3, r3, #1
 8005afc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005b00:	e017      	b.n	8005b32 <HAL_RCC_OscConfig+0x552>
 8005b02:	4b96      	ldr	r3, [pc, #600]	@ (8005d5c <HAL_RCC_OscConfig+0x77c>)
 8005b04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b08:	4a94      	ldr	r2, [pc, #592]	@ (8005d5c <HAL_RCC_OscConfig+0x77c>)
 8005b0a:	f023 0301 	bic.w	r3, r3, #1
 8005b0e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005b12:	4b92      	ldr	r3, [pc, #584]	@ (8005d5c <HAL_RCC_OscConfig+0x77c>)
 8005b14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b18:	4a90      	ldr	r2, [pc, #576]	@ (8005d5c <HAL_RCC_OscConfig+0x77c>)
 8005b1a:	f023 0304 	bic.w	r3, r3, #4
 8005b1e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005b22:	4b8e      	ldr	r3, [pc, #568]	@ (8005d5c <HAL_RCC_OscConfig+0x77c>)
 8005b24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b28:	4a8c      	ldr	r2, [pc, #560]	@ (8005d5c <HAL_RCC_OscConfig+0x77c>)
 8005b2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b2e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d016      	beq.n	8005b68 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b3a:	f7fe fa61 	bl	8004000 <HAL_GetTick>
 8005b3e:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b40:	e00a      	b.n	8005b58 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b42:	f7fe fa5d 	bl	8004000 <HAL_GetTick>
 8005b46:	4602      	mov	r2, r0
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d901      	bls.n	8005b58 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e175      	b.n	8005e44 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b58:	4b80      	ldr	r3, [pc, #512]	@ (8005d5c <HAL_RCC_OscConfig+0x77c>)
 8005b5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b5e:	f003 0302 	and.w	r3, r3, #2
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d0ed      	beq.n	8005b42 <HAL_RCC_OscConfig+0x562>
 8005b66:	e015      	b.n	8005b94 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b68:	f7fe fa4a 	bl	8004000 <HAL_GetTick>
 8005b6c:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b6e:	e00a      	b.n	8005b86 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b70:	f7fe fa46 	bl	8004000 <HAL_GetTick>
 8005b74:	4602      	mov	r2, r0
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d901      	bls.n	8005b86 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e15e      	b.n	8005e44 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b86:	4b75      	ldr	r3, [pc, #468]	@ (8005d5c <HAL_RCC_OscConfig+0x77c>)
 8005b88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b8c:	f003 0302 	and.w	r3, r3, #2
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1ed      	bne.n	8005b70 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0320 	and.w	r3, r3, #32
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d036      	beq.n	8005c0e <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d019      	beq.n	8005bdc <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ba8:	4b6c      	ldr	r3, [pc, #432]	@ (8005d5c <HAL_RCC_OscConfig+0x77c>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a6b      	ldr	r2, [pc, #428]	@ (8005d5c <HAL_RCC_OscConfig+0x77c>)
 8005bae:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005bb2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bb4:	f7fe fa24 	bl	8004000 <HAL_GetTick>
 8005bb8:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005bba:	e008      	b.n	8005bce <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8005bbc:	f7fe fa20 	bl	8004000 <HAL_GetTick>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d901      	bls.n	8005bce <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e13a      	b.n	8005e44 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005bce:	4b63      	ldr	r3, [pc, #396]	@ (8005d5c <HAL_RCC_OscConfig+0x77c>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d0f0      	beq.n	8005bbc <HAL_RCC_OscConfig+0x5dc>
 8005bda:	e018      	b.n	8005c0e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005bdc:	4b5f      	ldr	r3, [pc, #380]	@ (8005d5c <HAL_RCC_OscConfig+0x77c>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a5e      	ldr	r2, [pc, #376]	@ (8005d5c <HAL_RCC_OscConfig+0x77c>)
 8005be2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005be6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005be8:	f7fe fa0a 	bl	8004000 <HAL_GetTick>
 8005bec:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005bee:	e008      	b.n	8005c02 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8005bf0:	f7fe fa06 	bl	8004000 <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d901      	bls.n	8005c02 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e120      	b.n	8005e44 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005c02:	4b56      	ldr	r3, [pc, #344]	@ (8005d5c <HAL_RCC_OscConfig+0x77c>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1f0      	bne.n	8005bf0 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	f000 8115 	beq.w	8005e42 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	2b18      	cmp	r3, #24
 8005c1c:	f000 80af 	beq.w	8005d7e <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	f040 8086 	bne.w	8005d36 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8005c2a:	4b4c      	ldr	r3, [pc, #304]	@ (8005d5c <HAL_RCC_OscConfig+0x77c>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a4b      	ldr	r2, [pc, #300]	@ (8005d5c <HAL_RCC_OscConfig+0x77c>)
 8005c30:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c36:	f7fe f9e3 	bl	8004000 <HAL_GetTick>
 8005c3a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005c3c:	e008      	b.n	8005c50 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8005c3e:	f7fe f9df 	bl	8004000 <HAL_GetTick>
 8005c42:	4602      	mov	r2, r0
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d901      	bls.n	8005c50 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e0f9      	b.n	8005e44 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005c50:	4b42      	ldr	r3, [pc, #264]	@ (8005d5c <HAL_RCC_OscConfig+0x77c>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d1f0      	bne.n	8005c3e <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8005c5c:	4b3f      	ldr	r3, [pc, #252]	@ (8005d5c <HAL_RCC_OscConfig+0x77c>)
 8005c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c60:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005c64:	f023 0303 	bic.w	r3, r3, #3
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005c70:	0212      	lsls	r2, r2, #8
 8005c72:	430a      	orrs	r2, r1
 8005c74:	4939      	ldr	r1, [pc, #228]	@ (8005d5c <HAL_RCC_OscConfig+0x77c>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	628b      	str	r3, [r1, #40]	@ 0x28
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	025b      	lsls	r3, r3, #9
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	431a      	orrs	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c94:	3b01      	subs	r3, #1
 8005c96:	041b      	lsls	r3, r3, #16
 8005c98:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005c9c:	431a      	orrs	r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	061b      	lsls	r3, r3, #24
 8005ca6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005caa:	492c      	ldr	r1, [pc, #176]	@ (8005d5c <HAL_RCC_OscConfig+0x77c>)
 8005cac:	4313      	orrs	r3, r2
 8005cae:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8005cb0:	4b2a      	ldr	r3, [pc, #168]	@ (8005d5c <HAL_RCC_OscConfig+0x77c>)
 8005cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb4:	4a29      	ldr	r2, [pc, #164]	@ (8005d5c <HAL_RCC_OscConfig+0x77c>)
 8005cb6:	f023 0310 	bic.w	r3, r3, #16
 8005cba:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cc0:	4a26      	ldr	r2, [pc, #152]	@ (8005d5c <HAL_RCC_OscConfig+0x77c>)
 8005cc2:	00db      	lsls	r3, r3, #3
 8005cc4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8005cc6:	4b25      	ldr	r3, [pc, #148]	@ (8005d5c <HAL_RCC_OscConfig+0x77c>)
 8005cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cca:	4a24      	ldr	r2, [pc, #144]	@ (8005d5c <HAL_RCC_OscConfig+0x77c>)
 8005ccc:	f043 0310 	orr.w	r3, r3, #16
 8005cd0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8005cd2:	4b22      	ldr	r3, [pc, #136]	@ (8005d5c <HAL_RCC_OscConfig+0x77c>)
 8005cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cd6:	f023 020c 	bic.w	r2, r3, #12
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cde:	491f      	ldr	r1, [pc, #124]	@ (8005d5c <HAL_RCC_OscConfig+0x77c>)
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8005ce4:	4b1d      	ldr	r3, [pc, #116]	@ (8005d5c <HAL_RCC_OscConfig+0x77c>)
 8005ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ce8:	f023 0220 	bic.w	r2, r3, #32
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cf0:	491a      	ldr	r1, [pc, #104]	@ (8005d5c <HAL_RCC_OscConfig+0x77c>)
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005cf6:	4b19      	ldr	r3, [pc, #100]	@ (8005d5c <HAL_RCC_OscConfig+0x77c>)
 8005cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cfa:	4a18      	ldr	r2, [pc, #96]	@ (8005d5c <HAL_RCC_OscConfig+0x77c>)
 8005cfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d00:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8005d02:	4b16      	ldr	r3, [pc, #88]	@ (8005d5c <HAL_RCC_OscConfig+0x77c>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a15      	ldr	r2, [pc, #84]	@ (8005d5c <HAL_RCC_OscConfig+0x77c>)
 8005d08:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d0e:	f7fe f977 	bl	8004000 <HAL_GetTick>
 8005d12:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005d14:	e008      	b.n	8005d28 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8005d16:	f7fe f973 	bl	8004000 <HAL_GetTick>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d901      	bls.n	8005d28 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e08d      	b.n	8005e44 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005d28:	4b0c      	ldr	r3, [pc, #48]	@ (8005d5c <HAL_RCC_OscConfig+0x77c>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d0f0      	beq.n	8005d16 <HAL_RCC_OscConfig+0x736>
 8005d34:	e085      	b.n	8005e42 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8005d36:	4b09      	ldr	r3, [pc, #36]	@ (8005d5c <HAL_RCC_OscConfig+0x77c>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a08      	ldr	r2, [pc, #32]	@ (8005d5c <HAL_RCC_OscConfig+0x77c>)
 8005d3c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d42:	f7fe f95d 	bl	8004000 <HAL_GetTick>
 8005d46:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005d48:	e00a      	b.n	8005d60 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8005d4a:	f7fe f959 	bl	8004000 <HAL_GetTick>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d903      	bls.n	8005d60 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e073      	b.n	8005e44 <HAL_RCC_OscConfig+0x864>
 8005d5c:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005d60:	4b3a      	ldr	r3, [pc, #232]	@ (8005e4c <HAL_RCC_OscConfig+0x86c>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d1ee      	bne.n	8005d4a <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005d6c:	4b37      	ldr	r3, [pc, #220]	@ (8005e4c <HAL_RCC_OscConfig+0x86c>)
 8005d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d70:	4a36      	ldr	r2, [pc, #216]	@ (8005e4c <HAL_RCC_OscConfig+0x86c>)
 8005d72:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8005d76:	f023 0303 	bic.w	r3, r3, #3
 8005d7a:	6293      	str	r3, [r2, #40]	@ 0x28
 8005d7c:	e061      	b.n	8005e42 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005d7e:	4b33      	ldr	r3, [pc, #204]	@ (8005e4c <HAL_RCC_OscConfig+0x86c>)
 8005d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d82:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005d84:	4b31      	ldr	r3, [pc, #196]	@ (8005e4c <HAL_RCC_OscConfig+0x86c>)
 8005d86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d88:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d031      	beq.n	8005df6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	f003 0203 	and.w	r2, r3, #3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d12a      	bne.n	8005df6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	0a1b      	lsrs	r3, r3, #8
 8005da4:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d122      	bne.n	8005df6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dba:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d11a      	bne.n	8005df6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	0a5b      	lsrs	r3, r3, #9
 8005dc4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dcc:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d111      	bne.n	8005df6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	0c1b      	lsrs	r3, r3, #16
 8005dd6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dde:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d108      	bne.n	8005df6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	0e1b      	lsrs	r3, r3, #24
 8005de8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d001      	beq.n	8005dfa <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e024      	b.n	8005e44 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005dfa:	4b14      	ldr	r3, [pc, #80]	@ (8005e4c <HAL_RCC_OscConfig+0x86c>)
 8005dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dfe:	08db      	lsrs	r3, r3, #3
 8005e00:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d01a      	beq.n	8005e42 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8005e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8005e4c <HAL_RCC_OscConfig+0x86c>)
 8005e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e10:	4a0e      	ldr	r2, [pc, #56]	@ (8005e4c <HAL_RCC_OscConfig+0x86c>)
 8005e12:	f023 0310 	bic.w	r3, r3, #16
 8005e16:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e18:	f7fe f8f2 	bl	8004000 <HAL_GetTick>
 8005e1c:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8005e1e:	bf00      	nop
 8005e20:	f7fe f8ee 	bl	8004000 <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d0f9      	beq.n	8005e20 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e30:	4a06      	ldr	r2, [pc, #24]	@ (8005e4c <HAL_RCC_OscConfig+0x86c>)
 8005e32:	00db      	lsls	r3, r3, #3
 8005e34:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8005e36:	4b05      	ldr	r3, [pc, #20]	@ (8005e4c <HAL_RCC_OscConfig+0x86c>)
 8005e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e3a:	4a04      	ldr	r2, [pc, #16]	@ (8005e4c <HAL_RCC_OscConfig+0x86c>)
 8005e3c:	f043 0310 	orr.w	r3, r3, #16
 8005e40:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3720      	adds	r7, #32
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	44020c00 	.word	0x44020c00

08005e50 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d101      	bne.n	8005e64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e19e      	b.n	80061a2 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e64:	4b83      	ldr	r3, [pc, #524]	@ (8006074 <HAL_RCC_ClockConfig+0x224>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 030f 	and.w	r3, r3, #15
 8005e6c:	683a      	ldr	r2, [r7, #0]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d910      	bls.n	8005e94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e72:	4b80      	ldr	r3, [pc, #512]	@ (8006074 <HAL_RCC_ClockConfig+0x224>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f023 020f 	bic.w	r2, r3, #15
 8005e7a:	497e      	ldr	r1, [pc, #504]	@ (8006074 <HAL_RCC_ClockConfig+0x224>)
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e82:	4b7c      	ldr	r3, [pc, #496]	@ (8006074 <HAL_RCC_ClockConfig+0x224>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 030f 	and.w	r3, r3, #15
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d001      	beq.n	8005e94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e186      	b.n	80061a2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0310 	and.w	r3, r3, #16
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d012      	beq.n	8005ec6 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	695a      	ldr	r2, [r3, #20]
 8005ea4:	4b74      	ldr	r3, [pc, #464]	@ (8006078 <HAL_RCC_ClockConfig+0x228>)
 8005ea6:	6a1b      	ldr	r3, [r3, #32]
 8005ea8:	0a1b      	lsrs	r3, r3, #8
 8005eaa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d909      	bls.n	8005ec6 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8005eb2:	4b71      	ldr	r3, [pc, #452]	@ (8006078 <HAL_RCC_ClockConfig+0x228>)
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	021b      	lsls	r3, r3, #8
 8005ec0:	496d      	ldr	r1, [pc, #436]	@ (8006078 <HAL_RCC_ClockConfig+0x228>)
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0308 	and.w	r3, r3, #8
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d012      	beq.n	8005ef8 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	691a      	ldr	r2, [r3, #16]
 8005ed6:	4b68      	ldr	r3, [pc, #416]	@ (8006078 <HAL_RCC_ClockConfig+0x228>)
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	091b      	lsrs	r3, r3, #4
 8005edc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d909      	bls.n	8005ef8 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8005ee4:	4b64      	ldr	r3, [pc, #400]	@ (8006078 <HAL_RCC_ClockConfig+0x228>)
 8005ee6:	6a1b      	ldr	r3, [r3, #32]
 8005ee8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	011b      	lsls	r3, r3, #4
 8005ef2:	4961      	ldr	r1, [pc, #388]	@ (8006078 <HAL_RCC_ClockConfig+0x228>)
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0304 	and.w	r3, r3, #4
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d010      	beq.n	8005f26 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	68da      	ldr	r2, [r3, #12]
 8005f08:	4b5b      	ldr	r3, [pc, #364]	@ (8006078 <HAL_RCC_ClockConfig+0x228>)
 8005f0a:	6a1b      	ldr	r3, [r3, #32]
 8005f0c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d908      	bls.n	8005f26 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8005f14:	4b58      	ldr	r3, [pc, #352]	@ (8006078 <HAL_RCC_ClockConfig+0x228>)
 8005f16:	6a1b      	ldr	r3, [r3, #32]
 8005f18:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	4955      	ldr	r1, [pc, #340]	@ (8006078 <HAL_RCC_ClockConfig+0x228>)
 8005f22:	4313      	orrs	r3, r2
 8005f24:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 0302 	and.w	r3, r3, #2
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d010      	beq.n	8005f54 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	689a      	ldr	r2, [r3, #8]
 8005f36:	4b50      	ldr	r3, [pc, #320]	@ (8006078 <HAL_RCC_ClockConfig+0x228>)
 8005f38:	6a1b      	ldr	r3, [r3, #32]
 8005f3a:	f003 030f 	and.w	r3, r3, #15
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d908      	bls.n	8005f54 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8005f42:	4b4d      	ldr	r3, [pc, #308]	@ (8006078 <HAL_RCC_ClockConfig+0x228>)
 8005f44:	6a1b      	ldr	r3, [r3, #32]
 8005f46:	f023 020f 	bic.w	r2, r3, #15
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	494a      	ldr	r1, [pc, #296]	@ (8006078 <HAL_RCC_ClockConfig+0x228>)
 8005f50:	4313      	orrs	r3, r2
 8005f52:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0301 	and.w	r3, r3, #1
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	f000 8093 	beq.w	8006088 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	2b03      	cmp	r3, #3
 8005f68:	d107      	bne.n	8005f7a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005f6a:	4b43      	ldr	r3, [pc, #268]	@ (8006078 <HAL_RCC_ClockConfig+0x228>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d121      	bne.n	8005fba <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e113      	b.n	80061a2 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d107      	bne.n	8005f92 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f82:	4b3d      	ldr	r3, [pc, #244]	@ (8006078 <HAL_RCC_ClockConfig+0x228>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d115      	bne.n	8005fba <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e107      	b.n	80061a2 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d107      	bne.n	8005faa <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005f9a:	4b37      	ldr	r3, [pc, #220]	@ (8006078 <HAL_RCC_ClockConfig+0x228>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d109      	bne.n	8005fba <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e0fb      	b.n	80061a2 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005faa:	4b33      	ldr	r3, [pc, #204]	@ (8006078 <HAL_RCC_ClockConfig+0x228>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d101      	bne.n	8005fba <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e0f3      	b.n	80061a2 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8005fba:	4b2f      	ldr	r3, [pc, #188]	@ (8006078 <HAL_RCC_ClockConfig+0x228>)
 8005fbc:	69db      	ldr	r3, [r3, #28]
 8005fbe:	f023 0203 	bic.w	r2, r3, #3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	492c      	ldr	r1, [pc, #176]	@ (8006078 <HAL_RCC_ClockConfig+0x228>)
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fcc:	f7fe f818 	bl	8004000 <HAL_GetTick>
 8005fd0:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	2b03      	cmp	r3, #3
 8005fd8:	d112      	bne.n	8006000 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005fda:	e00a      	b.n	8005ff2 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005fdc:	f7fe f810 	bl	8004000 <HAL_GetTick>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d901      	bls.n	8005ff2 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e0d7      	b.n	80061a2 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ff2:	4b21      	ldr	r3, [pc, #132]	@ (8006078 <HAL_RCC_ClockConfig+0x228>)
 8005ff4:	69db      	ldr	r3, [r3, #28]
 8005ff6:	f003 0318 	and.w	r3, r3, #24
 8005ffa:	2b18      	cmp	r3, #24
 8005ffc:	d1ee      	bne.n	8005fdc <HAL_RCC_ClockConfig+0x18c>
 8005ffe:	e043      	b.n	8006088 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	2b02      	cmp	r3, #2
 8006006:	d112      	bne.n	800602e <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006008:	e00a      	b.n	8006020 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800600a:	f7fd fff9 	bl	8004000 <HAL_GetTick>
 800600e:	4602      	mov	r2, r0
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006018:	4293      	cmp	r3, r2
 800601a:	d901      	bls.n	8006020 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800601c:	2303      	movs	r3, #3
 800601e:	e0c0      	b.n	80061a2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006020:	4b15      	ldr	r3, [pc, #84]	@ (8006078 <HAL_RCC_ClockConfig+0x228>)
 8006022:	69db      	ldr	r3, [r3, #28]
 8006024:	f003 0318 	and.w	r3, r3, #24
 8006028:	2b10      	cmp	r3, #16
 800602a:	d1ee      	bne.n	800600a <HAL_RCC_ClockConfig+0x1ba>
 800602c:	e02c      	b.n	8006088 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d122      	bne.n	800607c <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8006036:	e00a      	b.n	800604e <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006038:	f7fd ffe2 	bl	8004000 <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006046:	4293      	cmp	r3, r2
 8006048:	d901      	bls.n	800604e <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	e0a9      	b.n	80061a2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800604e:	4b0a      	ldr	r3, [pc, #40]	@ (8006078 <HAL_RCC_ClockConfig+0x228>)
 8006050:	69db      	ldr	r3, [r3, #28]
 8006052:	f003 0318 	and.w	r3, r3, #24
 8006056:	2b08      	cmp	r3, #8
 8006058:	d1ee      	bne.n	8006038 <HAL_RCC_ClockConfig+0x1e8>
 800605a:	e015      	b.n	8006088 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800605c:	f7fd ffd0 	bl	8004000 <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800606a:	4293      	cmp	r3, r2
 800606c:	d906      	bls.n	800607c <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e097      	b.n	80061a2 <HAL_RCC_ClockConfig+0x352>
 8006072:	bf00      	nop
 8006074:	40022000 	.word	0x40022000
 8006078:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800607c:	4b4b      	ldr	r3, [pc, #300]	@ (80061ac <HAL_RCC_ClockConfig+0x35c>)
 800607e:	69db      	ldr	r3, [r3, #28]
 8006080:	f003 0318 	and.w	r3, r3, #24
 8006084:	2b00      	cmp	r3, #0
 8006086:	d1e9      	bne.n	800605c <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 0302 	and.w	r3, r3, #2
 8006090:	2b00      	cmp	r3, #0
 8006092:	d010      	beq.n	80060b6 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	689a      	ldr	r2, [r3, #8]
 8006098:	4b44      	ldr	r3, [pc, #272]	@ (80061ac <HAL_RCC_ClockConfig+0x35c>)
 800609a:	6a1b      	ldr	r3, [r3, #32]
 800609c:	f003 030f 	and.w	r3, r3, #15
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d208      	bcs.n	80060b6 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80060a4:	4b41      	ldr	r3, [pc, #260]	@ (80061ac <HAL_RCC_ClockConfig+0x35c>)
 80060a6:	6a1b      	ldr	r3, [r3, #32]
 80060a8:	f023 020f 	bic.w	r2, r3, #15
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	493e      	ldr	r1, [pc, #248]	@ (80061ac <HAL_RCC_ClockConfig+0x35c>)
 80060b2:	4313      	orrs	r3, r2
 80060b4:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060b6:	4b3e      	ldr	r3, [pc, #248]	@ (80061b0 <HAL_RCC_ClockConfig+0x360>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 030f 	and.w	r3, r3, #15
 80060be:	683a      	ldr	r2, [r7, #0]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d210      	bcs.n	80060e6 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060c4:	4b3a      	ldr	r3, [pc, #232]	@ (80061b0 <HAL_RCC_ClockConfig+0x360>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f023 020f 	bic.w	r2, r3, #15
 80060cc:	4938      	ldr	r1, [pc, #224]	@ (80061b0 <HAL_RCC_ClockConfig+0x360>)
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060d4:	4b36      	ldr	r3, [pc, #216]	@ (80061b0 <HAL_RCC_ClockConfig+0x360>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 030f 	and.w	r3, r3, #15
 80060dc:	683a      	ldr	r2, [r7, #0]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d001      	beq.n	80060e6 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e05d      	b.n	80061a2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 0304 	and.w	r3, r3, #4
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d010      	beq.n	8006114 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	68da      	ldr	r2, [r3, #12]
 80060f6:	4b2d      	ldr	r3, [pc, #180]	@ (80061ac <HAL_RCC_ClockConfig+0x35c>)
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80060fe:	429a      	cmp	r2, r3
 8006100:	d208      	bcs.n	8006114 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8006102:	4b2a      	ldr	r3, [pc, #168]	@ (80061ac <HAL_RCC_ClockConfig+0x35c>)
 8006104:	6a1b      	ldr	r3, [r3, #32]
 8006106:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	4927      	ldr	r1, [pc, #156]	@ (80061ac <HAL_RCC_ClockConfig+0x35c>)
 8006110:	4313      	orrs	r3, r2
 8006112:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 0308 	and.w	r3, r3, #8
 800611c:	2b00      	cmp	r3, #0
 800611e:	d012      	beq.n	8006146 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	691a      	ldr	r2, [r3, #16]
 8006124:	4b21      	ldr	r3, [pc, #132]	@ (80061ac <HAL_RCC_ClockConfig+0x35c>)
 8006126:	6a1b      	ldr	r3, [r3, #32]
 8006128:	091b      	lsrs	r3, r3, #4
 800612a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800612e:	429a      	cmp	r2, r3
 8006130:	d209      	bcs.n	8006146 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8006132:	4b1e      	ldr	r3, [pc, #120]	@ (80061ac <HAL_RCC_ClockConfig+0x35c>)
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	011b      	lsls	r3, r3, #4
 8006140:	491a      	ldr	r1, [pc, #104]	@ (80061ac <HAL_RCC_ClockConfig+0x35c>)
 8006142:	4313      	orrs	r3, r2
 8006144:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0310 	and.w	r3, r3, #16
 800614e:	2b00      	cmp	r3, #0
 8006150:	d012      	beq.n	8006178 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	695a      	ldr	r2, [r3, #20]
 8006156:	4b15      	ldr	r3, [pc, #84]	@ (80061ac <HAL_RCC_ClockConfig+0x35c>)
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	0a1b      	lsrs	r3, r3, #8
 800615c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006160:	429a      	cmp	r2, r3
 8006162:	d209      	bcs.n	8006178 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8006164:	4b11      	ldr	r3, [pc, #68]	@ (80061ac <HAL_RCC_ClockConfig+0x35c>)
 8006166:	6a1b      	ldr	r3, [r3, #32]
 8006168:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	695b      	ldr	r3, [r3, #20]
 8006170:	021b      	lsls	r3, r3, #8
 8006172:	490e      	ldr	r1, [pc, #56]	@ (80061ac <HAL_RCC_ClockConfig+0x35c>)
 8006174:	4313      	orrs	r3, r2
 8006176:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006178:	f000 f822 	bl	80061c0 <HAL_RCC_GetSysClockFreq>
 800617c:	4602      	mov	r2, r0
 800617e:	4b0b      	ldr	r3, [pc, #44]	@ (80061ac <HAL_RCC_ClockConfig+0x35c>)
 8006180:	6a1b      	ldr	r3, [r3, #32]
 8006182:	f003 030f 	and.w	r3, r3, #15
 8006186:	490b      	ldr	r1, [pc, #44]	@ (80061b4 <HAL_RCC_ClockConfig+0x364>)
 8006188:	5ccb      	ldrb	r3, [r1, r3]
 800618a:	fa22 f303 	lsr.w	r3, r2, r3
 800618e:	4a0a      	ldr	r2, [pc, #40]	@ (80061b8 <HAL_RCC_ClockConfig+0x368>)
 8006190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006192:	4b0a      	ldr	r3, [pc, #40]	@ (80061bc <HAL_RCC_ClockConfig+0x36c>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4618      	mov	r0, r3
 8006198:	f7fd fea8 	bl	8003eec <HAL_InitTick>
 800619c:	4603      	mov	r3, r0
 800619e:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80061a0:	7afb      	ldrb	r3, [r7, #11]
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	44020c00 	.word	0x44020c00
 80061b0:	40022000 	.word	0x40022000
 80061b4:	08011978 	.word	0x08011978
 80061b8:	2000001c 	.word	0x2000001c
 80061bc:	20000020 	.word	0x20000020

080061c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b089      	sub	sp, #36	@ 0x24
 80061c4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80061c6:	4b8c      	ldr	r3, [pc, #560]	@ (80063f8 <HAL_RCC_GetSysClockFreq+0x238>)
 80061c8:	69db      	ldr	r3, [r3, #28]
 80061ca:	f003 0318 	and.w	r3, r3, #24
 80061ce:	2b08      	cmp	r3, #8
 80061d0:	d102      	bne.n	80061d8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80061d2:	4b8a      	ldr	r3, [pc, #552]	@ (80063fc <HAL_RCC_GetSysClockFreq+0x23c>)
 80061d4:	61fb      	str	r3, [r7, #28]
 80061d6:	e107      	b.n	80063e8 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80061d8:	4b87      	ldr	r3, [pc, #540]	@ (80063f8 <HAL_RCC_GetSysClockFreq+0x238>)
 80061da:	69db      	ldr	r3, [r3, #28]
 80061dc:	f003 0318 	and.w	r3, r3, #24
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d112      	bne.n	800620a <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80061e4:	4b84      	ldr	r3, [pc, #528]	@ (80063f8 <HAL_RCC_GetSysClockFreq+0x238>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0320 	and.w	r3, r3, #32
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d009      	beq.n	8006204 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80061f0:	4b81      	ldr	r3, [pc, #516]	@ (80063f8 <HAL_RCC_GetSysClockFreq+0x238>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	08db      	lsrs	r3, r3, #3
 80061f6:	f003 0303 	and.w	r3, r3, #3
 80061fa:	4a81      	ldr	r2, [pc, #516]	@ (8006400 <HAL_RCC_GetSysClockFreq+0x240>)
 80061fc:	fa22 f303 	lsr.w	r3, r2, r3
 8006200:	61fb      	str	r3, [r7, #28]
 8006202:	e0f1      	b.n	80063e8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8006204:	4b7e      	ldr	r3, [pc, #504]	@ (8006400 <HAL_RCC_GetSysClockFreq+0x240>)
 8006206:	61fb      	str	r3, [r7, #28]
 8006208:	e0ee      	b.n	80063e8 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800620a:	4b7b      	ldr	r3, [pc, #492]	@ (80063f8 <HAL_RCC_GetSysClockFreq+0x238>)
 800620c:	69db      	ldr	r3, [r3, #28]
 800620e:	f003 0318 	and.w	r3, r3, #24
 8006212:	2b10      	cmp	r3, #16
 8006214:	d102      	bne.n	800621c <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006216:	4b7b      	ldr	r3, [pc, #492]	@ (8006404 <HAL_RCC_GetSysClockFreq+0x244>)
 8006218:	61fb      	str	r3, [r7, #28]
 800621a:	e0e5      	b.n	80063e8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800621c:	4b76      	ldr	r3, [pc, #472]	@ (80063f8 <HAL_RCC_GetSysClockFreq+0x238>)
 800621e:	69db      	ldr	r3, [r3, #28]
 8006220:	f003 0318 	and.w	r3, r3, #24
 8006224:	2b18      	cmp	r3, #24
 8006226:	f040 80dd 	bne.w	80063e4 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800622a:	4b73      	ldr	r3, [pc, #460]	@ (80063f8 <HAL_RCC_GetSysClockFreq+0x238>)
 800622c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800622e:	f003 0303 	and.w	r3, r3, #3
 8006232:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8006234:	4b70      	ldr	r3, [pc, #448]	@ (80063f8 <HAL_RCC_GetSysClockFreq+0x238>)
 8006236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006238:	0a1b      	lsrs	r3, r3, #8
 800623a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800623e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006240:	4b6d      	ldr	r3, [pc, #436]	@ (80063f8 <HAL_RCC_GetSysClockFreq+0x238>)
 8006242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006244:	091b      	lsrs	r3, r3, #4
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800624c:	4b6a      	ldr	r3, [pc, #424]	@ (80063f8 <HAL_RCC_GetSysClockFreq+0x238>)
 800624e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8006250:	08db      	lsrs	r3, r3, #3
 8006252:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	fb02 f303 	mul.w	r3, r2, r3
 800625c:	ee07 3a90 	vmov	s15, r3
 8006260:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006264:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	2b00      	cmp	r3, #0
 800626c:	f000 80b7 	beq.w	80063de <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	2b01      	cmp	r3, #1
 8006274:	d003      	beq.n	800627e <HAL_RCC_GetSysClockFreq+0xbe>
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	2b03      	cmp	r3, #3
 800627a:	d056      	beq.n	800632a <HAL_RCC_GetSysClockFreq+0x16a>
 800627c:	e077      	b.n	800636e <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800627e:	4b5e      	ldr	r3, [pc, #376]	@ (80063f8 <HAL_RCC_GetSysClockFreq+0x238>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 0320 	and.w	r3, r3, #32
 8006286:	2b00      	cmp	r3, #0
 8006288:	d02d      	beq.n	80062e6 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800628a:	4b5b      	ldr	r3, [pc, #364]	@ (80063f8 <HAL_RCC_GetSysClockFreq+0x238>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	08db      	lsrs	r3, r3, #3
 8006290:	f003 0303 	and.w	r3, r3, #3
 8006294:	4a5a      	ldr	r2, [pc, #360]	@ (8006400 <HAL_RCC_GetSysClockFreq+0x240>)
 8006296:	fa22 f303 	lsr.w	r3, r2, r3
 800629a:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	ee07 3a90 	vmov	s15, r3
 80062a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	ee07 3a90 	vmov	s15, r3
 80062ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062b4:	4b50      	ldr	r3, [pc, #320]	@ (80063f8 <HAL_RCC_GetSysClockFreq+0x238>)
 80062b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062bc:	ee07 3a90 	vmov	s15, r3
 80062c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80062c4:	ed97 6a02 	vldr	s12, [r7, #8]
 80062c8:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8006408 <HAL_RCC_GetSysClockFreq+0x248>
 80062cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80062d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062e0:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80062e4:	e065      	b.n	80063b2 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	ee07 3a90 	vmov	s15, r3
 80062ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062f0:	eddf 6a46 	vldr	s13, [pc, #280]	@ 800640c <HAL_RCC_GetSysClockFreq+0x24c>
 80062f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062f8:	4b3f      	ldr	r3, [pc, #252]	@ (80063f8 <HAL_RCC_GetSysClockFreq+0x238>)
 80062fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006300:	ee07 3a90 	vmov	s15, r3
 8006304:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8006308:	ed97 6a02 	vldr	s12, [r7, #8]
 800630c:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006408 <HAL_RCC_GetSysClockFreq+0x248>
 8006310:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006314:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8006318:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800631c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006324:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8006328:	e043      	b.n	80063b2 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	ee07 3a90 	vmov	s15, r3
 8006330:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006334:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8006410 <HAL_RCC_GetSysClockFreq+0x250>
 8006338:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800633c:	4b2e      	ldr	r3, [pc, #184]	@ (80063f8 <HAL_RCC_GetSysClockFreq+0x238>)
 800633e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006340:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006344:	ee07 3a90 	vmov	s15, r3
 8006348:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800634c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006350:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8006408 <HAL_RCC_GetSysClockFreq+0x248>
 8006354:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006358:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800635c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006360:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006364:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006368:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 800636c:	e021      	b.n	80063b2 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	ee07 3a90 	vmov	s15, r3
 8006374:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006378:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006414 <HAL_RCC_GetSysClockFreq+0x254>
 800637c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006380:	4b1d      	ldr	r3, [pc, #116]	@ (80063f8 <HAL_RCC_GetSysClockFreq+0x238>)
 8006382:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006388:	ee07 3a90 	vmov	s15, r3
 800638c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006390:	ed97 6a02 	vldr	s12, [r7, #8]
 8006394:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8006408 <HAL_RCC_GetSysClockFreq+0x248>
 8006398:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800639c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80063a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80063a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ac:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80063b0:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80063b2:	4b11      	ldr	r3, [pc, #68]	@ (80063f8 <HAL_RCC_GetSysClockFreq+0x238>)
 80063b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063b6:	0a5b      	lsrs	r3, r3, #9
 80063b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063bc:	3301      	adds	r3, #1
 80063be:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	ee07 3a90 	vmov	s15, r3
 80063c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80063ca:	edd7 6a06 	vldr	s13, [r7, #24]
 80063ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063d6:	ee17 3a90 	vmov	r3, s15
 80063da:	61fb      	str	r3, [r7, #28]
 80063dc:	e004      	b.n	80063e8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80063de:	2300      	movs	r3, #0
 80063e0:	61fb      	str	r3, [r7, #28]
 80063e2:	e001      	b.n	80063e8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80063e4:	4b06      	ldr	r3, [pc, #24]	@ (8006400 <HAL_RCC_GetSysClockFreq+0x240>)
 80063e6:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80063e8:	69fb      	ldr	r3, [r7, #28]
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3724      	adds	r7, #36	@ 0x24
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	44020c00 	.word	0x44020c00
 80063fc:	003d0900 	.word	0x003d0900
 8006400:	03d09000 	.word	0x03d09000
 8006404:	017d7840 	.word	0x017d7840
 8006408:	46000000 	.word	0x46000000
 800640c:	4c742400 	.word	0x4c742400
 8006410:	4bbebc20 	.word	0x4bbebc20
 8006414:	4a742400 	.word	0x4a742400

08006418 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800641c:	f7ff fed0 	bl	80061c0 <HAL_RCC_GetSysClockFreq>
 8006420:	4602      	mov	r2, r0
 8006422:	4b08      	ldr	r3, [pc, #32]	@ (8006444 <HAL_RCC_GetHCLKFreq+0x2c>)
 8006424:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8006426:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800642a:	4907      	ldr	r1, [pc, #28]	@ (8006448 <HAL_RCC_GetHCLKFreq+0x30>)
 800642c:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800642e:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8006432:	fa22 f303 	lsr.w	r3, r2, r3
 8006436:	4a05      	ldr	r2, [pc, #20]	@ (800644c <HAL_RCC_GetHCLKFreq+0x34>)
 8006438:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800643a:	4b04      	ldr	r3, [pc, #16]	@ (800644c <HAL_RCC_GetHCLKFreq+0x34>)
 800643c:	681b      	ldr	r3, [r3, #0]
}
 800643e:	4618      	mov	r0, r3
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	44020c00 	.word	0x44020c00
 8006448:	08011978 	.word	0x08011978
 800644c:	2000001c 	.word	0x2000001c

08006450 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8006454:	f7ff ffe0 	bl	8006418 <HAL_RCC_GetHCLKFreq>
 8006458:	4602      	mov	r2, r0
 800645a:	4b06      	ldr	r3, [pc, #24]	@ (8006474 <HAL_RCC_GetPCLK1Freq+0x24>)
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	091b      	lsrs	r3, r3, #4
 8006460:	f003 0307 	and.w	r3, r3, #7
 8006464:	4904      	ldr	r1, [pc, #16]	@ (8006478 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006466:	5ccb      	ldrb	r3, [r1, r3]
 8006468:	f003 031f 	and.w	r3, r3, #31
 800646c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006470:	4618      	mov	r0, r3
 8006472:	bd80      	pop	{r7, pc}
 8006474:	44020c00 	.word	0x44020c00
 8006478:	08011988 	.word	0x08011988

0800647c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8006480:	f7ff ffca 	bl	8006418 <HAL_RCC_GetHCLKFreq>
 8006484:	4602      	mov	r2, r0
 8006486:	4b06      	ldr	r3, [pc, #24]	@ (80064a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	0a1b      	lsrs	r3, r3, #8
 800648c:	f003 0307 	and.w	r3, r3, #7
 8006490:	4904      	ldr	r1, [pc, #16]	@ (80064a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006492:	5ccb      	ldrb	r3, [r1, r3]
 8006494:	f003 031f 	and.w	r3, r3, #31
 8006498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800649c:	4618      	mov	r0, r3
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	44020c00 	.word	0x44020c00
 80064a4:	08011988 	.word	0x08011988

080064a8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80064ac:	f7ff ffb4 	bl	8006418 <HAL_RCC_GetHCLKFreq>
 80064b0:	4602      	mov	r2, r0
 80064b2:	4b06      	ldr	r3, [pc, #24]	@ (80064cc <HAL_RCC_GetPCLK3Freq+0x24>)
 80064b4:	6a1b      	ldr	r3, [r3, #32]
 80064b6:	0b1b      	lsrs	r3, r3, #12
 80064b8:	f003 0307 	and.w	r3, r3, #7
 80064bc:	4904      	ldr	r1, [pc, #16]	@ (80064d0 <HAL_RCC_GetPCLK3Freq+0x28>)
 80064be:	5ccb      	ldrb	r3, [r1, r3]
 80064c0:	f003 031f 	and.w	r3, r3, #31
 80064c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	44020c00 	.word	0x44020c00
 80064d0:	08011988 	.word	0x08011988

080064d4 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80064d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064d8:	b0d8      	sub	sp, #352	@ 0x160
 80064da:	af00      	add	r7, sp, #0
 80064dc:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80064e0:	2300      	movs	r3, #0
 80064e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80064e6:	2300      	movs	r3, #0
 80064e8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80064ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f4:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 80064f8:	2500      	movs	r5, #0
 80064fa:	ea54 0305 	orrs.w	r3, r4, r5
 80064fe:	d00b      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8006500:	4bcd      	ldr	r3, [pc, #820]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006502:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006506:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 800650a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800650e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006510:	4ac9      	ldr	r2, [pc, #804]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006512:	430b      	orrs	r3, r1
 8006514:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006518:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800651c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006520:	f002 0801 	and.w	r8, r2, #1
 8006524:	f04f 0900 	mov.w	r9, #0
 8006528:	ea58 0309 	orrs.w	r3, r8, r9
 800652c:	d042      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 800652e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006534:	2b05      	cmp	r3, #5
 8006536:	d823      	bhi.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8006538:	a201      	add	r2, pc, #4	@ (adr r2, 8006540 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800653a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800653e:	bf00      	nop
 8006540:	08006589 	.word	0x08006589
 8006544:	08006559 	.word	0x08006559
 8006548:	0800656d 	.word	0x0800656d
 800654c:	08006589 	.word	0x08006589
 8006550:	08006589 	.word	0x08006589
 8006554:	08006589 	.word	0x08006589
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006558:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800655c:	3308      	adds	r3, #8
 800655e:	4618      	mov	r0, r3
 8006560:	f004 feda 	bl	800b318 <RCCEx_PLL2_Config>
 8006564:	4603      	mov	r3, r0
 8006566:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800656a:	e00e      	b.n	800658a <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800656c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006570:	3330      	adds	r3, #48	@ 0x30
 8006572:	4618      	mov	r0, r3
 8006574:	f004 ff68 	bl	800b448 <RCCEx_PLL3_Config>
 8006578:	4603      	mov	r3, r0
 800657a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800657e:	e004      	b.n	800658a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006586:	e000      	b.n	800658a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8006588:	bf00      	nop
    }

    if (ret == HAL_OK)
 800658a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800658e:	2b00      	cmp	r3, #0
 8006590:	d10c      	bne.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8006592:	4ba9      	ldr	r3, [pc, #676]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006594:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006598:	f023 0107 	bic.w	r1, r3, #7
 800659c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065a2:	4aa5      	ldr	r2, [pc, #660]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80065a4:	430b      	orrs	r3, r1
 80065a6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80065aa:	e003      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ac:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80065b0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80065b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065bc:	f002 0a02 	and.w	sl, r2, #2
 80065c0:	f04f 0b00 	mov.w	fp, #0
 80065c4:	ea5a 030b 	orrs.w	r3, sl, fp
 80065c8:	f000 8088 	beq.w	80066dc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80065cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065d2:	2b28      	cmp	r3, #40	@ 0x28
 80065d4:	d868      	bhi.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80065d6:	a201      	add	r2, pc, #4	@ (adr r2, 80065dc <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80065d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065dc:	080066b1 	.word	0x080066b1
 80065e0:	080066a9 	.word	0x080066a9
 80065e4:	080066a9 	.word	0x080066a9
 80065e8:	080066a9 	.word	0x080066a9
 80065ec:	080066a9 	.word	0x080066a9
 80065f0:	080066a9 	.word	0x080066a9
 80065f4:	080066a9 	.word	0x080066a9
 80065f8:	080066a9 	.word	0x080066a9
 80065fc:	08006681 	.word	0x08006681
 8006600:	080066a9 	.word	0x080066a9
 8006604:	080066a9 	.word	0x080066a9
 8006608:	080066a9 	.word	0x080066a9
 800660c:	080066a9 	.word	0x080066a9
 8006610:	080066a9 	.word	0x080066a9
 8006614:	080066a9 	.word	0x080066a9
 8006618:	080066a9 	.word	0x080066a9
 800661c:	08006695 	.word	0x08006695
 8006620:	080066a9 	.word	0x080066a9
 8006624:	080066a9 	.word	0x080066a9
 8006628:	080066a9 	.word	0x080066a9
 800662c:	080066a9 	.word	0x080066a9
 8006630:	080066a9 	.word	0x080066a9
 8006634:	080066a9 	.word	0x080066a9
 8006638:	080066a9 	.word	0x080066a9
 800663c:	080066b1 	.word	0x080066b1
 8006640:	080066a9 	.word	0x080066a9
 8006644:	080066a9 	.word	0x080066a9
 8006648:	080066a9 	.word	0x080066a9
 800664c:	080066a9 	.word	0x080066a9
 8006650:	080066a9 	.word	0x080066a9
 8006654:	080066a9 	.word	0x080066a9
 8006658:	080066a9 	.word	0x080066a9
 800665c:	080066b1 	.word	0x080066b1
 8006660:	080066a9 	.word	0x080066a9
 8006664:	080066a9 	.word	0x080066a9
 8006668:	080066a9 	.word	0x080066a9
 800666c:	080066a9 	.word	0x080066a9
 8006670:	080066a9 	.word	0x080066a9
 8006674:	080066a9 	.word	0x080066a9
 8006678:	080066a9 	.word	0x080066a9
 800667c:	080066b1 	.word	0x080066b1
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006680:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006684:	3308      	adds	r3, #8
 8006686:	4618      	mov	r0, r3
 8006688:	f004 fe46 	bl	800b318 <RCCEx_PLL2_Config>
 800668c:	4603      	mov	r3, r0
 800668e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8006692:	e00e      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006694:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006698:	3330      	adds	r3, #48	@ 0x30
 800669a:	4618      	mov	r0, r3
 800669c:	f004 fed4 	bl	800b448 <RCCEx_PLL3_Config>
 80066a0:	4603      	mov	r3, r0
 80066a2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80066a6:	e004      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80066ae:	e000      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 80066b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066b2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d10c      	bne.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80066ba:	4b5f      	ldr	r3, [pc, #380]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80066bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80066c0:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80066c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066ca:	4a5b      	ldr	r2, [pc, #364]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80066cc:	430b      	orrs	r3, r1
 80066ce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80066d2:	e003      	b.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066d4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80066d8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80066dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e4:	f002 0304 	and.w	r3, r2, #4
 80066e8:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80066ec:	2300      	movs	r3, #0
 80066ee:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80066f2:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 80066f6:	460b      	mov	r3, r1
 80066f8:	4313      	orrs	r3, r2
 80066fa:	d04e      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80066fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006700:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006702:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006706:	d02c      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8006708:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800670c:	d825      	bhi.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800670e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006712:	d028      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006714:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006718:	d81f      	bhi.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800671a:	2bc0      	cmp	r3, #192	@ 0xc0
 800671c:	d025      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800671e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006720:	d81b      	bhi.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006722:	2b80      	cmp	r3, #128	@ 0x80
 8006724:	d00f      	beq.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8006726:	2b80      	cmp	r3, #128	@ 0x80
 8006728:	d817      	bhi.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800672a:	2b00      	cmp	r3, #0
 800672c:	d01f      	beq.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x29a>
 800672e:	2b40      	cmp	r3, #64	@ 0x40
 8006730:	d113      	bne.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006732:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006736:	3308      	adds	r3, #8
 8006738:	4618      	mov	r0, r3
 800673a:	f004 fded 	bl	800b318 <RCCEx_PLL2_Config>
 800673e:	4603      	mov	r3, r0
 8006740:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8006744:	e014      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006746:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800674a:	3330      	adds	r3, #48	@ 0x30
 800674c:	4618      	mov	r0, r3
 800674e:	f004 fe7b 	bl	800b448 <RCCEx_PLL3_Config>
 8006752:	4603      	mov	r3, r0
 8006754:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8006758:	e00a      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006760:	e006      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006762:	bf00      	nop
 8006764:	e004      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006766:	bf00      	nop
 8006768:	e002      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800676a:	bf00      	nop
 800676c:	e000      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800676e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006770:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006774:	2b00      	cmp	r3, #0
 8006776:	d10c      	bne.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8006778:	4b2f      	ldr	r3, [pc, #188]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800677a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800677e:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006782:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006786:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006788:	4a2b      	ldr	r2, [pc, #172]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800678a:	430b      	orrs	r3, r1
 800678c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006790:	e003      	b.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006792:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006796:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800679a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800679e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a2:	f002 0308 	and.w	r3, r2, #8
 80067a6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80067aa:	2300      	movs	r3, #0
 80067ac:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80067b0:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 80067b4:	460b      	mov	r3, r1
 80067b6:	4313      	orrs	r3, r2
 80067b8:	d056      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 80067ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067c0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80067c4:	d031      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x356>
 80067c6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80067ca:	d82a      	bhi.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80067cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067d0:	d02d      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80067d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067d6:	d824      	bhi.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80067d8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80067dc:	d029      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80067de:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80067e2:	d81e      	bhi.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80067e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067e8:	d011      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80067ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067ee:	d818      	bhi.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d023      	beq.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x368>
 80067f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067f8:	d113      	bne.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80067fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067fe:	3308      	adds	r3, #8
 8006800:	4618      	mov	r0, r3
 8006802:	f004 fd89 	bl	800b318 <RCCEx_PLL2_Config>
 8006806:	4603      	mov	r3, r0
 8006808:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 800680c:	e017      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800680e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006812:	3330      	adds	r3, #48	@ 0x30
 8006814:	4618      	mov	r0, r3
 8006816:	f004 fe17 	bl	800b448 <RCCEx_PLL3_Config>
 800681a:	4603      	mov	r3, r0
 800681c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8006820:	e00d      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006828:	e009      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800682a:	bf00      	nop
 800682c:	e007      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800682e:	bf00      	nop
 8006830:	e005      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8006832:	bf00      	nop
 8006834:	e003      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8006836:	bf00      	nop
 8006838:	44020c00 	.word	0x44020c00
        break;
 800683c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800683e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006842:	2b00      	cmp	r3, #0
 8006844:	d10c      	bne.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8006846:	4bbb      	ldr	r3, [pc, #748]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006848:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800684c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8006850:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006854:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006856:	4ab7      	ldr	r2, [pc, #732]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006858:	430b      	orrs	r3, r1
 800685a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800685e:	e003      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006860:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006864:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006868:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800686c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006870:	f002 0310 	and.w	r3, r2, #16
 8006874:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8006878:	2300      	movs	r3, #0
 800687a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800687e:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8006882:	460b      	mov	r3, r1
 8006884:	4313      	orrs	r3, r2
 8006886:	d053      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8006888:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800688c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800688e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006892:	d031      	beq.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8006894:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006898:	d82a      	bhi.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800689a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800689e:	d02d      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x428>
 80068a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80068a4:	d824      	bhi.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80068a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80068aa:	d029      	beq.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80068ac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80068b0:	d81e      	bhi.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80068b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068b6:	d011      	beq.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x408>
 80068b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068bc:	d818      	bhi.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d020      	beq.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x430>
 80068c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068c6:	d113      	bne.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80068c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068cc:	3308      	adds	r3, #8
 80068ce:	4618      	mov	r0, r3
 80068d0:	f004 fd22 	bl	800b318 <RCCEx_PLL2_Config>
 80068d4:	4603      	mov	r3, r0
 80068d6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80068da:	e014      	b.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80068dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068e0:	3330      	adds	r3, #48	@ 0x30
 80068e2:	4618      	mov	r0, r3
 80068e4:	f004 fdb0 	bl	800b448 <RCCEx_PLL3_Config>
 80068e8:	4603      	mov	r3, r0
 80068ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80068ee:	e00a      	b.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80068f6:	e006      	b.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80068f8:	bf00      	nop
 80068fa:	e004      	b.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80068fc:	bf00      	nop
 80068fe:	e002      	b.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8006900:	bf00      	nop
 8006902:	e000      	b.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8006904:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006906:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800690a:	2b00      	cmp	r3, #0
 800690c:	d10c      	bne.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800690e:	4b89      	ldr	r3, [pc, #548]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006910:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006914:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006918:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800691c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800691e:	4a85      	ldr	r2, [pc, #532]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006920:	430b      	orrs	r3, r1
 8006922:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006926:	e003      	b.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006928:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800692c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006930:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006938:	f002 0320 	and.w	r3, r2, #32
 800693c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8006940:	2300      	movs	r3, #0
 8006942:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8006946:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 800694a:	460b      	mov	r3, r1
 800694c:	4313      	orrs	r3, r2
 800694e:	d053      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8006950:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006956:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800695a:	d031      	beq.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 800695c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006960:	d82a      	bhi.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8006962:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006966:	d02d      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8006968:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800696c:	d824      	bhi.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800696e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006972:	d029      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8006974:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006978:	d81e      	bhi.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800697a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800697e:	d011      	beq.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006980:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006984:	d818      	bhi.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8006986:	2b00      	cmp	r3, #0
 8006988:	d020      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800698a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800698e:	d113      	bne.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006990:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006994:	3308      	adds	r3, #8
 8006996:	4618      	mov	r0, r3
 8006998:	f004 fcbe 	bl	800b318 <RCCEx_PLL2_Config>
 800699c:	4603      	mov	r3, r0
 800699e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80069a2:	e014      	b.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80069a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069a8:	3330      	adds	r3, #48	@ 0x30
 80069aa:	4618      	mov	r0, r3
 80069ac:	f004 fd4c 	bl	800b448 <RCCEx_PLL3_Config>
 80069b0:	4603      	mov	r3, r0
 80069b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80069b6:	e00a      	b.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80069be:	e006      	b.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80069c0:	bf00      	nop
 80069c2:	e004      	b.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80069c4:	bf00      	nop
 80069c6:	e002      	b.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80069c8:	bf00      	nop
 80069ca:	e000      	b.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80069cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069ce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d10c      	bne.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80069d6:	4b57      	ldr	r3, [pc, #348]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80069d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80069dc:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 80069e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069e6:	4a53      	ldr	r2, [pc, #332]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80069e8:	430b      	orrs	r3, r1
 80069ea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80069ee:	e003      	b.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069f0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80069f4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80069f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a00:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006a04:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8006a08:	2300      	movs	r3, #0
 8006a0a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8006a0e:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 8006a12:	460b      	mov	r3, r1
 8006a14:	4313      	orrs	r3, r2
 8006a16:	d053      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8006a18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a1e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006a22:	d031      	beq.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8006a24:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006a28:	d82a      	bhi.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8006a2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a2e:	d02d      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8006a30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a34:	d824      	bhi.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8006a36:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006a3a:	d029      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006a3c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006a40:	d81e      	bhi.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8006a42:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006a46:	d011      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x598>
 8006a48:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006a4c:	d818      	bhi.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d020      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006a52:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006a56:	d113      	bne.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006a58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a5c:	3308      	adds	r3, #8
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f004 fc5a 	bl	800b318 <RCCEx_PLL2_Config>
 8006a64:	4603      	mov	r3, r0
 8006a66:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8006a6a:	e014      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006a6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a70:	3330      	adds	r3, #48	@ 0x30
 8006a72:	4618      	mov	r0, r3
 8006a74:	f004 fce8 	bl	800b448 <RCCEx_PLL3_Config>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8006a7e:	e00a      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006a86:	e006      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8006a88:	bf00      	nop
 8006a8a:	e004      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8006a8c:	bf00      	nop
 8006a8e:	e002      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8006a90:	bf00      	nop
 8006a92:	e000      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8006a94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a96:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10c      	bne.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8006a9e:	4b25      	ldr	r3, [pc, #148]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006aa0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006aa4:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8006aa8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006aac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006aae:	4a21      	ldr	r2, [pc, #132]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006ab0:	430b      	orrs	r3, r1
 8006ab2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006ab6:	e003      	b.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ab8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006abc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006ac0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006acc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8006ad6:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 8006ada:	460b      	mov	r3, r1
 8006adc:	4313      	orrs	r3, r2
 8006ade:	d055      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8006ae0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ae4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006ae6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006aea:	d033      	beq.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8006aec:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006af0:	d82c      	bhi.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x678>
 8006af2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006af6:	d02f      	beq.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8006af8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006afc:	d826      	bhi.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x678>
 8006afe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006b02:	d02b      	beq.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x688>
 8006b04:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006b08:	d820      	bhi.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x678>
 8006b0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b0e:	d013      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006b10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b14:	d81a      	bhi.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x678>
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d022      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8006b1a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b1e:	d115      	bne.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006b20:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b24:	3308      	adds	r3, #8
 8006b26:	4618      	mov	r0, r3
 8006b28:	f004 fbf6 	bl	800b318 <RCCEx_PLL2_Config>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8006b32:	e016      	b.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8006b34:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006b38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b3c:	3330      	adds	r3, #48	@ 0x30
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f004 fc82 	bl	800b448 <RCCEx_PLL3_Config>
 8006b44:	4603      	mov	r3, r0
 8006b46:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8006b4a:	e00a      	b.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006b52:	e006      	b.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8006b54:	bf00      	nop
 8006b56:	e004      	b.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8006b58:	bf00      	nop
 8006b5a:	e002      	b.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8006b5c:	bf00      	nop
 8006b5e:	e000      	b.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8006b60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b62:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10c      	bne.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8006b6a:	4bbb      	ldr	r3, [pc, #748]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8006b6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006b70:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006b74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b7a:	4ab7      	ldr	r2, [pc, #732]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8006b7c:	430b      	orrs	r3, r1
 8006b7e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006b82:	e003      	b.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b84:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006b88:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8006b8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b94:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8006b98:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8006ba2:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	d053      	beq.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8006bac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006bb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006bb2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006bb6:	d031      	beq.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x748>
 8006bb8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006bbc:	d82a      	bhi.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8006bbe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006bc2:	d02d      	beq.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8006bc4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006bc8:	d824      	bhi.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8006bca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006bce:	d029      	beq.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8006bd0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006bd4:	d81e      	bhi.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8006bd6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006bda:	d011      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8006bdc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006be0:	d818      	bhi.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d020      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8006be6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006bea:	d113      	bne.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006bec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006bf0:	3308      	adds	r3, #8
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f004 fb90 	bl	800b318 <RCCEx_PLL2_Config>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8006bfe:	e014      	b.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006c00:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c04:	3330      	adds	r3, #48	@ 0x30
 8006c06:	4618      	mov	r0, r3
 8006c08:	f004 fc1e 	bl	800b448 <RCCEx_PLL3_Config>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8006c12:	e00a      	b.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c14:	2301      	movs	r3, #1
 8006c16:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006c1a:	e006      	b.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8006c1c:	bf00      	nop
 8006c1e:	e004      	b.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8006c20:	bf00      	nop
 8006c22:	e002      	b.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8006c24:	bf00      	nop
 8006c26:	e000      	b.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8006c28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c2a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d10c      	bne.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8006c32:	4b89      	ldr	r3, [pc, #548]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8006c34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006c38:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006c3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c42:	4a85      	ldr	r2, [pc, #532]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8006c44:	430b      	orrs	r3, r1
 8006c46:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006c4a:	e003      	b.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c4c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006c50:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8006c54:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5c:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8006c60:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006c64:	2300      	movs	r3, #0
 8006c66:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006c6a:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006c6e:	460b      	mov	r3, r1
 8006c70:	4313      	orrs	r3, r2
 8006c72:	d055      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8006c74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c7c:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8006c80:	d031      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x812>
 8006c82:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8006c86:	d82a      	bhi.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8006c88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c8c:	d02d      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x816>
 8006c8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c92:	d824      	bhi.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8006c94:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8006c98:	d029      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8006c9a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8006c9e:	d81e      	bhi.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8006ca0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ca4:	d011      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8006ca6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006caa:	d818      	bhi.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d020      	beq.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8006cb0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006cb4:	d113      	bne.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006cb6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cba:	3308      	adds	r3, #8
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f004 fb2b 	bl	800b318 <RCCEx_PLL2_Config>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8006cc8:	e014      	b.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006cca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cce:	3330      	adds	r3, #48	@ 0x30
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f004 fbb9 	bl	800b448 <RCCEx_PLL3_Config>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8006cdc:	e00a      	b.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006ce4:	e006      	b.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8006ce6:	bf00      	nop
 8006ce8:	e004      	b.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8006cea:	bf00      	nop
 8006cec:	e002      	b.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8006cee:	bf00      	nop
 8006cf0:	e000      	b.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8006cf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cf4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d10d      	bne.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8006cfc:	4b56      	ldr	r3, [pc, #344]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8006cfe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006d02:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 8006d06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d0e:	4a52      	ldr	r2, [pc, #328]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8006d10:	430b      	orrs	r3, r1
 8006d12:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006d16:	e003      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d18:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006d1c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8006d20:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d28:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006d2c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006d30:	2300      	movs	r3, #0
 8006d32:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006d36:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	d044      	beq.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8006d40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d48:	2b05      	cmp	r3, #5
 8006d4a:	d823      	bhi.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8006d4c:	a201      	add	r2, pc, #4	@ (adr r2, 8006d54 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8006d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d52:	bf00      	nop
 8006d54:	08006d9d 	.word	0x08006d9d
 8006d58:	08006d6d 	.word	0x08006d6d
 8006d5c:	08006d81 	.word	0x08006d81
 8006d60:	08006d9d 	.word	0x08006d9d
 8006d64:	08006d9d 	.word	0x08006d9d
 8006d68:	08006d9d 	.word	0x08006d9d
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006d6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d70:	3308      	adds	r3, #8
 8006d72:	4618      	mov	r0, r3
 8006d74:	f004 fad0 	bl	800b318 <RCCEx_PLL2_Config>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8006d7e:	e00e      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006d80:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d84:	3330      	adds	r3, #48	@ 0x30
 8006d86:	4618      	mov	r0, r3
 8006d88:	f004 fb5e 	bl	800b448 <RCCEx_PLL3_Config>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8006d92:	e004      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006d9a:	e000      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8006d9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d9e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d10d      	bne.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8006da6:	4b2c      	ldr	r3, [pc, #176]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8006da8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006dac:	f023 0107 	bic.w	r1, r3, #7
 8006db0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006db8:	4a27      	ldr	r2, [pc, #156]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8006dba:	430b      	orrs	r3, r1
 8006dbc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006dc0:	e003      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dc2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006dc6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8006dca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006dd6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006dda:	2300      	movs	r3, #0
 8006ddc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006de0:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006de4:	460b      	mov	r3, r1
 8006de6:	4313      	orrs	r3, r2
 8006de8:	d04f      	beq.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8006dea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006df2:	2b50      	cmp	r3, #80	@ 0x50
 8006df4:	d029      	beq.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8006df6:	2b50      	cmp	r3, #80	@ 0x50
 8006df8:	d823      	bhi.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8006dfa:	2b40      	cmp	r3, #64	@ 0x40
 8006dfc:	d027      	beq.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8006dfe:	2b40      	cmp	r3, #64	@ 0x40
 8006e00:	d81f      	bhi.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8006e02:	2b30      	cmp	r3, #48	@ 0x30
 8006e04:	d025      	beq.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8006e06:	2b30      	cmp	r3, #48	@ 0x30
 8006e08:	d81b      	bhi.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8006e0a:	2b20      	cmp	r3, #32
 8006e0c:	d00f      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006e0e:	2b20      	cmp	r3, #32
 8006e10:	d817      	bhi.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d022      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8006e16:	2b10      	cmp	r3, #16
 8006e18:	d113      	bne.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006e1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e1e:	3308      	adds	r3, #8
 8006e20:	4618      	mov	r0, r3
 8006e22:	f004 fa79 	bl	800b318 <RCCEx_PLL2_Config>
 8006e26:	4603      	mov	r3, r0
 8006e28:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8006e2c:	e017      	b.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006e2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e32:	3330      	adds	r3, #48	@ 0x30
 8006e34:	4618      	mov	r0, r3
 8006e36:	f004 fb07 	bl	800b448 <RCCEx_PLL3_Config>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8006e40:	e00d      	b.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006e48:	e009      	b.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8006e4a:	bf00      	nop
 8006e4c:	e007      	b.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8006e4e:	bf00      	nop
 8006e50:	e005      	b.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8006e52:	bf00      	nop
 8006e54:	e003      	b.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8006e56:	bf00      	nop
 8006e58:	44020c00 	.word	0x44020c00
        break;
 8006e5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e5e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d10d      	bne.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8006e66:	4baf      	ldr	r3, [pc, #700]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006e68:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006e6c:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8006e70:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e78:	4aaa      	ldr	r2, [pc, #680]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006e7a:	430b      	orrs	r3, r1
 8006e7c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006e80:	e003      	b.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e82:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006e86:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e92:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006e96:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006ea0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	d055      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8006eaa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006eae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006eb2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006eb6:	d031      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8006eb8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006ebc:	d82a      	bhi.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8006ebe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006ec2:	d02d      	beq.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8006ec4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006ec8:	d824      	bhi.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8006eca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006ece:	d029      	beq.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8006ed0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006ed4:	d81e      	bhi.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8006ed6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006eda:	d011      	beq.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8006edc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ee0:	d818      	bhi.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d020      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8006ee6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006eea:	d113      	bne.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006eec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ef0:	3308      	adds	r3, #8
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f004 fa10 	bl	800b318 <RCCEx_PLL2_Config>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8006efe:	e014      	b.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006f00:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f04:	3330      	adds	r3, #48	@ 0x30
 8006f06:	4618      	mov	r0, r3
 8006f08:	f004 fa9e 	bl	800b448 <RCCEx_PLL3_Config>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8006f12:	e00a      	b.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006f1a:	e006      	b.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8006f1c:	bf00      	nop
 8006f1e:	e004      	b.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8006f20:	bf00      	nop
 8006f22:	e002      	b.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8006f24:	bf00      	nop
 8006f26:	e000      	b.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8006f28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f2a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d10d      	bne.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8006f32:	4b7c      	ldr	r3, [pc, #496]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f38:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006f3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f44:	4a77      	ldr	r2, [pc, #476]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006f46:	430b      	orrs	r3, r1
 8006f48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006f4c:	e003      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f4e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006f52:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006f56:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006f62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006f66:	2300      	movs	r3, #0
 8006f68:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006f6c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006f70:	460b      	mov	r3, r1
 8006f72:	4313      	orrs	r3, r2
 8006f74:	d03d      	beq.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8006f76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f7e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f82:	d01b      	beq.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8006f84:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f88:	d814      	bhi.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8006f8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f8e:	d017      	beq.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8006f90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f94:	d80e      	bhi.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d014      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8006f9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f9e:	d109      	bne.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006fa0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006fa4:	3330      	adds	r3, #48	@ 0x30
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f004 fa4e 	bl	800b448 <RCCEx_PLL3_Config>
 8006fac:	4603      	mov	r3, r0
 8006fae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8006fb2:	e008      	b.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006fba:	e004      	b.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8006fbc:	bf00      	nop
 8006fbe:	e002      	b.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8006fc0:	bf00      	nop
 8006fc2:	e000      	b.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8006fc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fc6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d10d      	bne.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8006fce:	4b55      	ldr	r3, [pc, #340]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006fd0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006fd4:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006fd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fe0:	4a50      	ldr	r2, [pc, #320]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006fe2:	430b      	orrs	r3, r1
 8006fe4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006fe8:	e003      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006fee:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006ff2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffa:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006ffe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007002:	2300      	movs	r3, #0
 8007004:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007008:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800700c:	460b      	mov	r3, r1
 800700e:	4313      	orrs	r3, r2
 8007010:	d03d      	beq.n	800708e <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8007012:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007016:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800701a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800701e:	d01b      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8007020:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007024:	d814      	bhi.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8007026:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800702a:	d017      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0xb88>
 800702c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007030:	d80e      	bhi.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8007032:	2b00      	cmp	r3, #0
 8007034:	d014      	beq.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8007036:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800703a:	d109      	bne.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800703c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007040:	3330      	adds	r3, #48	@ 0x30
 8007042:	4618      	mov	r0, r3
 8007044:	f004 fa00 	bl	800b448 <RCCEx_PLL3_Config>
 8007048:	4603      	mov	r3, r0
 800704a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800704e:	e008      	b.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007056:	e004      	b.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8007058:	bf00      	nop
 800705a:	e002      	b.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800705c:	bf00      	nop
 800705e:	e000      	b.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8007060:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007062:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007066:	2b00      	cmp	r3, #0
 8007068:	d10d      	bne.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800706a:	4b2e      	ldr	r3, [pc, #184]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800706c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007070:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8007074:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007078:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800707c:	4a29      	ldr	r2, [pc, #164]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800707e:	430b      	orrs	r3, r1
 8007080:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007084:	e003      	b.n	800708e <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007086:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800708a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800708e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007096:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800709a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800709e:	2300      	movs	r3, #0
 80070a0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80070a4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80070a8:	460b      	mov	r3, r1
 80070aa:	4313      	orrs	r3, r2
 80070ac:	d040      	beq.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 80070ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80070b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80070ba:	d01b      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 80070bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80070c0:	d814      	bhi.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0xc18>
 80070c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80070c6:	d017      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80070c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80070cc:	d80e      	bhi.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0xc18>
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d014      	beq.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80070d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070d6:	d109      	bne.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80070d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070dc:	3330      	adds	r3, #48	@ 0x30
 80070de:	4618      	mov	r0, r3
 80070e0:	f004 f9b2 	bl	800b448 <RCCEx_PLL3_Config>
 80070e4:	4603      	mov	r3, r0
 80070e6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 80070ea:	e008      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80070f2:	e004      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80070f4:	bf00      	nop
 80070f6:	e002      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80070f8:	bf00      	nop
 80070fa:	e000      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80070fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070fe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007102:	2b00      	cmp	r3, #0
 8007104:	d110      	bne.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8007106:	4b07      	ldr	r3, [pc, #28]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007108:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800710c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007110:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007114:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007118:	4a02      	ldr	r2, [pc, #8]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800711a:	430b      	orrs	r3, r1
 800711c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007120:	e006      	b.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8007122:	bf00      	nop
 8007124:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007128:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800712c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007130:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007138:	2100      	movs	r1, #0
 800713a:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 800713e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007142:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007146:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800714a:	460b      	mov	r3, r1
 800714c:	4313      	orrs	r3, r2
 800714e:	d03d      	beq.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8007150:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007154:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007158:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800715c:	d01b      	beq.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 800715e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007162:	d814      	bhi.n	800718e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8007164:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007168:	d017      	beq.n	800719a <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 800716a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800716e:	d80e      	bhi.n	800718e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8007170:	2b00      	cmp	r3, #0
 8007172:	d014      	beq.n	800719e <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8007174:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007178:	d109      	bne.n	800718e <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800717a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800717e:	3330      	adds	r3, #48	@ 0x30
 8007180:	4618      	mov	r0, r3
 8007182:	f004 f961 	bl	800b448 <RCCEx_PLL3_Config>
 8007186:	4603      	mov	r3, r0
 8007188:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 800718c:	e008      	b.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007194:	e004      	b.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8007196:	bf00      	nop
 8007198:	e002      	b.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800719a:	bf00      	nop
 800719c:	e000      	b.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800719e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071a0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d10d      	bne.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80071a8:	4bbe      	ldr	r3, [pc, #760]	@ (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80071aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80071ae:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80071b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80071ba:	4aba      	ldr	r2, [pc, #744]	@ (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80071bc:	430b      	orrs	r3, r1
 80071be:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80071c2:	e003      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071c4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80071c8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80071cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80071d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80071dc:	2300      	movs	r3, #0
 80071de:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80071e2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80071e6:	460b      	mov	r3, r1
 80071e8:	4313      	orrs	r3, r2
 80071ea:	d035      	beq.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80071ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80071f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80071f8:	d015      	beq.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 80071fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80071fe:	d80e      	bhi.n	800721e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007200:	2b00      	cmp	r3, #0
 8007202:	d012      	beq.n	800722a <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8007204:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007208:	d109      	bne.n	800721e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800720a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800720e:	3330      	adds	r3, #48	@ 0x30
 8007210:	4618      	mov	r0, r3
 8007212:	f004 f919 	bl	800b448 <RCCEx_PLL3_Config>
 8007216:	4603      	mov	r3, r0
 8007218:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 800721c:	e006      	b.n	800722c <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007224:	e002      	b.n	800722c <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8007226:	bf00      	nop
 8007228:	e000      	b.n	800722c <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800722a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800722c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007230:	2b00      	cmp	r3, #0
 8007232:	d10d      	bne.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8007234:	4b9b      	ldr	r3, [pc, #620]	@ (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007236:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800723a:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800723e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007242:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007246:	4a97      	ldr	r2, [pc, #604]	@ (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007248:	430b      	orrs	r3, r1
 800724a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800724e:	e003      	b.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007250:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007254:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007258:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800725c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007260:	2100      	movs	r1, #0
 8007262:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8007266:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800726a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800726e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007272:	460b      	mov	r3, r1
 8007274:	4313      	orrs	r3, r2
 8007276:	d00e      	beq.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8007278:	4b8a      	ldr	r3, [pc, #552]	@ (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800727a:	69db      	ldr	r3, [r3, #28]
 800727c:	4a89      	ldr	r2, [pc, #548]	@ (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800727e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007282:	61d3      	str	r3, [r2, #28]
 8007284:	4b87      	ldr	r3, [pc, #540]	@ (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007286:	69d9      	ldr	r1, [r3, #28]
 8007288:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800728c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8007290:	4a84      	ldr	r2, [pc, #528]	@ (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007292:	430b      	orrs	r3, r1
 8007294:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007296:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800729a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80072a2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80072a6:	2300      	movs	r3, #0
 80072a8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80072ac:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80072b0:	460b      	mov	r3, r1
 80072b2:	4313      	orrs	r3, r2
 80072b4:	d055      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80072b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80072be:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80072c2:	d031      	beq.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 80072c4:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80072c8:	d82a      	bhi.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80072ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072ce:	d02d      	beq.n	800732c <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80072d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072d4:	d824      	bhi.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80072d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072da:	d029      	beq.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80072dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072e0:	d81e      	bhi.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80072e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072e6:	d011      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0xe38>
 80072e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072ec:	d818      	bhi.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d020      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80072f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072f6:	d113      	bne.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80072f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072fc:	3308      	adds	r3, #8
 80072fe:	4618      	mov	r0, r3
 8007300:	f004 f80a 	bl	800b318 <RCCEx_PLL2_Config>
 8007304:	4603      	mov	r3, r0
 8007306:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800730a:	e014      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800730c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007310:	3330      	adds	r3, #48	@ 0x30
 8007312:	4618      	mov	r0, r3
 8007314:	f004 f898 	bl	800b448 <RCCEx_PLL3_Config>
 8007318:	4603      	mov	r3, r0
 800731a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800731e:	e00a      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007326:	e006      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8007328:	bf00      	nop
 800732a:	e004      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800732c:	bf00      	nop
 800732e:	e002      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8007330:	bf00      	nop
 8007332:	e000      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8007334:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007336:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800733a:	2b00      	cmp	r3, #0
 800733c:	d10d      	bne.n	800735a <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800733e:	4b59      	ldr	r3, [pc, #356]	@ (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007340:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007344:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8007348:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800734c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007350:	4a54      	ldr	r2, [pc, #336]	@ (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007352:	430b      	orrs	r3, r1
 8007354:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007358:	e003      	b.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800735a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800735e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007362:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800736e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007372:	2300      	movs	r3, #0
 8007374:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007378:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800737c:	460b      	mov	r3, r1
 800737e:	4313      	orrs	r3, r2
 8007380:	d055      	beq.n	800742e <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8007382:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007386:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800738a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800738e:	d031      	beq.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8007390:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007394:	d82a      	bhi.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8007396:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800739a:	d02d      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 800739c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80073a0:	d824      	bhi.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80073a2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80073a6:	d029      	beq.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0xf28>
 80073a8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80073ac:	d81e      	bhi.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80073ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073b2:	d011      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 80073b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073b8:	d818      	bhi.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d020      	beq.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80073be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073c2:	d113      	bne.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80073c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80073c8:	3308      	adds	r3, #8
 80073ca:	4618      	mov	r0, r3
 80073cc:	f003 ffa4 	bl	800b318 <RCCEx_PLL2_Config>
 80073d0:	4603      	mov	r3, r0
 80073d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80073d6:	e014      	b.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80073d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80073dc:	3330      	adds	r3, #48	@ 0x30
 80073de:	4618      	mov	r0, r3
 80073e0:	f004 f832 	bl	800b448 <RCCEx_PLL3_Config>
 80073e4:	4603      	mov	r3, r0
 80073e6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80073ea:	e00a      	b.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80073f2:	e006      	b.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80073f4:	bf00      	nop
 80073f6:	e004      	b.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80073f8:	bf00      	nop
 80073fa:	e002      	b.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80073fc:	bf00      	nop
 80073fe:	e000      	b.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8007400:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007402:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007406:	2b00      	cmp	r3, #0
 8007408:	d10d      	bne.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800740a:	4b26      	ldr	r3, [pc, #152]	@ (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800740c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007410:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007414:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007418:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800741c:	4a21      	ldr	r2, [pc, #132]	@ (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800741e:	430b      	orrs	r3, r1
 8007420:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007424:	e003      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007426:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800742a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 800742e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007436:	2100      	movs	r1, #0
 8007438:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 800743c:	f003 0320 	and.w	r3, r3, #32
 8007440:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007444:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007448:	460b      	mov	r3, r1
 800744a:	4313      	orrs	r3, r2
 800744c:	d057      	beq.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 800744e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007452:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007456:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800745a:	d033      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 800745c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007460:	d82c      	bhi.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8007462:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007466:	d02f      	beq.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8007468:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800746c:	d826      	bhi.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800746e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007472:	d02b      	beq.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8007474:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007478:	d820      	bhi.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800747a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800747e:	d013      	beq.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007480:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007484:	d81a      	bhi.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8007486:	2b00      	cmp	r3, #0
 8007488:	d022      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 800748a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800748e:	d115      	bne.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007490:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007494:	3308      	adds	r3, #8
 8007496:	4618      	mov	r0, r3
 8007498:	f003 ff3e 	bl	800b318 <RCCEx_PLL2_Config>
 800749c:	4603      	mov	r3, r0
 800749e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80074a2:	e016      	b.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 80074a4:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80074a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074ac:	3330      	adds	r3, #48	@ 0x30
 80074ae:	4618      	mov	r0, r3
 80074b0:	f003 ffca 	bl	800b448 <RCCEx_PLL3_Config>
 80074b4:	4603      	mov	r3, r0
 80074b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80074ba:	e00a      	b.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80074c2:	e006      	b.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80074c4:	bf00      	nop
 80074c6:	e004      	b.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80074c8:	bf00      	nop
 80074ca:	e002      	b.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80074cc:	bf00      	nop
 80074ce:	e000      	b.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80074d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074d2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d10d      	bne.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 80074da:	4bbb      	ldr	r3, [pc, #748]	@ (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80074dc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80074e0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80074e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80074ec:	4ab6      	ldr	r2, [pc, #728]	@ (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80074ee:	430b      	orrs	r3, r1
 80074f0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80074f4:	e003      	b.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074f6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80074fa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 80074fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007506:	2100      	movs	r1, #0
 8007508:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 800750c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007510:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007514:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007518:	460b      	mov	r3, r1
 800751a:	4313      	orrs	r3, r2
 800751c:	d055      	beq.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 800751e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007522:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007526:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800752a:	d031      	beq.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 800752c:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8007530:	d82a      	bhi.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8007532:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007536:	d02d      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8007538:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800753c:	d824      	bhi.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800753e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007542:	d029      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8007544:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007548:	d81e      	bhi.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800754a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800754e:	d011      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8007550:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007554:	d818      	bhi.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8007556:	2b00      	cmp	r3, #0
 8007558:	d020      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 800755a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800755e:	d113      	bne.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007560:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007564:	3308      	adds	r3, #8
 8007566:	4618      	mov	r0, r3
 8007568:	f003 fed6 	bl	800b318 <RCCEx_PLL2_Config>
 800756c:	4603      	mov	r3, r0
 800756e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8007572:	e014      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007574:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007578:	3330      	adds	r3, #48	@ 0x30
 800757a:	4618      	mov	r0, r3
 800757c:	f003 ff64 	bl	800b448 <RCCEx_PLL3_Config>
 8007580:	4603      	mov	r3, r0
 8007582:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8007586:	e00a      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800758e:	e006      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8007590:	bf00      	nop
 8007592:	e004      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8007594:	bf00      	nop
 8007596:	e002      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8007598:	bf00      	nop
 800759a:	e000      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800759c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800759e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10d      	bne.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 80075a6:	4b88      	ldr	r3, [pc, #544]	@ (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80075a8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80075ac:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 80075b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80075b8:	4a83      	ldr	r2, [pc, #524]	@ (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80075ba:	430b      	orrs	r3, r1
 80075bc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80075c0:	e003      	b.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075c2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80075c6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 80075ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d2:	2100      	movs	r1, #0
 80075d4:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 80075d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80075e0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80075e4:	460b      	mov	r3, r1
 80075e6:	4313      	orrs	r3, r2
 80075e8:	d055      	beq.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 80075ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80075f2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80075f6:	d031      	beq.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x1188>
 80075f8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80075fc:	d82a      	bhi.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80075fe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007602:	d02d      	beq.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8007604:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007608:	d824      	bhi.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800760a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800760e:	d029      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8007610:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007614:	d81e      	bhi.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8007616:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800761a:	d011      	beq.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 800761c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007620:	d818      	bhi.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8007622:	2b00      	cmp	r3, #0
 8007624:	d020      	beq.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8007626:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800762a:	d113      	bne.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800762c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007630:	3308      	adds	r3, #8
 8007632:	4618      	mov	r0, r3
 8007634:	f003 fe70 	bl	800b318 <RCCEx_PLL2_Config>
 8007638:	4603      	mov	r3, r0
 800763a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800763e:	e014      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007640:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007644:	3330      	adds	r3, #48	@ 0x30
 8007646:	4618      	mov	r0, r3
 8007648:	f003 fefe 	bl	800b448 <RCCEx_PLL3_Config>
 800764c:	4603      	mov	r3, r0
 800764e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8007652:	e00a      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800765a:	e006      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800765c:	bf00      	nop
 800765e:	e004      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8007660:	bf00      	nop
 8007662:	e002      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8007664:	bf00      	nop
 8007666:	e000      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8007668:	bf00      	nop
    }

    if (ret == HAL_OK)
 800766a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800766e:	2b00      	cmp	r3, #0
 8007670:	d10d      	bne.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8007672:	4b55      	ldr	r3, [pc, #340]	@ (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007674:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007678:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800767c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007680:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007684:	4a50      	ldr	r2, [pc, #320]	@ (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007686:	430b      	orrs	r3, r1
 8007688:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800768c:	e003      	b.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800768e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007692:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8007696:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800769a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769e:	2100      	movs	r1, #0
 80076a0:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 80076a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076a8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80076ac:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80076b0:	460b      	mov	r3, r1
 80076b2:	4313      	orrs	r3, r2
 80076b4:	d055      	beq.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 80076b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076ba:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80076be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80076c2:	d031      	beq.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 80076c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80076c8:	d82a      	bhi.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80076ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076ce:	d02d      	beq.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x1258>
 80076d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076d4:	d824      	bhi.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80076d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80076da:	d029      	beq.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 80076dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80076e0:	d81e      	bhi.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80076e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076e6:	d011      	beq.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x1238>
 80076e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076ec:	d818      	bhi.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d020      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 80076f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076f6:	d113      	bne.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80076f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076fc:	3308      	adds	r3, #8
 80076fe:	4618      	mov	r0, r3
 8007700:	f003 fe0a 	bl	800b318 <RCCEx_PLL2_Config>
 8007704:	4603      	mov	r3, r0
 8007706:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800770a:	e014      	b.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800770c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007710:	3330      	adds	r3, #48	@ 0x30
 8007712:	4618      	mov	r0, r3
 8007714:	f003 fe98 	bl	800b448 <RCCEx_PLL3_Config>
 8007718:	4603      	mov	r3, r0
 800771a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800771e:	e00a      	b.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007726:	e006      	b.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8007728:	bf00      	nop
 800772a:	e004      	b.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800772c:	bf00      	nop
 800772e:	e002      	b.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8007730:	bf00      	nop
 8007732:	e000      	b.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8007734:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007736:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800773a:	2b00      	cmp	r3, #0
 800773c:	d10d      	bne.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 800773e:	4b22      	ldr	r3, [pc, #136]	@ (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007740:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007744:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007748:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800774c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007750:	4a1d      	ldr	r2, [pc, #116]	@ (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007752:	430b      	orrs	r3, r1
 8007754:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007758:	e003      	b.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800775a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800775e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007762:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800776a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800776e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007772:	2300      	movs	r3, #0
 8007774:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007778:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800777c:	460b      	mov	r3, r1
 800777e:	4313      	orrs	r3, r2
 8007780:	d055      	beq.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8007782:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007786:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800778a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800778e:	d035      	beq.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8007790:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007794:	d82e      	bhi.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8007796:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800779a:	d031      	beq.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 800779c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80077a0:	d828      	bhi.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80077a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077a6:	d01b      	beq.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 80077a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077ac:	d822      	bhi.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d003      	beq.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 80077b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077b6:	d009      	beq.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 80077b8:	e01c      	b.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077ba:	4b03      	ldr	r3, [pc, #12]	@ (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80077bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077be:	4a02      	ldr	r2, [pc, #8]	@ (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80077c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077c4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80077c6:	e01c      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 80077c8:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80077cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80077d0:	3308      	adds	r3, #8
 80077d2:	4618      	mov	r0, r3
 80077d4:	f003 fda0 	bl	800b318 <RCCEx_PLL2_Config>
 80077d8:	4603      	mov	r3, r0
 80077da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80077de:	e010      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80077e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80077e4:	3330      	adds	r3, #48	@ 0x30
 80077e6:	4618      	mov	r0, r3
 80077e8:	f003 fe2e 	bl	800b448 <RCCEx_PLL3_Config>
 80077ec:	4603      	mov	r3, r0
 80077ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80077f2:	e006      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077f4:	2301      	movs	r3, #1
 80077f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80077fa:	e002      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80077fc:	bf00      	nop
 80077fe:	e000      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8007800:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007802:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007806:	2b00      	cmp	r3, #0
 8007808:	d10d      	bne.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800780a:	4bc3      	ldr	r3, [pc, #780]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800780c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007810:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007814:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007818:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800781c:	4abe      	ldr	r2, [pc, #760]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800781e:	430b      	orrs	r3, r1
 8007820:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007824:	e003      	b.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007826:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800782a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 800782e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007836:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800783a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800783e:	2300      	movs	r3, #0
 8007840:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007844:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007848:	460b      	mov	r3, r1
 800784a:	4313      	orrs	r3, r2
 800784c:	d051      	beq.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800784e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007852:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007856:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800785a:	d033      	beq.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 800785c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007860:	d82c      	bhi.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8007862:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8007866:	d02d      	beq.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8007868:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800786c:	d826      	bhi.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800786e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007872:	d019      	beq.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8007874:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007878:	d820      	bhi.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800787a:	2b00      	cmp	r3, #0
 800787c:	d003      	beq.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 800787e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007882:	d007      	beq.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8007884:	e01a      	b.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007886:	4ba4      	ldr	r3, [pc, #656]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800788a:	4aa3      	ldr	r2, [pc, #652]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800788c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007890:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007892:	e018      	b.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007894:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007898:	3308      	adds	r3, #8
 800789a:	4618      	mov	r0, r3
 800789c:	f003 fd3c 	bl	800b318 <RCCEx_PLL2_Config>
 80078a0:	4603      	mov	r3, r0
 80078a2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80078a6:	e00e      	b.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80078a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078ac:	3330      	adds	r3, #48	@ 0x30
 80078ae:	4618      	mov	r0, r3
 80078b0:	f003 fdca 	bl	800b448 <RCCEx_PLL3_Config>
 80078b4:	4603      	mov	r3, r0
 80078b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80078ba:	e004      	b.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80078c2:	e000      	b.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 80078c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078c6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d10d      	bne.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80078ce:	4b92      	ldr	r3, [pc, #584]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80078d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80078d4:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 80078d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078dc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80078e0:	4a8d      	ldr	r2, [pc, #564]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80078e2:	430b      	orrs	r3, r1
 80078e4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80078e8:	e003      	b.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078ea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80078ee:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80078f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fa:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80078fe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007900:	2300      	movs	r3, #0
 8007902:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007904:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007908:	460b      	mov	r3, r1
 800790a:	4313      	orrs	r3, r2
 800790c:	d032      	beq.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800790e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007912:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8007916:	2b05      	cmp	r3, #5
 8007918:	d80f      	bhi.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x1466>
 800791a:	2b03      	cmp	r3, #3
 800791c:	d211      	bcs.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 800791e:	2b01      	cmp	r3, #1
 8007920:	d911      	bls.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8007922:	2b02      	cmp	r3, #2
 8007924:	d109      	bne.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007926:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800792a:	3308      	adds	r3, #8
 800792c:	4618      	mov	r0, r3
 800792e:	f003 fcf3 	bl	800b318 <RCCEx_PLL2_Config>
 8007932:	4603      	mov	r3, r0
 8007934:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007938:	e006      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007940:	e002      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8007942:	bf00      	nop
 8007944:	e000      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8007946:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007948:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800794c:	2b00      	cmp	r3, #0
 800794e:	d10d      	bne.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8007950:	4b71      	ldr	r3, [pc, #452]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007952:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007956:	f023 0107 	bic.w	r1, r3, #7
 800795a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800795e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8007962:	4a6d      	ldr	r2, [pc, #436]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007964:	430b      	orrs	r3, r1
 8007966:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800796a:	e003      	b.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800796c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007970:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8007974:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797c:	2100      	movs	r1, #0
 800797e:	6739      	str	r1, [r7, #112]	@ 0x70
 8007980:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007984:	677b      	str	r3, [r7, #116]	@ 0x74
 8007986:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800798a:	460b      	mov	r3, r1
 800798c:	4313      	orrs	r3, r2
 800798e:	d024      	beq.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8007990:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007994:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007998:	2b00      	cmp	r3, #0
 800799a:	d005      	beq.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 800799c:	2b08      	cmp	r3, #8
 800799e:	d005      	beq.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80079a6:	e002      	b.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80079a8:	bf00      	nop
 80079aa:	e000      	b.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80079ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079ae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d10d      	bne.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80079b6:	4b58      	ldr	r3, [pc, #352]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80079b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80079bc:	f023 0108 	bic.w	r1, r3, #8
 80079c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80079c8:	4a53      	ldr	r2, [pc, #332]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80079ca:	430b      	orrs	r3, r1
 80079cc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80079d0:	e003      	b.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079d2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80079d6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80079da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e2:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80079e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80079e8:	2300      	movs	r3, #0
 80079ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80079ec:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80079f0:	460b      	mov	r3, r1
 80079f2:	4313      	orrs	r3, r2
 80079f4:	f000 80b9 	beq.w	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80079f8:	4b48      	ldr	r3, [pc, #288]	@ (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80079fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079fc:	4a47      	ldr	r2, [pc, #284]	@ (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80079fe:	f043 0301 	orr.w	r3, r3, #1
 8007a02:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a04:	f7fc fafc 	bl	8004000 <HAL_GetTick>
 8007a08:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8007a0c:	e00b      	b.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a0e:	f7fc faf7 	bl	8004000 <HAL_GetTick>
 8007a12:	4602      	mov	r2, r0
 8007a14:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8007a18:	1ad3      	subs	r3, r2, r3
 8007a1a:	2b02      	cmp	r3, #2
 8007a1c:	d903      	bls.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8007a1e:	2303      	movs	r3, #3
 8007a20:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007a24:	e005      	b.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8007a26:	4b3d      	ldr	r3, [pc, #244]	@ (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8007a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a2a:	f003 0301 	and.w	r3, r3, #1
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d0ed      	beq.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8007a32:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	f040 8093 	bne.w	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007a3c:	4b36      	ldr	r3, [pc, #216]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007a3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a46:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8007a4a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d023      	beq.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8007a52:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a56:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8007a5a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d01b      	beq.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007a62:	4b2d      	ldr	r3, [pc, #180]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007a64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a6c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a70:	4b29      	ldr	r3, [pc, #164]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007a72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a76:	4a28      	ldr	r2, [pc, #160]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007a78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a7c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a80:	4b25      	ldr	r3, [pc, #148]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007a82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a86:	4a24      	ldr	r2, [pc, #144]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007a88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a8c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007a90:	4a21      	ldr	r2, [pc, #132]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007a92:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8007a96:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007a9a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8007a9e:	f003 0301 	and.w	r3, r3, #1
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d019      	beq.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aa6:	f7fc faab 	bl	8004000 <HAL_GetTick>
 8007aaa:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007aae:	e00d      	b.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ab0:	f7fc faa6 	bl	8004000 <HAL_GetTick>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8007aba:	1ad2      	subs	r2, r2, r3
 8007abc:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d903      	bls.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8007ac4:	2303      	movs	r3, #3
 8007ac6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 8007aca:	e006      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007acc:	4b12      	ldr	r3, [pc, #72]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007ace:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ad2:	f003 0302 	and.w	r3, r3, #2
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d0ea      	beq.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8007ada:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d13a      	bne.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8007ae2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ae6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8007aea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007aee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007af2:	d115      	bne.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8007af4:	4b08      	ldr	r3, [pc, #32]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007af6:	69db      	ldr	r3, [r3, #28]
 8007af8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007afc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b00:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8007b04:	091b      	lsrs	r3, r3, #4
 8007b06:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007b0a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8007b0e:	4a02      	ldr	r2, [pc, #8]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007b10:	430b      	orrs	r3, r1
 8007b12:	61d3      	str	r3, [r2, #28]
 8007b14:	e00a      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8007b16:	bf00      	nop
 8007b18:	44020c00 	.word	0x44020c00
 8007b1c:	44020800 	.word	0x44020800
 8007b20:	4b9f      	ldr	r3, [pc, #636]	@ (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007b22:	69db      	ldr	r3, [r3, #28]
 8007b24:	4a9e      	ldr	r2, [pc, #632]	@ (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007b26:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007b2a:	61d3      	str	r3, [r2, #28]
 8007b2c:	4b9c      	ldr	r3, [pc, #624]	@ (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007b2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b32:	4a9b      	ldr	r2, [pc, #620]	@ (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007b34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b38:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007b3c:	4b98      	ldr	r3, [pc, #608]	@ (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007b3e:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8007b42:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b46:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8007b4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b4e:	4a94      	ldr	r2, [pc, #592]	@ (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007b50:	430b      	orrs	r3, r1
 8007b52:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007b56:	e008      	b.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007b58:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007b5c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 8007b60:	e003      	b.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b62:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007b66:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007b6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b72:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8007b76:	663b      	str	r3, [r7, #96]	@ 0x60
 8007b78:	2300      	movs	r3, #0
 8007b7a:	667b      	str	r3, [r7, #100]	@ 0x64
 8007b7c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007b80:	460b      	mov	r3, r1
 8007b82:	4313      	orrs	r3, r2
 8007b84:	d035      	beq.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8007b86:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b8a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8007b8e:	2b30      	cmp	r3, #48	@ 0x30
 8007b90:	d014      	beq.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8007b92:	2b30      	cmp	r3, #48	@ 0x30
 8007b94:	d80e      	bhi.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8007b96:	2b20      	cmp	r3, #32
 8007b98:	d012      	beq.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8007b9a:	2b20      	cmp	r3, #32
 8007b9c:	d80a      	bhi.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d010      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8007ba2:	2b10      	cmp	r3, #16
 8007ba4:	d106      	bne.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ba6:	4b7e      	ldr	r3, [pc, #504]	@ (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007baa:	4a7d      	ldr	r2, [pc, #500]	@ (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007bac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007bb0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8007bb2:	e008      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007bba:	e004      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8007bbc:	bf00      	nop
 8007bbe:	e002      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8007bc0:	bf00      	nop
 8007bc2:	e000      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8007bc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bc6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d10d      	bne.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8007bce:	4b74      	ldr	r3, [pc, #464]	@ (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007bd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007bd4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007bd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007bdc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8007be0:	4a6f      	ldr	r2, [pc, #444]	@ (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007be2:	430b      	orrs	r3, r1
 8007be4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007be8:	e003      	b.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007bee:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007bf2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfa:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007bfe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007c00:	2300      	movs	r3, #0
 8007c02:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c04:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007c08:	460b      	mov	r3, r1
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	d033      	beq.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8007c0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c12:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d002      	beq.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8007c1a:	2b40      	cmp	r3, #64	@ 0x40
 8007c1c:	d007      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8007c1e:	e010      	b.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c20:	4b5f      	ldr	r3, [pc, #380]	@ (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c24:	4a5e      	ldr	r2, [pc, #376]	@ (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007c26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c2a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8007c2c:	e00d      	b.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007c2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c32:	3308      	adds	r3, #8
 8007c34:	4618      	mov	r0, r3
 8007c36:	f003 fb6f 	bl	800b318 <RCCEx_PLL2_Config>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8007c40:	e003      	b.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007c48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c4a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d10d      	bne.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8007c52:	4b53      	ldr	r3, [pc, #332]	@ (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007c54:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007c58:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8007c5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c60:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8007c64:	4a4e      	ldr	r2, [pc, #312]	@ (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007c66:	430b      	orrs	r3, r1
 8007c68:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007c6c:	e003      	b.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c6e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007c72:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007c76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007c82:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c84:	2300      	movs	r3, #0
 8007c86:	657b      	str	r3, [r7, #84]	@ 0x54
 8007c88:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	d033      	beq.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8007c92:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c96:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d002      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8007c9e:	2b80      	cmp	r3, #128	@ 0x80
 8007ca0:	d007      	beq.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8007ca2:	e010      	b.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ca4:	4b3e      	ldr	r3, [pc, #248]	@ (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ca8:	4a3d      	ldr	r2, [pc, #244]	@ (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007caa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007cae:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8007cb0:	e00d      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007cb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007cb6:	3308      	adds	r3, #8
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f003 fb2d 	bl	800b318 <RCCEx_PLL2_Config>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8007cc4:	e003      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007ccc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d10d      	bne.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8007cd6:	4b32      	ldr	r3, [pc, #200]	@ (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007cd8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007cdc:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8007ce0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ce4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8007ce8:	4a2d      	ldr	r2, [pc, #180]	@ (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007cea:	430b      	orrs	r3, r1
 8007cec:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007cf0:	e003      	b.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cf2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007cf6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8007cfa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d02:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8007d06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d08:	2300      	movs	r3, #0
 8007d0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d0c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007d10:	460b      	mov	r3, r1
 8007d12:	4313      	orrs	r3, r2
 8007d14:	d04a      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8007d16:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d1e:	2b04      	cmp	r3, #4
 8007d20:	d827      	bhi.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8007d22:	a201      	add	r2, pc, #4	@ (adr r2, 8007d28 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8007d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d28:	08007d3d 	.word	0x08007d3d
 8007d2c:	08007d4b 	.word	0x08007d4b
 8007d30:	08007d5f 	.word	0x08007d5f
 8007d34:	08007d7b 	.word	0x08007d7b
 8007d38:	08007d7b 	.word	0x08007d7b
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d3c:	4b18      	ldr	r3, [pc, #96]	@ (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d40:	4a17      	ldr	r2, [pc, #92]	@ (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007d42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d46:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007d48:	e018      	b.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007d4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d4e:	3308      	adds	r3, #8
 8007d50:	4618      	mov	r0, r3
 8007d52:	f003 fae1 	bl	800b318 <RCCEx_PLL2_Config>
 8007d56:	4603      	mov	r3, r0
 8007d58:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007d5c:	e00e      	b.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007d5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d62:	3330      	adds	r3, #48	@ 0x30
 8007d64:	4618      	mov	r0, r3
 8007d66:	f003 fb6f 	bl	800b448 <RCCEx_PLL3_Config>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007d70:	e004      	b.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007d78:	e000      	b.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8007d7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d7c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d10f      	bne.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8007d84:	4b06      	ldr	r3, [pc, #24]	@ (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d8a:	f023 0107 	bic.w	r1, r3, #7
 8007d8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d96:	4a02      	ldr	r2, [pc, #8]	@ (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007d98:	430b      	orrs	r3, r1
 8007d9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007d9e:	e005      	b.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8007da0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007da4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007da8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8007dac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007db8:	643b      	str	r3, [r7, #64]	@ 0x40
 8007dba:	2300      	movs	r3, #0
 8007dbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8007dbe:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	f000 8081 	beq.w	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8007dca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007dce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007dd2:	2b20      	cmp	r3, #32
 8007dd4:	d85f      	bhi.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8007dd6:	a201      	add	r2, pc, #4	@ (adr r2, 8007ddc <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8007dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ddc:	08007e61 	.word	0x08007e61
 8007de0:	08007e97 	.word	0x08007e97
 8007de4:	08007e97 	.word	0x08007e97
 8007de8:	08007e97 	.word	0x08007e97
 8007dec:	08007e97 	.word	0x08007e97
 8007df0:	08007e97 	.word	0x08007e97
 8007df4:	08007e97 	.word	0x08007e97
 8007df8:	08007e97 	.word	0x08007e97
 8007dfc:	08007e6f 	.word	0x08007e6f
 8007e00:	08007e97 	.word	0x08007e97
 8007e04:	08007e97 	.word	0x08007e97
 8007e08:	08007e97 	.word	0x08007e97
 8007e0c:	08007e97 	.word	0x08007e97
 8007e10:	08007e97 	.word	0x08007e97
 8007e14:	08007e97 	.word	0x08007e97
 8007e18:	08007e97 	.word	0x08007e97
 8007e1c:	08007e83 	.word	0x08007e83
 8007e20:	08007e97 	.word	0x08007e97
 8007e24:	08007e97 	.word	0x08007e97
 8007e28:	08007e97 	.word	0x08007e97
 8007e2c:	08007e97 	.word	0x08007e97
 8007e30:	08007e97 	.word	0x08007e97
 8007e34:	08007e97 	.word	0x08007e97
 8007e38:	08007e97 	.word	0x08007e97
 8007e3c:	08007e9f 	.word	0x08007e9f
 8007e40:	08007e97 	.word	0x08007e97
 8007e44:	08007e97 	.word	0x08007e97
 8007e48:	08007e97 	.word	0x08007e97
 8007e4c:	08007e97 	.word	0x08007e97
 8007e50:	08007e97 	.word	0x08007e97
 8007e54:	08007e97 	.word	0x08007e97
 8007e58:	08007e97 	.word	0x08007e97
 8007e5c:	08007e9f 	.word	0x08007e9f
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e60:	4bab      	ldr	r3, [pc, #684]	@ (8008110 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e64:	4aaa      	ldr	r2, [pc, #680]	@ (8008110 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007e66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e6a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007e6c:	e018      	b.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007e6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e72:	3308      	adds	r3, #8
 8007e74:	4618      	mov	r0, r3
 8007e76:	f003 fa4f 	bl	800b318 <RCCEx_PLL2_Config>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007e80:	e00e      	b.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007e82:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e86:	3330      	adds	r3, #48	@ 0x30
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f003 fadd 	bl	800b448 <RCCEx_PLL3_Config>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007e94:	e004      	b.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007e9c:	e000      	b.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8007e9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ea0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d10d      	bne.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8007ea8:	4b99      	ldr	r3, [pc, #612]	@ (8008110 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007eae:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007eb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007eb6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007eba:	4a95      	ldr	r2, [pc, #596]	@ (8008110 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007ebc:	430b      	orrs	r3, r1
 8007ebe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007ec2:	e003      	b.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ec4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007ec8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8007ecc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007ed8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007eda:	2300      	movs	r3, #0
 8007edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ede:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	d04e      	beq.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8007ee8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007eec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007ef0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ef4:	d02e      	beq.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8007ef6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007efa:	d827      	bhi.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8007efc:	2bc0      	cmp	r3, #192	@ 0xc0
 8007efe:	d02b      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8007f00:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f02:	d823      	bhi.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8007f04:	2b80      	cmp	r3, #128	@ 0x80
 8007f06:	d017      	beq.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8007f08:	2b80      	cmp	r3, #128	@ 0x80
 8007f0a:	d81f      	bhi.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d002      	beq.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8007f10:	2b40      	cmp	r3, #64	@ 0x40
 8007f12:	d007      	beq.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8007f14:	e01a      	b.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f16:	4b7e      	ldr	r3, [pc, #504]	@ (8008110 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f1a:	4a7d      	ldr	r2, [pc, #500]	@ (8008110 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007f1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f20:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8007f22:	e01a      	b.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007f24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f28:	3308      	adds	r3, #8
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f003 f9f4 	bl	800b318 <RCCEx_PLL2_Config>
 8007f30:	4603      	mov	r3, r0
 8007f32:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8007f36:	e010      	b.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007f38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f3c:	3330      	adds	r3, #48	@ 0x30
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f003 fa82 	bl	800b448 <RCCEx_PLL3_Config>
 8007f44:	4603      	mov	r3, r0
 8007f46:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8007f4a:	e006      	b.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007f52:	e002      	b.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8007f54:	bf00      	nop
 8007f56:	e000      	b.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8007f58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f5a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d10d      	bne.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8007f62:	4b6b      	ldr	r3, [pc, #428]	@ (8008110 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007f68:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007f6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007f74:	4a66      	ldr	r2, [pc, #408]	@ (8008110 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007f76:	430b      	orrs	r3, r1
 8007f78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007f7c:	e003      	b.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f7e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007f82:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8007f86:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007f92:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f94:	2300      	movs	r3, #0
 8007f96:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f98:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	d055      	beq.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8007fa2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007fa6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8007faa:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007fae:	d031      	beq.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8007fb0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007fb4:	d82a      	bhi.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8007fb6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fba:	d02d      	beq.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8007fbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fc0:	d824      	bhi.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8007fc2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007fc6:	d029      	beq.n	800801c <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8007fc8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007fcc:	d81e      	bhi.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8007fce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fd2:	d011      	beq.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8007fd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fd8:	d818      	bhi.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d020      	beq.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8007fde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fe2:	d113      	bne.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007fe4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007fe8:	3308      	adds	r3, #8
 8007fea:	4618      	mov	r0, r3
 8007fec:	f003 f994 	bl	800b318 <RCCEx_PLL2_Config>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8007ff6:	e014      	b.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007ff8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ffc:	3330      	adds	r3, #48	@ 0x30
 8007ffe:	4618      	mov	r0, r3
 8008000:	f003 fa22 	bl	800b448 <RCCEx_PLL3_Config>
 8008004:	4603      	mov	r3, r0
 8008006:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800800a:	e00a      	b.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008012:	e006      	b.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8008014:	bf00      	nop
 8008016:	e004      	b.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8008018:	bf00      	nop
 800801a:	e002      	b.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800801c:	bf00      	nop
 800801e:	e000      	b.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8008020:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008022:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008026:	2b00      	cmp	r3, #0
 8008028:	d10d      	bne.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 800802a:	4b39      	ldr	r3, [pc, #228]	@ (8008110 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800802c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008030:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8008034:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008038:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800803c:	4a34      	ldr	r2, [pc, #208]	@ (8008110 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800803e:	430b      	orrs	r3, r1
 8008040:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008044:	e003      	b.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008046:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800804a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 800804e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008056:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800805a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800805c:	2300      	movs	r3, #0
 800805e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008060:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008064:	460b      	mov	r3, r1
 8008066:	4313      	orrs	r3, r2
 8008068:	d058      	beq.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 800806a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800806e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008072:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008076:	d031      	beq.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8008078:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800807c:	d82a      	bhi.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800807e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008082:	d02d      	beq.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8008084:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008088:	d824      	bhi.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800808a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800808e:	d029      	beq.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8008090:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008094:	d81e      	bhi.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8008096:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800809a:	d011      	beq.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 800809c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080a0:	d818      	bhi.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d020      	beq.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 80080a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080aa:	d113      	bne.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80080ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80080b0:	3308      	adds	r3, #8
 80080b2:	4618      	mov	r0, r3
 80080b4:	f003 f930 	bl	800b318 <RCCEx_PLL2_Config>
 80080b8:	4603      	mov	r3, r0
 80080ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80080be:	e014      	b.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80080c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80080c4:	3330      	adds	r3, #48	@ 0x30
 80080c6:	4618      	mov	r0, r3
 80080c8:	f003 f9be 	bl	800b448 <RCCEx_PLL3_Config>
 80080cc:	4603      	mov	r3, r0
 80080ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80080d2:	e00a      	b.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080d4:	2301      	movs	r3, #1
 80080d6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80080da:	e006      	b.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80080dc:	bf00      	nop
 80080de:	e004      	b.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80080e0:	bf00      	nop
 80080e2:	e002      	b.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80080e4:	bf00      	nop
 80080e6:	e000      	b.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80080e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080ea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d110      	bne.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 80080f2:	4b07      	ldr	r3, [pc, #28]	@ (8008110 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80080f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80080f8:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80080fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008100:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008104:	4902      	ldr	r1, [pc, #8]	@ (8008110 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008106:	4313      	orrs	r3, r2
 8008108:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800810c:	e006      	b.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 800810e:	bf00      	nop
 8008110:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008114:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008118:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800811c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008124:	2100      	movs	r1, #0
 8008126:	6239      	str	r1, [r7, #32]
 8008128:	f003 0301 	and.w	r3, r3, #1
 800812c:	627b      	str	r3, [r7, #36]	@ 0x24
 800812e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008132:	460b      	mov	r3, r1
 8008134:	4313      	orrs	r3, r2
 8008136:	d055      	beq.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8008138:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800813c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008140:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8008144:	d031      	beq.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8008146:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800814a:	d82a      	bhi.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800814c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008150:	d02d      	beq.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8008152:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008156:	d824      	bhi.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8008158:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800815c:	d029      	beq.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 800815e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8008162:	d81e      	bhi.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8008164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008168:	d011      	beq.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 800816a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800816e:	d818      	bhi.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8008170:	2b00      	cmp	r3, #0
 8008172:	d020      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8008174:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008178:	d113      	bne.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800817a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800817e:	3308      	adds	r3, #8
 8008180:	4618      	mov	r0, r3
 8008182:	f003 f8c9 	bl	800b318 <RCCEx_PLL2_Config>
 8008186:	4603      	mov	r3, r0
 8008188:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800818c:	e014      	b.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800818e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008192:	3330      	adds	r3, #48	@ 0x30
 8008194:	4618      	mov	r0, r3
 8008196:	f003 f957 	bl	800b448 <RCCEx_PLL3_Config>
 800819a:	4603      	mov	r3, r0
 800819c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80081a0:	e00a      	b.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80081a8:	e006      	b.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80081aa:	bf00      	nop
 80081ac:	e004      	b.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80081ae:	bf00      	nop
 80081b0:	e002      	b.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80081b2:	bf00      	nop
 80081b4:	e000      	b.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80081b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081b8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d10d      	bne.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 80081c0:	4b88      	ldr	r3, [pc, #544]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80081c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80081c6:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 80081ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80081ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80081d2:	4984      	ldr	r1, [pc, #528]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80081d4:	4313      	orrs	r3, r2
 80081d6:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80081da:	e003      	b.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081dc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80081e0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80081e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80081e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ec:	2100      	movs	r1, #0
 80081ee:	61b9      	str	r1, [r7, #24]
 80081f0:	f003 0302 	and.w	r3, r3, #2
 80081f4:	61fb      	str	r3, [r7, #28]
 80081f6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80081fa:	460b      	mov	r3, r1
 80081fc:	4313      	orrs	r3, r2
 80081fe:	d03d      	beq.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8008200:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008204:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008208:	2b03      	cmp	r3, #3
 800820a:	d81c      	bhi.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 800820c:	a201      	add	r2, pc, #4	@ (adr r2, 8008214 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 800820e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008212:	bf00      	nop
 8008214:	0800824f 	.word	0x0800824f
 8008218:	08008225 	.word	0x08008225
 800821c:	08008233 	.word	0x08008233
 8008220:	0800824f 	.word	0x0800824f
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008224:	4b6f      	ldr	r3, [pc, #444]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008228:	4a6e      	ldr	r2, [pc, #440]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800822a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800822e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8008230:	e00e      	b.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008232:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008236:	3308      	adds	r3, #8
 8008238:	4618      	mov	r0, r3
 800823a:	f003 f86d 	bl	800b318 <RCCEx_PLL2_Config>
 800823e:	4603      	mov	r3, r0
 8008240:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8008244:	e004      	b.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008246:	2301      	movs	r3, #1
 8008248:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800824c:	e000      	b.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 800824e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008250:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008254:	2b00      	cmp	r3, #0
 8008256:	d10d      	bne.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8008258:	4b62      	ldr	r3, [pc, #392]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800825a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800825e:	f023 0203 	bic.w	r2, r3, #3
 8008262:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008266:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800826a:	495e      	ldr	r1, [pc, #376]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800826c:	4313      	orrs	r3, r2
 800826e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8008272:	e003      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008274:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008278:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800827c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008284:	2100      	movs	r1, #0
 8008286:	6139      	str	r1, [r7, #16]
 8008288:	f003 0304 	and.w	r3, r3, #4
 800828c:	617b      	str	r3, [r7, #20]
 800828e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008292:	460b      	mov	r3, r1
 8008294:	4313      	orrs	r3, r2
 8008296:	d03a      	beq.n	800830e <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8008298:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800829c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80082a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082a4:	d00e      	beq.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 80082a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082aa:	d815      	bhi.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d017      	beq.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 80082b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082b4:	d110      	bne.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082b6:	4b4b      	ldr	r3, [pc, #300]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80082b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082ba:	4a4a      	ldr	r2, [pc, #296]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80082bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082c0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80082c2:	e00e      	b.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80082c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80082c8:	3308      	adds	r3, #8
 80082ca:	4618      	mov	r0, r3
 80082cc:	f003 f824 	bl	800b318 <RCCEx_PLL2_Config>
 80082d0:	4603      	mov	r3, r0
 80082d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80082d6:	e004      	b.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80082de:	e000      	b.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 80082e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082e2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d10d      	bne.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80082ea:	4b3e      	ldr	r3, [pc, #248]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80082ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80082f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80082f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80082f8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80082fc:	4939      	ldr	r1, [pc, #228]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80082fe:	4313      	orrs	r3, r2
 8008300:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8008304:	e003      	b.n	800830e <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008306:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800830a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800830e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008316:	2100      	movs	r1, #0
 8008318:	60b9      	str	r1, [r7, #8]
 800831a:	f003 0310 	and.w	r3, r3, #16
 800831e:	60fb      	str	r3, [r7, #12]
 8008320:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008324:	460b      	mov	r3, r1
 8008326:	4313      	orrs	r3, r2
 8008328:	d038      	beq.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800832a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800832e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8008332:	2b30      	cmp	r3, #48	@ 0x30
 8008334:	d01b      	beq.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8008336:	2b30      	cmp	r3, #48	@ 0x30
 8008338:	d815      	bhi.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 800833a:	2b10      	cmp	r3, #16
 800833c:	d002      	beq.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 800833e:	2b20      	cmp	r3, #32
 8008340:	d007      	beq.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8008342:	e010      	b.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008344:	4b27      	ldr	r3, [pc, #156]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008348:	4a26      	ldr	r2, [pc, #152]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800834a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800834e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8008350:	e00e      	b.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008352:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008356:	3330      	adds	r3, #48	@ 0x30
 8008358:	4618      	mov	r0, r3
 800835a:	f003 f875 	bl	800b448 <RCCEx_PLL3_Config>
 800835e:	4603      	mov	r3, r0
 8008360:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8008364:	e004      	b.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800836c:	e000      	b.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 800836e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008370:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008374:	2b00      	cmp	r3, #0
 8008376:	d10d      	bne.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8008378:	4b1a      	ldr	r3, [pc, #104]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800837a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800837e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008382:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008386:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800838a:	4916      	ldr	r1, [pc, #88]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800838c:	4313      	orrs	r3, r2
 800838e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8008392:	e003      	b.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008394:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008398:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800839c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80083a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a4:	2100      	movs	r1, #0
 80083a6:	6039      	str	r1, [r7, #0]
 80083a8:	f003 0308 	and.w	r3, r3, #8
 80083ac:	607b      	str	r3, [r7, #4]
 80083ae:	e9d7 1200 	ldrd	r1, r2, [r7]
 80083b2:	460b      	mov	r3, r1
 80083b4:	4313      	orrs	r3, r2
 80083b6:	d00c      	beq.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 80083b8:	4b0a      	ldr	r3, [pc, #40]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80083ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80083be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80083c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80083c6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 80083ca:	4906      	ldr	r1, [pc, #24]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80083cc:	4313      	orrs	r3, r2
 80083ce:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 80083d2:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 80083dc:	46bd      	mov	sp, r7
 80083de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083e2:	bf00      	nop
 80083e4:	44020c00 	.word	0x44020c00

080083e8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b08b      	sub	sp, #44	@ 0x2c
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80083f0:	4bad      	ldr	r3, [pc, #692]	@ (80086a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80083f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083f8:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80083fa:	4bab      	ldr	r3, [pc, #684]	@ (80086a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80083fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083fe:	f003 0303 	and.w	r3, r3, #3
 8008402:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8008404:	4ba8      	ldr	r3, [pc, #672]	@ (80086a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008408:	0a1b      	lsrs	r3, r3, #8
 800840a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800840e:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8008410:	4ba5      	ldr	r3, [pc, #660]	@ (80086a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008414:	f003 0310 	and.w	r3, r3, #16
 8008418:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800841a:	4ba3      	ldr	r3, [pc, #652]	@ (80086a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800841c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800841e:	08db      	lsrs	r3, r3, #3
 8008420:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008424:	697a      	ldr	r2, [r7, #20]
 8008426:	fb02 f303 	mul.w	r3, r2, r3
 800842a:	ee07 3a90 	vmov	s15, r3
 800842e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008432:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8008436:	69bb      	ldr	r3, [r7, #24]
 8008438:	2b00      	cmp	r3, #0
 800843a:	f000 8126 	beq.w	800868a <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 800843e:	69fb      	ldr	r3, [r7, #28]
 8008440:	2b03      	cmp	r3, #3
 8008442:	d053      	beq.n	80084ec <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8008444:	69fb      	ldr	r3, [r7, #28]
 8008446:	2b03      	cmp	r3, #3
 8008448:	d86f      	bhi.n	800852a <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 800844a:	69fb      	ldr	r3, [r7, #28]
 800844c:	2b01      	cmp	r3, #1
 800844e:	d003      	beq.n	8008458 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8008450:	69fb      	ldr	r3, [r7, #28]
 8008452:	2b02      	cmp	r3, #2
 8008454:	d02b      	beq.n	80084ae <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8008456:	e068      	b.n	800852a <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008458:	4b93      	ldr	r3, [pc, #588]	@ (80086a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	08db      	lsrs	r3, r3, #3
 800845e:	f003 0303 	and.w	r3, r3, #3
 8008462:	4a92      	ldr	r2, [pc, #584]	@ (80086ac <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008464:	fa22 f303 	lsr.w	r3, r2, r3
 8008468:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	ee07 3a90 	vmov	s15, r3
 8008470:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	ee07 3a90 	vmov	s15, r3
 800847a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800847e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008482:	6a3b      	ldr	r3, [r7, #32]
 8008484:	ee07 3a90 	vmov	s15, r3
 8008488:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800848c:	ed97 6a04 	vldr	s12, [r7, #16]
 8008490:	eddf 5a87 	vldr	s11, [pc, #540]	@ 80086b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8008494:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008498:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800849c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084a8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80084ac:	e068      	b.n	8008580 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	ee07 3a90 	vmov	s15, r3
 80084b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084b8:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 80086b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80084bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084c0:	6a3b      	ldr	r3, [r7, #32]
 80084c2:	ee07 3a90 	vmov	s15, r3
 80084c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084ca:	ed97 6a04 	vldr	s12, [r7, #16]
 80084ce:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80086b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80084d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084e6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80084ea:	e049      	b.n	8008580 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80084ec:	69bb      	ldr	r3, [r7, #24]
 80084ee:	ee07 3a90 	vmov	s15, r3
 80084f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084f6:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80086b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 80084fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084fe:	6a3b      	ldr	r3, [r7, #32]
 8008500:	ee07 3a90 	vmov	s15, r3
 8008504:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008508:	ed97 6a04 	vldr	s12, [r7, #16]
 800850c:	eddf 5a68 	vldr	s11, [pc, #416]	@ 80086b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8008510:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008514:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008518:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800851c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008524:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008528:	e02a      	b.n	8008580 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800852a:	4b5f      	ldr	r3, [pc, #380]	@ (80086a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	08db      	lsrs	r3, r3, #3
 8008530:	f003 0303 	and.w	r3, r3, #3
 8008534:	4a5d      	ldr	r2, [pc, #372]	@ (80086ac <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008536:	fa22 f303 	lsr.w	r3, r2, r3
 800853a:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	ee07 3a90 	vmov	s15, r3
 8008542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008546:	69bb      	ldr	r3, [r7, #24]
 8008548:	ee07 3a90 	vmov	s15, r3
 800854c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008550:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008554:	6a3b      	ldr	r3, [r7, #32]
 8008556:	ee07 3a90 	vmov	s15, r3
 800855a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800855e:	ed97 6a04 	vldr	s12, [r7, #16]
 8008562:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80086b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8008566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800856a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800856e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800857a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800857e:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008580:	4b49      	ldr	r3, [pc, #292]	@ (80086a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008588:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800858c:	d121      	bne.n	80085d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800858e:	4b46      	ldr	r3, [pc, #280]	@ (80086a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008592:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008596:	2b00      	cmp	r3, #0
 8008598:	d017      	beq.n	80085ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800859a:	4b43      	ldr	r3, [pc, #268]	@ (80086a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800859c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800859e:	0a5b      	lsrs	r3, r3, #9
 80085a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085a4:	ee07 3a90 	vmov	s15, r3
 80085a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80085ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80085b0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80085b4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80085b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085c0:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	601a      	str	r2, [r3, #0]
 80085c8:	e006      	b.n	80085d8 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2200      	movs	r2, #0
 80085ce:	601a      	str	r2, [r3, #0]
 80085d0:	e002      	b.n	80085d8 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80085d8:	4b33      	ldr	r3, [pc, #204]	@ (80086a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80085e4:	d121      	bne.n	800862a <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80085e6:	4b30      	ldr	r3, [pc, #192]	@ (80086a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80085e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d017      	beq.n	8008622 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80085f2:	4b2d      	ldr	r3, [pc, #180]	@ (80086a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80085f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085f6:	0c1b      	lsrs	r3, r3, #16
 80085f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085fc:	ee07 3a90 	vmov	s15, r3
 8008600:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8008604:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008608:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800860c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008610:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008614:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008618:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	605a      	str	r2, [r3, #4]
 8008620:	e006      	b.n	8008630 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	605a      	str	r2, [r3, #4]
 8008628:	e002      	b.n	8008630 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2200      	movs	r2, #0
 800862e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008630:	4b1d      	ldr	r3, [pc, #116]	@ (80086a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008638:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800863c:	d121      	bne.n	8008682 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800863e:	4b1a      	ldr	r3, [pc, #104]	@ (80086a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008642:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008646:	2b00      	cmp	r3, #0
 8008648:	d017      	beq.n	800867a <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800864a:	4b17      	ldr	r3, [pc, #92]	@ (80086a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800864c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800864e:	0e1b      	lsrs	r3, r3, #24
 8008650:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008654:	ee07 3a90 	vmov	s15, r3
 8008658:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 800865c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008660:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8008664:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008668:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800866c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008670:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008678:	e010      	b.n	800869c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2200      	movs	r2, #0
 800867e:	609a      	str	r2, [r3, #8]
}
 8008680:	e00c      	b.n	800869c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2200      	movs	r2, #0
 8008686:	609a      	str	r2, [r3, #8]
}
 8008688:	e008      	b.n	800869c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2200      	movs	r2, #0
 800868e:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	609a      	str	r2, [r3, #8]
}
 800869c:	bf00      	nop
 800869e:	372c      	adds	r7, #44	@ 0x2c
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr
 80086a8:	44020c00 	.word	0x44020c00
 80086ac:	03d09000 	.word	0x03d09000
 80086b0:	46000000 	.word	0x46000000
 80086b4:	4a742400 	.word	0x4a742400
 80086b8:	4bbebc20 	.word	0x4bbebc20

080086bc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 80086bc:	b480      	push	{r7}
 80086be:	b08b      	sub	sp, #44	@ 0x2c
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80086c4:	4bad      	ldr	r3, [pc, #692]	@ (800897c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80086c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086cc:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80086ce:	4bab      	ldr	r3, [pc, #684]	@ (800897c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80086d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086d2:	f003 0303 	and.w	r3, r3, #3
 80086d6:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80086d8:	4ba8      	ldr	r3, [pc, #672]	@ (800897c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80086da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086dc:	0a1b      	lsrs	r3, r3, #8
 80086de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80086e2:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 80086e4:	4ba5      	ldr	r3, [pc, #660]	@ (800897c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80086e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086e8:	f003 0310 	and.w	r3, r3, #16
 80086ec:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80086ee:	4ba3      	ldr	r3, [pc, #652]	@ (800897c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80086f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086f2:	08db      	lsrs	r3, r3, #3
 80086f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80086f8:	697a      	ldr	r2, [r7, #20]
 80086fa:	fb02 f303 	mul.w	r3, r2, r3
 80086fe:	ee07 3a90 	vmov	s15, r3
 8008702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008706:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800870a:	69bb      	ldr	r3, [r7, #24]
 800870c:	2b00      	cmp	r3, #0
 800870e:	f000 8126 	beq.w	800895e <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8008712:	69fb      	ldr	r3, [r7, #28]
 8008714:	2b03      	cmp	r3, #3
 8008716:	d053      	beq.n	80087c0 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8008718:	69fb      	ldr	r3, [r7, #28]
 800871a:	2b03      	cmp	r3, #3
 800871c:	d86f      	bhi.n	80087fe <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	2b01      	cmp	r3, #1
 8008722:	d003      	beq.n	800872c <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8008724:	69fb      	ldr	r3, [r7, #28]
 8008726:	2b02      	cmp	r3, #2
 8008728:	d02b      	beq.n	8008782 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 800872a:	e068      	b.n	80087fe <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800872c:	4b93      	ldr	r3, [pc, #588]	@ (800897c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	08db      	lsrs	r3, r3, #3
 8008732:	f003 0303 	and.w	r3, r3, #3
 8008736:	4a92      	ldr	r2, [pc, #584]	@ (8008980 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008738:	fa22 f303 	lsr.w	r3, r2, r3
 800873c:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	ee07 3a90 	vmov	s15, r3
 8008744:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008748:	69bb      	ldr	r3, [r7, #24]
 800874a:	ee07 3a90 	vmov	s15, r3
 800874e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008756:	6a3b      	ldr	r3, [r7, #32]
 8008758:	ee07 3a90 	vmov	s15, r3
 800875c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008760:	ed97 6a04 	vldr	s12, [r7, #16]
 8008764:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8008984 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8008768:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800876c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008770:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008774:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800877c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008780:	e068      	b.n	8008854 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8008782:	69bb      	ldr	r3, [r7, #24]
 8008784:	ee07 3a90 	vmov	s15, r3
 8008788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800878c:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8008988 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8008790:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008794:	6a3b      	ldr	r3, [r7, #32]
 8008796:	ee07 3a90 	vmov	s15, r3
 800879a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800879e:	ed97 6a04 	vldr	s12, [r7, #16]
 80087a2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008984 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80087a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087ba:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80087be:	e049      	b.n	8008854 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80087c0:	69bb      	ldr	r3, [r7, #24]
 80087c2:	ee07 3a90 	vmov	s15, r3
 80087c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ca:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800898c <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 80087ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087d2:	6a3b      	ldr	r3, [r7, #32]
 80087d4:	ee07 3a90 	vmov	s15, r3
 80087d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087dc:	ed97 6a04 	vldr	s12, [r7, #16]
 80087e0:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8008984 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80087e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087f8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80087fc:	e02a      	b.n	8008854 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80087fe:	4b5f      	ldr	r3, [pc, #380]	@ (800897c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	08db      	lsrs	r3, r3, #3
 8008804:	f003 0303 	and.w	r3, r3, #3
 8008808:	4a5d      	ldr	r2, [pc, #372]	@ (8008980 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800880a:	fa22 f303 	lsr.w	r3, r2, r3
 800880e:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	ee07 3a90 	vmov	s15, r3
 8008816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800881a:	69bb      	ldr	r3, [r7, #24]
 800881c:	ee07 3a90 	vmov	s15, r3
 8008820:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008824:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008828:	6a3b      	ldr	r3, [r7, #32]
 800882a:	ee07 3a90 	vmov	s15, r3
 800882e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008832:	ed97 6a04 	vldr	s12, [r7, #16]
 8008836:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8008984 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800883a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800883e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008842:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800884a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800884e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008852:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008854:	4b49      	ldr	r3, [pc, #292]	@ (800897c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800885c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008860:	d121      	bne.n	80088a6 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8008862:	4b46      	ldr	r3, [pc, #280]	@ (800897c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008866:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800886a:	2b00      	cmp	r3, #0
 800886c:	d017      	beq.n	800889e <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800886e:	4b43      	ldr	r3, [pc, #268]	@ (800897c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008870:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008872:	0a5b      	lsrs	r3, r3, #9
 8008874:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008878:	ee07 3a90 	vmov	s15, r3
 800887c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8008880:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008884:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8008888:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800888c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008890:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008894:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	601a      	str	r2, [r3, #0]
 800889c:	e006      	b.n	80088ac <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	601a      	str	r2, [r3, #0]
 80088a4:	e002      	b.n	80088ac <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2200      	movs	r2, #0
 80088aa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088ac:	4b33      	ldr	r3, [pc, #204]	@ (800897c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088b8:	d121      	bne.n	80088fe <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80088ba:	4b30      	ldr	r3, [pc, #192]	@ (800897c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80088bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d017      	beq.n	80088f6 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80088c6:	4b2d      	ldr	r3, [pc, #180]	@ (800897c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80088c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088ca:	0c1b      	lsrs	r3, r3, #16
 80088cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088d0:	ee07 3a90 	vmov	s15, r3
 80088d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80088d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80088dc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80088e0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80088e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088ec:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	605a      	str	r2, [r3, #4]
 80088f4:	e006      	b.n	8008904 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2200      	movs	r2, #0
 80088fa:	605a      	str	r2, [r3, #4]
 80088fc:	e002      	b.n	8008904 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2200      	movs	r2, #0
 8008902:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008904:	4b1d      	ldr	r3, [pc, #116]	@ (800897c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800890c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008910:	d121      	bne.n	8008956 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8008912:	4b1a      	ldr	r3, [pc, #104]	@ (800897c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008916:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800891a:	2b00      	cmp	r3, #0
 800891c:	d017      	beq.n	800894e <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800891e:	4b17      	ldr	r3, [pc, #92]	@ (800897c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008920:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008922:	0e1b      	lsrs	r3, r3, #24
 8008924:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008928:	ee07 3a90 	vmov	s15, r3
 800892c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8008930:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008934:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8008938:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800893c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008940:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008944:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800894c:	e010      	b.n	8008970 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2200      	movs	r2, #0
 8008952:	609a      	str	r2, [r3, #8]
}
 8008954:	e00c      	b.n	8008970 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	609a      	str	r2, [r3, #8]
}
 800895c:	e008      	b.n	8008970 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	609a      	str	r2, [r3, #8]
}
 8008970:	bf00      	nop
 8008972:	372c      	adds	r7, #44	@ 0x2c
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr
 800897c:	44020c00 	.word	0x44020c00
 8008980:	03d09000 	.word	0x03d09000
 8008984:	46000000 	.word	0x46000000
 8008988:	4a742400 	.word	0x4a742400
 800898c:	4bbebc20 	.word	0x4bbebc20

08008990 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8008990:	b480      	push	{r7}
 8008992:	b08b      	sub	sp, #44	@ 0x2c
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8008998:	4bad      	ldr	r3, [pc, #692]	@ (8008c50 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800899a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800899c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089a0:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80089a2:	4bab      	ldr	r3, [pc, #684]	@ (8008c50 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80089a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089a6:	f003 0303 	and.w	r3, r3, #3
 80089aa:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 80089ac:	4ba8      	ldr	r3, [pc, #672]	@ (8008c50 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80089ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089b0:	0a1b      	lsrs	r3, r3, #8
 80089b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80089b6:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 80089b8:	4ba5      	ldr	r3, [pc, #660]	@ (8008c50 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80089ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089bc:	f003 0310 	and.w	r3, r3, #16
 80089c0:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80089c2:	4ba3      	ldr	r3, [pc, #652]	@ (8008c50 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80089c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089c6:	08db      	lsrs	r3, r3, #3
 80089c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80089cc:	697a      	ldr	r2, [r7, #20]
 80089ce:	fb02 f303 	mul.w	r3, r2, r3
 80089d2:	ee07 3a90 	vmov	s15, r3
 80089d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089da:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	f000 8126 	beq.w	8008c32 <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 80089e6:	69fb      	ldr	r3, [r7, #28]
 80089e8:	2b03      	cmp	r3, #3
 80089ea:	d053      	beq.n	8008a94 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	2b03      	cmp	r3, #3
 80089f0:	d86f      	bhi.n	8008ad2 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 80089f2:	69fb      	ldr	r3, [r7, #28]
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d003      	beq.n	8008a00 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	2b02      	cmp	r3, #2
 80089fc:	d02b      	beq.n	8008a56 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 80089fe:	e068      	b.n	8008ad2 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008a00:	4b93      	ldr	r3, [pc, #588]	@ (8008c50 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	08db      	lsrs	r3, r3, #3
 8008a06:	f003 0303 	and.w	r3, r3, #3
 8008a0a:	4a92      	ldr	r2, [pc, #584]	@ (8008c54 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8008a10:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	ee07 3a90 	vmov	s15, r3
 8008a18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a1c:	69bb      	ldr	r3, [r7, #24]
 8008a1e:	ee07 3a90 	vmov	s15, r3
 8008a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a2a:	6a3b      	ldr	r3, [r7, #32]
 8008a2c:	ee07 3a90 	vmov	s15, r3
 8008a30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a34:	ed97 6a04 	vldr	s12, [r7, #16]
 8008a38:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8008c58 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8008a3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a44:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a50:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008a54:	e068      	b.n	8008b28 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8008a56:	69bb      	ldr	r3, [r7, #24]
 8008a58:	ee07 3a90 	vmov	s15, r3
 8008a5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a60:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8008c5c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8008a64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a68:	6a3b      	ldr	r3, [r7, #32]
 8008a6a:	ee07 3a90 	vmov	s15, r3
 8008a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a72:	ed97 6a04 	vldr	s12, [r7, #16]
 8008a76:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008c58 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8008a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a8e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008a92:	e049      	b.n	8008b28 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8008a94:	69bb      	ldr	r3, [r7, #24]
 8008a96:	ee07 3a90 	vmov	s15, r3
 8008a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a9e:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8008c60 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8008aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aa6:	6a3b      	ldr	r3, [r7, #32]
 8008aa8:	ee07 3a90 	vmov	s15, r3
 8008aac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ab0:	ed97 6a04 	vldr	s12, [r7, #16]
 8008ab4:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8008c58 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8008ab8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008abc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ac0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ac4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ac8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008acc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008ad0:	e02a      	b.n	8008b28 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008ad2:	4b5f      	ldr	r3, [pc, #380]	@ (8008c50 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	08db      	lsrs	r3, r3, #3
 8008ad8:	f003 0303 	and.w	r3, r3, #3
 8008adc:	4a5d      	ldr	r2, [pc, #372]	@ (8008c54 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008ade:	fa22 f303 	lsr.w	r3, r2, r3
 8008ae2:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	ee07 3a90 	vmov	s15, r3
 8008aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	ee07 3a90 	vmov	s15, r3
 8008af4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008af8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008afc:	6a3b      	ldr	r3, [r7, #32]
 8008afe:	ee07 3a90 	vmov	s15, r3
 8008b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b06:	ed97 6a04 	vldr	s12, [r7, #16]
 8008b0a:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8008c58 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8008b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b22:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008b26:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b28:	4b49      	ldr	r3, [pc, #292]	@ (8008c50 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b34:	d121      	bne.n	8008b7a <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8008b36:	4b46      	ldr	r3, [pc, #280]	@ (8008c50 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d017      	beq.n	8008b72 <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008b42:	4b43      	ldr	r3, [pc, #268]	@ (8008c50 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b46:	0a5b      	lsrs	r3, r3, #9
 8008b48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b4c:	ee07 3a90 	vmov	s15, r3
 8008b50:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8008b54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b58:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8008b5c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008b60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b68:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	601a      	str	r2, [r3, #0]
 8008b70:	e006      	b.n	8008b80 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	601a      	str	r2, [r3, #0]
 8008b78:	e002      	b.n	8008b80 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b80:	4b33      	ldr	r3, [pc, #204]	@ (8008c50 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b8c:	d121      	bne.n	8008bd2 <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8008b8e:	4b30      	ldr	r3, [pc, #192]	@ (8008c50 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d017      	beq.n	8008bca <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008b9a:	4b2d      	ldr	r3, [pc, #180]	@ (8008c50 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b9e:	0c1b      	lsrs	r3, r3, #16
 8008ba0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ba4:	ee07 3a90 	vmov	s15, r3
 8008ba8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8008bac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008bb0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8008bb4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008bb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bc0:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	605a      	str	r2, [r3, #4]
 8008bc8:	e006      	b.n	8008bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	605a      	str	r2, [r3, #4]
 8008bd0:	e002      	b.n	8008bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008bd8:	4b1d      	ldr	r3, [pc, #116]	@ (8008c50 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008be0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008be4:	d121      	bne.n	8008c2a <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8008be6:	4b1a      	ldr	r3, [pc, #104]	@ (8008c50 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d017      	beq.n	8008c22 <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008bf2:	4b17      	ldr	r3, [pc, #92]	@ (8008c50 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bf6:	0e1b      	lsrs	r3, r3, #24
 8008bf8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bfc:	ee07 3a90 	vmov	s15, r3
 8008c00:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8008c04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c08:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8008c0c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008c10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c18:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8008c20:	e010      	b.n	8008c44 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2200      	movs	r2, #0
 8008c26:	609a      	str	r2, [r3, #8]
}
 8008c28:	e00c      	b.n	8008c44 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	609a      	str	r2, [r3, #8]
}
 8008c30:	e008      	b.n	8008c44 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2200      	movs	r2, #0
 8008c36:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2200      	movs	r2, #0
 8008c42:	609a      	str	r2, [r3, #8]
}
 8008c44:	bf00      	nop
 8008c46:	372c      	adds	r7, #44	@ 0x2c
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr
 8008c50:	44020c00 	.word	0x44020c00
 8008c54:	03d09000 	.word	0x03d09000
 8008c58:	46000000 	.word	0x46000000
 8008c5c:	4a742400 	.word	0x4a742400
 8008c60:	4bbebc20 	.word	0x4bbebc20

08008c64 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008c64:	b590      	push	{r4, r7, lr}
 8008c66:	b08f      	sub	sp, #60	@ 0x3c
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8008c6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c72:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8008c76:	4321      	orrs	r1, r4
 8008c78:	d150      	bne.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008c7a:	4b26      	ldr	r3, [pc, #152]	@ (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008c7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c84:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8008c86:	4b23      	ldr	r3, [pc, #140]	@ (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008c88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c8c:	f003 0302 	and.w	r3, r3, #2
 8008c90:	2b02      	cmp	r3, #2
 8008c92:	d108      	bne.n	8008ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8008c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c9a:	d104      	bne.n	8008ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8008c9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ca0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ca2:	f002 bb2a 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8008ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008ca8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008cac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008cb0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008cb4:	d108      	bne.n	8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8008cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cbc:	d104      	bne.n	8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8008cbe:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008cc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cc4:	f002 bb19 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8008cc8:	4b12      	ldr	r3, [pc, #72]	@ (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008cd4:	d119      	bne.n	8008d0a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8008cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cd8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008cdc:	d115      	bne.n	8008d0a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8008cde:	4b0d      	ldr	r3, [pc, #52]	@ (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008ce0:	69db      	ldr	r3, [r3, #28]
 8008ce2:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8008ce6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cea:	d30a      	bcc.n	8008d02 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8008cec:	4b09      	ldr	r3, [pc, #36]	@ (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008cee:	69db      	ldr	r3, [r3, #28]
 8008cf0:	0a1b      	lsrs	r3, r3, #8
 8008cf2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008cf6:	4a08      	ldr	r2, [pc, #32]	@ (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cfc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8008cfe:	f002 bafc 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8008d02:	2300      	movs	r3, #0
 8008d04:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8008d06:	f002 baf8 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d0e:	f002 baf4 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008d12:	bf00      	nop
 8008d14:	44020c00 	.word	0x44020c00
 8008d18:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8008d1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d20:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 8008d24:	ea50 0104 	orrs.w	r1, r0, r4
 8008d28:	f001 8275 	beq.w	800a216 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8008d2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d30:	2801      	cmp	r0, #1
 8008d32:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 8008d36:	f082 82dd 	bcs.w	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008d3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d3e:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8008d42:	ea50 0104 	orrs.w	r1, r0, r4
 8008d46:	f001 816c 	beq.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8008d4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d4e:	2801      	cmp	r0, #1
 8008d50:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8008d54:	f082 82ce 	bcs.w	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008d58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d5c:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 8008d60:	ea50 0104 	orrs.w	r1, r0, r4
 8008d64:	f001 8602 	beq.w	800a96c <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8008d68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d6c:	2801      	cmp	r0, #1
 8008d6e:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 8008d72:	f082 82bf 	bcs.w	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008d76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d7a:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 8008d7e:	ea50 0104 	orrs.w	r1, r0, r4
 8008d82:	f001 854c 	beq.w	800a81e <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8008d86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d8a:	2801      	cmp	r0, #1
 8008d8c:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 8008d90:	f082 82b0 	bcs.w	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008d94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d98:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 8008d9c:	ea50 0104 	orrs.w	r1, r0, r4
 8008da0:	f001 849e 	beq.w	800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8008da4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008da8:	2801      	cmp	r0, #1
 8008daa:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 8008dae:	f082 82a1 	bcs.w	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008db2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008db6:	f1a1 0420 	sub.w	r4, r1, #32
 8008dba:	ea50 0104 	orrs.w	r1, r0, r4
 8008dbe:	f001 83e8 	beq.w	800a592 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8008dc2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008dc6:	2801      	cmp	r0, #1
 8008dc8:	f171 0120 	sbcs.w	r1, r1, #32
 8008dcc:	f082 8292 	bcs.w	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008dd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008dd4:	f1a1 0410 	sub.w	r4, r1, #16
 8008dd8:	ea50 0104 	orrs.w	r1, r0, r4
 8008ddc:	f002 8256 	beq.w	800b28c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8008de0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008de4:	2801      	cmp	r0, #1
 8008de6:	f171 0110 	sbcs.w	r1, r1, #16
 8008dea:	f082 8283 	bcs.w	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008dee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008df2:	f1a1 0408 	sub.w	r4, r1, #8
 8008df6:	ea50 0104 	orrs.w	r1, r0, r4
 8008dfa:	f002 81cc 	beq.w	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8008dfe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e02:	2801      	cmp	r0, #1
 8008e04:	f171 0108 	sbcs.w	r1, r1, #8
 8008e08:	f082 8274 	bcs.w	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008e0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e10:	1f0c      	subs	r4, r1, #4
 8008e12:	ea50 0104 	orrs.w	r1, r0, r4
 8008e16:	f001 8648 	beq.w	800aaaa <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8008e1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e1e:	2801      	cmp	r0, #1
 8008e20:	f171 0104 	sbcs.w	r1, r1, #4
 8008e24:	f082 8266 	bcs.w	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008e28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e2c:	1e8c      	subs	r4, r1, #2
 8008e2e:	ea50 0104 	orrs.w	r1, r0, r4
 8008e32:	f002 8143 	beq.w	800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8008e36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e3a:	2801      	cmp	r0, #1
 8008e3c:	f171 0102 	sbcs.w	r1, r1, #2
 8008e40:	f082 8258 	bcs.w	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008e44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e48:	1e4c      	subs	r4, r1, #1
 8008e4a:	ea50 0104 	orrs.w	r1, r0, r4
 8008e4e:	f002 80ce 	beq.w	800afee <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8008e52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e56:	2801      	cmp	r0, #1
 8008e58:	f171 0101 	sbcs.w	r1, r1, #1
 8008e5c:	f082 824a 	bcs.w	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008e60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e64:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8008e68:	4321      	orrs	r1, r4
 8008e6a:	f002 8059 	beq.w	800af20 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8008e6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e72:	4cd9      	ldr	r4, [pc, #868]	@ (80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8008e74:	42a0      	cmp	r0, r4
 8008e76:	f171 0100 	sbcs.w	r1, r1, #0
 8008e7a:	f082 823b 	bcs.w	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008e7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e82:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8008e86:	4321      	orrs	r1, r4
 8008e88:	f001 87d9 	beq.w	800ae3e <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8008e8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e90:	4cd2      	ldr	r4, [pc, #840]	@ (80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8008e92:	42a0      	cmp	r0, r4
 8008e94:	f171 0100 	sbcs.w	r1, r1, #0
 8008e98:	f082 822c 	bcs.w	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008e9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ea0:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8008ea4:	4321      	orrs	r1, r4
 8008ea6:	f001 8751 	beq.w	800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8008eaa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008eae:	4ccc      	ldr	r4, [pc, #816]	@ (80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8008eb0:	42a0      	cmp	r0, r4
 8008eb2:	f171 0100 	sbcs.w	r1, r1, #0
 8008eb6:	f082 821d 	bcs.w	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008eba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ebe:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8008ec2:	4321      	orrs	r1, r4
 8008ec4:	f001 869a 	beq.w	800abfc <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8008ec8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ecc:	4cc5      	ldr	r4, [pc, #788]	@ (80091e4 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8008ece:	42a0      	cmp	r0, r4
 8008ed0:	f171 0100 	sbcs.w	r1, r1, #0
 8008ed4:	f082 820e 	bcs.w	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008ed8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008edc:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8008ee0:	4321      	orrs	r1, r4
 8008ee2:	f001 8612 	beq.w	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8008ee6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008eea:	4cbf      	ldr	r4, [pc, #764]	@ (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8008eec:	42a0      	cmp	r0, r4
 8008eee:	f171 0100 	sbcs.w	r1, r1, #0
 8008ef2:	f082 81ff 	bcs.w	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008ef6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008efa:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8008efe:	4321      	orrs	r1, r4
 8008f00:	f002 817e 	beq.w	800b200 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8008f04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f08:	4cb8      	ldr	r4, [pc, #736]	@ (80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008f0a:	42a0      	cmp	r0, r4
 8008f0c:	f171 0100 	sbcs.w	r1, r1, #0
 8008f10:	f082 81f0 	bcs.w	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008f14:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f18:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 8008f1c:	4321      	orrs	r1, r4
 8008f1e:	f000 829e 	beq.w	800945e <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8008f22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f26:	4cb2      	ldr	r4, [pc, #712]	@ (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008f28:	42a0      	cmp	r0, r4
 8008f2a:	f171 0100 	sbcs.w	r1, r1, #0
 8008f2e:	f082 81e1 	bcs.w	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008f32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f36:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8008f3a:	4321      	orrs	r1, r4
 8008f3c:	f000 826d 	beq.w	800941a <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8008f40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f44:	4cab      	ldr	r4, [pc, #684]	@ (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008f46:	42a0      	cmp	r0, r4
 8008f48:	f171 0100 	sbcs.w	r1, r1, #0
 8008f4c:	f082 81d2 	bcs.w	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008f50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f54:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8008f58:	4321      	orrs	r1, r4
 8008f5a:	f001 800d 	beq.w	8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8008f5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f62:	4ca5      	ldr	r4, [pc, #660]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008f64:	42a0      	cmp	r0, r4
 8008f66:	f171 0100 	sbcs.w	r1, r1, #0
 8008f6a:	f082 81c3 	bcs.w	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008f6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f72:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 8008f76:	4321      	orrs	r1, r4
 8008f78:	f000 81d0 	beq.w	800931c <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8008f7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f80:	4c9e      	ldr	r4, [pc, #632]	@ (80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008f82:	42a0      	cmp	r0, r4
 8008f84:	f171 0100 	sbcs.w	r1, r1, #0
 8008f88:	f082 81b4 	bcs.w	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008f8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f90:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 8008f94:	4321      	orrs	r1, r4
 8008f96:	f000 8142 	beq.w	800921e <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8008f9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f9e:	4c98      	ldr	r4, [pc, #608]	@ (8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008fa0:	42a0      	cmp	r0, r4
 8008fa2:	f171 0100 	sbcs.w	r1, r1, #0
 8008fa6:	f082 81a5 	bcs.w	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008faa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008fae:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8008fb2:	4321      	orrs	r1, r4
 8008fb4:	f001 824e 	beq.w	800a454 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8008fb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008fbc:	4c91      	ldr	r4, [pc, #580]	@ (8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8008fbe:	42a0      	cmp	r0, r4
 8008fc0:	f171 0100 	sbcs.w	r1, r1, #0
 8008fc4:	f082 8196 	bcs.w	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008fc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008fcc:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8008fd0:	4321      	orrs	r1, r4
 8008fd2:	f001 8197 	beq.w	800a304 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8008fd6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008fda:	4c8b      	ldr	r4, [pc, #556]	@ (8009208 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8008fdc:	42a0      	cmp	r0, r4
 8008fde:	f171 0100 	sbcs.w	r1, r1, #0
 8008fe2:	f082 8187 	bcs.w	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008fe6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008fea:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8008fee:	4321      	orrs	r1, r4
 8008ff0:	f001 8154 	beq.w	800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8008ff4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ff8:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8008ffc:	f171 0100 	sbcs.w	r1, r1, #0
 8009000:	f082 8178 	bcs.w	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009004:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009008:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 800900c:	4321      	orrs	r1, r4
 800900e:	f001 80b7 	beq.w	800a180 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8009012:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009016:	f248 0401 	movw	r4, #32769	@ 0x8001
 800901a:	42a0      	cmp	r0, r4
 800901c:	f171 0100 	sbcs.w	r1, r1, #0
 8009020:	f082 8168 	bcs.w	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009024:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009028:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 800902c:	4321      	orrs	r1, r4
 800902e:	f001 8064 	beq.w	800a0fa <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8009032:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009036:	f244 0401 	movw	r4, #16385	@ 0x4001
 800903a:	42a0      	cmp	r0, r4
 800903c:	f171 0100 	sbcs.w	r1, r1, #0
 8009040:	f082 8158 	bcs.w	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009044:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009048:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 800904c:	4321      	orrs	r1, r4
 800904e:	f001 8011 	beq.w	800a074 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8009052:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009056:	f242 0401 	movw	r4, #8193	@ 0x2001
 800905a:	42a0      	cmp	r0, r4
 800905c:	f171 0100 	sbcs.w	r1, r1, #0
 8009060:	f082 8148 	bcs.w	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009064:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009068:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 800906c:	4321      	orrs	r1, r4
 800906e:	f000 871e 	beq.w	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8009072:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009076:	f241 0401 	movw	r4, #4097	@ 0x1001
 800907a:	42a0      	cmp	r0, r4
 800907c:	f171 0100 	sbcs.w	r1, r1, #0
 8009080:	f082 8138 	bcs.w	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009084:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009088:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 800908c:	4321      	orrs	r1, r4
 800908e:	f000 86a8 	beq.w	8009de2 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8009092:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009096:	f640 0401 	movw	r4, #2049	@ 0x801
 800909a:	42a0      	cmp	r0, r4
 800909c:	f171 0100 	sbcs.w	r1, r1, #0
 80090a0:	f082 8128 	bcs.w	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80090a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090a8:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 80090ac:	4321      	orrs	r1, r4
 80090ae:	f000 8632 	beq.w	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 80090b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090b6:	f240 4401 	movw	r4, #1025	@ 0x401
 80090ba:	42a0      	cmp	r0, r4
 80090bc:	f171 0100 	sbcs.w	r1, r1, #0
 80090c0:	f082 8118 	bcs.w	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80090c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090c8:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 80090cc:	4321      	orrs	r1, r4
 80090ce:	f000 85b0 	beq.w	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 80090d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090d6:	f240 2401 	movw	r4, #513	@ 0x201
 80090da:	42a0      	cmp	r0, r4
 80090dc:	f171 0100 	sbcs.w	r1, r1, #0
 80090e0:	f082 8108 	bcs.w	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80090e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090e8:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 80090ec:	4321      	orrs	r1, r4
 80090ee:	f000 8535 	beq.w	8009b5c <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 80090f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090f6:	f240 1401 	movw	r4, #257	@ 0x101
 80090fa:	42a0      	cmp	r0, r4
 80090fc:	f171 0100 	sbcs.w	r1, r1, #0
 8009100:	f082 80f8 	bcs.w	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009104:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009108:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 800910c:	4321      	orrs	r1, r4
 800910e:	f000 84ba 	beq.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8009112:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009116:	2881      	cmp	r0, #129	@ 0x81
 8009118:	f171 0100 	sbcs.w	r1, r1, #0
 800911c:	f082 80ea 	bcs.w	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009120:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009124:	2821      	cmp	r0, #33	@ 0x21
 8009126:	f171 0100 	sbcs.w	r1, r1, #0
 800912a:	d26f      	bcs.n	800920c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800912c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009130:	4301      	orrs	r1, r0
 8009132:	f002 80df 	beq.w	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009136:	e9d7 0100 	ldrd	r0, r1, [r7]
 800913a:	1e42      	subs	r2, r0, #1
 800913c:	f141 33ff 	adc.w	r3, r1, #4294967295
 8009140:	2a20      	cmp	r2, #32
 8009142:	f173 0100 	sbcs.w	r1, r3, #0
 8009146:	f082 80d5 	bcs.w	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800914a:	2a1f      	cmp	r2, #31
 800914c:	f202 80d2 	bhi.w	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009150:	a101      	add	r1, pc, #4	@ (adr r1, 8009158 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8009152:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009156:	bf00      	nop
 8009158:	080094b9 	.word	0x080094b9
 800915c:	08009585 	.word	0x08009585
 8009160:	0800b2f5 	.word	0x0800b2f5
 8009164:	08009645 	.word	0x08009645
 8009168:	0800b2f5 	.word	0x0800b2f5
 800916c:	0800b2f5 	.word	0x0800b2f5
 8009170:	0800b2f5 	.word	0x0800b2f5
 8009174:	08009715 	.word	0x08009715
 8009178:	0800b2f5 	.word	0x0800b2f5
 800917c:	0800b2f5 	.word	0x0800b2f5
 8009180:	0800b2f5 	.word	0x0800b2f5
 8009184:	0800b2f5 	.word	0x0800b2f5
 8009188:	0800b2f5 	.word	0x0800b2f5
 800918c:	0800b2f5 	.word	0x0800b2f5
 8009190:	0800b2f5 	.word	0x0800b2f5
 8009194:	080097f7 	.word	0x080097f7
 8009198:	0800b2f5 	.word	0x0800b2f5
 800919c:	0800b2f5 	.word	0x0800b2f5
 80091a0:	0800b2f5 	.word	0x0800b2f5
 80091a4:	0800b2f5 	.word	0x0800b2f5
 80091a8:	0800b2f5 	.word	0x0800b2f5
 80091ac:	0800b2f5 	.word	0x0800b2f5
 80091b0:	0800b2f5 	.word	0x0800b2f5
 80091b4:	0800b2f5 	.word	0x0800b2f5
 80091b8:	0800b2f5 	.word	0x0800b2f5
 80091bc:	0800b2f5 	.word	0x0800b2f5
 80091c0:	0800b2f5 	.word	0x0800b2f5
 80091c4:	0800b2f5 	.word	0x0800b2f5
 80091c8:	0800b2f5 	.word	0x0800b2f5
 80091cc:	0800b2f5 	.word	0x0800b2f5
 80091d0:	0800b2f5 	.word	0x0800b2f5
 80091d4:	080098cd 	.word	0x080098cd
 80091d8:	80000001 	.word	0x80000001
 80091dc:	40000001 	.word	0x40000001
 80091e0:	20000001 	.word	0x20000001
 80091e4:	10000001 	.word	0x10000001
 80091e8:	08000001 	.word	0x08000001
 80091ec:	04000001 	.word	0x04000001
 80091f0:	00800001 	.word	0x00800001
 80091f4:	00400001 	.word	0x00400001
 80091f8:	00200001 	.word	0x00200001
 80091fc:	00100001 	.word	0x00100001
 8009200:	00080001 	.word	0x00080001
 8009204:	00040001 	.word	0x00040001
 8009208:	00020001 	.word	0x00020001
 800920c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009210:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8009214:	430b      	orrs	r3, r1
 8009216:	f000 83c4 	beq.w	80099a2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800921a:	f002 b86b 	b.w	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800921e:	4ba1      	ldr	r3, [pc, #644]	@ (80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009220:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009224:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009228:	633b      	str	r3, [r7, #48]	@ 0x30
 800922a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800922c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009230:	d036      	beq.n	80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8009232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009234:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009238:	d86b      	bhi.n	8009312 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800923a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800923c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009240:	d02b      	beq.n	800929a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8009242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009244:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009248:	d863      	bhi.n	8009312 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800924a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800924c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009250:	d01b      	beq.n	800928a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8009252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009254:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009258:	d85b      	bhi.n	8009312 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800925a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800925c:	2b00      	cmp	r3, #0
 800925e:	d004      	beq.n	800926a <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8009260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009262:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009266:	d008      	beq.n	800927a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8009268:	e053      	b.n	8009312 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800926a:	f107 0320 	add.w	r3, r7, #32
 800926e:	4618      	mov	r0, r3
 8009270:	f7ff f8ba 	bl	80083e8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009276:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009278:	e04e      	b.n	8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800927a:	f107 0314 	add.w	r3, r7, #20
 800927e:	4618      	mov	r0, r3
 8009280:	f7ff fa1c 	bl	80086bc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009288:	e046      	b.n	8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800928a:	f107 0308 	add.w	r3, r7, #8
 800928e:	4618      	mov	r0, r3
 8009290:	f7ff fb7e 	bl	8008990 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009298:	e03e      	b.n	8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800929a:	4b83      	ldr	r3, [pc, #524]	@ (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800929c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800929e:	e03b      	b.n	8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80092a0:	4b80      	ldr	r3, [pc, #512]	@ (80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80092a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80092a6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80092aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80092ac:	4b7d      	ldr	r3, [pc, #500]	@ (80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f003 0302 	and.w	r3, r3, #2
 80092b4:	2b02      	cmp	r3, #2
 80092b6:	d10c      	bne.n	80092d2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 80092b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d109      	bne.n	80092d2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80092be:	4b79      	ldr	r3, [pc, #484]	@ (80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	08db      	lsrs	r3, r3, #3
 80092c4:	f003 0303 	and.w	r3, r3, #3
 80092c8:	4a78      	ldr	r2, [pc, #480]	@ (80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 80092ca:	fa22 f303 	lsr.w	r3, r2, r3
 80092ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80092d0:	e01e      	b.n	8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80092d2:	4b74      	ldr	r3, [pc, #464]	@ (80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80092da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092de:	d106      	bne.n	80092ee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80092e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092e6:	d102      	bne.n	80092ee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80092e8:	4b71      	ldr	r3, [pc, #452]	@ (80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 80092ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80092ec:	e010      	b.n	8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80092ee:	4b6d      	ldr	r3, [pc, #436]	@ (80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80092fa:	d106      	bne.n	800930a <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 80092fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009302:	d102      	bne.n	800930a <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009304:	4b6b      	ldr	r3, [pc, #428]	@ (80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8009306:	637b      	str	r3, [r7, #52]	@ 0x34
 8009308:	e002      	b.n	8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800930a:	2300      	movs	r3, #0
 800930c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800930e:	e003      	b.n	8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8009310:	e002      	b.n	8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8009312:	2300      	movs	r3, #0
 8009314:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009316:	bf00      	nop
          }
        }
        break;
 8009318:	f001 bfef 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800931c:	4b61      	ldr	r3, [pc, #388]	@ (80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800931e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009322:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 8009326:	633b      	str	r3, [r7, #48]	@ 0x30
 8009328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800932a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800932e:	d036      	beq.n	800939e <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8009330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009332:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009336:	d86b      	bhi.n	8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8009338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800933a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800933e:	d02b      	beq.n	8009398 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8009340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009342:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8009346:	d863      	bhi.n	8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8009348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800934a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800934e:	d01b      	beq.n	8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009352:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009356:	d85b      	bhi.n	8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8009358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800935a:	2b00      	cmp	r3, #0
 800935c:	d004      	beq.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800935e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009360:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009364:	d008      	beq.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8009366:	e053      	b.n	8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009368:	f107 0320 	add.w	r3, r7, #32
 800936c:	4618      	mov	r0, r3
 800936e:	f7ff f83b 	bl	80083e8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009374:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009376:	e04e      	b.n	8009416 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009378:	f107 0314 	add.w	r3, r7, #20
 800937c:	4618      	mov	r0, r3
 800937e:	f7ff f99d 	bl	80086bc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009386:	e046      	b.n	8009416 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009388:	f107 0308 	add.w	r3, r7, #8
 800938c:	4618      	mov	r0, r3
 800938e:	f7ff faff 	bl	8008990 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009396:	e03e      	b.n	8009416 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009398:	4b43      	ldr	r3, [pc, #268]	@ (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800939a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800939c:	e03b      	b.n	8009416 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800939e:	4b41      	ldr	r3, [pc, #260]	@ (80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80093a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80093a4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80093a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80093aa:	4b3e      	ldr	r3, [pc, #248]	@ (80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f003 0302 	and.w	r3, r3, #2
 80093b2:	2b02      	cmp	r3, #2
 80093b4:	d10c      	bne.n	80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 80093b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d109      	bne.n	80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80093bc:	4b39      	ldr	r3, [pc, #228]	@ (80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	08db      	lsrs	r3, r3, #3
 80093c2:	f003 0303 	and.w	r3, r3, #3
 80093c6:	4a39      	ldr	r2, [pc, #228]	@ (80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 80093c8:	fa22 f303 	lsr.w	r3, r2, r3
 80093cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80093ce:	e01e      	b.n	800940e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80093d0:	4b34      	ldr	r3, [pc, #208]	@ (80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80093d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093dc:	d106      	bne.n	80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80093de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093e4:	d102      	bne.n	80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80093e6:	4b32      	ldr	r3, [pc, #200]	@ (80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 80093e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80093ea:	e010      	b.n	800940e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80093ec:	4b2d      	ldr	r3, [pc, #180]	@ (80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093f8:	d106      	bne.n	8009408 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 80093fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009400:	d102      	bne.n	8009408 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009402:	4b2c      	ldr	r3, [pc, #176]	@ (80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8009404:	637b      	str	r3, [r7, #52]	@ 0x34
 8009406:	e002      	b.n	800940e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8009408:	2300      	movs	r3, #0
 800940a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800940c:	e003      	b.n	8009416 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 800940e:	e002      	b.n	8009416 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8009410:	2300      	movs	r3, #0
 8009412:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009414:	bf00      	nop
          }
        }
        break;
 8009416:	f001 bf70 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800941a:	4b22      	ldr	r3, [pc, #136]	@ (80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800941c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009424:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8009426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009428:	2b00      	cmp	r3, #0
 800942a:	d108      	bne.n	800943e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800942c:	f107 0320 	add.w	r3, r7, #32
 8009430:	4618      	mov	r0, r3
 8009432:	f7fe ffd9 	bl	80083e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009438:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800943a:	f001 bf5e 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800943e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009440:	2b40      	cmp	r3, #64	@ 0x40
 8009442:	d108      	bne.n	8009456 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009444:	f107 0314 	add.w	r3, r7, #20
 8009448:	4618      	mov	r0, r3
 800944a:	f7ff f937 	bl	80086bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800944e:	69fb      	ldr	r3, [r7, #28]
 8009450:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009452:	f001 bf52 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8009456:	2300      	movs	r3, #0
 8009458:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800945a:	f001 bf4e 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 800945e:	4b11      	ldr	r3, [pc, #68]	@ (80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009460:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009464:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009468:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 800946a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800946c:	2b00      	cmp	r3, #0
 800946e:	d108      	bne.n	8009482 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009470:	f107 0320 	add.w	r3, r7, #32
 8009474:	4618      	mov	r0, r3
 8009476:	f7fe ffb7 	bl	80083e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800947a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800947c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800947e:	f001 bf3c 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8009482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009484:	2b80      	cmp	r3, #128	@ 0x80
 8009486:	d108      	bne.n	800949a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009488:	f107 0314 	add.w	r3, r7, #20
 800948c:	4618      	mov	r0, r3
 800948e:	f7ff f915 	bl	80086bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009492:	69fb      	ldr	r3, [r7, #28]
 8009494:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009496:	f001 bf30 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800949a:	2300      	movs	r3, #0
 800949c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800949e:	f001 bf2c 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80094a2:	bf00      	nop
 80094a4:	44020c00 	.word	0x44020c00
 80094a8:	00bb8000 	.word	0x00bb8000
 80094ac:	03d09000 	.word	0x03d09000
 80094b0:	003d0900 	.word	0x003d0900
 80094b4:	017d7840 	.word	0x017d7840
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80094b8:	4b9d      	ldr	r3, [pc, #628]	@ (8009730 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80094ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80094be:	f003 0307 	and.w	r3, r3, #7
 80094c2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80094c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d104      	bne.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80094ca:	f7fc ffd7 	bl	800647c <HAL_RCC_GetPCLK2Freq>
 80094ce:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80094d0:	f001 bf13 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 80094d4:	4b96      	ldr	r3, [pc, #600]	@ (8009730 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80094dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80094e0:	d10a      	bne.n	80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 80094e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d107      	bne.n	80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094e8:	f107 0314 	add.w	r3, r7, #20
 80094ec:	4618      	mov	r0, r3
 80094ee:	f7ff f8e5 	bl	80086bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80094f2:	69bb      	ldr	r3, [r7, #24]
 80094f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80094f6:	e043      	b.n	8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 80094f8:	4b8d      	ldr	r3, [pc, #564]	@ (8009730 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009500:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009504:	d10a      	bne.n	800951c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8009506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009508:	2b02      	cmp	r3, #2
 800950a:	d107      	bne.n	800951c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800950c:	f107 0308 	add.w	r3, r7, #8
 8009510:	4618      	mov	r0, r3
 8009512:	f7ff fa3d 	bl	8008990 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	637b      	str	r3, [r7, #52]	@ 0x34
 800951a:	e031      	b.n	8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800951c:	4b84      	ldr	r3, [pc, #528]	@ (8009730 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f003 0302 	and.w	r3, r3, #2
 8009524:	2b02      	cmp	r3, #2
 8009526:	d10c      	bne.n	8009542 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8009528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800952a:	2b03      	cmp	r3, #3
 800952c:	d109      	bne.n	8009542 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800952e:	4b80      	ldr	r3, [pc, #512]	@ (8009730 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	08db      	lsrs	r3, r3, #3
 8009534:	f003 0303 	and.w	r3, r3, #3
 8009538:	4a7e      	ldr	r2, [pc, #504]	@ (8009734 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800953a:	fa22 f303 	lsr.w	r3, r2, r3
 800953e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009540:	e01e      	b.n	8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8009542:	4b7b      	ldr	r3, [pc, #492]	@ (8009730 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800954a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800954e:	d105      	bne.n	800955c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8009550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009552:	2b04      	cmp	r3, #4
 8009554:	d102      	bne.n	800955c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8009556:	4b78      	ldr	r3, [pc, #480]	@ (8009738 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8009558:	637b      	str	r3, [r7, #52]	@ 0x34
 800955a:	e011      	b.n	8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800955c:	4b74      	ldr	r3, [pc, #464]	@ (8009730 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800955e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009562:	f003 0302 	and.w	r3, r3, #2
 8009566:	2b02      	cmp	r3, #2
 8009568:	d106      	bne.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800956a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800956c:	2b05      	cmp	r3, #5
 800956e:	d103      	bne.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8009570:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009574:	637b      	str	r3, [r7, #52]	@ 0x34
 8009576:	e003      	b.n	8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8009578:	2300      	movs	r3, #0
 800957a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800957c:	f001 bebd 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009580:	f001 bebb 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8009584:	4b6a      	ldr	r3, [pc, #424]	@ (8009730 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009586:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800958a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800958e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8009590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009592:	2b00      	cmp	r3, #0
 8009594:	d104      	bne.n	80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009596:	f7fc ff5b 	bl	8006450 <HAL_RCC_GetPCLK1Freq>
 800959a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 800959c:	f001 bead 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80095a0:	4b63      	ldr	r3, [pc, #396]	@ (8009730 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095ac:	d10a      	bne.n	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80095ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095b0:	2b08      	cmp	r3, #8
 80095b2:	d107      	bne.n	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095b4:	f107 0314 	add.w	r3, r7, #20
 80095b8:	4618      	mov	r0, r3
 80095ba:	f7ff f87f 	bl	80086bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80095be:	69bb      	ldr	r3, [r7, #24]
 80095c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80095c2:	e03d      	b.n	8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 80095c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095c6:	2b10      	cmp	r3, #16
 80095c8:	d108      	bne.n	80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095ca:	f107 0308 	add.w	r3, r7, #8
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7ff f9de 	bl	8008990 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80095d8:	f001 be8f 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80095dc:	4b54      	ldr	r3, [pc, #336]	@ (8009730 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f003 0302 	and.w	r3, r3, #2
 80095e4:	2b02      	cmp	r3, #2
 80095e6:	d10c      	bne.n	8009602 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 80095e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ea:	2b18      	cmp	r3, #24
 80095ec:	d109      	bne.n	8009602 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80095ee:	4b50      	ldr	r3, [pc, #320]	@ (8009730 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	08db      	lsrs	r3, r3, #3
 80095f4:	f003 0303 	and.w	r3, r3, #3
 80095f8:	4a4e      	ldr	r2, [pc, #312]	@ (8009734 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80095fa:	fa22 f303 	lsr.w	r3, r2, r3
 80095fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009600:	e01e      	b.n	8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8009602:	4b4b      	ldr	r3, [pc, #300]	@ (8009730 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800960a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800960e:	d105      	bne.n	800961c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8009610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009612:	2b20      	cmp	r3, #32
 8009614:	d102      	bne.n	800961c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8009616:	4b48      	ldr	r3, [pc, #288]	@ (8009738 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8009618:	637b      	str	r3, [r7, #52]	@ 0x34
 800961a:	e011      	b.n	8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800961c:	4b44      	ldr	r3, [pc, #272]	@ (8009730 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800961e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009622:	f003 0302 	and.w	r3, r3, #2
 8009626:	2b02      	cmp	r3, #2
 8009628:	d106      	bne.n	8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 800962a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800962c:	2b28      	cmp	r3, #40	@ 0x28
 800962e:	d103      	bne.n	8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8009630:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009634:	637b      	str	r3, [r7, #52]	@ 0x34
 8009636:	e003      	b.n	8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8009638:	2300      	movs	r3, #0
 800963a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800963c:	f001 be5d 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009640:	f001 be5b 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8009644:	4b3a      	ldr	r3, [pc, #232]	@ (8009730 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009646:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800964a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800964e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8009650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009652:	2b00      	cmp	r3, #0
 8009654:	d104      	bne.n	8009660 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009656:	f7fc fefb 	bl	8006450 <HAL_RCC_GetPCLK1Freq>
 800965a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 800965c:	f001 be4d 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8009660:	4b33      	ldr	r3, [pc, #204]	@ (8009730 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009668:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800966c:	d10a      	bne.n	8009684 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800966e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009670:	2b40      	cmp	r3, #64	@ 0x40
 8009672:	d107      	bne.n	8009684 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009674:	f107 0314 	add.w	r3, r7, #20
 8009678:	4618      	mov	r0, r3
 800967a:	f7ff f81f 	bl	80086bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800967e:	69bb      	ldr	r3, [r7, #24]
 8009680:	637b      	str	r3, [r7, #52]	@ 0x34
 8009682:	e045      	b.n	8009710 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8009684:	4b2a      	ldr	r3, [pc, #168]	@ (8009730 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800968c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009690:	d10a      	bne.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8009692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009694:	2b80      	cmp	r3, #128	@ 0x80
 8009696:	d107      	bne.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009698:	f107 0308 	add.w	r3, r7, #8
 800969c:	4618      	mov	r0, r3
 800969e:	f7ff f977 	bl	8008990 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80096a6:	e033      	b.n	8009710 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80096a8:	4b21      	ldr	r3, [pc, #132]	@ (8009730 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f003 0302 	and.w	r3, r3, #2
 80096b0:	2b02      	cmp	r3, #2
 80096b2:	d10c      	bne.n	80096ce <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 80096b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80096b8:	d109      	bne.n	80096ce <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80096ba:	4b1d      	ldr	r3, [pc, #116]	@ (8009730 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	08db      	lsrs	r3, r3, #3
 80096c0:	f003 0303 	and.w	r3, r3, #3
 80096c4:	4a1b      	ldr	r2, [pc, #108]	@ (8009734 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80096c6:	fa22 f303 	lsr.w	r3, r2, r3
 80096ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80096cc:	e020      	b.n	8009710 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 80096ce:	4b18      	ldr	r3, [pc, #96]	@ (8009730 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80096d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096da:	d106      	bne.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 80096dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096e2:	d102      	bne.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 80096e4:	4b14      	ldr	r3, [pc, #80]	@ (8009738 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80096e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80096e8:	e012      	b.n	8009710 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80096ea:	4b11      	ldr	r3, [pc, #68]	@ (8009730 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80096ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80096f0:	f003 0302 	and.w	r3, r3, #2
 80096f4:	2b02      	cmp	r3, #2
 80096f6:	d107      	bne.n	8009708 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 80096f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096fa:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80096fe:	d103      	bne.n	8009708 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8009700:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009704:	637b      	str	r3, [r7, #52]	@ 0x34
 8009706:	e003      	b.n	8009710 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8009708:	2300      	movs	r3, #0
 800970a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800970c:	f001 bdf5 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009710:	f001 bdf3 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8009714:	4b06      	ldr	r3, [pc, #24]	@ (8009730 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009716:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800971a:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800971e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8009720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009722:	2b00      	cmp	r3, #0
 8009724:	d10a      	bne.n	800973c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009726:	f7fc fe93 	bl	8006450 <HAL_RCC_GetPCLK1Freq>
 800972a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 800972c:	f001 bde5 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009730:	44020c00 	.word	0x44020c00
 8009734:	03d09000 	.word	0x03d09000
 8009738:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 800973c:	4ba0      	ldr	r3, [pc, #640]	@ (80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009744:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009748:	d10b      	bne.n	8009762 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 800974a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800974c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009750:	d107      	bne.n	8009762 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009752:	f107 0314 	add.w	r3, r7, #20
 8009756:	4618      	mov	r0, r3
 8009758:	f7fe ffb0 	bl	80086bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800975c:	69bb      	ldr	r3, [r7, #24]
 800975e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009760:	e047      	b.n	80097f2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8009762:	4b97      	ldr	r3, [pc, #604]	@ (80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800976a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800976e:	d10b      	bne.n	8009788 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8009770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009772:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009776:	d107      	bne.n	8009788 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009778:	f107 0308 	add.w	r3, r7, #8
 800977c:	4618      	mov	r0, r3
 800977e:	f7ff f907 	bl	8008990 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	637b      	str	r3, [r7, #52]	@ 0x34
 8009786:	e034      	b.n	80097f2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8009788:	4b8d      	ldr	r3, [pc, #564]	@ (80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f003 0302 	and.w	r3, r3, #2
 8009790:	2b02      	cmp	r3, #2
 8009792:	d10d      	bne.n	80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8009794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009796:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800979a:	d109      	bne.n	80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800979c:	4b88      	ldr	r3, [pc, #544]	@ (80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	08db      	lsrs	r3, r3, #3
 80097a2:	f003 0303 	and.w	r3, r3, #3
 80097a6:	4a87      	ldr	r2, [pc, #540]	@ (80099c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80097a8:	fa22 f303 	lsr.w	r3, r2, r3
 80097ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80097ae:	e020      	b.n	80097f2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 80097b0:	4b83      	ldr	r3, [pc, #524]	@ (80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80097b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097bc:	d106      	bne.n	80097cc <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 80097be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80097c4:	d102      	bne.n	80097cc <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 80097c6:	4b80      	ldr	r3, [pc, #512]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80097c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80097ca:	e012      	b.n	80097f2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80097cc:	4b7c      	ldr	r3, [pc, #496]	@ (80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80097ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80097d2:	f003 0302 	and.w	r3, r3, #2
 80097d6:	2b02      	cmp	r3, #2
 80097d8:	d107      	bne.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 80097da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097dc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80097e0:	d103      	bne.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 80097e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80097e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80097e8:	e003      	b.n	80097f2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 80097ea:	2300      	movs	r3, #0
 80097ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80097ee:	f001 bd84 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80097f2:	f001 bd82 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80097f6:	4b72      	ldr	r3, [pc, #456]	@ (80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80097f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80097fc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009800:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8009802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009804:	2b00      	cmp	r3, #0
 8009806:	d104      	bne.n	8009812 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009808:	f7fc fe22 	bl	8006450 <HAL_RCC_GetPCLK1Freq>
 800980c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 800980e:	f001 bd74 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8009812:	4b6b      	ldr	r3, [pc, #428]	@ (80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800981a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800981e:	d10b      	bne.n	8009838 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8009820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009822:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009826:	d107      	bne.n	8009838 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009828:	f107 0314 	add.w	r3, r7, #20
 800982c:	4618      	mov	r0, r3
 800982e:	f7fe ff45 	bl	80086bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009832:	69bb      	ldr	r3, [r7, #24]
 8009834:	637b      	str	r3, [r7, #52]	@ 0x34
 8009836:	e047      	b.n	80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8009838:	4b61      	ldr	r3, [pc, #388]	@ (80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009840:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009844:	d10b      	bne.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8009846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009848:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800984c:	d107      	bne.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800984e:	f107 0308 	add.w	r3, r7, #8
 8009852:	4618      	mov	r0, r3
 8009854:	f7ff f89c 	bl	8008990 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	637b      	str	r3, [r7, #52]	@ 0x34
 800985c:	e034      	b.n	80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800985e:	4b58      	ldr	r3, [pc, #352]	@ (80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f003 0302 	and.w	r3, r3, #2
 8009866:	2b02      	cmp	r3, #2
 8009868:	d10d      	bne.n	8009886 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800986a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800986c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009870:	d109      	bne.n	8009886 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009872:	4b53      	ldr	r3, [pc, #332]	@ (80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	08db      	lsrs	r3, r3, #3
 8009878:	f003 0303 	and.w	r3, r3, #3
 800987c:	4a51      	ldr	r2, [pc, #324]	@ (80099c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800987e:	fa22 f303 	lsr.w	r3, r2, r3
 8009882:	637b      	str	r3, [r7, #52]	@ 0x34
 8009884:	e020      	b.n	80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8009886:	4b4e      	ldr	r3, [pc, #312]	@ (80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800988e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009892:	d106      	bne.n	80098a2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8009894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009896:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800989a:	d102      	bne.n	80098a2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 800989c:	4b4a      	ldr	r3, [pc, #296]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800989e:	637b      	str	r3, [r7, #52]	@ 0x34
 80098a0:	e012      	b.n	80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80098a2:	4b47      	ldr	r3, [pc, #284]	@ (80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80098a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80098a8:	f003 0302 	and.w	r3, r3, #2
 80098ac:	2b02      	cmp	r3, #2
 80098ae:	d107      	bne.n	80098c0 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 80098b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098b2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80098b6:	d103      	bne.n	80098c0 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 80098b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80098bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80098be:	e003      	b.n	80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 80098c0:	2300      	movs	r3, #0
 80098c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80098c4:	f001 bd19 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80098c8:	f001 bd17 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 80098cc:	4b3c      	ldr	r3, [pc, #240]	@ (80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80098ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80098d2:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 80098d6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 80098d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d104      	bne.n	80098e8 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80098de:	f7fc fdb7 	bl	8006450 <HAL_RCC_GetPCLK1Freq>
 80098e2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 80098e4:	f001 bd09 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 80098e8:	4b35      	ldr	r3, [pc, #212]	@ (80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80098f4:	d10b      	bne.n	800990e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 80098f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80098fc:	d107      	bne.n	800990e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098fe:	f107 0314 	add.w	r3, r7, #20
 8009902:	4618      	mov	r0, r3
 8009904:	f7fe feda 	bl	80086bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009908:	69bb      	ldr	r3, [r7, #24]
 800990a:	637b      	str	r3, [r7, #52]	@ 0x34
 800990c:	e047      	b.n	800999e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 800990e:	4b2c      	ldr	r3, [pc, #176]	@ (80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009916:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800991a:	d10b      	bne.n	8009934 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 800991c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800991e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009922:	d107      	bne.n	8009934 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009924:	f107 0308 	add.w	r3, r7, #8
 8009928:	4618      	mov	r0, r3
 800992a:	f7ff f831 	bl	8008990 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	637b      	str	r3, [r7, #52]	@ 0x34
 8009932:	e034      	b.n	800999e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8009934:	4b22      	ldr	r3, [pc, #136]	@ (80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f003 0302 	and.w	r3, r3, #2
 800993c:	2b02      	cmp	r3, #2
 800993e:	d10d      	bne.n	800995c <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8009940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009942:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8009946:	d109      	bne.n	800995c <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009948:	4b1d      	ldr	r3, [pc, #116]	@ (80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	08db      	lsrs	r3, r3, #3
 800994e:	f003 0303 	and.w	r3, r3, #3
 8009952:	4a1c      	ldr	r2, [pc, #112]	@ (80099c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8009954:	fa22 f303 	lsr.w	r3, r2, r3
 8009958:	637b      	str	r3, [r7, #52]	@ 0x34
 800995a:	e020      	b.n	800999e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 800995c:	4b18      	ldr	r3, [pc, #96]	@ (80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009964:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009968:	d106      	bne.n	8009978 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800996a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800996c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009970:	d102      	bne.n	8009978 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8009972:	4b15      	ldr	r3, [pc, #84]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8009974:	637b      	str	r3, [r7, #52]	@ 0x34
 8009976:	e012      	b.n	800999e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8009978:	4b11      	ldr	r3, [pc, #68]	@ (80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800997a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800997e:	f003 0302 	and.w	r3, r3, #2
 8009982:	2b02      	cmp	r3, #2
 8009984:	d107      	bne.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8009986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009988:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800998c:	d103      	bne.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 800998e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009992:	637b      	str	r3, [r7, #52]	@ 0x34
 8009994:	e003      	b.n	800999e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8009996:	2300      	movs	r3, #0
 8009998:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800999a:	f001 bcae 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800999e:	f001 bcac 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 80099a2:	4b07      	ldr	r3, [pc, #28]	@ (80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80099a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80099a8:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 80099ac:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 80099ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d10b      	bne.n	80099cc <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80099b4:	f7fc fd4c 	bl	8006450 <HAL_RCC_GetPCLK1Freq>
 80099b8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 80099ba:	f001 bc9e 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80099be:	bf00      	nop
 80099c0:	44020c00 	.word	0x44020c00
 80099c4:	03d09000 	.word	0x03d09000
 80099c8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 80099cc:	4ba0      	ldr	r3, [pc, #640]	@ (8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80099d8:	d10b      	bne.n	80099f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 80099da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80099e0:	d107      	bne.n	80099f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099e2:	f107 0314 	add.w	r3, r7, #20
 80099e6:	4618      	mov	r0, r3
 80099e8:	f7fe fe68 	bl	80086bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80099ec:	69bb      	ldr	r3, [r7, #24]
 80099ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80099f0:	e047      	b.n	8009a82 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 80099f2:	4b97      	ldr	r3, [pc, #604]	@ (8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80099fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099fe:	d10b      	bne.n	8009a18 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8009a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a02:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009a06:	d107      	bne.n	8009a18 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a08:	f107 0308 	add.w	r3, r7, #8
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f7fe ffbf 	bl	8008990 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a16:	e034      	b.n	8009a82 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8009a18:	4b8d      	ldr	r3, [pc, #564]	@ (8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f003 0302 	and.w	r3, r3, #2
 8009a20:	2b02      	cmp	r3, #2
 8009a22:	d10d      	bne.n	8009a40 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8009a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a26:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009a2a:	d109      	bne.n	8009a40 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009a2c:	4b88      	ldr	r3, [pc, #544]	@ (8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	08db      	lsrs	r3, r3, #3
 8009a32:	f003 0303 	and.w	r3, r3, #3
 8009a36:	4a87      	ldr	r2, [pc, #540]	@ (8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8009a38:	fa22 f303 	lsr.w	r3, r2, r3
 8009a3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a3e:	e020      	b.n	8009a82 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8009a40:	4b83      	ldr	r3, [pc, #524]	@ (8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009a48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a4c:	d106      	bne.n	8009a5c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8009a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a54:	d102      	bne.n	8009a5c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 8009a56:	4b80      	ldr	r3, [pc, #512]	@ (8009c58 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8009a58:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a5a:	e012      	b.n	8009a82 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8009a5c:	4b7c      	ldr	r3, [pc, #496]	@ (8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009a5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a62:	f003 0302 	and.w	r3, r3, #2
 8009a66:	2b02      	cmp	r3, #2
 8009a68:	d107      	bne.n	8009a7a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8009a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a6c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8009a70:	d103      	bne.n	8009a7a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8009a72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a76:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a78:	e003      	b.n	8009a82 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a7e:	f001 bc3c 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009a82:	f001 bc3a 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8009a86:	4b72      	ldr	r3, [pc, #456]	@ (8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009a88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009a8c:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8009a90:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8009a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d104      	bne.n	8009aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009a98:	f7fc fcda 	bl	8006450 <HAL_RCC_GetPCLK1Freq>
 8009a9c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8009a9e:	f001 bc2c 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8009aa2:	4b6b      	ldr	r3, [pc, #428]	@ (8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009aaa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009aae:	d10b      	bne.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8009ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ab2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009ab6:	d107      	bne.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ab8:	f107 0314 	add.w	r3, r7, #20
 8009abc:	4618      	mov	r0, r3
 8009abe:	f7fe fdfd 	bl	80086bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009ac2:	69bb      	ldr	r3, [r7, #24]
 8009ac4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ac6:	e047      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8009ac8:	4b61      	ldr	r3, [pc, #388]	@ (8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009ad0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ad4:	d10b      	bne.n	8009aee <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8009ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ad8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009adc:	d107      	bne.n	8009aee <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ade:	f107 0308 	add.w	r3, r7, #8
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f7fe ff54 	bl	8008990 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	637b      	str	r3, [r7, #52]	@ 0x34
 8009aec:	e034      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8009aee:	4b58      	ldr	r3, [pc, #352]	@ (8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f003 0302 	and.w	r3, r3, #2
 8009af6:	2b02      	cmp	r3, #2
 8009af8:	d10d      	bne.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 8009afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009afc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009b00:	d109      	bne.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009b02:	4b53      	ldr	r3, [pc, #332]	@ (8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	08db      	lsrs	r3, r3, #3
 8009b08:	f003 0303 	and.w	r3, r3, #3
 8009b0c:	4a51      	ldr	r2, [pc, #324]	@ (8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8009b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8009b12:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b14:	e020      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8009b16:	4b4e      	ldr	r3, [pc, #312]	@ (8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b22:	d106      	bne.n	8009b32 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8009b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b26:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009b2a:	d102      	bne.n	8009b32 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 8009b2c:	4b4a      	ldr	r3, [pc, #296]	@ (8009c58 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8009b2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b30:	e012      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 8009b32:	4b47      	ldr	r3, [pc, #284]	@ (8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009b34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b38:	f003 0302 	and.w	r3, r3, #2
 8009b3c:	2b02      	cmp	r3, #2
 8009b3e:	d107      	bne.n	8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8009b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b42:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009b46:	d103      	bne.n	8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8009b48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b4e:	e003      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8009b50:	2300      	movs	r3, #0
 8009b52:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b54:	f001 bbd1 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009b58:	f001 bbcf 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8009b5c:	4b3c      	ldr	r3, [pc, #240]	@ (8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009b5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009b62:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009b66:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8009b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d104      	bne.n	8009b78 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009b6e:	f7fc fc6f 	bl	8006450 <HAL_RCC_GetPCLK1Freq>
 8009b72:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8009b74:	f001 bbc1 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8009b78:	4b35      	ldr	r3, [pc, #212]	@ (8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b84:	d10b      	bne.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8009b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009b8c:	d107      	bne.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b8e:	f107 0314 	add.w	r3, r7, #20
 8009b92:	4618      	mov	r0, r3
 8009b94:	f7fe fd92 	bl	80086bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009b98:	69bb      	ldr	r3, [r7, #24]
 8009b9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b9c:	e047      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 8009b9e:	4b2c      	ldr	r3, [pc, #176]	@ (8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009ba6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009baa:	d10b      	bne.n	8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8009bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009bb2:	d107      	bne.n	8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009bb4:	f107 0308 	add.w	r3, r7, #8
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f7fe fee9 	bl	8008990 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bc2:	e034      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8009bc4:	4b22      	ldr	r3, [pc, #136]	@ (8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f003 0302 	and.w	r3, r3, #2
 8009bcc:	2b02      	cmp	r3, #2
 8009bce:	d10d      	bne.n	8009bec <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8009bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bd2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009bd6:	d109      	bne.n	8009bec <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009bd8:	4b1d      	ldr	r3, [pc, #116]	@ (8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	08db      	lsrs	r3, r3, #3
 8009bde:	f003 0303 	and.w	r3, r3, #3
 8009be2:	4a1c      	ldr	r2, [pc, #112]	@ (8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8009be4:	fa22 f303 	lsr.w	r3, r2, r3
 8009be8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bea:	e020      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8009bec:	4b18      	ldr	r3, [pc, #96]	@ (8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009bf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009bf8:	d106      	bne.n	8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8009bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bfc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009c00:	d102      	bne.n	8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 8009c02:	4b15      	ldr	r3, [pc, #84]	@ (8009c58 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8009c04:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c06:	e012      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8009c08:	4b11      	ldr	r3, [pc, #68]	@ (8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009c0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c0e:	f003 0302 	and.w	r3, r3, #2
 8009c12:	2b02      	cmp	r3, #2
 8009c14:	d107      	bne.n	8009c26 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8009c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c18:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009c1c:	d103      	bne.n	8009c26 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 8009c1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c22:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c24:	e003      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 8009c26:	2300      	movs	r3, #0
 8009c28:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c2a:	f001 bb66 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009c2e:	f001 bb64 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8009c32:	4b07      	ldr	r3, [pc, #28]	@ (8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009c34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009c38:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 8009c3c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8009c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d10b      	bne.n	8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009c44:	f7fc fc04 	bl	8006450 <HAL_RCC_GetPCLK1Freq>
 8009c48:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 8009c4a:	f001 bb56 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009c4e:	bf00      	nop
 8009c50:	44020c00 	.word	0x44020c00
 8009c54:	03d09000 	.word	0x03d09000
 8009c58:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8009c5c:	4ba1      	ldr	r3, [pc, #644]	@ (8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c68:	d10b      	bne.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8009c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c70:	d107      	bne.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c72:	f107 0314 	add.w	r3, r7, #20
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7fe fd20 	bl	80086bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009c7c:	69bb      	ldr	r3, [r7, #24]
 8009c7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c80:	e047      	b.n	8009d12 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8009c82:	4b98      	ldr	r3, [pc, #608]	@ (8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009c8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c8e:	d10b      	bne.n	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8009c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c96:	d107      	bne.n	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c98:	f107 0308 	add.w	r3, r7, #8
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f7fe fe77 	bl	8008990 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ca6:	e034      	b.n	8009d12 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8009ca8:	4b8e      	ldr	r3, [pc, #568]	@ (8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f003 0302 	and.w	r3, r3, #2
 8009cb0:	2b02      	cmp	r3, #2
 8009cb2:	d10d      	bne.n	8009cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8009cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cb6:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8009cba:	d109      	bne.n	8009cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009cbc:	4b89      	ldr	r3, [pc, #548]	@ (8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	08db      	lsrs	r3, r3, #3
 8009cc2:	f003 0303 	and.w	r3, r3, #3
 8009cc6:	4a88      	ldr	r2, [pc, #544]	@ (8009ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8009cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8009ccc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cce:	e020      	b.n	8009d12 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8009cd0:	4b84      	ldr	r3, [pc, #528]	@ (8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009cd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cdc:	d106      	bne.n	8009cec <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 8009cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ce0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ce4:	d102      	bne.n	8009cec <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8009ce6:	4b81      	ldr	r3, [pc, #516]	@ (8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8009ce8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cea:	e012      	b.n	8009d12 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8009cec:	4b7d      	ldr	r3, [pc, #500]	@ (8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009cee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009cf2:	f003 0302 	and.w	r3, r3, #2
 8009cf6:	2b02      	cmp	r3, #2
 8009cf8:	d107      	bne.n	8009d0a <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8009cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cfc:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8009d00:	d103      	bne.n	8009d0a <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 8009d02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d06:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d08:	e003      	b.n	8009d12 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009d0e:	f001 baf4 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009d12:	f001 baf2 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8009d16:	4b73      	ldr	r3, [pc, #460]	@ (8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009d18:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009d1c:	f003 0307 	and.w	r3, r3, #7
 8009d20:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8009d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d104      	bne.n	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009d28:	f7fc fb92 	bl	8006450 <HAL_RCC_GetPCLK1Freq>
 8009d2c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 8009d2e:	f001 bae4 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8009d32:	4b6c      	ldr	r3, [pc, #432]	@ (8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d3e:	d10a      	bne.n	8009d56 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8009d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d107      	bne.n	8009d56 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d46:	f107 0314 	add.w	r3, r7, #20
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f7fe fcb6 	bl	80086bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009d50:	69bb      	ldr	r3, [r7, #24]
 8009d52:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d54:	e043      	b.n	8009dde <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8009d56:	4b63      	ldr	r3, [pc, #396]	@ (8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009d5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d62:	d10a      	bne.n	8009d7a <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8009d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d66:	2b02      	cmp	r3, #2
 8009d68:	d107      	bne.n	8009d7a <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d6a:	f107 0308 	add.w	r3, r7, #8
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f7fe fe0e 	bl	8008990 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d78:	e031      	b.n	8009dde <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8009d7a:	4b5a      	ldr	r3, [pc, #360]	@ (8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f003 0302 	and.w	r3, r3, #2
 8009d82:	2b02      	cmp	r3, #2
 8009d84:	d10c      	bne.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8009d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d88:	2b03      	cmp	r3, #3
 8009d8a:	d109      	bne.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009d8c:	4b55      	ldr	r3, [pc, #340]	@ (8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	08db      	lsrs	r3, r3, #3
 8009d92:	f003 0303 	and.w	r3, r3, #3
 8009d96:	4a54      	ldr	r2, [pc, #336]	@ (8009ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8009d98:	fa22 f303 	lsr.w	r3, r2, r3
 8009d9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d9e:	e01e      	b.n	8009dde <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8009da0:	4b50      	ldr	r3, [pc, #320]	@ (8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009da8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009dac:	d105      	bne.n	8009dba <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 8009dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009db0:	2b04      	cmp	r3, #4
 8009db2:	d102      	bne.n	8009dba <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8009db4:	4b4d      	ldr	r3, [pc, #308]	@ (8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8009db6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009db8:	e011      	b.n	8009dde <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8009dba:	4b4a      	ldr	r3, [pc, #296]	@ (8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009dbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009dc0:	f003 0302 	and.w	r3, r3, #2
 8009dc4:	2b02      	cmp	r3, #2
 8009dc6:	d106      	bne.n	8009dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8009dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dca:	2b05      	cmp	r3, #5
 8009dcc:	d103      	bne.n	8009dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 8009dce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009dd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dd4:	e003      	b.n	8009dde <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009dda:	f001 ba8e 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009dde:	f001 ba8c 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8009de2:	4b40      	ldr	r3, [pc, #256]	@ (8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009de4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009de8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009dec:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8009dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d104      	bne.n	8009dfe <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009df4:	f7fc fb2c 	bl	8006450 <HAL_RCC_GetPCLK1Freq>
 8009df8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8009dfa:	f001 ba7e 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8009dfe:	4b39      	ldr	r3, [pc, #228]	@ (8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009e0a:	d10a      	bne.n	8009e22 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8009e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e0e:	2b10      	cmp	r3, #16
 8009e10:	d107      	bne.n	8009e22 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e12:	f107 0314 	add.w	r3, r7, #20
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7fe fc50 	bl	80086bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009e1c:	69bb      	ldr	r3, [r7, #24]
 8009e1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e20:	e043      	b.n	8009eaa <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8009e22:	4b30      	ldr	r3, [pc, #192]	@ (8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009e2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e2e:	d10a      	bne.n	8009e46 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8009e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e32:	2b20      	cmp	r3, #32
 8009e34:	d107      	bne.n	8009e46 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e36:	f107 0308 	add.w	r3, r7, #8
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f7fe fda8 	bl	8008990 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e44:	e031      	b.n	8009eaa <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8009e46:	4b27      	ldr	r3, [pc, #156]	@ (8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f003 0302 	and.w	r3, r3, #2
 8009e4e:	2b02      	cmp	r3, #2
 8009e50:	d10c      	bne.n	8009e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8009e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e54:	2b30      	cmp	r3, #48	@ 0x30
 8009e56:	d109      	bne.n	8009e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009e58:	4b22      	ldr	r3, [pc, #136]	@ (8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	08db      	lsrs	r3, r3, #3
 8009e5e:	f003 0303 	and.w	r3, r3, #3
 8009e62:	4a21      	ldr	r2, [pc, #132]	@ (8009ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8009e64:	fa22 f303 	lsr.w	r3, r2, r3
 8009e68:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e6a:	e01e      	b.n	8009eaa <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8009e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009e74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e78:	d105      	bne.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8009e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e7c:	2b40      	cmp	r3, #64	@ 0x40
 8009e7e:	d102      	bne.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8009e80:	4b1a      	ldr	r3, [pc, #104]	@ (8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8009e82:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e84:	e011      	b.n	8009eaa <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8009e86:	4b17      	ldr	r3, [pc, #92]	@ (8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009e88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e8c:	f003 0302 	and.w	r3, r3, #2
 8009e90:	2b02      	cmp	r3, #2
 8009e92:	d106      	bne.n	8009ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8009e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e96:	2b50      	cmp	r3, #80	@ 0x50
 8009e98:	d103      	bne.n	8009ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 8009e9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ea0:	e003      	b.n	8009eaa <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009ea6:	f001 ba28 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009eaa:	f001 ba26 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8009eae:	4b0d      	ldr	r3, [pc, #52]	@ (8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009eb4:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009eb8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8009eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d104      	bne.n	8009eca <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8009ec0:	f7fc faf2 	bl	80064a8 <HAL_RCC_GetPCLK3Freq>
 8009ec4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8009ec6:	f001 ba18 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8009eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ecc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009ed0:	d10e      	bne.n	8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ed2:	f107 0314 	add.w	r3, r7, #20
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f7fe fbf0 	bl	80086bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009edc:	69bb      	ldr	r3, [r7, #24]
 8009ede:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009ee0:	f001 ba0b 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009ee4:	44020c00 	.word	0x44020c00
 8009ee8:	03d09000 	.word	0x03d09000
 8009eec:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8009ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ef2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009ef6:	d108      	bne.n	8009f0a <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ef8:	f107 0308 	add.w	r3, r7, #8
 8009efc:	4618      	mov	r0, r3
 8009efe:	f7fe fd47 	bl	8008990 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009f06:	f001 b9f8 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8009f0a:	4ba4      	ldr	r3, [pc, #656]	@ (800a19c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f003 0302 	and.w	r3, r3, #2
 8009f12:	2b02      	cmp	r3, #2
 8009f14:	d10d      	bne.n	8009f32 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8009f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f18:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009f1c:	d109      	bne.n	8009f32 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009f1e:	4b9f      	ldr	r3, [pc, #636]	@ (800a19c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	08db      	lsrs	r3, r3, #3
 8009f24:	f003 0303 	and.w	r3, r3, #3
 8009f28:	4a9d      	ldr	r2, [pc, #628]	@ (800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8009f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8009f2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f30:	e020      	b.n	8009f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8009f32:	4b9a      	ldr	r3, [pc, #616]	@ (800a19c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009f3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f3e:	d106      	bne.n	8009f4e <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8009f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f42:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009f46:	d102      	bne.n	8009f4e <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8009f48:	4b96      	ldr	r3, [pc, #600]	@ (800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8009f4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f4c:	e012      	b.n	8009f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8009f4e:	4b93      	ldr	r3, [pc, #588]	@ (800a19c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009f50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f54:	f003 0302 	and.w	r3, r3, #2
 8009f58:	2b02      	cmp	r3, #2
 8009f5a:	d107      	bne.n	8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8009f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f5e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009f62:	d103      	bne.n	8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8009f64:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f68:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f6a:	e003      	b.n	8009f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009f70:	f001 b9c3 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009f74:	f001 b9c1 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8009f78:	4b88      	ldr	r3, [pc, #544]	@ (800a19c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009f7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009f7e:	f003 0307 	and.w	r3, r3, #7
 8009f82:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8009f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d104      	bne.n	8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8009f8a:	f7fc fa45 	bl	8006418 <HAL_RCC_GetHCLKFreq>
 8009f8e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8009f90:	f001 b9b3 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8009f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	d104      	bne.n	8009fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8009f9a:	f7fc f911 	bl	80061c0 <HAL_RCC_GetSysClockFreq>
 8009f9e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009fa0:	f001 b9ab 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8009fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fa6:	2b02      	cmp	r3, #2
 8009fa8:	d108      	bne.n	8009fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009faa:	f107 0314 	add.w	r3, r7, #20
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f7fe fb84 	bl	80086bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009fb4:	69fb      	ldr	r3, [r7, #28]
 8009fb6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009fb8:	f001 b99f 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8009fbc:	4b77      	ldr	r3, [pc, #476]	@ (800a19c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009fc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009fc8:	d105      	bne.n	8009fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8009fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fcc:	2b03      	cmp	r3, #3
 8009fce:	d102      	bne.n	8009fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8009fd0:	4b75      	ldr	r3, [pc, #468]	@ (800a1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8009fd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fd4:	e023      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8009fd6:	4b71      	ldr	r3, [pc, #452]	@ (800a19c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f003 0302 	and.w	r3, r3, #2
 8009fde:	2b02      	cmp	r3, #2
 8009fe0:	d10c      	bne.n	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8009fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fe4:	2b04      	cmp	r3, #4
 8009fe6:	d109      	bne.n	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009fe8:	4b6c      	ldr	r3, [pc, #432]	@ (800a19c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	08db      	lsrs	r3, r3, #3
 8009fee:	f003 0303 	and.w	r3, r3, #3
 8009ff2:	4a6b      	ldr	r2, [pc, #428]	@ (800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8009ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8009ff8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ffa:	e010      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8009ffc:	4b67      	ldr	r3, [pc, #412]	@ (800a19c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a004:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a008:	d105      	bne.n	800a016 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 800a00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a00c:	2b05      	cmp	r3, #5
 800a00e:	d102      	bne.n	800a016 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 800a010:	4b64      	ldr	r3, [pc, #400]	@ (800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800a012:	637b      	str	r3, [r7, #52]	@ 0x34
 800a014:	e003      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 800a016:	2300      	movs	r3, #0
 800a018:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a01a:	f001 b96e 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a01e:	f001 b96c 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800a022:	4b5e      	ldr	r3, [pc, #376]	@ (800a19c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a024:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a028:	f003 0308 	and.w	r3, r3, #8
 800a02c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800a02e:	4b5b      	ldr	r3, [pc, #364]	@ (800a19c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a030:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a034:	f003 0302 	and.w	r3, r3, #2
 800a038:	2b02      	cmp	r3, #2
 800a03a:	d106      	bne.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 800a03c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d103      	bne.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 800a042:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a046:	637b      	str	r3, [r7, #52]	@ 0x34
 800a048:	e012      	b.n	800a070 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800a04a:	4b54      	ldr	r3, [pc, #336]	@ (800a19c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a04c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a050:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a054:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a058:	d106      	bne.n	800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 800a05a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a05c:	2b08      	cmp	r3, #8
 800a05e:	d103      	bne.n	800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 800a060:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a064:	637b      	str	r3, [r7, #52]	@ 0x34
 800a066:	e003      	b.n	800a070 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 800a068:	2300      	movs	r3, #0
 800a06a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800a06c:	f001 b945 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a070:	f001 b943 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800a074:	4b49      	ldr	r3, [pc, #292]	@ (800a19c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a076:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a07a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a07e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800a080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a082:	2b00      	cmp	r3, #0
 800a084:	d104      	bne.n	800a090 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a086:	f7fc f9e3 	bl	8006450 <HAL_RCC_GetPCLK1Freq>
 800a08a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800a08c:	f001 b935 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 800a090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a092:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a096:	d108      	bne.n	800a0aa <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a098:	f107 0308 	add.w	r3, r7, #8
 800a09c:	4618      	mov	r0, r3
 800a09e:	f7fe fc77 	bl	8008990 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a0a6:	f001 b928 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800a0aa:	4b3c      	ldr	r3, [pc, #240]	@ (800a19c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f003 0302 	and.w	r3, r3, #2
 800a0b2:	2b02      	cmp	r3, #2
 800a0b4:	d10d      	bne.n	800a0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 800a0b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a0bc:	d109      	bne.n	800a0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a0be:	4b37      	ldr	r3, [pc, #220]	@ (800a19c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	08db      	lsrs	r3, r3, #3
 800a0c4:	f003 0303 	and.w	r3, r3, #3
 800a0c8:	4a35      	ldr	r2, [pc, #212]	@ (800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800a0ca:	fa22 f303 	lsr.w	r3, r2, r3
 800a0ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0d0:	e011      	b.n	800a0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800a0d2:	4b32      	ldr	r3, [pc, #200]	@ (800a19c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a0da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0de:	d106      	bne.n	800a0ee <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 800a0e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0e2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a0e6:	d102      	bne.n	800a0ee <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 800a0e8:	4b2e      	ldr	r3, [pc, #184]	@ (800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800a0ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0ec:	e003      	b.n	800a0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a0f2:	f001 b902 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a0f6:	f001 b900 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800a0fa:	4b28      	ldr	r3, [pc, #160]	@ (800a19c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a0fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a100:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800a104:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800a106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d104      	bne.n	800a116 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a10c:	f7fc f9a0 	bl	8006450 <HAL_RCC_GetPCLK1Freq>
 800a110:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800a112:	f001 b8f2 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 800a116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a118:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a11c:	d108      	bne.n	800a130 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a11e:	f107 0308 	add.w	r3, r7, #8
 800a122:	4618      	mov	r0, r3
 800a124:	f7fe fc34 	bl	8008990 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a12c:	f001 b8e5 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800a130:	4b1a      	ldr	r3, [pc, #104]	@ (800a19c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f003 0302 	and.w	r3, r3, #2
 800a138:	2b02      	cmp	r3, #2
 800a13a:	d10d      	bne.n	800a158 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 800a13c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a13e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a142:	d109      	bne.n	800a158 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a144:	4b15      	ldr	r3, [pc, #84]	@ (800a19c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	08db      	lsrs	r3, r3, #3
 800a14a:	f003 0303 	and.w	r3, r3, #3
 800a14e:	4a14      	ldr	r2, [pc, #80]	@ (800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800a150:	fa22 f303 	lsr.w	r3, r2, r3
 800a154:	637b      	str	r3, [r7, #52]	@ 0x34
 800a156:	e011      	b.n	800a17c <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800a158:	4b10      	ldr	r3, [pc, #64]	@ (800a19c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a160:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a164:	d106      	bne.n	800a174 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 800a166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a168:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a16c:	d102      	bne.n	800a174 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 800a16e:	4b0d      	ldr	r3, [pc, #52]	@ (800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800a170:	637b      	str	r3, [r7, #52]	@ 0x34
 800a172:	e003      	b.n	800a17c <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 800a174:	2300      	movs	r3, #0
 800a176:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a178:	f001 b8bf 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a17c:	f001 b8bd 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800a180:	4b06      	ldr	r3, [pc, #24]	@ (800a19c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a182:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a186:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800a18a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 800a18c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d10c      	bne.n	800a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800a192:	f7fc f989 	bl	80064a8 <HAL_RCC_GetPCLK3Freq>
 800a196:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 800a198:	f001 b8af 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a19c:	44020c00 	.word	0x44020c00
 800a1a0:	03d09000 	.word	0x03d09000
 800a1a4:	003d0900 	.word	0x003d0900
 800a1a8:	017d7840 	.word	0x017d7840
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 800a1ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a1b2:	d108      	bne.n	800a1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1b4:	f107 0308 	add.w	r3, r7, #8
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f7fe fbe9 	bl	8008990 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a1c2:	f001 b89a 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800a1c6:	4b9f      	ldr	r3, [pc, #636]	@ (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f003 0302 	and.w	r3, r3, #2
 800a1ce:	2b02      	cmp	r3, #2
 800a1d0:	d10d      	bne.n	800a1ee <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 800a1d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a1d8:	d109      	bne.n	800a1ee <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a1da:	4b9a      	ldr	r3, [pc, #616]	@ (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	08db      	lsrs	r3, r3, #3
 800a1e0:	f003 0303 	and.w	r3, r3, #3
 800a1e4:	4a98      	ldr	r2, [pc, #608]	@ (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800a1e6:	fa22 f303 	lsr.w	r3, r2, r3
 800a1ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1ec:	e011      	b.n	800a212 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800a1ee:	4b95      	ldr	r3, [pc, #596]	@ (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a1f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1fa:	d106      	bne.n	800a20a <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 800a1fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a202:	d102      	bne.n	800a20a <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 800a204:	4b91      	ldr	r3, [pc, #580]	@ (800a44c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800a206:	637b      	str	r3, [r7, #52]	@ 0x34
 800a208:	e003      	b.n	800a212 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 800a20a:	2300      	movs	r3, #0
 800a20c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a20e:	f001 b874 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a212:	f001 b872 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800a216:	4b8b      	ldr	r3, [pc, #556]	@ (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a218:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a21c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800a220:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 800a222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a224:	2b00      	cmp	r3, #0
 800a226:	d104      	bne.n	800a232 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800a228:	f7fc f93e 	bl	80064a8 <HAL_RCC_GetPCLK3Freq>
 800a22c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 800a22e:	f001 b864 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 800a232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a234:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a238:	d108      	bne.n	800a24c <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a23a:	f107 0308 	add.w	r3, r7, #8
 800a23e:	4618      	mov	r0, r3
 800a240:	f7fe fba6 	bl	8008990 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a248:	f001 b857 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800a24c:	4b7d      	ldr	r3, [pc, #500]	@ (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f003 0302 	and.w	r3, r3, #2
 800a254:	2b02      	cmp	r3, #2
 800a256:	d10d      	bne.n	800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 800a258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a25a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a25e:	d109      	bne.n	800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a260:	4b78      	ldr	r3, [pc, #480]	@ (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	08db      	lsrs	r3, r3, #3
 800a266:	f003 0303 	and.w	r3, r3, #3
 800a26a:	4a77      	ldr	r2, [pc, #476]	@ (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800a26c:	fa22 f303 	lsr.w	r3, r2, r3
 800a270:	637b      	str	r3, [r7, #52]	@ 0x34
 800a272:	e011      	b.n	800a298 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 800a274:	4b73      	ldr	r3, [pc, #460]	@ (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a27c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a280:	d106      	bne.n	800a290 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 800a282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a284:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800a288:	d102      	bne.n	800a290 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 800a28a:	4b70      	ldr	r3, [pc, #448]	@ (800a44c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800a28c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a28e:	e003      	b.n	800a298 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 800a290:	2300      	movs	r3, #0
 800a292:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a294:	f001 b831 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a298:	f001 b82f 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 800a29c:	4b69      	ldr	r3, [pc, #420]	@ (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a29e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a2a2:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800a2a6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800a2a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d104      	bne.n	800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a2ae:	f7fc f8cf 	bl	8006450 <HAL_RCC_GetPCLK1Freq>
 800a2b2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800a2b4:	f001 b821 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 800a2b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a2be:	d108      	bne.n	800a2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2c0:	f107 0308 	add.w	r3, r7, #8
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f7fe fb63 	bl	8008990 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a2ce:	f001 b814 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800a2d2:	4b5c      	ldr	r3, [pc, #368]	@ (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f003 0302 	and.w	r3, r3, #2
 800a2da:	2b02      	cmp	r3, #2
 800a2dc:	d10e      	bne.n	800a2fc <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 800a2de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a2e4:	d10a      	bne.n	800a2fc <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a2e6:	4b57      	ldr	r3, [pc, #348]	@ (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	08db      	lsrs	r3, r3, #3
 800a2ec:	f003 0303 	and.w	r3, r3, #3
 800a2f0:	4a55      	ldr	r2, [pc, #340]	@ (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800a2f2:	fa22 f303 	lsr.w	r3, r2, r3
 800a2f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a2f8:	f000 bfff 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a300:	f000 bffb 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800a304:	4b4f      	ldr	r3, [pc, #316]	@ (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a306:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a30a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a30e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a312:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800a316:	d056      	beq.n	800a3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 800a318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a31a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800a31e:	f200 808b 	bhi.w	800a438 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800a322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a324:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a328:	d03e      	beq.n	800a3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 800a32a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a32c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a330:	f200 8082 	bhi.w	800a438 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800a334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a336:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a33a:	d027      	beq.n	800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 800a33c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a33e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a342:	d879      	bhi.n	800a438 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800a344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a346:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a34a:	d017      	beq.n	800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 800a34c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a34e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a352:	d871      	bhi.n	800a438 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800a354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a356:	2b00      	cmp	r3, #0
 800a358:	d004      	beq.n	800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 800a35a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a35c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a360:	d004      	beq.n	800a36c <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 800a362:	e069      	b.n	800a438 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800a364:	f7fc f8a0 	bl	80064a8 <HAL_RCC_GetPCLK3Freq>
 800a368:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800a36a:	e068      	b.n	800a43e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a36c:	f107 0314 	add.w	r3, r7, #20
 800a370:	4618      	mov	r0, r3
 800a372:	f7fe f9a3 	bl	80086bc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a37a:	e060      	b.n	800a43e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a37c:	f107 0308 	add.w	r3, r7, #8
 800a380:	4618      	mov	r0, r3
 800a382:	f7fe fb05 	bl	8008990 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a38a:	e058      	b.n	800a43e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a38c:	4b2d      	ldr	r3, [pc, #180]	@ (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a38e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a392:	f003 0302 	and.w	r3, r3, #2
 800a396:	2b02      	cmp	r3, #2
 800a398:	d103      	bne.n	800a3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 800a39a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a39e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a3a0:	e04d      	b.n	800a43e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a3a6:	e04a      	b.n	800a43e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800a3a8:	4b26      	ldr	r3, [pc, #152]	@ (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a3aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a3ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a3b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a3b6:	d103      	bne.n	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 800a3b8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a3bc:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a3be:	e03e      	b.n	800a43e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a3c4:	e03b      	b.n	800a43e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a3c6:	4b1f      	ldr	r3, [pc, #124]	@ (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a3c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a3cc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a3d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a3d2:	4b1c      	ldr	r3, [pc, #112]	@ (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f003 0302 	and.w	r3, r3, #2
 800a3da:	2b02      	cmp	r3, #2
 800a3dc:	d10c      	bne.n	800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 800a3de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d109      	bne.n	800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a3e4:	4b17      	ldr	r3, [pc, #92]	@ (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	08db      	lsrs	r3, r3, #3
 800a3ea:	f003 0303 	and.w	r3, r3, #3
 800a3ee:	4a16      	ldr	r2, [pc, #88]	@ (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800a3f0:	fa22 f303 	lsr.w	r3, r2, r3
 800a3f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3f6:	e01e      	b.n	800a436 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a3f8:	4b12      	ldr	r3, [pc, #72]	@ (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a400:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a404:	d106      	bne.n	800a414 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 800a406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a408:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a40c:	d102      	bne.n	800a414 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a40e:	4b0f      	ldr	r3, [pc, #60]	@ (800a44c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800a410:	637b      	str	r3, [r7, #52]	@ 0x34
 800a412:	e010      	b.n	800a436 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a414:	4b0b      	ldr	r3, [pc, #44]	@ (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a41c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a420:	d106      	bne.n	800a430 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 800a422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a424:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a428:	d102      	bne.n	800a430 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a42a:	4b09      	ldr	r3, [pc, #36]	@ (800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 800a42c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a42e:	e002      	b.n	800a436 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a430:	2300      	movs	r3, #0
 800a432:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a434:	e003      	b.n	800a43e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 800a436:	e002      	b.n	800a43e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 800a438:	2300      	movs	r3, #0
 800a43a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a43c:	bf00      	nop
          }
        }
        break;
 800a43e:	f000 bf5c 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a442:	bf00      	nop
 800a444:	44020c00 	.word	0x44020c00
 800a448:	03d09000 	.word	0x03d09000
 800a44c:	003d0900 	.word	0x003d0900
 800a450:	017d7840 	.word	0x017d7840

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800a454:	4b9e      	ldr	r3, [pc, #632]	@ (800a6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a456:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a45a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a45e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a462:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800a466:	d056      	beq.n	800a516 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 800a468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a46a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800a46e:	f200 808b 	bhi.w	800a588 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800a472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a474:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a478:	d03e      	beq.n	800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 800a47a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a47c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a480:	f200 8082 	bhi.w	800a588 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800a484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a486:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a48a:	d027      	beq.n	800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 800a48c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a48e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a492:	d879      	bhi.n	800a588 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800a494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a496:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a49a:	d017      	beq.n	800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 800a49c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a49e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a4a2:	d871      	bhi.n	800a588 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800a4a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d004      	beq.n	800a4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 800a4aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a4b0:	d004      	beq.n	800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 800a4b2:	e069      	b.n	800a588 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 800a4b4:	f7fb ffcc 	bl	8006450 <HAL_RCC_GetPCLK1Freq>
 800a4b8:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800a4ba:	e068      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4bc:	f107 0314 	add.w	r3, r7, #20
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f7fe f8fb 	bl	80086bc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a4ca:	e060      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4cc:	f107 0308 	add.w	r3, r7, #8
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f7fe fa5d 	bl	8008990 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a4da:	e058      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a4dc:	4b7c      	ldr	r3, [pc, #496]	@ (800a6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a4de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a4e2:	f003 0302 	and.w	r3, r3, #2
 800a4e6:	2b02      	cmp	r3, #2
 800a4e8:	d103      	bne.n	800a4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 800a4ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a4ee:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a4f0:	e04d      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a4f6:	e04a      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800a4f8:	4b75      	ldr	r3, [pc, #468]	@ (800a6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a4fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a4fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a502:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a506:	d103      	bne.n	800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 800a508:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a50c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a50e:	e03e      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800a510:	2300      	movs	r3, #0
 800a512:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a514:	e03b      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a516:	4b6e      	ldr	r3, [pc, #440]	@ (800a6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a518:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a51c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a520:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a522:	4b6b      	ldr	r3, [pc, #428]	@ (800a6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f003 0302 	and.w	r3, r3, #2
 800a52a:	2b02      	cmp	r3, #2
 800a52c:	d10c      	bne.n	800a548 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 800a52e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a530:	2b00      	cmp	r3, #0
 800a532:	d109      	bne.n	800a548 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a534:	4b66      	ldr	r3, [pc, #408]	@ (800a6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	08db      	lsrs	r3, r3, #3
 800a53a:	f003 0303 	and.w	r3, r3, #3
 800a53e:	4a65      	ldr	r2, [pc, #404]	@ (800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800a540:	fa22 f303 	lsr.w	r3, r2, r3
 800a544:	637b      	str	r3, [r7, #52]	@ 0x34
 800a546:	e01e      	b.n	800a586 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a548:	4b61      	ldr	r3, [pc, #388]	@ (800a6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a550:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a554:	d106      	bne.n	800a564 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 800a556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a558:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a55c:	d102      	bne.n	800a564 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a55e:	4b5e      	ldr	r3, [pc, #376]	@ (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800a560:	637b      	str	r3, [r7, #52]	@ 0x34
 800a562:	e010      	b.n	800a586 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a564:	4b5a      	ldr	r3, [pc, #360]	@ (800a6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a56c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a570:	d106      	bne.n	800a580 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 800a572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a574:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a578:	d102      	bne.n	800a580 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a57a:	4b58      	ldr	r3, [pc, #352]	@ (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800a57c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a57e:	e002      	b.n	800a586 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a580:	2300      	movs	r3, #0
 800a582:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a584:	e003      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 800a586:	e002      	b.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 800a588:	2300      	movs	r3, #0
 800a58a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a58c:	bf00      	nop
          }
        }
        break;
 800a58e:	f000 beb4 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800a592:	4b4f      	ldr	r3, [pc, #316]	@ (800a6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a594:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a598:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a59c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a59e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a5a4:	d056      	beq.n	800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 800a5a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a5ac:	f200 808b 	bhi.w	800a6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800a5b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a5b6:	d03e      	beq.n	800a636 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 800a5b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a5be:	f200 8082 	bhi.w	800a6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800a5c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5c4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a5c8:	d027      	beq.n	800a61a <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800a5ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a5d0:	d879      	bhi.n	800a6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800a5d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a5d8:	d017      	beq.n	800a60a <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 800a5da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a5e0:	d871      	bhi.n	800a6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800a5e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d004      	beq.n	800a5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 800a5e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a5ee:	d004      	beq.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 800a5f0:	e069      	b.n	800a6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800a5f2:	f7fb ff59 	bl	80064a8 <HAL_RCC_GetPCLK3Freq>
 800a5f6:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800a5f8:	e068      	b.n	800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5fa:	f107 0314 	add.w	r3, r7, #20
 800a5fe:	4618      	mov	r0, r3
 800a600:	f7fe f85c 	bl	80086bc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a608:	e060      	b.n	800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a60a:	f107 0308 	add.w	r3, r7, #8
 800a60e:	4618      	mov	r0, r3
 800a610:	f7fe f9be 	bl	8008990 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a618:	e058      	b.n	800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a61a:	4b2d      	ldr	r3, [pc, #180]	@ (800a6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a61c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a620:	f003 0302 	and.w	r3, r3, #2
 800a624:	2b02      	cmp	r3, #2
 800a626:	d103      	bne.n	800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 800a628:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a62c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a62e:	e04d      	b.n	800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800a630:	2300      	movs	r3, #0
 800a632:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a634:	e04a      	b.n	800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800a636:	4b26      	ldr	r3, [pc, #152]	@ (800a6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a638:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a63c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a640:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a644:	d103      	bne.n	800a64e <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 800a646:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a64a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a64c:	e03e      	b.n	800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800a64e:	2300      	movs	r3, #0
 800a650:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a652:	e03b      	b.n	800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a654:	4b1e      	ldr	r3, [pc, #120]	@ (800a6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a656:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a65a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a65e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a660:	4b1b      	ldr	r3, [pc, #108]	@ (800a6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f003 0302 	and.w	r3, r3, #2
 800a668:	2b02      	cmp	r3, #2
 800a66a:	d10c      	bne.n	800a686 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 800a66c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d109      	bne.n	800a686 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a672:	4b17      	ldr	r3, [pc, #92]	@ (800a6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	08db      	lsrs	r3, r3, #3
 800a678:	f003 0303 	and.w	r3, r3, #3
 800a67c:	4a15      	ldr	r2, [pc, #84]	@ (800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800a67e:	fa22 f303 	lsr.w	r3, r2, r3
 800a682:	637b      	str	r3, [r7, #52]	@ 0x34
 800a684:	e01e      	b.n	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a686:	4b12      	ldr	r3, [pc, #72]	@ (800a6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a68e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a692:	d106      	bne.n	800a6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 800a694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a696:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a69a:	d102      	bne.n	800a6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a69c:	4b0e      	ldr	r3, [pc, #56]	@ (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800a69e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6a0:	e010      	b.n	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a6a2:	4b0b      	ldr	r3, [pc, #44]	@ (800a6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a6ae:	d106      	bne.n	800a6be <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 800a6b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a6b6:	d102      	bne.n	800a6be <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a6b8:	4b08      	ldr	r3, [pc, #32]	@ (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800a6ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6bc:	e002      	b.n	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a6c2:	e003      	b.n	800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 800a6c4:	e002      	b.n	800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a6ca:	bf00      	nop
          }
        }
        break;
 800a6cc:	f000 be15 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a6d0:	44020c00 	.word	0x44020c00
 800a6d4:	03d09000 	.word	0x03d09000
 800a6d8:	003d0900 	.word	0x003d0900
 800a6dc:	017d7840 	.word	0x017d7840
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 800a6e0:	4b9e      	ldr	r3, [pc, #632]	@ (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a6e2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a6e6:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 800a6ea:	633b      	str	r3, [r7, #48]	@ 0x30
 800a6ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ee:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800a6f2:	d056      	beq.n	800a7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 800a6f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6f6:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800a6fa:	f200 808b 	bhi.w	800a814 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800a6fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a700:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a704:	d03e      	beq.n	800a784 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 800a706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a708:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a70c:	f200 8082 	bhi.w	800a814 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800a710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a712:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a716:	d027      	beq.n	800a768 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 800a718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a71a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a71e:	d879      	bhi.n	800a814 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800a720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a722:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a726:	d017      	beq.n	800a758 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 800a728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a72a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a72e:	d871      	bhi.n	800a814 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800a730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a732:	2b00      	cmp	r3, #0
 800a734:	d004      	beq.n	800a740 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 800a736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a738:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a73c:	d004      	beq.n	800a748 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 800a73e:	e069      	b.n	800a814 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800a740:	f7fb feb2 	bl	80064a8 <HAL_RCC_GetPCLK3Freq>
 800a744:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800a746:	e068      	b.n	800a81a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a748:	f107 0314 	add.w	r3, r7, #20
 800a74c:	4618      	mov	r0, r3
 800a74e:	f7fd ffb5 	bl	80086bc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a756:	e060      	b.n	800a81a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a758:	f107 0308 	add.w	r3, r7, #8
 800a75c:	4618      	mov	r0, r3
 800a75e:	f7fe f917 	bl	8008990 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a766:	e058      	b.n	800a81a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a768:	4b7c      	ldr	r3, [pc, #496]	@ (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a76a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a76e:	f003 0302 	and.w	r3, r3, #2
 800a772:	2b02      	cmp	r3, #2
 800a774:	d103      	bne.n	800a77e <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 800a776:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a77a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a77c:	e04d      	b.n	800a81a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800a77e:	2300      	movs	r3, #0
 800a780:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a782:	e04a      	b.n	800a81a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800a784:	4b75      	ldr	r3, [pc, #468]	@ (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a786:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a78a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a78e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a792:	d103      	bne.n	800a79c <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 800a794:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a798:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a79a:	e03e      	b.n	800a81a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800a79c:	2300      	movs	r3, #0
 800a79e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a7a0:	e03b      	b.n	800a81a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a7a2:	4b6e      	ldr	r3, [pc, #440]	@ (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a7a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a7a8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a7ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a7ae:	4b6b      	ldr	r3, [pc, #428]	@ (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f003 0302 	and.w	r3, r3, #2
 800a7b6:	2b02      	cmp	r3, #2
 800a7b8:	d10c      	bne.n	800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 800a7ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d109      	bne.n	800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a7c0:	4b66      	ldr	r3, [pc, #408]	@ (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	08db      	lsrs	r3, r3, #3
 800a7c6:	f003 0303 	and.w	r3, r3, #3
 800a7ca:	4a65      	ldr	r2, [pc, #404]	@ (800a960 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800a7cc:	fa22 f303 	lsr.w	r3, r2, r3
 800a7d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7d2:	e01e      	b.n	800a812 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a7d4:	4b61      	ldr	r3, [pc, #388]	@ (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a7dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a7e0:	d106      	bne.n	800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 800a7e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7e8:	d102      	bne.n	800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a7ea:	4b5e      	ldr	r3, [pc, #376]	@ (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800a7ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7ee:	e010      	b.n	800a812 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a7f0:	4b5a      	ldr	r3, [pc, #360]	@ (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a7fc:	d106      	bne.n	800a80c <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 800a7fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a800:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a804:	d102      	bne.n	800a80c <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a806:	4b58      	ldr	r3, [pc, #352]	@ (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800a808:	637b      	str	r3, [r7, #52]	@ 0x34
 800a80a:	e002      	b.n	800a812 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a80c:	2300      	movs	r3, #0
 800a80e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a810:	e003      	b.n	800a81a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 800a812:	e002      	b.n	800a81a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 800a814:	2300      	movs	r3, #0
 800a816:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a818:	bf00      	nop
          }
        }
        break;
 800a81a:	f000 bd6e 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 800a81e:	4b4f      	ldr	r3, [pc, #316]	@ (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a820:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a824:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a828:	633b      	str	r3, [r7, #48]	@ 0x30
 800a82a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a82c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a830:	d056      	beq.n	800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 800a832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a834:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a838:	f200 808b 	bhi.w	800a952 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800a83c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a83e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a842:	d03e      	beq.n	800a8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 800a844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a846:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a84a:	f200 8082 	bhi.w	800a952 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800a84e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a850:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a854:	d027      	beq.n	800a8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 800a856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a858:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a85c:	d879      	bhi.n	800a952 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800a85e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a860:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a864:	d017      	beq.n	800a896 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 800a866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a868:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a86c:	d871      	bhi.n	800a952 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800a86e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a870:	2b00      	cmp	r3, #0
 800a872:	d004      	beq.n	800a87e <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 800a874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a876:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a87a:	d004      	beq.n	800a886 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 800a87c:	e069      	b.n	800a952 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800a87e:	f7fb fe13 	bl	80064a8 <HAL_RCC_GetPCLK3Freq>
 800a882:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800a884:	e068      	b.n	800a958 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a886:	f107 0314 	add.w	r3, r7, #20
 800a88a:	4618      	mov	r0, r3
 800a88c:	f7fd ff16 	bl	80086bc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a894:	e060      	b.n	800a958 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a896:	f107 0308 	add.w	r3, r7, #8
 800a89a:	4618      	mov	r0, r3
 800a89c:	f7fe f878 	bl	8008990 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a8a4:	e058      	b.n	800a958 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a8a6:	4b2d      	ldr	r3, [pc, #180]	@ (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a8a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a8ac:	f003 0302 	and.w	r3, r3, #2
 800a8b0:	2b02      	cmp	r3, #2
 800a8b2:	d103      	bne.n	800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 800a8b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a8b8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a8ba:	e04d      	b.n	800a958 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a8c0:	e04a      	b.n	800a958 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800a8c2:	4b26      	ldr	r3, [pc, #152]	@ (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a8c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a8c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a8d0:	d103      	bne.n	800a8da <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800a8d2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a8d6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a8d8:	e03e      	b.n	800a958 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a8de:	e03b      	b.n	800a958 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a8e0:	4b1e      	ldr	r3, [pc, #120]	@ (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a8e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a8e6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a8ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a8ec:	4b1b      	ldr	r3, [pc, #108]	@ (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f003 0302 	and.w	r3, r3, #2
 800a8f4:	2b02      	cmp	r3, #2
 800a8f6:	d10c      	bne.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 800a8f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d109      	bne.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a8fe:	4b17      	ldr	r3, [pc, #92]	@ (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	08db      	lsrs	r3, r3, #3
 800a904:	f003 0303 	and.w	r3, r3, #3
 800a908:	4a15      	ldr	r2, [pc, #84]	@ (800a960 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800a90a:	fa22 f303 	lsr.w	r3, r2, r3
 800a90e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a910:	e01e      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a912:	4b12      	ldr	r3, [pc, #72]	@ (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a91a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a91e:	d106      	bne.n	800a92e <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 800a920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a922:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a926:	d102      	bne.n	800a92e <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a928:	4b0e      	ldr	r3, [pc, #56]	@ (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800a92a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a92c:	e010      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a92e:	4b0b      	ldr	r3, [pc, #44]	@ (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a936:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a93a:	d106      	bne.n	800a94a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 800a93c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a93e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a942:	d102      	bne.n	800a94a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a944:	4b08      	ldr	r3, [pc, #32]	@ (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800a946:	637b      	str	r3, [r7, #52]	@ 0x34
 800a948:	e002      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a94a:	2300      	movs	r3, #0
 800a94c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a94e:	e003      	b.n	800a958 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 800a950:	e002      	b.n	800a958 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 800a952:	2300      	movs	r3, #0
 800a954:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a956:	bf00      	nop
          }
        }
        break;
 800a958:	f000 bccf 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a95c:	44020c00 	.word	0x44020c00
 800a960:	03d09000 	.word	0x03d09000
 800a964:	003d0900 	.word	0x003d0900
 800a968:	017d7840 	.word	0x017d7840
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 800a96c:	4b9e      	ldr	r3, [pc, #632]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a96e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a972:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a976:	633b      	str	r3, [r7, #48]	@ 0x30
 800a978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a97a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a97e:	d056      	beq.n	800aa2e <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 800a980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a982:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a986:	f200 808b 	bhi.w	800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800a98a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a98c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a990:	d03e      	beq.n	800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 800a992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a994:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a998:	f200 8082 	bhi.w	800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800a99c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a99e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a9a2:	d027      	beq.n	800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 800a9a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a9aa:	d879      	bhi.n	800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800a9ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a9b2:	d017      	beq.n	800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 800a9b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a9ba:	d871      	bhi.n	800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800a9bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d004      	beq.n	800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800a9c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a9c8:	d004      	beq.n	800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800a9ca:	e069      	b.n	800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800a9cc:	f7fb fd6c 	bl	80064a8 <HAL_RCC_GetPCLK3Freq>
 800a9d0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800a9d2:	e068      	b.n	800aaa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9d4:	f107 0314 	add.w	r3, r7, #20
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f7fd fe6f 	bl	80086bc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a9e2:	e060      	b.n	800aaa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9e4:	f107 0308 	add.w	r3, r7, #8
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f7fd ffd1 	bl	8008990 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a9f2:	e058      	b.n	800aaa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a9f4:	4b7c      	ldr	r3, [pc, #496]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a9f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a9fa:	f003 0302 	and.w	r3, r3, #2
 800a9fe:	2b02      	cmp	r3, #2
 800aa00:	d103      	bne.n	800aa0a <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800aa02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aa06:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800aa08:	e04d      	b.n	800aaa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800aa0e:	e04a      	b.n	800aaa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800aa10:	4b75      	ldr	r3, [pc, #468]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800aa12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aa16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa1e:	d103      	bne.n	800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 800aa20:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800aa24:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800aa26:	e03e      	b.n	800aaa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800aa2c:	e03b      	b.n	800aaa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aa2e:	4b6e      	ldr	r3, [pc, #440]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800aa30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800aa34:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800aa38:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa3a:	4b6b      	ldr	r3, [pc, #428]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f003 0302 	and.w	r3, r3, #2
 800aa42:	2b02      	cmp	r3, #2
 800aa44:	d10c      	bne.n	800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 800aa46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d109      	bne.n	800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800aa4c:	4b66      	ldr	r3, [pc, #408]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	08db      	lsrs	r3, r3, #3
 800aa52:	f003 0303 	and.w	r3, r3, #3
 800aa56:	4a65      	ldr	r2, [pc, #404]	@ (800abec <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800aa58:	fa22 f303 	lsr.w	r3, r2, r3
 800aa5c:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa5e:	e01e      	b.n	800aa9e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aa60:	4b61      	ldr	r3, [pc, #388]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aa68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa6c:	d106      	bne.n	800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 800aa6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa74:	d102      	bne.n	800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800aa76:	4b5e      	ldr	r3, [pc, #376]	@ (800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800aa78:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa7a:	e010      	b.n	800aa9e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aa7c:	4b5a      	ldr	r3, [pc, #360]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa88:	d106      	bne.n	800aa98 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 800aa8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aa90:	d102      	bne.n	800aa98 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800aa92:	4b58      	ldr	r3, [pc, #352]	@ (800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800aa94:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa96:	e002      	b.n	800aa9e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800aa9c:	e003      	b.n	800aaa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800aa9e:	e002      	b.n	800aaa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800aaa4:	bf00      	nop
          }
        }
        break;
 800aaa6:	f000 bc28 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800aaaa:	4b4f      	ldr	r3, [pc, #316]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800aaac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800aab0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aab4:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800aab6:	4b4c      	ldr	r3, [pc, #304]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aabe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aac2:	d106      	bne.n	800aad2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 800aac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d103      	bne.n	800aad2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 800aaca:	4b4a      	ldr	r3, [pc, #296]	@ (800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800aacc:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800aace:	f000 bc14 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800aad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aad4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aad8:	d108      	bne.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aada:	f107 0320 	add.w	r3, r7, #32
 800aade:	4618      	mov	r0, r3
 800aae0:	f7fd fc82 	bl	80083e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aae6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aae8:	f000 bc07 	b.w	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800aaec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aaf2:	d107      	bne.n	800ab04 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aaf4:	f107 0314 	add.w	r3, r7, #20
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f7fd fddf 	bl	80086bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aafe:	69bb      	ldr	r3, [r7, #24]
 800ab00:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ab02:	e3fa      	b.n	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800ab04:	2300      	movs	r3, #0
 800ab06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ab08:	e3f7      	b.n	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800ab0a:	4b37      	ldr	r3, [pc, #220]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800ab0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ab10:	f003 0307 	and.w	r3, r3, #7
 800ab14:	633b      	str	r3, [r7, #48]	@ 0x30
 800ab16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab18:	2b04      	cmp	r3, #4
 800ab1a:	d861      	bhi.n	800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 800ab1c:	a201      	add	r2, pc, #4	@ (adr r2, 800ab24 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 800ab1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab22:	bf00      	nop
 800ab24:	0800ab39 	.word	0x0800ab39
 800ab28:	0800ab49 	.word	0x0800ab49
 800ab2c:	0800ab59 	.word	0x0800ab59
 800ab30:	0800ab69 	.word	0x0800ab69
 800ab34:	0800ab6f 	.word	0x0800ab6f
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab38:	f107 0320 	add.w	r3, r7, #32
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f7fd fc53 	bl	80083e8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab44:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ab46:	e04e      	b.n	800abe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab48:	f107 0314 	add.w	r3, r7, #20
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f7fd fdb5 	bl	80086bc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ab56:	e046      	b.n	800abe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab58:	f107 0308 	add.w	r3, r7, #8
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f7fd ff17 	bl	8008990 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ab66:	e03e      	b.n	800abe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800ab68:	4b23      	ldr	r3, [pc, #140]	@ (800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 800ab6a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ab6c:	e03b      	b.n	800abe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ab6e:	4b1e      	ldr	r3, [pc, #120]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800ab70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ab74:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800ab78:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab7a:	4b1b      	ldr	r3, [pc, #108]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f003 0302 	and.w	r3, r3, #2
 800ab82:	2b02      	cmp	r3, #2
 800ab84:	d10c      	bne.n	800aba0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 800ab86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d109      	bne.n	800aba0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ab8c:	4b16      	ldr	r3, [pc, #88]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	08db      	lsrs	r3, r3, #3
 800ab92:	f003 0303 	and.w	r3, r3, #3
 800ab96:	4a15      	ldr	r2, [pc, #84]	@ (800abec <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800ab98:	fa22 f303 	lsr.w	r3, r2, r3
 800ab9c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab9e:	e01e      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aba0:	4b11      	ldr	r3, [pc, #68]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aba8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800abac:	d106      	bne.n	800abbc <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 800abae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abb4:	d102      	bne.n	800abbc <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800abb6:	4b0e      	ldr	r3, [pc, #56]	@ (800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800abb8:	637b      	str	r3, [r7, #52]	@ 0x34
 800abba:	e010      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800abbc:	4b0a      	ldr	r3, [pc, #40]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800abc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800abc8:	d106      	bne.n	800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800abca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abcc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800abd0:	d102      	bne.n	800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800abd2:	4b08      	ldr	r3, [pc, #32]	@ (800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800abd4:	637b      	str	r3, [r7, #52]	@ 0x34
 800abd6:	e002      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800abd8:	2300      	movs	r3, #0
 800abda:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800abdc:	e003      	b.n	800abe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800abde:	e002      	b.n	800abe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 800abe0:	2300      	movs	r3, #0
 800abe2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800abe4:	bf00      	nop
          }
        }
        break;
 800abe6:	e388      	b.n	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800abe8:	44020c00 	.word	0x44020c00
 800abec:	03d09000 	.word	0x03d09000
 800abf0:	003d0900 	.word	0x003d0900
 800abf4:	017d7840 	.word	0x017d7840
 800abf8:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800abfc:	4ba9      	ldr	r3, [pc, #676]	@ (800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800abfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ac02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ac06:	633b      	str	r3, [r7, #48]	@ 0x30
 800ac08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac0a:	2b20      	cmp	r3, #32
 800ac0c:	f200 809a 	bhi.w	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 800ac10:	a201      	add	r2, pc, #4	@ (adr r2, 800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800ac12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac16:	bf00      	nop
 800ac18:	0800ac9d 	.word	0x0800ac9d
 800ac1c:	0800ad45 	.word	0x0800ad45
 800ac20:	0800ad45 	.word	0x0800ad45
 800ac24:	0800ad45 	.word	0x0800ad45
 800ac28:	0800ad45 	.word	0x0800ad45
 800ac2c:	0800ad45 	.word	0x0800ad45
 800ac30:	0800ad45 	.word	0x0800ad45
 800ac34:	0800ad45 	.word	0x0800ad45
 800ac38:	0800acad 	.word	0x0800acad
 800ac3c:	0800ad45 	.word	0x0800ad45
 800ac40:	0800ad45 	.word	0x0800ad45
 800ac44:	0800ad45 	.word	0x0800ad45
 800ac48:	0800ad45 	.word	0x0800ad45
 800ac4c:	0800ad45 	.word	0x0800ad45
 800ac50:	0800ad45 	.word	0x0800ad45
 800ac54:	0800ad45 	.word	0x0800ad45
 800ac58:	0800acbd 	.word	0x0800acbd
 800ac5c:	0800ad45 	.word	0x0800ad45
 800ac60:	0800ad45 	.word	0x0800ad45
 800ac64:	0800ad45 	.word	0x0800ad45
 800ac68:	0800ad45 	.word	0x0800ad45
 800ac6c:	0800ad45 	.word	0x0800ad45
 800ac70:	0800ad45 	.word	0x0800ad45
 800ac74:	0800ad45 	.word	0x0800ad45
 800ac78:	0800accd 	.word	0x0800accd
 800ac7c:	0800ad45 	.word	0x0800ad45
 800ac80:	0800ad45 	.word	0x0800ad45
 800ac84:	0800ad45 	.word	0x0800ad45
 800ac88:	0800ad45 	.word	0x0800ad45
 800ac8c:	0800ad45 	.word	0x0800ad45
 800ac90:	0800ad45 	.word	0x0800ad45
 800ac94:	0800ad45 	.word	0x0800ad45
 800ac98:	0800acd3 	.word	0x0800acd3
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac9c:	f107 0320 	add.w	r3, r7, #32
 800aca0:	4618      	mov	r0, r3
 800aca2:	f7fd fba1 	bl	80083e8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800aca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aca8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800acaa:	e04e      	b.n	800ad4a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acac:	f107 0314 	add.w	r3, r7, #20
 800acb0:	4618      	mov	r0, r3
 800acb2:	f7fd fd03 	bl	80086bc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800acba:	e046      	b.n	800ad4a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acbc:	f107 0308 	add.w	r3, r7, #8
 800acc0:	4618      	mov	r0, r3
 800acc2:	f7fd fe65 	bl	8008990 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800acca:	e03e      	b.n	800ad4a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800accc:	4b76      	ldr	r3, [pc, #472]	@ (800aea8 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800acce:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800acd0:	e03b      	b.n	800ad4a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800acd2:	4b74      	ldr	r3, [pc, #464]	@ (800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800acd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800acd8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800acdc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800acde:	4b71      	ldr	r3, [pc, #452]	@ (800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f003 0302 	and.w	r3, r3, #2
 800ace6:	2b02      	cmp	r3, #2
 800ace8:	d10c      	bne.n	800ad04 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800acea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acec:	2b00      	cmp	r3, #0
 800acee:	d109      	bne.n	800ad04 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800acf0:	4b6c      	ldr	r3, [pc, #432]	@ (800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	08db      	lsrs	r3, r3, #3
 800acf6:	f003 0303 	and.w	r3, r3, #3
 800acfa:	4a6c      	ldr	r2, [pc, #432]	@ (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800acfc:	fa22 f303 	lsr.w	r3, r2, r3
 800ad00:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad02:	e01e      	b.n	800ad42 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ad04:	4b67      	ldr	r3, [pc, #412]	@ (800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ad0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad10:	d106      	bne.n	800ad20 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800ad12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad18:	d102      	bne.n	800ad20 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800ad1a:	4b65      	ldr	r3, [pc, #404]	@ (800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800ad1c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad1e:	e010      	b.n	800ad42 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ad20:	4b60      	ldr	r3, [pc, #384]	@ (800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad2c:	d106      	bne.n	800ad3c <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800ad2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ad34:	d102      	bne.n	800ad3c <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800ad36:	4b5f      	ldr	r3, [pc, #380]	@ (800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800ad38:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad3a:	e002      	b.n	800ad42 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800ad40:	e003      	b.n	800ad4a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800ad42:	e002      	b.n	800ad4a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 800ad44:	2300      	movs	r3, #0
 800ad46:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ad48:	bf00      	nop
          }
        }
        break;
 800ad4a:	e2d6      	b.n	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800ad4c:	4b55      	ldr	r3, [pc, #340]	@ (800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ad4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ad52:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800ad56:	633b      	str	r3, [r7, #48]	@ 0x30
 800ad58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad5e:	d031      	beq.n	800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 800ad60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad66:	d866      	bhi.n	800ae36 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800ad68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad6a:	2bc0      	cmp	r3, #192	@ 0xc0
 800ad6c:	d027      	beq.n	800adbe <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800ad6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad70:	2bc0      	cmp	r3, #192	@ 0xc0
 800ad72:	d860      	bhi.n	800ae36 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800ad74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad76:	2b80      	cmp	r3, #128	@ 0x80
 800ad78:	d019      	beq.n	800adae <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800ad7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad7c:	2b80      	cmp	r3, #128	@ 0x80
 800ad7e:	d85a      	bhi.n	800ae36 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800ad80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d003      	beq.n	800ad8e <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800ad86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad88:	2b40      	cmp	r3, #64	@ 0x40
 800ad8a:	d008      	beq.n	800ad9e <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 800ad8c:	e053      	b.n	800ae36 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad8e:	f107 0320 	add.w	r3, r7, #32
 800ad92:	4618      	mov	r0, r3
 800ad94:	f7fd fb28 	bl	80083e8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad9a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ad9c:	e04e      	b.n	800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad9e:	f107 0314 	add.w	r3, r7, #20
 800ada2:	4618      	mov	r0, r3
 800ada4:	f7fd fc8a 	bl	80086bc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800adac:	e046      	b.n	800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800adae:	f107 0308 	add.w	r3, r7, #8
 800adb2:	4618      	mov	r0, r3
 800adb4:	f7fd fdec 	bl	8008990 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800adbc:	e03e      	b.n	800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800adbe:	4b3a      	ldr	r3, [pc, #232]	@ (800aea8 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800adc0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800adc2:	e03b      	b.n	800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800adc4:	4b37      	ldr	r3, [pc, #220]	@ (800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800adc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800adca:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800adce:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800add0:	4b34      	ldr	r3, [pc, #208]	@ (800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f003 0302 	and.w	r3, r3, #2
 800add8:	2b02      	cmp	r3, #2
 800adda:	d10c      	bne.n	800adf6 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 800addc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d109      	bne.n	800adf6 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ade2:	4b30      	ldr	r3, [pc, #192]	@ (800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	08db      	lsrs	r3, r3, #3
 800ade8:	f003 0303 	and.w	r3, r3, #3
 800adec:	4a2f      	ldr	r2, [pc, #188]	@ (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800adee:	fa22 f303 	lsr.w	r3, r2, r3
 800adf2:	637b      	str	r3, [r7, #52]	@ 0x34
 800adf4:	e01e      	b.n	800ae34 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800adf6:	4b2b      	ldr	r3, [pc, #172]	@ (800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800adfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae02:	d106      	bne.n	800ae12 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 800ae04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae0a:	d102      	bne.n	800ae12 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800ae0c:	4b28      	ldr	r3, [pc, #160]	@ (800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800ae0e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae10:	e010      	b.n	800ae34 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ae12:	4b24      	ldr	r3, [pc, #144]	@ (800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae1e:	d106      	bne.n	800ae2e <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 800ae20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae22:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ae26:	d102      	bne.n	800ae2e <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800ae28:	4b22      	ldr	r3, [pc, #136]	@ (800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800ae2a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae2c:	e002      	b.n	800ae34 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800ae32:	e003      	b.n	800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 800ae34:	e002      	b.n	800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 800ae36:	2300      	movs	r3, #0
 800ae38:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ae3a:	bf00      	nop
          }
        }
        break;
 800ae3c:	e25d      	b.n	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800ae3e:	4b19      	ldr	r3, [pc, #100]	@ (800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ae40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ae44:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800ae48:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800ae4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d103      	bne.n	800ae58 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800ae50:	f7fb fb14 	bl	800647c <HAL_RCC_GetPCLK2Freq>
 800ae54:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800ae56:	e250      	b.n	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800ae58:	4b12      	ldr	r3, [pc, #72]	@ (800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ae60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ae64:	d10b      	bne.n	800ae7e <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 800ae66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae6c:	d107      	bne.n	800ae7e <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae6e:	f107 0314 	add.w	r3, r7, #20
 800ae72:	4618      	mov	r0, r3
 800ae74:	f7fd fc22 	bl	80086bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ae78:	69bb      	ldr	r3, [r7, #24]
 800ae7a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae7c:	e04f      	b.n	800af1e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800ae7e:	4b09      	ldr	r3, [pc, #36]	@ (800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ae86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae8a:	d115      	bne.n	800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800ae8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ae92:	d111      	bne.n	800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae94:	f107 0308 	add.w	r3, r7, #8
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f7fd fd79 	bl	8008990 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	637b      	str	r3, [r7, #52]	@ 0x34
 800aea2:	e03c      	b.n	800af1e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 800aea4:	44020c00 	.word	0x44020c00
 800aea8:	00bb8000 	.word	0x00bb8000
 800aeac:	03d09000 	.word	0x03d09000
 800aeb0:	003d0900 	.word	0x003d0900
 800aeb4:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800aeb8:	4b94      	ldr	r3, [pc, #592]	@ (800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f003 0302 	and.w	r3, r3, #2
 800aec0:	2b02      	cmp	r3, #2
 800aec2:	d10d      	bne.n	800aee0 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 800aec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aec6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800aeca:	d109      	bne.n	800aee0 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800aecc:	4b8f      	ldr	r3, [pc, #572]	@ (800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	08db      	lsrs	r3, r3, #3
 800aed2:	f003 0303 	and.w	r3, r3, #3
 800aed6:	4a8e      	ldr	r2, [pc, #568]	@ (800b110 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800aed8:	fa22 f303 	lsr.w	r3, r2, r3
 800aedc:	637b      	str	r3, [r7, #52]	@ 0x34
 800aede:	e01e      	b.n	800af1e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800aee0:	4b8a      	ldr	r3, [pc, #552]	@ (800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aee8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aeec:	d106      	bne.n	800aefc <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800aeee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aef0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aef4:	d102      	bne.n	800aefc <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 800aef6:	4b87      	ldr	r3, [pc, #540]	@ (800b114 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800aef8:	637b      	str	r3, [r7, #52]	@ 0x34
 800aefa:	e010      	b.n	800af1e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800aefc:	4b83      	ldr	r3, [pc, #524]	@ (800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af08:	d106      	bne.n	800af18 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800af0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af0c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800af10:	d102      	bne.n	800af18 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800af12:	4b81      	ldr	r3, [pc, #516]	@ (800b118 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800af14:	637b      	str	r3, [r7, #52]	@ 0x34
 800af16:	e002      	b.n	800af1e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 800af18:	2300      	movs	r3, #0
 800af1a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800af1c:	e1ed      	b.n	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800af1e:	e1ec      	b.n	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 800af20:	4b7a      	ldr	r3, [pc, #488]	@ (800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800af22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800af26:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800af2a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800af2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d103      	bne.n	800af3a <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800af32:	f7fb fab9 	bl	80064a8 <HAL_RCC_GetPCLK3Freq>
 800af36:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800af38:	e1df      	b.n	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800af3a:	4b74      	ldr	r3, [pc, #464]	@ (800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af46:	d10b      	bne.n	800af60 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 800af48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af4e:	d107      	bne.n	800af60 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af50:	f107 0314 	add.w	r3, r7, #20
 800af54:	4618      	mov	r0, r3
 800af56:	f7fd fbb1 	bl	80086bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800af5a:	69bb      	ldr	r3, [r7, #24]
 800af5c:	637b      	str	r3, [r7, #52]	@ 0x34
 800af5e:	e045      	b.n	800afec <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 800af60:	4b6a      	ldr	r3, [pc, #424]	@ (800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800af68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af6c:	d10b      	bne.n	800af86 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800af6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af74:	d107      	bne.n	800af86 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af76:	f107 0308 	add.w	r3, r7, #8
 800af7a:	4618      	mov	r0, r3
 800af7c:	f7fd fd08 	bl	8008990 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	637b      	str	r3, [r7, #52]	@ 0x34
 800af84:	e032      	b.n	800afec <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800af86:	4b61      	ldr	r3, [pc, #388]	@ (800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f003 0302 	and.w	r3, r3, #2
 800af8e:	2b02      	cmp	r3, #2
 800af90:	d10d      	bne.n	800afae <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 800af92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af94:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800af98:	d109      	bne.n	800afae <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800af9a:	4b5c      	ldr	r3, [pc, #368]	@ (800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	08db      	lsrs	r3, r3, #3
 800afa0:	f003 0303 	and.w	r3, r3, #3
 800afa4:	4a5a      	ldr	r2, [pc, #360]	@ (800b110 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800afa6:	fa22 f303 	lsr.w	r3, r2, r3
 800afaa:	637b      	str	r3, [r7, #52]	@ 0x34
 800afac:	e01e      	b.n	800afec <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800afae:	4b57      	ldr	r3, [pc, #348]	@ (800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800afb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800afba:	d106      	bne.n	800afca <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 800afbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afbe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800afc2:	d102      	bne.n	800afca <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 800afc4:	4b53      	ldr	r3, [pc, #332]	@ (800b114 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800afc6:	637b      	str	r3, [r7, #52]	@ 0x34
 800afc8:	e010      	b.n	800afec <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800afca:	4b50      	ldr	r3, [pc, #320]	@ (800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800afd2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800afd6:	d106      	bne.n	800afe6 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 800afd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afda:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800afde:	d102      	bne.n	800afe6 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 800afe0:	4b4d      	ldr	r3, [pc, #308]	@ (800b118 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800afe2:	637b      	str	r3, [r7, #52]	@ 0x34
 800afe4:	e002      	b.n	800afec <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 800afe6:	2300      	movs	r3, #0
 800afe8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800afea:	e186      	b.n	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800afec:	e185      	b.n	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800afee:	4b47      	ldr	r3, [pc, #284]	@ (800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800aff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aff4:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800aff8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800affa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800affc:	2b00      	cmp	r3, #0
 800affe:	d103      	bne.n	800b008 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800b000:	f7fb fa3c 	bl	800647c <HAL_RCC_GetPCLK2Freq>
 800b004:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800b006:	e178      	b.n	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 800b008:	4b40      	ldr	r3, [pc, #256]	@ (800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b010:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b014:	d10b      	bne.n	800b02e <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 800b016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b018:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b01c:	d107      	bne.n	800b02e <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b01e:	f107 0314 	add.w	r3, r7, #20
 800b022:	4618      	mov	r0, r3
 800b024:	f7fd fb4a 	bl	80086bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b028:	69bb      	ldr	r3, [r7, #24]
 800b02a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b02c:	e045      	b.n	800b0ba <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800b02e:	4b37      	ldr	r3, [pc, #220]	@ (800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b036:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b03a:	d10b      	bne.n	800b054 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 800b03c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b03e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b042:	d107      	bne.n	800b054 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b044:	f107 0308 	add.w	r3, r7, #8
 800b048:	4618      	mov	r0, r3
 800b04a:	f7fd fca1 	bl	8008990 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	637b      	str	r3, [r7, #52]	@ 0x34
 800b052:	e032      	b.n	800b0ba <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 800b054:	4b2d      	ldr	r3, [pc, #180]	@ (800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f003 0302 	and.w	r3, r3, #2
 800b05c:	2b02      	cmp	r3, #2
 800b05e:	d10d      	bne.n	800b07c <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 800b060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b062:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800b066:	d109      	bne.n	800b07c <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b068:	4b28      	ldr	r3, [pc, #160]	@ (800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	08db      	lsrs	r3, r3, #3
 800b06e:	f003 0303 	and.w	r3, r3, #3
 800b072:	4a27      	ldr	r2, [pc, #156]	@ (800b110 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800b074:	fa22 f303 	lsr.w	r3, r2, r3
 800b078:	637b      	str	r3, [r7, #52]	@ 0x34
 800b07a:	e01e      	b.n	800b0ba <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800b07c:	4b23      	ldr	r3, [pc, #140]	@ (800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b084:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b088:	d106      	bne.n	800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800b08a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b08c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b090:	d102      	bne.n	800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800b092:	4b20      	ldr	r3, [pc, #128]	@ (800b114 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800b094:	637b      	str	r3, [r7, #52]	@ 0x34
 800b096:	e010      	b.n	800b0ba <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 800b098:	4b1c      	ldr	r3, [pc, #112]	@ (800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b0a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b0a4:	d106      	bne.n	800b0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 800b0a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0a8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800b0ac:	d102      	bne.n	800b0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800b0ae:	4b1a      	ldr	r3, [pc, #104]	@ (800b118 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800b0b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0b2:	e002      	b.n	800b0ba <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b0b8:	e11f      	b.n	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b0ba:	e11e      	b.n	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800b0bc:	4b13      	ldr	r3, [pc, #76]	@ (800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b0be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b0c2:	f003 0303 	and.w	r3, r3, #3
 800b0c6:	633b      	str	r3, [r7, #48]	@ 0x30
 800b0c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0ca:	2b03      	cmp	r3, #3
 800b0cc:	d85f      	bhi.n	800b18e <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800b0ce:	a201      	add	r2, pc, #4	@ (adr r2, 800b0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 800b0d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0d4:	0800b0e5 	.word	0x0800b0e5
 800b0d8:	0800b0ed 	.word	0x0800b0ed
 800b0dc:	0800b0fd 	.word	0x0800b0fd
 800b0e0:	0800b11d 	.word	0x0800b11d

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800b0e4:	f7fb f998 	bl	8006418 <HAL_RCC_GetHCLKFreq>
 800b0e8:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800b0ea:	e053      	b.n	800b194 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b0ec:	f107 0320 	add.w	r3, r7, #32
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f7fd f979 	bl	80083e8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800b0f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0f8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b0fa:	e04b      	b.n	800b194 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0fc:	f107 0314 	add.w	r3, r7, #20
 800b100:	4618      	mov	r0, r3
 800b102:	f7fd fadb 	bl	80086bc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800b106:	69fb      	ldr	r3, [r7, #28]
 800b108:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b10a:	e043      	b.n	800b194 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800b10c:	44020c00 	.word	0x44020c00
 800b110:	03d09000 	.word	0x03d09000
 800b114:	003d0900 	.word	0x003d0900
 800b118:	017d7840 	.word	0x017d7840
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b11c:	4b79      	ldr	r3, [pc, #484]	@ (800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b11e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b122:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b126:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b128:	4b76      	ldr	r3, [pc, #472]	@ (800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f003 0302 	and.w	r3, r3, #2
 800b130:	2b02      	cmp	r3, #2
 800b132:	d10c      	bne.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 800b134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b136:	2b00      	cmp	r3, #0
 800b138:	d109      	bne.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b13a:	4b72      	ldr	r3, [pc, #456]	@ (800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	08db      	lsrs	r3, r3, #3
 800b140:	f003 0303 	and.w	r3, r3, #3
 800b144:	4a70      	ldr	r2, [pc, #448]	@ (800b308 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 800b146:	fa22 f303 	lsr.w	r3, r2, r3
 800b14a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b14c:	e01e      	b.n	800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b14e:	4b6d      	ldr	r3, [pc, #436]	@ (800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b156:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b15a:	d106      	bne.n	800b16a <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 800b15c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b15e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b162:	d102      	bne.n	800b16a <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b164:	4b69      	ldr	r3, [pc, #420]	@ (800b30c <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 800b166:	637b      	str	r3, [r7, #52]	@ 0x34
 800b168:	e010      	b.n	800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b16a:	4b66      	ldr	r3, [pc, #408]	@ (800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b172:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b176:	d106      	bne.n	800b186 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 800b178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b17a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b17e:	d102      	bne.n	800b186 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b180:	4b63      	ldr	r3, [pc, #396]	@ (800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800b182:	637b      	str	r3, [r7, #52]	@ 0x34
 800b184:	e002      	b.n	800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800b186:	2300      	movs	r3, #0
 800b188:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b18a:	e003      	b.n	800b194 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800b18c:	e002      	b.n	800b194 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800b18e:	2300      	movs	r3, #0
 800b190:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b192:	bf00      	nop
          }
        }
        break;
 800b194:	e0b1      	b.n	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800b196:	4b5b      	ldr	r3, [pc, #364]	@ (800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b198:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b19c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b1a0:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800b1a2:	4b58      	ldr	r3, [pc, #352]	@ (800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b1a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b1a8:	f003 0302 	and.w	r3, r3, #2
 800b1ac:	2b02      	cmp	r3, #2
 800b1ae:	d106      	bne.n	800b1be <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800b1b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d103      	bne.n	800b1be <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 800b1b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b1ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1bc:	e01f      	b.n	800b1fe <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800b1be:	4b51      	ldr	r3, [pc, #324]	@ (800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b1c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b1c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b1c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b1cc:	d106      	bne.n	800b1dc <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800b1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1d0:	2b40      	cmp	r3, #64	@ 0x40
 800b1d2:	d103      	bne.n	800b1dc <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 800b1d4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b1d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1da:	e010      	b.n	800b1fe <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800b1dc:	4b49      	ldr	r3, [pc, #292]	@ (800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b1e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b1e8:	d106      	bne.n	800b1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 800b1ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1ec:	2b80      	cmp	r3, #128	@ 0x80
 800b1ee:	d103      	bne.n	800b1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800b1f0:	f248 0312 	movw	r3, #32786	@ 0x8012
 800b1f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1f6:	e002      	b.n	800b1fe <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800b1fc:	e07d      	b.n	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b1fe:	e07c      	b.n	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800b200:	4b40      	ldr	r3, [pc, #256]	@ (800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b202:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b206:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b20a:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800b20c:	4b3d      	ldr	r3, [pc, #244]	@ (800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b214:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b218:	d105      	bne.n	800b226 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800b21a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d102      	bne.n	800b226 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 800b220:	4b3c      	ldr	r3, [pc, #240]	@ (800b314 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800b222:	637b      	str	r3, [r7, #52]	@ 0x34
 800b224:	e031      	b.n	800b28a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800b226:	4b37      	ldr	r3, [pc, #220]	@ (800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b22e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b232:	d10a      	bne.n	800b24a <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 800b234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b236:	2b10      	cmp	r3, #16
 800b238:	d107      	bne.n	800b24a <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b23a:	f107 0320 	add.w	r3, r7, #32
 800b23e:	4618      	mov	r0, r3
 800b240:	f7fd f8d2 	bl	80083e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b246:	637b      	str	r3, [r7, #52]	@ 0x34
 800b248:	e01f      	b.n	800b28a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800b24a:	4b2e      	ldr	r3, [pc, #184]	@ (800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b24c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b250:	f003 0302 	and.w	r3, r3, #2
 800b254:	2b02      	cmp	r3, #2
 800b256:	d106      	bne.n	800b266 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 800b258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b25a:	2b20      	cmp	r3, #32
 800b25c:	d103      	bne.n	800b266 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800b25e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b262:	637b      	str	r3, [r7, #52]	@ 0x34
 800b264:	e011      	b.n	800b28a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800b266:	4b27      	ldr	r3, [pc, #156]	@ (800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b268:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b26c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b270:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b274:	d106      	bne.n	800b284 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800b276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b278:	2b30      	cmp	r3, #48	@ 0x30
 800b27a:	d103      	bne.n	800b284 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800b27c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b280:	637b      	str	r3, [r7, #52]	@ 0x34
 800b282:	e002      	b.n	800b28a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800b284:	2300      	movs	r3, #0
 800b286:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800b288:	e037      	b.n	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b28a:	e036      	b.n	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800b28c:	4b1d      	ldr	r3, [pc, #116]	@ (800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b28e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b292:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b296:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800b298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b29a:	2b10      	cmp	r3, #16
 800b29c:	d107      	bne.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b29e:	f107 0320 	add.w	r3, r7, #32
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f7fd f8a0 	bl	80083e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b2a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2aa:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800b2ac:	e025      	b.n	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800b2ae:	4b15      	ldr	r3, [pc, #84]	@ (800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b2b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b2ba:	d10a      	bne.n	800b2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 800b2bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2be:	2b20      	cmp	r3, #32
 800b2c0:	d107      	bne.n	800b2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2c2:	f107 0308 	add.w	r3, r7, #8
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f7fd fb62 	bl	8008990 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2d0:	e00f      	b.n	800b2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800b2d2:	4b0c      	ldr	r3, [pc, #48]	@ (800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b2da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b2de:	d105      	bne.n	800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 800b2e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2e2:	2b30      	cmp	r3, #48	@ 0x30
 800b2e4:	d102      	bne.n	800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800b2e6:	4b0b      	ldr	r3, [pc, #44]	@ (800b314 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800b2e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2ea:	e002      	b.n	800b2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 800b2f0:	e003      	b.n	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b2f2:	e002      	b.n	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b2f8:	bf00      	nop
        }
        break;
#endif /* RCC_CCIPR4_ETHCLKSEL */
    }
  }
  return (frequency);
 800b2fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	373c      	adds	r7, #60	@ 0x3c
 800b300:	46bd      	mov	sp, r7
 800b302:	bd90      	pop	{r4, r7, pc}
 800b304:	44020c00 	.word	0x44020c00
 800b308:	03d09000 	.word	0x03d09000
 800b30c:	003d0900 	.word	0x003d0900
 800b310:	017d7840 	.word	0x017d7840
 800b314:	02dc6c00 	.word	0x02dc6c00

0800b318 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b084      	sub	sp, #16
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800b320:	4b48      	ldr	r3, [pc, #288]	@ (800b444 <RCCEx_PLL2_Config+0x12c>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	4a47      	ldr	r2, [pc, #284]	@ (800b444 <RCCEx_PLL2_Config+0x12c>)
 800b326:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b32a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b32c:	f7f8 fe68 	bl	8004000 <HAL_GetTick>
 800b330:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b332:	e008      	b.n	800b346 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b334:	f7f8 fe64 	bl	8004000 <HAL_GetTick>
 800b338:	4602      	mov	r2, r0
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	1ad3      	subs	r3, r2, r3
 800b33e:	2b02      	cmp	r3, #2
 800b340:	d901      	bls.n	800b346 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800b342:	2303      	movs	r3, #3
 800b344:	e07a      	b.n	800b43c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b346:	4b3f      	ldr	r3, [pc, #252]	@ (800b444 <RCCEx_PLL2_Config+0x12c>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d1f0      	bne.n	800b334 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800b352:	4b3c      	ldr	r3, [pc, #240]	@ (800b444 <RCCEx_PLL2_Config+0x12c>)
 800b354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b356:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b35a:	f023 0303 	bic.w	r3, r3, #3
 800b35e:	687a      	ldr	r2, [r7, #4]
 800b360:	6811      	ldr	r1, [r2, #0]
 800b362:	687a      	ldr	r2, [r7, #4]
 800b364:	6852      	ldr	r2, [r2, #4]
 800b366:	0212      	lsls	r2, r2, #8
 800b368:	430a      	orrs	r2, r1
 800b36a:	4936      	ldr	r1, [pc, #216]	@ (800b444 <RCCEx_PLL2_Config+0x12c>)
 800b36c:	4313      	orrs	r3, r2
 800b36e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	689b      	ldr	r3, [r3, #8]
 800b374:	3b01      	subs	r3, #1
 800b376:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	68db      	ldr	r3, [r3, #12]
 800b37e:	3b01      	subs	r3, #1
 800b380:	025b      	lsls	r3, r3, #9
 800b382:	b29b      	uxth	r3, r3
 800b384:	431a      	orrs	r2, r3
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	691b      	ldr	r3, [r3, #16]
 800b38a:	3b01      	subs	r3, #1
 800b38c:	041b      	lsls	r3, r3, #16
 800b38e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b392:	431a      	orrs	r2, r3
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	695b      	ldr	r3, [r3, #20]
 800b398:	3b01      	subs	r3, #1
 800b39a:	061b      	lsls	r3, r3, #24
 800b39c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b3a0:	4928      	ldr	r1, [pc, #160]	@ (800b444 <RCCEx_PLL2_Config+0x12c>)
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800b3a6:	4b27      	ldr	r3, [pc, #156]	@ (800b444 <RCCEx_PLL2_Config+0x12c>)
 800b3a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3aa:	f023 020c 	bic.w	r2, r3, #12
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	699b      	ldr	r3, [r3, #24]
 800b3b2:	4924      	ldr	r1, [pc, #144]	@ (800b444 <RCCEx_PLL2_Config+0x12c>)
 800b3b4:	4313      	orrs	r3, r2
 800b3b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800b3b8:	4b22      	ldr	r3, [pc, #136]	@ (800b444 <RCCEx_PLL2_Config+0x12c>)
 800b3ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3bc:	f023 0220 	bic.w	r2, r3, #32
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	69db      	ldr	r3, [r3, #28]
 800b3c4:	491f      	ldr	r1, [pc, #124]	@ (800b444 <RCCEx_PLL2_Config+0x12c>)
 800b3c6:	4313      	orrs	r3, r2
 800b3c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800b3ca:	4b1e      	ldr	r3, [pc, #120]	@ (800b444 <RCCEx_PLL2_Config+0x12c>)
 800b3cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3d2:	491c      	ldr	r1, [pc, #112]	@ (800b444 <RCCEx_PLL2_Config+0x12c>)
 800b3d4:	4313      	orrs	r3, r2
 800b3d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800b3d8:	4b1a      	ldr	r3, [pc, #104]	@ (800b444 <RCCEx_PLL2_Config+0x12c>)
 800b3da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3dc:	4a19      	ldr	r2, [pc, #100]	@ (800b444 <RCCEx_PLL2_Config+0x12c>)
 800b3de:	f023 0310 	bic.w	r3, r3, #16
 800b3e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800b3e4:	4b17      	ldr	r3, [pc, #92]	@ (800b444 <RCCEx_PLL2_Config+0x12c>)
 800b3e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3e8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b3ec:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800b3f0:	687a      	ldr	r2, [r7, #4]
 800b3f2:	6a12      	ldr	r2, [r2, #32]
 800b3f4:	00d2      	lsls	r2, r2, #3
 800b3f6:	4913      	ldr	r1, [pc, #76]	@ (800b444 <RCCEx_PLL2_Config+0x12c>)
 800b3f8:	4313      	orrs	r3, r2
 800b3fa:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800b3fc:	4b11      	ldr	r3, [pc, #68]	@ (800b444 <RCCEx_PLL2_Config+0x12c>)
 800b3fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b400:	4a10      	ldr	r2, [pc, #64]	@ (800b444 <RCCEx_PLL2_Config+0x12c>)
 800b402:	f043 0310 	orr.w	r3, r3, #16
 800b406:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800b408:	4b0e      	ldr	r3, [pc, #56]	@ (800b444 <RCCEx_PLL2_Config+0x12c>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	4a0d      	ldr	r2, [pc, #52]	@ (800b444 <RCCEx_PLL2_Config+0x12c>)
 800b40e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b412:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b414:	f7f8 fdf4 	bl	8004000 <HAL_GetTick>
 800b418:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b41a:	e008      	b.n	800b42e <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b41c:	f7f8 fdf0 	bl	8004000 <HAL_GetTick>
 800b420:	4602      	mov	r2, r0
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	1ad3      	subs	r3, r2, r3
 800b426:	2b02      	cmp	r3, #2
 800b428:	d901      	bls.n	800b42e <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800b42a:	2303      	movs	r3, #3
 800b42c:	e006      	b.n	800b43c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b42e:	4b05      	ldr	r3, [pc, #20]	@ (800b444 <RCCEx_PLL2_Config+0x12c>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b436:	2b00      	cmp	r3, #0
 800b438:	d0f0      	beq.n	800b41c <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800b43a:	2300      	movs	r3, #0

}
 800b43c:	4618      	mov	r0, r3
 800b43e:	3710      	adds	r7, #16
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}
 800b444:	44020c00 	.word	0x44020c00

0800b448 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b084      	sub	sp, #16
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800b450:	4b48      	ldr	r3, [pc, #288]	@ (800b574 <RCCEx_PLL3_Config+0x12c>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	4a47      	ldr	r2, [pc, #284]	@ (800b574 <RCCEx_PLL3_Config+0x12c>)
 800b456:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b45a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b45c:	f7f8 fdd0 	bl	8004000 <HAL_GetTick>
 800b460:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b462:	e008      	b.n	800b476 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b464:	f7f8 fdcc 	bl	8004000 <HAL_GetTick>
 800b468:	4602      	mov	r2, r0
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	1ad3      	subs	r3, r2, r3
 800b46e:	2b02      	cmp	r3, #2
 800b470:	d901      	bls.n	800b476 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800b472:	2303      	movs	r3, #3
 800b474:	e07a      	b.n	800b56c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b476:	4b3f      	ldr	r3, [pc, #252]	@ (800b574 <RCCEx_PLL3_Config+0x12c>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d1f0      	bne.n	800b464 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800b482:	4b3c      	ldr	r3, [pc, #240]	@ (800b574 <RCCEx_PLL3_Config+0x12c>)
 800b484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b486:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b48a:	f023 0303 	bic.w	r3, r3, #3
 800b48e:	687a      	ldr	r2, [r7, #4]
 800b490:	6811      	ldr	r1, [r2, #0]
 800b492:	687a      	ldr	r2, [r7, #4]
 800b494:	6852      	ldr	r2, [r2, #4]
 800b496:	0212      	lsls	r2, r2, #8
 800b498:	430a      	orrs	r2, r1
 800b49a:	4936      	ldr	r1, [pc, #216]	@ (800b574 <RCCEx_PLL3_Config+0x12c>)
 800b49c:	4313      	orrs	r3, r2
 800b49e:	630b      	str	r3, [r1, #48]	@ 0x30
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	689b      	ldr	r3, [r3, #8]
 800b4a4:	3b01      	subs	r3, #1
 800b4a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	68db      	ldr	r3, [r3, #12]
 800b4ae:	3b01      	subs	r3, #1
 800b4b0:	025b      	lsls	r3, r3, #9
 800b4b2:	b29b      	uxth	r3, r3
 800b4b4:	431a      	orrs	r2, r3
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	691b      	ldr	r3, [r3, #16]
 800b4ba:	3b01      	subs	r3, #1
 800b4bc:	041b      	lsls	r3, r3, #16
 800b4be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b4c2:	431a      	orrs	r2, r3
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	695b      	ldr	r3, [r3, #20]
 800b4c8:	3b01      	subs	r3, #1
 800b4ca:	061b      	lsls	r3, r3, #24
 800b4cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b4d0:	4928      	ldr	r1, [pc, #160]	@ (800b574 <RCCEx_PLL3_Config+0x12c>)
 800b4d2:	4313      	orrs	r3, r2
 800b4d4:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b4d6:	4b27      	ldr	r3, [pc, #156]	@ (800b574 <RCCEx_PLL3_Config+0x12c>)
 800b4d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4da:	f023 020c 	bic.w	r2, r3, #12
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	699b      	ldr	r3, [r3, #24]
 800b4e2:	4924      	ldr	r1, [pc, #144]	@ (800b574 <RCCEx_PLL3_Config+0x12c>)
 800b4e4:	4313      	orrs	r3, r2
 800b4e6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800b4e8:	4b22      	ldr	r3, [pc, #136]	@ (800b574 <RCCEx_PLL3_Config+0x12c>)
 800b4ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4ec:	f023 0220 	bic.w	r2, r3, #32
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	69db      	ldr	r3, [r3, #28]
 800b4f4:	491f      	ldr	r1, [pc, #124]	@ (800b574 <RCCEx_PLL3_Config+0x12c>)
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800b4fa:	4b1e      	ldr	r3, [pc, #120]	@ (800b574 <RCCEx_PLL3_Config+0x12c>)
 800b4fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b502:	491c      	ldr	r1, [pc, #112]	@ (800b574 <RCCEx_PLL3_Config+0x12c>)
 800b504:	4313      	orrs	r3, r2
 800b506:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800b508:	4b1a      	ldr	r3, [pc, #104]	@ (800b574 <RCCEx_PLL3_Config+0x12c>)
 800b50a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b50c:	4a19      	ldr	r2, [pc, #100]	@ (800b574 <RCCEx_PLL3_Config+0x12c>)
 800b50e:	f023 0310 	bic.w	r3, r3, #16
 800b512:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800b514:	4b17      	ldr	r3, [pc, #92]	@ (800b574 <RCCEx_PLL3_Config+0x12c>)
 800b516:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b518:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b51c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800b520:	687a      	ldr	r2, [r7, #4]
 800b522:	6a12      	ldr	r2, [r2, #32]
 800b524:	00d2      	lsls	r2, r2, #3
 800b526:	4913      	ldr	r1, [pc, #76]	@ (800b574 <RCCEx_PLL3_Config+0x12c>)
 800b528:	4313      	orrs	r3, r2
 800b52a:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800b52c:	4b11      	ldr	r3, [pc, #68]	@ (800b574 <RCCEx_PLL3_Config+0x12c>)
 800b52e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b530:	4a10      	ldr	r2, [pc, #64]	@ (800b574 <RCCEx_PLL3_Config+0x12c>)
 800b532:	f043 0310 	orr.w	r3, r3, #16
 800b536:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800b538:	4b0e      	ldr	r3, [pc, #56]	@ (800b574 <RCCEx_PLL3_Config+0x12c>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	4a0d      	ldr	r2, [pc, #52]	@ (800b574 <RCCEx_PLL3_Config+0x12c>)
 800b53e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b542:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b544:	f7f8 fd5c 	bl	8004000 <HAL_GetTick>
 800b548:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b54a:	e008      	b.n	800b55e <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b54c:	f7f8 fd58 	bl	8004000 <HAL_GetTick>
 800b550:	4602      	mov	r2, r0
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	1ad3      	subs	r3, r2, r3
 800b556:	2b02      	cmp	r3, #2
 800b558:	d901      	bls.n	800b55e <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800b55a:	2303      	movs	r3, #3
 800b55c:	e006      	b.n	800b56c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b55e:	4b05      	ldr	r3, [pc, #20]	@ (800b574 <RCCEx_PLL3_Config+0x12c>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b566:	2b00      	cmp	r3, #0
 800b568:	d0f0      	beq.n	800b54c <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800b56a:	2300      	movs	r3, #0
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3710      	adds	r7, #16
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}
 800b574:	44020c00 	.word	0x44020c00

0800b578 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b084      	sub	sp, #16
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d101      	bne.n	800b58a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b586:	2301      	movs	r3, #1
 800b588:	e162      	b.n	800b850 <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	4a70      	ldr	r2, [pc, #448]	@ (800b750 <HAL_SPI_Init+0x1d8>)
 800b590:	4293      	cmp	r3, r2
 800b592:	d018      	beq.n	800b5c6 <HAL_SPI_Init+0x4e>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	4a6e      	ldr	r2, [pc, #440]	@ (800b754 <HAL_SPI_Init+0x1dc>)
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d013      	beq.n	800b5c6 <HAL_SPI_Init+0x4e>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	4a6d      	ldr	r2, [pc, #436]	@ (800b758 <HAL_SPI_Init+0x1e0>)
 800b5a4:	4293      	cmp	r3, r2
 800b5a6:	d00e      	beq.n	800b5c6 <HAL_SPI_Init+0x4e>
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	4a6b      	ldr	r2, [pc, #428]	@ (800b75c <HAL_SPI_Init+0x1e4>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d009      	beq.n	800b5c6 <HAL_SPI_Init+0x4e>
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	4a6a      	ldr	r2, [pc, #424]	@ (800b760 <HAL_SPI_Init+0x1e8>)
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	d004      	beq.n	800b5c6 <HAL_SPI_Init+0x4e>
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	4a68      	ldr	r2, [pc, #416]	@ (800b764 <HAL_SPI_Init+0x1ec>)
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	e000      	b.n	800b5c8 <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800b5c6:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	4a5f      	ldr	r2, [pc, #380]	@ (800b750 <HAL_SPI_Init+0x1d8>)
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d018      	beq.n	800b60a <HAL_SPI_Init+0x92>
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	4a5d      	ldr	r2, [pc, #372]	@ (800b754 <HAL_SPI_Init+0x1dc>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d013      	beq.n	800b60a <HAL_SPI_Init+0x92>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	4a5c      	ldr	r2, [pc, #368]	@ (800b758 <HAL_SPI_Init+0x1e0>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d00e      	beq.n	800b60a <HAL_SPI_Init+0x92>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	4a5a      	ldr	r2, [pc, #360]	@ (800b75c <HAL_SPI_Init+0x1e4>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d009      	beq.n	800b60a <HAL_SPI_Init+0x92>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	4a59      	ldr	r2, [pc, #356]	@ (800b760 <HAL_SPI_Init+0x1e8>)
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d004      	beq.n	800b60a <HAL_SPI_Init+0x92>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	4a57      	ldr	r2, [pc, #348]	@ (800b764 <HAL_SPI_Init+0x1ec>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d105      	bne.n	800b616 <HAL_SPI_Init+0x9e>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	68db      	ldr	r3, [r3, #12]
 800b60e:	2b0f      	cmp	r3, #15
 800b610:	d901      	bls.n	800b616 <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 800b612:	2301      	movs	r3, #1
 800b614:	e11c      	b.n	800b850 <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f000 fdac 	bl	800c174 <SPI_GetPacketSize>
 800b61c:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	4a4b      	ldr	r2, [pc, #300]	@ (800b750 <HAL_SPI_Init+0x1d8>)
 800b624:	4293      	cmp	r3, r2
 800b626:	d018      	beq.n	800b65a <HAL_SPI_Init+0xe2>
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	4a49      	ldr	r2, [pc, #292]	@ (800b754 <HAL_SPI_Init+0x1dc>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d013      	beq.n	800b65a <HAL_SPI_Init+0xe2>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	4a48      	ldr	r2, [pc, #288]	@ (800b758 <HAL_SPI_Init+0x1e0>)
 800b638:	4293      	cmp	r3, r2
 800b63a:	d00e      	beq.n	800b65a <HAL_SPI_Init+0xe2>
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	4a46      	ldr	r2, [pc, #280]	@ (800b75c <HAL_SPI_Init+0x1e4>)
 800b642:	4293      	cmp	r3, r2
 800b644:	d009      	beq.n	800b65a <HAL_SPI_Init+0xe2>
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	4a45      	ldr	r2, [pc, #276]	@ (800b760 <HAL_SPI_Init+0x1e8>)
 800b64c:	4293      	cmp	r3, r2
 800b64e:	d004      	beq.n	800b65a <HAL_SPI_Init+0xe2>
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	4a43      	ldr	r2, [pc, #268]	@ (800b764 <HAL_SPI_Init+0x1ec>)
 800b656:	4293      	cmp	r3, r2
 800b658:	d102      	bne.n	800b660 <HAL_SPI_Init+0xe8>
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	2b08      	cmp	r3, #8
 800b65e:	d820      	bhi.n	800b6a2 <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b664:	4a40      	ldr	r2, [pc, #256]	@ (800b768 <HAL_SPI_Init+0x1f0>)
 800b666:	4293      	cmp	r3, r2
 800b668:	d018      	beq.n	800b69c <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	4a3f      	ldr	r2, [pc, #252]	@ (800b76c <HAL_SPI_Init+0x1f4>)
 800b670:	4293      	cmp	r3, r2
 800b672:	d013      	beq.n	800b69c <HAL_SPI_Init+0x124>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	4a3d      	ldr	r2, [pc, #244]	@ (800b770 <HAL_SPI_Init+0x1f8>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d00e      	beq.n	800b69c <HAL_SPI_Init+0x124>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	4a3c      	ldr	r2, [pc, #240]	@ (800b774 <HAL_SPI_Init+0x1fc>)
 800b684:	4293      	cmp	r3, r2
 800b686:	d009      	beq.n	800b69c <HAL_SPI_Init+0x124>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	4a3a      	ldr	r2, [pc, #232]	@ (800b778 <HAL_SPI_Init+0x200>)
 800b68e:	4293      	cmp	r3, r2
 800b690:	d004      	beq.n	800b69c <HAL_SPI_Init+0x124>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	4a39      	ldr	r2, [pc, #228]	@ (800b77c <HAL_SPI_Init+0x204>)
 800b698:	4293      	cmp	r3, r2
 800b69a:	d104      	bne.n	800b6a6 <HAL_SPI_Init+0x12e>
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	2b10      	cmp	r3, #16
 800b6a0:	d901      	bls.n	800b6a6 <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	e0d4      	b.n	800b850 <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800b6ac:	b2db      	uxtb	r3, r3
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d106      	bne.n	800b6c0 <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f7f7 fe18 	bl	80032f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2202      	movs	r2, #2
 800b6c4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	681a      	ldr	r2, [r3, #0]
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f022 0201 	bic.w	r2, r2, #1
 800b6d6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	689b      	ldr	r3, [r3, #8]
 800b6de:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b6e2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	699b      	ldr	r3, [r3, #24]
 800b6e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b6ec:	d119      	bne.n	800b722 <HAL_SPI_Init+0x1aa>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	685b      	ldr	r3, [r3, #4]
 800b6f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b6f6:	d103      	bne.n	800b700 <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d008      	beq.n	800b712 <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b704:	2b00      	cmp	r3, #0
 800b706:	d10c      	bne.n	800b722 <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b70c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b710:	d107      	bne.n	800b722 <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	681a      	ldr	r2, [r3, #0]
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b720:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	685b      	ldr	r3, [r3, #4]
 800b726:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d028      	beq.n	800b780 <HAL_SPI_Init+0x208>
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	68db      	ldr	r3, [r3, #12]
 800b732:	2b06      	cmp	r3, #6
 800b734:	d924      	bls.n	800b780 <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	430a      	orrs	r2, r1
 800b74a:	601a      	str	r2, [r3, #0]
 800b74c:	e020      	b.n	800b790 <HAL_SPI_Init+0x218>
 800b74e:	bf00      	nop
 800b750:	40014c00 	.word	0x40014c00
 800b754:	50014c00 	.word	0x50014c00
 800b758:	44002000 	.word	0x44002000
 800b75c:	54002000 	.word	0x54002000
 800b760:	40015000 	.word	0x40015000
 800b764:	50015000 	.word	0x50015000
 800b768:	40013000 	.word	0x40013000
 800b76c:	50013000 	.word	0x50013000
 800b770:	40003800 	.word	0x40003800
 800b774:	50003800 	.word	0x50003800
 800b778:	40003c00 	.word	0x40003c00
 800b77c:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	681a      	ldr	r2, [r3, #0]
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b78e:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	69da      	ldr	r2, [r3, #28]
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b798:	431a      	orrs	r2, r3
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	431a      	orrs	r2, r3
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7a2:	ea42 0103 	orr.w	r1, r2, r3
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	68da      	ldr	r2, [r3, #12]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	430a      	orrs	r2, r1
 800b7b0:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7ba:	431a      	orrs	r2, r3
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7c0:	431a      	orrs	r2, r3
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	699b      	ldr	r3, [r3, #24]
 800b7c6:	431a      	orrs	r2, r3
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	691b      	ldr	r3, [r3, #16]
 800b7cc:	431a      	orrs	r2, r3
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	695b      	ldr	r3, [r3, #20]
 800b7d2:	431a      	orrs	r2, r3
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6a1b      	ldr	r3, [r3, #32]
 800b7d8:	431a      	orrs	r2, r3
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	685b      	ldr	r3, [r3, #4]
 800b7de:	431a      	orrs	r2, r3
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b7e4:	431a      	orrs	r2, r3
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	689b      	ldr	r3, [r3, #8]
 800b7ea:	431a      	orrs	r2, r3
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b7f0:	431a      	orrs	r2, r3
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b7f6:	431a      	orrs	r2, r3
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b7fc:	ea42 0103 	orr.w	r1, r2, r3
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	430a      	orrs	r2, r1
 800b80a:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f022 0201 	bic.w	r2, r2, #1
 800b81a:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	685b      	ldr	r3, [r3, #4]
 800b820:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b824:	2b00      	cmp	r3, #0
 800b826:	d00a      	beq.n	800b83e <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	68db      	ldr	r3, [r3, #12]
 800b82e:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	430a      	orrs	r2, r1
 800b83c:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2200      	movs	r2, #0
 800b842:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2201      	movs	r2, #1
 800b84a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800b84e:	2300      	movs	r3, #0
}
 800b850:	4618      	mov	r0, r3
 800b852:	3710      	adds	r7, #16
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}

0800b858 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b088      	sub	sp, #32
 800b85c:	af02      	add	r7, sp, #8
 800b85e:	60f8      	str	r0, [r7, #12]
 800b860:	60b9      	str	r1, [r7, #8]
 800b862:	603b      	str	r3, [r7, #0]
 800b864:	4613      	mov	r3, r2
 800b866:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	3320      	adds	r3, #32
 800b86e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b870:	f7f8 fbc6 	bl	8004000 <HAL_GetTick>
 800b874:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800b87c:	b2db      	uxtb	r3, r3
 800b87e:	2b01      	cmp	r3, #1
 800b880:	d001      	beq.n	800b886 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800b882:	2302      	movs	r3, #2
 800b884:	e1f9      	b.n	800bc7a <HAL_SPI_Transmit+0x422>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d002      	beq.n	800b892 <HAL_SPI_Transmit+0x3a>
 800b88c:	88fb      	ldrh	r3, [r7, #6]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d101      	bne.n	800b896 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800b892:	2301      	movs	r3, #1
 800b894:	e1f1      	b.n	800bc7a <HAL_SPI_Transmit+0x422>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800b89c:	2b01      	cmp	r3, #1
 800b89e:	d101      	bne.n	800b8a4 <HAL_SPI_Transmit+0x4c>
 800b8a0:	2302      	movs	r3, #2
 800b8a2:	e1ea      	b.n	800bc7a <HAL_SPI_Transmit+0x422>
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	2201      	movs	r2, #1
 800b8a8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2203      	movs	r2, #3
 800b8b0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	68ba      	ldr	r2, [r7, #8]
 800b8c0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	88fa      	ldrh	r2, [r7, #6]
 800b8c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	88fa      	ldrh	r2, [r7, #6]
 800b8ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	689b      	ldr	r3, [r3, #8]
 800b8f8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800b8fc:	d108      	bne.n	800b910 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	681a      	ldr	r2, [r3, #0]
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b90c:	601a      	str	r2, [r3, #0]
 800b90e:	e009      	b.n	800b924 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	68db      	ldr	r3, [r3, #12]
 800b916:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800b922:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	685b      	ldr	r3, [r3, #4]
 800b92a:	0c1b      	lsrs	r3, r3, #16
 800b92c:	041b      	lsls	r3, r3, #16
 800b92e:	88f9      	ldrh	r1, [r7, #6]
 800b930:	68fa      	ldr	r2, [r7, #12]
 800b932:	6812      	ldr	r2, [r2, #0]
 800b934:	430b      	orrs	r3, r1
 800b936:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	681a      	ldr	r2, [r3, #0]
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f042 0201 	orr.w	r2, r2, #1
 800b946:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	685b      	ldr	r3, [r3, #4]
 800b94c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b950:	d107      	bne.n	800b962 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	681a      	ldr	r2, [r3, #0]
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b960:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	68db      	ldr	r3, [r3, #12]
 800b966:	2b0f      	cmp	r3, #15
 800b968:	d965      	bls.n	800ba36 <HAL_SPI_Transmit+0x1de>
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	4a94      	ldr	r2, [pc, #592]	@ (800bbc0 <HAL_SPI_Transmit+0x368>)
 800b970:	4293      	cmp	r3, r2
 800b972:	d059      	beq.n	800ba28 <HAL_SPI_Transmit+0x1d0>
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	4a92      	ldr	r2, [pc, #584]	@ (800bbc4 <HAL_SPI_Transmit+0x36c>)
 800b97a:	4293      	cmp	r3, r2
 800b97c:	d054      	beq.n	800ba28 <HAL_SPI_Transmit+0x1d0>
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	4a91      	ldr	r2, [pc, #580]	@ (800bbc8 <HAL_SPI_Transmit+0x370>)
 800b984:	4293      	cmp	r3, r2
 800b986:	d04f      	beq.n	800ba28 <HAL_SPI_Transmit+0x1d0>
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	4a8f      	ldr	r2, [pc, #572]	@ (800bbcc <HAL_SPI_Transmit+0x374>)
 800b98e:	4293      	cmp	r3, r2
 800b990:	d04a      	beq.n	800ba28 <HAL_SPI_Transmit+0x1d0>
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	4a8e      	ldr	r2, [pc, #568]	@ (800bbd0 <HAL_SPI_Transmit+0x378>)
 800b998:	4293      	cmp	r3, r2
 800b99a:	d045      	beq.n	800ba28 <HAL_SPI_Transmit+0x1d0>
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4a8c      	ldr	r2, [pc, #560]	@ (800bbd4 <HAL_SPI_Transmit+0x37c>)
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d147      	bne.n	800ba36 <HAL_SPI_Transmit+0x1de>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b9a6:	e03f      	b.n	800ba28 <HAL_SPI_Transmit+0x1d0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	695b      	ldr	r3, [r3, #20]
 800b9ae:	f003 0302 	and.w	r3, r3, #2
 800b9b2:	2b02      	cmp	r3, #2
 800b9b4:	d114      	bne.n	800b9e0 <HAL_SPI_Transmit+0x188>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	6812      	ldr	r2, [r2, #0]
 800b9c0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b9c6:	1d1a      	adds	r2, r3, #4
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b9d2:	b29b      	uxth	r3, r3
 800b9d4:	3b01      	subs	r3, #1
 800b9d6:	b29a      	uxth	r2, r3
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b9de:	e023      	b.n	800ba28 <HAL_SPI_Transmit+0x1d0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b9e0:	f7f8 fb0e 	bl	8004000 <HAL_GetTick>
 800b9e4:	4602      	mov	r2, r0
 800b9e6:	693b      	ldr	r3, [r7, #16]
 800b9e8:	1ad3      	subs	r3, r2, r3
 800b9ea:	683a      	ldr	r2, [r7, #0]
 800b9ec:	429a      	cmp	r2, r3
 800b9ee:	d803      	bhi.n	800b9f8 <HAL_SPI_Transmit+0x1a0>
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9f6:	d102      	bne.n	800b9fe <HAL_SPI_Transmit+0x1a6>
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d114      	bne.n	800ba28 <HAL_SPI_Transmit+0x1d0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b9fe:	68f8      	ldr	r0, [r7, #12]
 800ba00:	f000 faea 	bl	800bfd8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ba0a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	2201      	movs	r2, #1
 800ba18:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800ba24:	2303      	movs	r3, #3
 800ba26:	e128      	b.n	800bc7a <HAL_SPI_Transmit+0x422>
    while (hspi->TxXferCount > 0UL)
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ba2e:	b29b      	uxth	r3, r3
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d1b9      	bne.n	800b9a8 <HAL_SPI_Transmit+0x150>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800ba34:	e0fb      	b.n	800bc2e <HAL_SPI_Transmit+0x3d6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	68db      	ldr	r3, [r3, #12]
 800ba3a:	2b07      	cmp	r3, #7
 800ba3c:	f240 80f0 	bls.w	800bc20 <HAL_SPI_Transmit+0x3c8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ba40:	e05d      	b.n	800bafe <HAL_SPI_Transmit+0x2a6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	695b      	ldr	r3, [r3, #20]
 800ba48:	f003 0302 	and.w	r3, r3, #2
 800ba4c:	2b02      	cmp	r3, #2
 800ba4e:	d132      	bne.n	800bab6 <HAL_SPI_Transmit+0x25e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ba56:	b29b      	uxth	r3, r3
 800ba58:	2b01      	cmp	r3, #1
 800ba5a:	d918      	bls.n	800ba8e <HAL_SPI_Transmit+0x236>
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d014      	beq.n	800ba8e <HAL_SPI_Transmit+0x236>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	6812      	ldr	r2, [r2, #0]
 800ba6e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba74:	1d1a      	adds	r2, r3, #4
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ba80:	b29b      	uxth	r3, r3
 800ba82:	3b02      	subs	r3, #2
 800ba84:	b29a      	uxth	r2, r3
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ba8c:	e037      	b.n	800bafe <HAL_SPI_Transmit+0x2a6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba92:	881a      	ldrh	r2, [r3, #0]
 800ba94:	697b      	ldr	r3, [r7, #20]
 800ba96:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba9c:	1c9a      	adds	r2, r3, #2
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800baa8:	b29b      	uxth	r3, r3
 800baaa:	3b01      	subs	r3, #1
 800baac:	b29a      	uxth	r2, r3
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bab4:	e023      	b.n	800bafe <HAL_SPI_Transmit+0x2a6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bab6:	f7f8 faa3 	bl	8004000 <HAL_GetTick>
 800baba:	4602      	mov	r2, r0
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	1ad3      	subs	r3, r2, r3
 800bac0:	683a      	ldr	r2, [r7, #0]
 800bac2:	429a      	cmp	r2, r3
 800bac4:	d803      	bhi.n	800bace <HAL_SPI_Transmit+0x276>
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bacc:	d102      	bne.n	800bad4 <HAL_SPI_Transmit+0x27c>
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d114      	bne.n	800bafe <HAL_SPI_Transmit+0x2a6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bad4:	68f8      	ldr	r0, [r7, #12]
 800bad6:	f000 fa7f 	bl	800bfd8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bae0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	2201      	movs	r2, #1
 800baee:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	2200      	movs	r2, #0
 800baf6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800bafa:	2303      	movs	r3, #3
 800bafc:	e0bd      	b.n	800bc7a <HAL_SPI_Transmit+0x422>
    while (hspi->TxXferCount > 0UL)
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bb04:	b29b      	uxth	r3, r3
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d19b      	bne.n	800ba42 <HAL_SPI_Transmit+0x1ea>
 800bb0a:	e090      	b.n	800bc2e <HAL_SPI_Transmit+0x3d6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	695b      	ldr	r3, [r3, #20]
 800bb12:	f003 0302 	and.w	r3, r3, #2
 800bb16:	2b02      	cmp	r3, #2
 800bb18:	d15e      	bne.n	800bbd8 <HAL_SPI_Transmit+0x380>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bb20:	b29b      	uxth	r3, r3
 800bb22:	2b03      	cmp	r3, #3
 800bb24:	d918      	bls.n	800bb58 <HAL_SPI_Transmit+0x300>
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb2a:	2b40      	cmp	r3, #64	@ 0x40
 800bb2c:	d914      	bls.n	800bb58 <HAL_SPI_Transmit+0x300>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	6812      	ldr	r2, [r2, #0]
 800bb38:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb3e:	1d1a      	adds	r2, r3, #4
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bb4a:	b29b      	uxth	r3, r3
 800bb4c:	3b04      	subs	r3, #4
 800bb4e:	b29a      	uxth	r2, r3
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bb56:	e063      	b.n	800bc20 <HAL_SPI_Transmit+0x3c8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bb5e:	b29b      	uxth	r3, r3
 800bb60:	2b01      	cmp	r3, #1
 800bb62:	d917      	bls.n	800bb94 <HAL_SPI_Transmit+0x33c>
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d013      	beq.n	800bb94 <HAL_SPI_Transmit+0x33c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb70:	881a      	ldrh	r2, [r3, #0]
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb7a:	1c9a      	adds	r2, r3, #2
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bb86:	b29b      	uxth	r3, r3
 800bb88:	3b02      	subs	r3, #2
 800bb8a:	b29a      	uxth	r2, r3
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bb92:	e045      	b.n	800bc20 <HAL_SPI_Transmit+0x3c8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	3320      	adds	r3, #32
 800bb9e:	7812      	ldrb	r2, [r2, #0]
 800bba0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bba6:	1c5a      	adds	r2, r3, #1
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bbb2:	b29b      	uxth	r3, r3
 800bbb4:	3b01      	subs	r3, #1
 800bbb6:	b29a      	uxth	r2, r3
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bbbe:	e02f      	b.n	800bc20 <HAL_SPI_Transmit+0x3c8>
 800bbc0:	40013000 	.word	0x40013000
 800bbc4:	50013000 	.word	0x50013000
 800bbc8:	40003800 	.word	0x40003800
 800bbcc:	50003800 	.word	0x50003800
 800bbd0:	40003c00 	.word	0x40003c00
 800bbd4:	50003c00 	.word	0x50003c00
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bbd8:	f7f8 fa12 	bl	8004000 <HAL_GetTick>
 800bbdc:	4602      	mov	r2, r0
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	1ad3      	subs	r3, r2, r3
 800bbe2:	683a      	ldr	r2, [r7, #0]
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	d803      	bhi.n	800bbf0 <HAL_SPI_Transmit+0x398>
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbee:	d102      	bne.n	800bbf6 <HAL_SPI_Transmit+0x39e>
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d114      	bne.n	800bc20 <HAL_SPI_Transmit+0x3c8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bbf6:	68f8      	ldr	r0, [r7, #12]
 800bbf8:	f000 f9ee 	bl	800bfd8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bc02:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	2201      	movs	r2, #1
 800bc10:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	2200      	movs	r2, #0
 800bc18:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800bc1c:	2303      	movs	r3, #3
 800bc1e:	e02c      	b.n	800bc7a <HAL_SPI_Transmit+0x422>
    while (hspi->TxXferCount > 0UL)
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bc26:	b29b      	uxth	r3, r3
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	f47f af6f 	bne.w	800bb0c <HAL_SPI_Transmit+0x2b4>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800bc2e:	693b      	ldr	r3, [r7, #16]
 800bc30:	9300      	str	r3, [sp, #0]
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	2200      	movs	r2, #0
 800bc36:	2108      	movs	r1, #8
 800bc38:	68f8      	ldr	r0, [r7, #12]
 800bc3a:	f000 fa6d 	bl	800c118 <SPI_WaitOnFlagUntilTimeout>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d007      	beq.n	800bc54 <HAL_SPI_Transmit+0x3fc>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bc4a:	f043 0220 	orr.w	r2, r3, #32
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bc54:	68f8      	ldr	r0, [r7, #12]
 800bc56:	f000 f9bf 	bl	800bfd8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	2201      	movs	r2, #1
 800bc5e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	2200      	movs	r2, #0
 800bc66:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d001      	beq.n	800bc78 <HAL_SPI_Transmit+0x420>
  {
    return HAL_ERROR;
 800bc74:	2301      	movs	r3, #1
 800bc76:	e000      	b.n	800bc7a <HAL_SPI_Transmit+0x422>
  }
  else
  {
    return HAL_OK;
 800bc78:	2300      	movs	r3, #0
  }
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3718      	adds	r7, #24
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}
 800bc82:	bf00      	nop

0800bc84 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b086      	sub	sp, #24
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	60f8      	str	r0, [r7, #12]
 800bc8c:	60b9      	str	r1, [r7, #8]
 800bc8e:	603b      	str	r3, [r7, #0]
 800bc90:	4613      	mov	r3, r2
 800bc92:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	3330      	adds	r3, #48	@ 0x30
 800bc9a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bc9c:	f7f8 f9b0 	bl	8004000 <HAL_GetTick>
 800bca0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800bca8:	b2db      	uxtb	r3, r3
 800bcaa:	2b01      	cmp	r3, #1
 800bcac:	d001      	beq.n	800bcb2 <HAL_SPI_Receive+0x2e>
  {
    return HAL_BUSY;
 800bcae:	2302      	movs	r3, #2
 800bcb0:	e181      	b.n	800bfb6 <HAL_SPI_Receive+0x332>
  }

  if ((pData == NULL) || (Size == 0UL))
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d002      	beq.n	800bcbe <HAL_SPI_Receive+0x3a>
 800bcb8:	88fb      	ldrh	r3, [r7, #6]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d101      	bne.n	800bcc2 <HAL_SPI_Receive+0x3e>
  {
    return HAL_ERROR;
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	e179      	b.n	800bfb6 <HAL_SPI_Receive+0x332>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800bcc8:	2b01      	cmp	r3, #1
 800bcca:	d101      	bne.n	800bcd0 <HAL_SPI_Receive+0x4c>
 800bccc:	2302      	movs	r3, #2
 800bcce:	e172      	b.n	800bfb6 <HAL_SPI_Receive+0x332>
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	2201      	movs	r2, #1
 800bcd4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	2204      	movs	r2, #4
 800bcdc:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	2200      	movs	r2, #0
 800bce4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	68ba      	ldr	r2, [r7, #8]
 800bcec:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	88fa      	ldrh	r2, [r7, #6]
 800bcf2:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	88fa      	ldrh	r2, [r7, #6]
 800bcfa:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	2200      	movs	r2, #0
 800bd02:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	2200      	movs	r2, #0
 800bd08:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	2200      	movs	r2, #0
 800bd18:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	689b      	ldr	r3, [r3, #8]
 800bd24:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800bd28:	d108      	bne.n	800bd3c <HAL_SPI_Receive+0xb8>
  {
    SPI_1LINE_RX(hspi);
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	681a      	ldr	r2, [r3, #0]
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800bd38:	601a      	str	r2, [r3, #0]
 800bd3a:	e009      	b.n	800bd50 <HAL_SPI_Receive+0xcc>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	68db      	ldr	r3, [r3, #12]
 800bd42:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800bd4e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	0c1b      	lsrs	r3, r3, #16
 800bd58:	041b      	lsls	r3, r3, #16
 800bd5a:	88f9      	ldrh	r1, [r7, #6]
 800bd5c:	68fa      	ldr	r2, [r7, #12]
 800bd5e:	6812      	ldr	r2, [r2, #0]
 800bd60:	430b      	orrs	r3, r1
 800bd62:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	681a      	ldr	r2, [r3, #0]
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f042 0201 	orr.w	r2, r2, #1
 800bd72:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	685b      	ldr	r3, [r3, #4]
 800bd78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bd7c:	d107      	bne.n	800bd8e <HAL_SPI_Receive+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	681a      	ldr	r2, [r3, #0]
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bd8c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	68db      	ldr	r3, [r3, #12]
 800bd92:	2b0f      	cmp	r3, #15
 800bd94:	d966      	bls.n	800be64 <HAL_SPI_Receive+0x1e0>
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	4a89      	ldr	r2, [pc, #548]	@ (800bfc0 <HAL_SPI_Receive+0x33c>)
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	d05a      	beq.n	800be56 <HAL_SPI_Receive+0x1d2>
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	4a87      	ldr	r2, [pc, #540]	@ (800bfc4 <HAL_SPI_Receive+0x340>)
 800bda6:	4293      	cmp	r3, r2
 800bda8:	d055      	beq.n	800be56 <HAL_SPI_Receive+0x1d2>
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	4a86      	ldr	r2, [pc, #536]	@ (800bfc8 <HAL_SPI_Receive+0x344>)
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d050      	beq.n	800be56 <HAL_SPI_Receive+0x1d2>
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	4a84      	ldr	r2, [pc, #528]	@ (800bfcc <HAL_SPI_Receive+0x348>)
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	d04b      	beq.n	800be56 <HAL_SPI_Receive+0x1d2>
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	4a83      	ldr	r2, [pc, #524]	@ (800bfd0 <HAL_SPI_Receive+0x34c>)
 800bdc4:	4293      	cmp	r3, r2
 800bdc6:	d046      	beq.n	800be56 <HAL_SPI_Receive+0x1d2>
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	4a81      	ldr	r2, [pc, #516]	@ (800bfd4 <HAL_SPI_Receive+0x350>)
 800bdce:	4293      	cmp	r3, r2
 800bdd0:	d148      	bne.n	800be64 <HAL_SPI_Receive+0x1e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800bdd2:	e040      	b.n	800be56 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	695a      	ldr	r2, [r3, #20]
 800bdda:	f248 0308 	movw	r3, #32776	@ 0x8008
 800bdde:	4013      	ands	r3, r2
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d014      	beq.n	800be0e <HAL_SPI_Receive+0x18a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	681a      	ldr	r2, [r3, #0]
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bdec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800bdee:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bdf4:	1d1a      	adds	r2, r3, #4
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800be00:	b29b      	uxth	r3, r3
 800be02:	3b01      	subs	r3, #1
 800be04:	b29a      	uxth	r2, r3
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800be0c:	e023      	b.n	800be56 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800be0e:	f7f8 f8f7 	bl	8004000 <HAL_GetTick>
 800be12:	4602      	mov	r2, r0
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	1ad3      	subs	r3, r2, r3
 800be18:	683a      	ldr	r2, [r7, #0]
 800be1a:	429a      	cmp	r2, r3
 800be1c:	d803      	bhi.n	800be26 <HAL_SPI_Receive+0x1a2>
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be24:	d102      	bne.n	800be2c <HAL_SPI_Receive+0x1a8>
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d114      	bne.n	800be56 <HAL_SPI_Receive+0x1d2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800be2c:	68f8      	ldr	r0, [r7, #12]
 800be2e:	f000 f8d3 	bl	800bfd8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800be38:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	2201      	movs	r2, #1
 800be46:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	2200      	movs	r2, #0
 800be4e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800be52:	2303      	movs	r3, #3
 800be54:	e0af      	b.n	800bfb6 <HAL_SPI_Receive+0x332>
    while (hspi->RxXferCount > 0UL)
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800be5c:	b29b      	uxth	r3, r3
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d1b8      	bne.n	800bdd4 <HAL_SPI_Receive+0x150>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800be62:	e095      	b.n	800bf90 <HAL_SPI_Receive+0x30c>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	68db      	ldr	r3, [r3, #12]
 800be68:	2b07      	cmp	r3, #7
 800be6a:	f240 808b 	bls.w	800bf84 <HAL_SPI_Receive+0x300>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800be6e:	e03f      	b.n	800bef0 <HAL_SPI_Receive+0x26c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	695b      	ldr	r3, [r3, #20]
 800be76:	f003 0301 	and.w	r3, r3, #1
 800be7a:	2b01      	cmp	r3, #1
 800be7c:	d114      	bne.n	800bea8 <HAL_SPI_Receive+0x224>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be82:	697a      	ldr	r2, [r7, #20]
 800be84:	8812      	ldrh	r2, [r2, #0]
 800be86:	b292      	uxth	r2, r2
 800be88:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be8e:	1c9a      	adds	r2, r3, #2
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800be9a:	b29b      	uxth	r3, r3
 800be9c:	3b01      	subs	r3, #1
 800be9e:	b29a      	uxth	r2, r3
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800bea6:	e023      	b.n	800bef0 <HAL_SPI_Receive+0x26c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bea8:	f7f8 f8aa 	bl	8004000 <HAL_GetTick>
 800beac:	4602      	mov	r2, r0
 800beae:	693b      	ldr	r3, [r7, #16]
 800beb0:	1ad3      	subs	r3, r2, r3
 800beb2:	683a      	ldr	r2, [r7, #0]
 800beb4:	429a      	cmp	r2, r3
 800beb6:	d803      	bhi.n	800bec0 <HAL_SPI_Receive+0x23c>
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bebe:	d102      	bne.n	800bec6 <HAL_SPI_Receive+0x242>
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d114      	bne.n	800bef0 <HAL_SPI_Receive+0x26c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bec6:	68f8      	ldr	r0, [r7, #12]
 800bec8:	f000 f886 	bl	800bfd8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bed2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	2201      	movs	r2, #1
 800bee0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	2200      	movs	r2, #0
 800bee8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800beec:	2303      	movs	r3, #3
 800beee:	e062      	b.n	800bfb6 <HAL_SPI_Receive+0x332>
    while (hspi->RxXferCount > 0UL)
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800bef6:	b29b      	uxth	r3, r3
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d1b9      	bne.n	800be70 <HAL_SPI_Receive+0x1ec>
 800befc:	e048      	b.n	800bf90 <HAL_SPI_Receive+0x30c>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	695b      	ldr	r3, [r3, #20]
 800bf04:	f003 0301 	and.w	r3, r3, #1
 800bf08:	2b01      	cmp	r3, #1
 800bf0a:	d117      	bne.n	800bf3c <HAL_SPI_Receive+0x2b8>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf18:	7812      	ldrb	r2, [r2, #0]
 800bf1a:	b2d2      	uxtb	r2, r2
 800bf1c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf22:	1c5a      	adds	r2, r3, #1
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800bf2e:	b29b      	uxth	r3, r3
 800bf30:	3b01      	subs	r3, #1
 800bf32:	b29a      	uxth	r2, r3
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800bf3a:	e023      	b.n	800bf84 <HAL_SPI_Receive+0x300>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bf3c:	f7f8 f860 	bl	8004000 <HAL_GetTick>
 800bf40:	4602      	mov	r2, r0
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	1ad3      	subs	r3, r2, r3
 800bf46:	683a      	ldr	r2, [r7, #0]
 800bf48:	429a      	cmp	r2, r3
 800bf4a:	d803      	bhi.n	800bf54 <HAL_SPI_Receive+0x2d0>
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf52:	d102      	bne.n	800bf5a <HAL_SPI_Receive+0x2d6>
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d114      	bne.n	800bf84 <HAL_SPI_Receive+0x300>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bf5a:	68f8      	ldr	r0, [r7, #12]
 800bf5c:	f000 f83c 	bl	800bfd8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bf66:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	2201      	movs	r2, #1
 800bf74:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800bf80:	2303      	movs	r3, #3
 800bf82:	e018      	b.n	800bfb6 <HAL_SPI_Receive+0x332>
    while (hspi->RxXferCount > 0UL)
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800bf8a:	b29b      	uxth	r3, r3
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d1b6      	bne.n	800befe <HAL_SPI_Receive+0x27a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bf90:	68f8      	ldr	r0, [r7, #12]
 800bf92:	f000 f821 	bl	800bfd8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	2201      	movs	r2, #1
 800bf9a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d001      	beq.n	800bfb4 <HAL_SPI_Receive+0x330>
  {
    return HAL_ERROR;
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	e000      	b.n	800bfb6 <HAL_SPI_Receive+0x332>
  }
  else
  {
    return HAL_OK;
 800bfb4:	2300      	movs	r3, #0
  }
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	3718      	adds	r7, #24
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bd80      	pop	{r7, pc}
 800bfbe:	bf00      	nop
 800bfc0:	40013000 	.word	0x40013000
 800bfc4:	50013000 	.word	0x50013000
 800bfc8:	40003800 	.word	0x40003800
 800bfcc:	50003800 	.word	0x50003800
 800bfd0:	40003c00 	.word	0x40003c00
 800bfd4:	50003c00 	.word	0x50003c00

0800bfd8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b085      	sub	sp, #20
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	695b      	ldr	r3, [r3, #20]
 800bfe6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	699a      	ldr	r2, [r3, #24]
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f042 0208 	orr.w	r2, r2, #8
 800bff6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	699a      	ldr	r2, [r3, #24]
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f042 0210 	orr.w	r2, r2, #16
 800c006:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	681a      	ldr	r2, [r3, #0]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f022 0201 	bic.w	r2, r2, #1
 800c016:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	691b      	ldr	r3, [r3, #16]
 800c01e:	687a      	ldr	r2, [r7, #4]
 800c020:	6812      	ldr	r2, [r2, #0]
 800c022:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 800c026:	f023 0303 	bic.w	r3, r3, #3
 800c02a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	689a      	ldr	r2, [r3, #8]
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800c03a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800c042:	b2db      	uxtb	r3, r3
 800c044:	2b04      	cmp	r3, #4
 800c046:	d014      	beq.n	800c072 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	f003 0320 	and.w	r3, r3, #32
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d00f      	beq.n	800c072 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c058:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	699a      	ldr	r2, [r3, #24]
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	f042 0220 	orr.w	r2, r2, #32
 800c070:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800c078:	b2db      	uxtb	r3, r3
 800c07a:	2b03      	cmp	r3, #3
 800c07c:	d014      	beq.n	800c0a8 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c084:	2b00      	cmp	r3, #0
 800c086:	d00f      	beq.n	800c0a8 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c08e:	f043 0204 	orr.w	r2, r3, #4
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	699a      	ldr	r2, [r3, #24]
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c0a6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d00f      	beq.n	800c0d2 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c0b8:	f043 0201 	orr.w	r2, r3, #1
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	699a      	ldr	r2, [r3, #24]
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c0d0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d00f      	beq.n	800c0fc <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c0e2:	f043 0208 	orr.w	r2, r3, #8
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	699a      	ldr	r2, [r3, #24]
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c0fa:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2200      	movs	r2, #0
 800c100:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2200      	movs	r2, #0
 800c108:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800c10c:	bf00      	nop
 800c10e:	3714      	adds	r7, #20
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr

0800c118 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b084      	sub	sp, #16
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	60f8      	str	r0, [r7, #12]
 800c120:	60b9      	str	r1, [r7, #8]
 800c122:	603b      	str	r3, [r7, #0]
 800c124:	4613      	mov	r3, r2
 800c126:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c128:	e010      	b.n	800c14c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c12a:	f7f7 ff69 	bl	8004000 <HAL_GetTick>
 800c12e:	4602      	mov	r2, r0
 800c130:	69bb      	ldr	r3, [r7, #24]
 800c132:	1ad3      	subs	r3, r2, r3
 800c134:	683a      	ldr	r2, [r7, #0]
 800c136:	429a      	cmp	r2, r3
 800c138:	d803      	bhi.n	800c142 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c140:	d102      	bne.n	800c148 <SPI_WaitOnFlagUntilTimeout+0x30>
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d101      	bne.n	800c14c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c148:	2303      	movs	r3, #3
 800c14a:	e00f      	b.n	800c16c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	695a      	ldr	r2, [r3, #20]
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	4013      	ands	r3, r2
 800c156:	68ba      	ldr	r2, [r7, #8]
 800c158:	429a      	cmp	r2, r3
 800c15a:	bf0c      	ite	eq
 800c15c:	2301      	moveq	r3, #1
 800c15e:	2300      	movne	r3, #0
 800c160:	b2db      	uxtb	r3, r3
 800c162:	461a      	mov	r2, r3
 800c164:	79fb      	ldrb	r3, [r7, #7]
 800c166:	429a      	cmp	r2, r3
 800c168:	d0df      	beq.n	800c12a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c16a:	2300      	movs	r3, #0
}
 800c16c:	4618      	mov	r0, r3
 800c16e:	3710      	adds	r7, #16
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}

0800c174 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c174:	b480      	push	{r7}
 800c176:	b085      	sub	sp, #20
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c180:	095b      	lsrs	r3, r3, #5
 800c182:	3301      	adds	r3, #1
 800c184:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	68db      	ldr	r3, [r3, #12]
 800c18a:	3301      	adds	r3, #1
 800c18c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	3307      	adds	r3, #7
 800c192:	08db      	lsrs	r3, r3, #3
 800c194:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	68fa      	ldr	r2, [r7, #12]
 800c19a:	fb02 f303 	mul.w	r3, r2, r3
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	3714      	adds	r7, #20
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a8:	4770      	bx	lr
	...

0800c1ac <HAL_SRAM_Init>:
 * @param  ExtTiming Pointer to SRAM extended mode timing structure
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
		FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b084      	sub	sp, #16
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	60f8      	str	r0, [r7, #12]
 800c1b4:	60b9      	str	r1, [r7, #8]
 800c1b6:	607a      	str	r2, [r7, #4]
	/* Check the SRAM handle parameter */
	if (hsram == NULL)
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d101      	bne.n	800c1c2 <HAL_SRAM_Init+0x16>
	{
		return HAL_ERROR;
 800c1be:	2301      	movs	r3, #1
 800c1c0:	e03e      	b.n	800c240 <HAL_SRAM_Init+0x94>
	}

	if (hsram->State == HAL_SRAM_STATE_RESET)
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800c1c8:	b2db      	uxtb	r3, r3
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d106      	bne.n	800c1dc <HAL_SRAM_Init+0x30>
	{
		/* Allocate lock resource and initialize it */
		hsram->Lock = HAL_UNLOCKED;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

		/* Init the low level hardware */
		hsram->MspInitCallback(hsram);
#else
		/* Initialize the low level hardware (MSP) */
		HAL_SRAM_MspInit(hsram);
 800c1d6:	68f8      	ldr	r0, [r7, #12]
 800c1d8:	f7f7 fc7c 	bl	8003ad4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
	}

	/* Initialize SRAM control Interface */
	(void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	681a      	ldr	r2, [r3, #0]
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	3308      	adds	r3, #8
 800c1e4:	4619      	mov	r1, r3
 800c1e6:	4610      	mov	r0, r2
 800c1e8:	f002 fa90 	bl	800e70c <FMC_NORSRAM_Init>

	/* Initialize SRAM timing Interface */
	(void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	6818      	ldr	r0, [r3, #0]
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	689b      	ldr	r3, [r3, #8]
 800c1f4:	461a      	mov	r2, r3
 800c1f6:	68b9      	ldr	r1, [r7, #8]
 800c1f8:	f002 fb56 	bl	800e8a8 <FMC_NORSRAM_Timing_Init>

	/* Initialize SRAM extended mode timing Interface */
	(void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	6858      	ldr	r0, [r3, #4]
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	689a      	ldr	r2, [r3, #8]
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c208:	6879      	ldr	r1, [r7, #4]
 800c20a:	f002 fb9a 	bl	800e942 <FMC_NORSRAM_Extended_Timing_Init>
			hsram->Init.ExtendedMode);

	/* Enable the NORSRAM device */
	__FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	68fa      	ldr	r2, [r7, #12]
 800c214:	6892      	ldr	r2, [r2, #8]
 800c216:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	68fa      	ldr	r2, [r7, #12]
 800c220:	6892      	ldr	r2, [r2, #8]
 800c222:	f041 0101 	orr.w	r1, r1, #1
 800c226:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	/* Enable FMC Peripheral */
	__FMC_ENABLE();
 800c22a:	4b07      	ldr	r3, [pc, #28]	@ (800c248 <HAL_SRAM_Init+0x9c>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	4a06      	ldr	r2, [pc, #24]	@ (800c248 <HAL_SRAM_Init+0x9c>)
 800c230:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c234:	6013      	str	r3, [r2, #0]

	/* Initialize the SRAM controller state */
	hsram->State = HAL_SRAM_STATE_READY;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	2201      	movs	r2, #1
 800c23a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

	return HAL_OK;
 800c23e:	2300      	movs	r3, #0
}
 800c240:	4618      	mov	r0, r3
 800c242:	3710      	adds	r7, #16
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}
 800c248:	47000400 	.word	0x47000400

0800c24c <HAL_SRAM_Read_8b>:
 * @param  BufferSize Size of the buffer to read from memory
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SRAM_Read_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pDstBuffer,
		uint32_t BufferSize)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b088      	sub	sp, #32
 800c250:	af00      	add	r7, sp, #0
 800c252:	60f8      	str	r0, [r7, #12]
 800c254:	60b9      	str	r1, [r7, #8]
 800c256:	607a      	str	r2, [r7, #4]
 800c258:	603b      	str	r3, [r7, #0]
	uint32_t size;
	__IO uint8_t *psramaddress = (uint8_t *)pAddress;
 800c25a:	68bb      	ldr	r3, [r7, #8]
 800c25c:	61bb      	str	r3, [r7, #24]
	uint8_t *pdestbuff = pDstBuffer;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	617b      	str	r3, [r7, #20]
	HAL_SRAM_StateTypeDef state = hsram->State;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800c268:	74fb      	strb	r3, [r7, #19]

	/* Check the SRAM controller state */
	if ((state == HAL_SRAM_STATE_READY) || (state == HAL_SRAM_STATE_PROTECTED))
 800c26a:	7cfb      	ldrb	r3, [r7, #19]
 800c26c:	2b01      	cmp	r3, #1
 800c26e:	d002      	beq.n	800c276 <HAL_SRAM_Read_8b+0x2a>
 800c270:	7cfb      	ldrb	r3, [r7, #19]
 800c272:	2b04      	cmp	r3, #4
 800c274:	d12f      	bne.n	800c2d6 <HAL_SRAM_Read_8b+0x8a>
	{
		/* Process Locked */
		__HAL_LOCK(hsram);
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800c27c:	2b01      	cmp	r3, #1
 800c27e:	d101      	bne.n	800c284 <HAL_SRAM_Read_8b+0x38>
 800c280:	2302      	movs	r3, #2
 800c282:	e029      	b.n	800c2d8 <HAL_SRAM_Read_8b+0x8c>
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	2201      	movs	r2, #1
 800c288:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

		/* Update the SRAM controller state */
		hsram->State = HAL_SRAM_STATE_BUSY;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	2202      	movs	r2, #2
 800c290:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
		HAL_Delay(100);
 800c294:	2064      	movs	r0, #100	@ 0x64
 800c296:	f7f7 febf 	bl	8004018 <HAL_Delay>
		/* Read data from memory */
		for (size = BufferSize; size != 0U; size--)
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	61fb      	str	r3, [r7, #28]
 800c29e:	e00d      	b.n	800c2bc <HAL_SRAM_Read_8b+0x70>
		{
			*pdestbuff = *psramaddress;
 800c2a0:	69bb      	ldr	r3, [r7, #24]
 800c2a2:	781b      	ldrb	r3, [r3, #0]
 800c2a4:	b2da      	uxtb	r2, r3
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	701a      	strb	r2, [r3, #0]
			pdestbuff++;
 800c2aa:	697b      	ldr	r3, [r7, #20]
 800c2ac:	3301      	adds	r3, #1
 800c2ae:	617b      	str	r3, [r7, #20]
			psramaddress++;
 800c2b0:	69bb      	ldr	r3, [r7, #24]
 800c2b2:	3301      	adds	r3, #1
 800c2b4:	61bb      	str	r3, [r7, #24]
		for (size = BufferSize; size != 0U; size--)
 800c2b6:	69fb      	ldr	r3, [r7, #28]
 800c2b8:	3b01      	subs	r3, #1
 800c2ba:	61fb      	str	r3, [r7, #28]
 800c2bc:	69fb      	ldr	r3, [r7, #28]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d1ee      	bne.n	800c2a0 <HAL_SRAM_Read_8b+0x54>
		}

		/* Update the SRAM controller state */
		hsram->State = state;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	7cfa      	ldrb	r2, [r7, #19]
 800c2c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

		/* Process unlocked */
		__HAL_UNLOCK(hsram);
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	else
	{
		return HAL_ERROR;
	}

	return HAL_OK;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	e000      	b.n	800c2d8 <HAL_SRAM_Read_8b+0x8c>
		return HAL_ERROR;
 800c2d6:	2301      	movs	r3, #1
}
 800c2d8:	4618      	mov	r0, r3
 800c2da:	3720      	adds	r7, #32
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}

0800c2e0 <HAL_SRAM_Write_8b>:
 * @param  BufferSize Size of the buffer to write to memory
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SRAM_Write_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pSrcBuffer,
		uint32_t BufferSize)
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b089      	sub	sp, #36	@ 0x24
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	60f8      	str	r0, [r7, #12]
 800c2e8:	60b9      	str	r1, [r7, #8]
 800c2ea:	607a      	str	r2, [r7, #4]
 800c2ec:	603b      	str	r3, [r7, #0]
	uint32_t size;
	__IO uint8_t *psramaddress = (uint8_t *)pAddress;
 800c2ee:	68bb      	ldr	r3, [r7, #8]
 800c2f0:	61bb      	str	r3, [r7, #24]
	uint8_t *psrcbuff = pSrcBuffer;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	617b      	str	r3, [r7, #20]

	/* Check the SRAM controller state */
	if (hsram->State == HAL_SRAM_STATE_READY)
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800c2fc:	b2db      	uxtb	r3, r3
 800c2fe:	2b01      	cmp	r3, #1
 800c300:	d12b      	bne.n	800c35a <HAL_SRAM_Write_8b+0x7a>
	{
		/* Process Locked */
		__HAL_LOCK(hsram);
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800c308:	2b01      	cmp	r3, #1
 800c30a:	d101      	bne.n	800c310 <HAL_SRAM_Write_8b+0x30>
 800c30c:	2302      	movs	r3, #2
 800c30e:	e025      	b.n	800c35c <HAL_SRAM_Write_8b+0x7c>
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	2201      	movs	r2, #1
 800c314:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

		/* Update the SRAM controller state */
		hsram->State = HAL_SRAM_STATE_BUSY;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	2202      	movs	r2, #2
 800c31c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

		/* Write data to memory */
		for (size = BufferSize; size != 0U; size--)
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	61fb      	str	r3, [r7, #28]
 800c324:	e00c      	b.n	800c340 <HAL_SRAM_Write_8b+0x60>
		{
			*psramaddress = *psrcbuff;
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	781a      	ldrb	r2, [r3, #0]
 800c32a:	69bb      	ldr	r3, [r7, #24]
 800c32c:	701a      	strb	r2, [r3, #0]
			psrcbuff++;
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	3301      	adds	r3, #1
 800c332:	617b      	str	r3, [r7, #20]
			psramaddress++;
 800c334:	69bb      	ldr	r3, [r7, #24]
 800c336:	3301      	adds	r3, #1
 800c338:	61bb      	str	r3, [r7, #24]
		for (size = BufferSize; size != 0U; size--)
 800c33a:	69fb      	ldr	r3, [r7, #28]
 800c33c:	3b01      	subs	r3, #1
 800c33e:	61fb      	str	r3, [r7, #28]
 800c340:	69fb      	ldr	r3, [r7, #28]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d1ef      	bne.n	800c326 <HAL_SRAM_Write_8b+0x46>
		}

		/* Update the SRAM controller state */
		hsram->State = HAL_SRAM_STATE_READY;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	2201      	movs	r2, #1
 800c34a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

		/* Process unlocked */
		__HAL_UNLOCK(hsram);
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	2200      	movs	r2, #0
 800c352:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	else
	{
		return HAL_ERROR;
	}

	return HAL_OK;
 800c356:	2300      	movs	r3, #0
 800c358:	e000      	b.n	800c35c <HAL_SRAM_Write_8b+0x7c>
		return HAL_ERROR;
 800c35a:	2301      	movs	r3, #1
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3724      	adds	r7, #36	@ 0x24
 800c360:	46bd      	mov	sp, r7
 800c362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c366:	4770      	bx	lr

0800c368 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b082      	sub	sp, #8
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d101      	bne.n	800c37a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c376:	2301      	movs	r3, #1
 800c378:	e042      	b.n	800c400 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c380:	2b00      	cmp	r3, #0
 800c382:	d106      	bne.n	800c392 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2200      	movs	r2, #0
 800c388:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f7f7 f917 	bl	80035c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2224      	movs	r2, #36	@ 0x24
 800c396:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	681a      	ldr	r2, [r3, #0]
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f022 0201 	bic.w	r2, r2, #1
 800c3a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d002      	beq.n	800c3b8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f000 fe2a 	bl	800d00c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	f000 fc39 	bl	800cc30 <UART_SetConfig>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	2b01      	cmp	r3, #1
 800c3c2:	d101      	bne.n	800c3c8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	e01b      	b.n	800c400 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	685a      	ldr	r2, [r3, #4]
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c3d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	689a      	ldr	r2, [r3, #8]
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c3e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	681a      	ldr	r2, [r3, #0]
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	f042 0201 	orr.w	r2, r2, #1
 800c3f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c3f8:	6878      	ldr	r0, [r7, #4]
 800c3fa:	f000 fea9 	bl	800d150 <UART_CheckIdleState>
 800c3fe:	4603      	mov	r3, r0
}
 800c400:	4618      	mov	r0, r3
 800c402:	3708      	adds	r7, #8
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}

0800c408 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c408:	b480      	push	{r7}
 800c40a:	b091      	sub	sp, #68	@ 0x44
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	60f8      	str	r0, [r7, #12]
 800c410:	60b9      	str	r1, [r7, #8]
 800c412:	4613      	mov	r3, r2
 800c414:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c41c:	2b20      	cmp	r3, #32
 800c41e:	f040 8088 	bne.w	800c532 <HAL_UART_Transmit_IT+0x12a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d002      	beq.n	800c42e <HAL_UART_Transmit_IT+0x26>
 800c428:	88fb      	ldrh	r3, [r7, #6]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d101      	bne.n	800c432 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800c42e:	2301      	movs	r3, #1
 800c430:	e080      	b.n	800c534 <HAL_UART_Transmit_IT+0x12c>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	689b      	ldr	r3, [r3, #8]
 800c438:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c43c:	2b80      	cmp	r3, #128	@ 0x80
 800c43e:	d107      	bne.n	800c450 <HAL_UART_Transmit_IT+0x48>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	689a      	ldr	r2, [r3, #8]
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c44e:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->pTxBuffPtr  = pData;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	68ba      	ldr	r2, [r7, #8]
 800c454:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	88fa      	ldrh	r2, [r7, #6]
 800c45a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	88fa      	ldrh	r2, [r7, #6]
 800c462:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	2200      	movs	r2, #0
 800c46a:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	2200      	movs	r2, #0
 800c470:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	2221      	movs	r2, #33	@ 0x21
 800c478:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c480:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c484:	d12a      	bne.n	800c4dc <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	689b      	ldr	r3, [r3, #8]
 800c48a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c48e:	d107      	bne.n	800c4a0 <HAL_UART_Transmit_IT+0x98>
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	691b      	ldr	r3, [r3, #16]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d103      	bne.n	800c4a0 <HAL_UART_Transmit_IT+0x98>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	4a29      	ldr	r2, [pc, #164]	@ (800c540 <HAL_UART_Transmit_IT+0x138>)
 800c49c:	679a      	str	r2, [r3, #120]	@ 0x78
 800c49e:	e002      	b.n	800c4a6 <HAL_UART_Transmit_IT+0x9e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	4a28      	ldr	r2, [pc, #160]	@ (800c544 <HAL_UART_Transmit_IT+0x13c>)
 800c4a4:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	3308      	adds	r3, #8
 800c4ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4b0:	e853 3f00 	ldrex	r3, [r3]
 800c4b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c4b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c4bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	3308      	adds	r3, #8
 800c4c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c4c6:	637a      	str	r2, [r7, #52]	@ 0x34
 800c4c8:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c4cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c4ce:	e841 2300 	strex	r3, r2, [r1]
 800c4d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c4d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d1e5      	bne.n	800c4a6 <HAL_UART_Transmit_IT+0x9e>
 800c4da:	e028      	b.n	800c52e <HAL_UART_Transmit_IT+0x126>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	689b      	ldr	r3, [r3, #8]
 800c4e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c4e4:	d107      	bne.n	800c4f6 <HAL_UART_Transmit_IT+0xee>
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	691b      	ldr	r3, [r3, #16]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d103      	bne.n	800c4f6 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	4a15      	ldr	r2, [pc, #84]	@ (800c548 <HAL_UART_Transmit_IT+0x140>)
 800c4f2:	679a      	str	r2, [r3, #120]	@ 0x78
 800c4f4:	e002      	b.n	800c4fc <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	4a14      	ldr	r2, [pc, #80]	@ (800c54c <HAL_UART_Transmit_IT+0x144>)
 800c4fa:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	e853 3f00 	ldrex	r3, [r3]
 800c508:	613b      	str	r3, [r7, #16]
   return(result);
 800c50a:	693b      	ldr	r3, [r7, #16]
 800c50c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c510:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	461a      	mov	r2, r3
 800c518:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c51a:	623b      	str	r3, [r7, #32]
 800c51c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c51e:	69f9      	ldr	r1, [r7, #28]
 800c520:	6a3a      	ldr	r2, [r7, #32]
 800c522:	e841 2300 	strex	r3, r2, [r1]
 800c526:	61bb      	str	r3, [r7, #24]
   return(result);
 800c528:	69bb      	ldr	r3, [r7, #24]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d1e6      	bne.n	800c4fc <HAL_UART_Transmit_IT+0xf4>
    }

    return HAL_OK;
 800c52e:	2300      	movs	r3, #0
 800c530:	e000      	b.n	800c534 <HAL_UART_Transmit_IT+0x12c>
  }
  else
  {
    return HAL_BUSY;
 800c532:	2302      	movs	r3, #2
  }
}
 800c534:	4618      	mov	r0, r3
 800c536:	3744      	adds	r7, #68	@ 0x44
 800c538:	46bd      	mov	sp, r7
 800c53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53e:	4770      	bx	lr
 800c540:	0800d917 	.word	0x0800d917
 800c544:	0800d837 	.word	0x0800d837
 800c548:	0800d775 	.word	0x0800d775
 800c54c:	0800d6bd 	.word	0x0800d6bd

0800c550 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b08a      	sub	sp, #40	@ 0x28
 800c554:	af00      	add	r7, sp, #0
 800c556:	60f8      	str	r0, [r7, #12]
 800c558:	60b9      	str	r1, [r7, #8]
 800c55a:	4613      	mov	r3, r2
 800c55c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c564:	2b20      	cmp	r3, #32
 800c566:	d14b      	bne.n	800c600 <HAL_UART_Receive_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d002      	beq.n	800c574 <HAL_UART_Receive_IT+0x24>
 800c56e:	88fb      	ldrh	r3, [r7, #6]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d101      	bne.n	800c578 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c574:	2301      	movs	r3, #1
 800c576:	e044      	b.n	800c602 <HAL_UART_Receive_IT+0xb2>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	2200      	movs	r2, #0
 800c57c:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	689b      	ldr	r3, [r3, #8]
 800c584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c588:	2b40      	cmp	r3, #64	@ 0x40
 800c58a:	d107      	bne.n	800c59c <HAL_UART_Receive_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	689a      	ldr	r2, [r3, #8]
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c59a:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	4a1a      	ldr	r2, [pc, #104]	@ (800c60c <HAL_UART_Receive_IT+0xbc>)
 800c5a2:	4293      	cmp	r3, r2
 800c5a4:	d024      	beq.n	800c5f0 <HAL_UART_Receive_IT+0xa0>
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	4a19      	ldr	r2, [pc, #100]	@ (800c610 <HAL_UART_Receive_IT+0xc0>)
 800c5ac:	4293      	cmp	r3, r2
 800c5ae:	d01f      	beq.n	800c5f0 <HAL_UART_Receive_IT+0xa0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	685b      	ldr	r3, [r3, #4]
 800c5b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d018      	beq.n	800c5f0 <HAL_UART_Receive_IT+0xa0>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5c4:	697b      	ldr	r3, [r7, #20]
 800c5c6:	e853 3f00 	ldrex	r3, [r3]
 800c5ca:	613b      	str	r3, [r7, #16]
   return(result);
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c5d2:	627b      	str	r3, [r7, #36]	@ 0x24
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	461a      	mov	r2, r3
 800c5da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5dc:	623b      	str	r3, [r7, #32]
 800c5de:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5e0:	69f9      	ldr	r1, [r7, #28]
 800c5e2:	6a3a      	ldr	r2, [r7, #32]
 800c5e4:	e841 2300 	strex	r3, r2, [r1]
 800c5e8:	61bb      	str	r3, [r7, #24]
   return(result);
 800c5ea:	69bb      	ldr	r3, [r7, #24]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d1e6      	bne.n	800c5be <HAL_UART_Receive_IT+0x6e>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c5f0:	88fb      	ldrh	r3, [r7, #6]
 800c5f2:	461a      	mov	r2, r3
 800c5f4:	68b9      	ldr	r1, [r7, #8]
 800c5f6:	68f8      	ldr	r0, [r7, #12]
 800c5f8:	f000 fec2 	bl	800d380 <UART_Start_Receive_IT>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	e000      	b.n	800c602 <HAL_UART_Receive_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800c600:	2302      	movs	r3, #2
  }
}
 800c602:	4618      	mov	r0, r3
 800c604:	3728      	adds	r7, #40	@ 0x28
 800c606:	46bd      	mov	sp, r7
 800c608:	bd80      	pop	{r7, pc}
 800c60a:	bf00      	nop
 800c60c:	44002400 	.word	0x44002400
 800c610:	54002400 	.word	0x54002400

0800c614 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b0ae      	sub	sp, #184	@ 0xb8
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	69db      	ldr	r3, [r3, #28]
 800c622:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	689b      	ldr	r3, [r3, #8]
 800c636:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c63a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c63e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c642:	4013      	ands	r3, r2
 800c644:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 800c648:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d11b      	bne.n	800c688 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c650:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c654:	f003 0320 	and.w	r3, r3, #32
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d015      	beq.n	800c688 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c65c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c660:	f003 0320 	and.w	r3, r3, #32
 800c664:	2b00      	cmp	r3, #0
 800c666:	d105      	bne.n	800c674 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c668:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c66c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c670:	2b00      	cmp	r3, #0
 800c672:	d009      	beq.n	800c688 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c678:	2b00      	cmp	r3, #0
 800c67a:	f000 82ac 	beq.w	800cbd6 <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	4798      	blx	r3
      }
      return;
 800c686:	e2a6      	b.n	800cbd6 <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c688:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	f000 80fd 	beq.w	800c88c <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c692:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c696:	4b7a      	ldr	r3, [pc, #488]	@ (800c880 <HAL_UART_IRQHandler+0x26c>)
 800c698:	4013      	ands	r3, r2
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d106      	bne.n	800c6ac <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c69e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c6a2:	4b78      	ldr	r3, [pc, #480]	@ (800c884 <HAL_UART_IRQHandler+0x270>)
 800c6a4:	4013      	ands	r3, r2
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	f000 80f0 	beq.w	800c88c <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c6ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c6b0:	f003 0301 	and.w	r3, r3, #1
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d011      	beq.n	800c6dc <HAL_UART_IRQHandler+0xc8>
 800c6b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c6bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d00b      	beq.n	800c6dc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	2201      	movs	r2, #1
 800c6ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c6d2:	f043 0201 	orr.w	r2, r3, #1
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c6dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c6e0:	f003 0302 	and.w	r3, r3, #2
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d011      	beq.n	800c70c <HAL_UART_IRQHandler+0xf8>
 800c6e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c6ec:	f003 0301 	and.w	r3, r3, #1
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d00b      	beq.n	800c70c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	2202      	movs	r2, #2
 800c6fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c702:	f043 0204 	orr.w	r2, r3, #4
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c70c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c710:	f003 0304 	and.w	r3, r3, #4
 800c714:	2b00      	cmp	r3, #0
 800c716:	d011      	beq.n	800c73c <HAL_UART_IRQHandler+0x128>
 800c718:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c71c:	f003 0301 	and.w	r3, r3, #1
 800c720:	2b00      	cmp	r3, #0
 800c722:	d00b      	beq.n	800c73c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	2204      	movs	r2, #4
 800c72a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c732:	f043 0202 	orr.w	r2, r3, #2
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c73c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c740:	f003 0308 	and.w	r3, r3, #8
 800c744:	2b00      	cmp	r3, #0
 800c746:	d017      	beq.n	800c778 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c748:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c74c:	f003 0320 	and.w	r3, r3, #32
 800c750:	2b00      	cmp	r3, #0
 800c752:	d105      	bne.n	800c760 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c754:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c758:	4b49      	ldr	r3, [pc, #292]	@ (800c880 <HAL_UART_IRQHandler+0x26c>)
 800c75a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d00b      	beq.n	800c778 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	2208      	movs	r2, #8
 800c766:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c76e:	f043 0208 	orr.w	r2, r3, #8
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c778:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c77c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c780:	2b00      	cmp	r3, #0
 800c782:	d012      	beq.n	800c7aa <HAL_UART_IRQHandler+0x196>
 800c784:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c788:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d00c      	beq.n	800c7aa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c798:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c7a0:	f043 0220 	orr.w	r2, r3, #32
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	f000 8212 	beq.w	800cbda <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c7b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c7ba:	f003 0320 	and.w	r3, r3, #32
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d013      	beq.n	800c7ea <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c7c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c7c6:	f003 0320 	and.w	r3, r3, #32
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d105      	bne.n	800c7da <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c7ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c7d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d007      	beq.n	800c7ea <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d003      	beq.n	800c7ea <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c7f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	689b      	ldr	r3, [r3, #8]
 800c7fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7fe:	2b40      	cmp	r3, #64	@ 0x40
 800c800:	d005      	beq.n	800c80e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c802:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c806:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d02e      	beq.n	800c86c <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f000 fed8 	bl	800d5c4 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	689b      	ldr	r3, [r3, #8]
 800c81a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c81e:	2b40      	cmp	r3, #64	@ 0x40
 800c820:	d120      	bne.n	800c864 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d017      	beq.n	800c85c <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c832:	4a15      	ldr	r2, [pc, #84]	@ (800c888 <HAL_UART_IRQHandler+0x274>)
 800c834:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c83c:	4618      	mov	r0, r3
 800c83e:	f7f7 fe1b 	bl	8004478 <HAL_DMA_Abort_IT>
 800c842:	4603      	mov	r3, r0
 800c844:	2b00      	cmp	r3, #0
 800c846:	d019      	beq.n	800c87c <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c84e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c850:	687a      	ldr	r2, [r7, #4]
 800c852:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c856:	4610      	mov	r0, r2
 800c858:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c85a:	e00f      	b.n	800c87c <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f000 f9d1 	bl	800cc04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c862:	e00b      	b.n	800c87c <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c864:	6878      	ldr	r0, [r7, #4]
 800c866:	f000 f9cd 	bl	800cc04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c86a:	e007      	b.n	800c87c <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f000 f9c9 	bl	800cc04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2200      	movs	r2, #0
 800c876:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c87a:	e1ae      	b.n	800cbda <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c87c:	bf00      	nop
    return;
 800c87e:	e1ac      	b.n	800cbda <HAL_UART_IRQHandler+0x5c6>
 800c880:	10000001 	.word	0x10000001
 800c884:	04000120 	.word	0x04000120
 800c888:	0800d691 	.word	0x0800d691

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c890:	2b01      	cmp	r3, #1
 800c892:	f040 8142 	bne.w	800cb1a <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c896:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c89a:	f003 0310 	and.w	r3, r3, #16
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	f000 813b 	beq.w	800cb1a <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c8a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c8a8:	f003 0310 	and.w	r3, r3, #16
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	f000 8134 	beq.w	800cb1a <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	2210      	movs	r2, #16
 800c8b8:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	689b      	ldr	r3, [r3, #8]
 800c8c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8c4:	2b40      	cmp	r3, #64	@ 0x40
 800c8c6:	f040 80aa 	bne.w	800ca1e <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c8d4:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 800c8d8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	f000 8084 	beq.w	800c9ea <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c8e8:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800c8ec:	429a      	cmp	r2, r3
 800c8ee:	d27c      	bcs.n	800c9ea <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800c8f6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c900:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c902:	2b81      	cmp	r3, #129	@ 0x81
 800c904:	d060      	beq.n	800c9c8 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c90c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c90e:	e853 3f00 	ldrex	r3, [r3]
 800c912:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c914:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c916:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c91a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	461a      	mov	r2, r3
 800c924:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c928:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c92c:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c92e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c930:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c934:	e841 2300 	strex	r3, r2, [r1]
 800c938:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c93a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d1e2      	bne.n	800c906 <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	3308      	adds	r3, #8
 800c946:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c948:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c94a:	e853 3f00 	ldrex	r3, [r3]
 800c94e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c950:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c952:	f023 0301 	bic.w	r3, r3, #1
 800c956:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	3308      	adds	r3, #8
 800c960:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c964:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c966:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c968:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c96a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c96c:	e841 2300 	strex	r3, r2, [r1]
 800c970:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c972:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c974:	2b00      	cmp	r3, #0
 800c976:	d1e3      	bne.n	800c940 <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2220      	movs	r2, #32
 800c97c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2200      	movs	r2, #0
 800c984:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c98c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c98e:	e853 3f00 	ldrex	r3, [r3]
 800c992:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c994:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c996:	f023 0310 	bic.w	r3, r3, #16
 800c99a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	461a      	mov	r2, r3
 800c9a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c9a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c9aa:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c9ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c9b0:	e841 2300 	strex	r3, r2, [r1]
 800c9b4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c9b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d1e4      	bne.n	800c986 <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f7f7 fcdc 	bl	8004380 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2202      	movs	r2, #2
 800c9cc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c9da:	b29b      	uxth	r3, r3
 800c9dc:	1ad3      	subs	r3, r2, r3
 800c9de:	b29b      	uxth	r3, r3
 800c9e0:	4619      	mov	r1, r3
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f000 f918 	bl	800cc18 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800c9e8:	e0f9      	b.n	800cbde <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c9f0:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800c9f4:	429a      	cmp	r2, r3
 800c9f6:	f040 80f2 	bne.w	800cbde <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca02:	2b81      	cmp	r3, #129	@ 0x81
 800ca04:	f040 80eb 	bne.w	800cbde <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2202      	movs	r2, #2
 800ca0c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ca14:	4619      	mov	r1, r3
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f000 f8fe 	bl	800cc18 <HAL_UARTEx_RxEventCallback>
      return;
 800ca1c:	e0df      	b.n	800cbde <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ca2a:	b29b      	uxth	r3, r3
 800ca2c:	1ad3      	subs	r3, r2, r3
 800ca2e:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ca38:	b29b      	uxth	r3, r3
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	f000 80d1 	beq.w	800cbe2 <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 800ca40:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	f000 80cc 	beq.w	800cbe2 <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca52:	e853 3f00 	ldrex	r3, [r3]
 800ca56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ca58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ca5e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	461a      	mov	r2, r3
 800ca68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ca6c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ca6e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ca72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ca74:	e841 2300 	strex	r3, r2, [r1]
 800ca78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ca7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d1e4      	bne.n	800ca4a <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	3308      	adds	r3, #8
 800ca86:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca8a:	e853 3f00 	ldrex	r3, [r3]
 800ca8e:	623b      	str	r3, [r7, #32]
   return(result);
 800ca90:	6a3b      	ldr	r3, [r7, #32]
 800ca92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ca96:	f023 0301 	bic.w	r3, r3, #1
 800ca9a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	3308      	adds	r3, #8
 800caa4:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800caa8:	633a      	str	r2, [r7, #48]	@ 0x30
 800caaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800caae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cab0:	e841 2300 	strex	r3, r2, [r1]
 800cab4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d1e1      	bne.n	800ca80 <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2220      	movs	r2, #32
 800cac0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2200      	movs	r2, #0
 800cac8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2200      	movs	r2, #0
 800cace:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	e853 3f00 	ldrex	r3, [r3]
 800cadc:	60fb      	str	r3, [r7, #12]
   return(result);
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	f023 0310 	bic.w	r3, r3, #16
 800cae4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	461a      	mov	r2, r3
 800caee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800caf2:	61fb      	str	r3, [r7, #28]
 800caf4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caf6:	69b9      	ldr	r1, [r7, #24]
 800caf8:	69fa      	ldr	r2, [r7, #28]
 800cafa:	e841 2300 	strex	r3, r2, [r1]
 800cafe:	617b      	str	r3, [r7, #20]
   return(result);
 800cb00:	697b      	ldr	r3, [r7, #20]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d1e4      	bne.n	800cad0 <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2202      	movs	r2, #2
 800cb0a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cb0c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800cb10:	4619      	mov	r1, r3
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f000 f880 	bl	800cc18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cb18:	e063      	b.n	800cbe2 <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cb1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cb1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d00e      	beq.n	800cb44 <HAL_UART_IRQHandler+0x530>
 800cb26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d008      	beq.n	800cb44 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800cb3a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f001 fcc3 	bl	800e4c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cb42:	e051      	b.n	800cbe8 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800cb44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cb48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d014      	beq.n	800cb7a <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cb50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800cb54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d105      	bne.n	800cb68 <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cb5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d008      	beq.n	800cb7a <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d03a      	beq.n	800cbe6 <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	4798      	blx	r3
    }
    return;
 800cb78:	e035      	b.n	800cbe6 <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cb7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cb7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d009      	beq.n	800cb9a <HAL_UART_IRQHandler+0x586>
 800cb86:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800cb8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d003      	beq.n	800cb9a <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f000 ff34 	bl	800da00 <UART_EndTransmit_IT>
    return;
 800cb98:	e026      	b.n	800cbe8 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cb9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cb9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d009      	beq.n	800cbba <HAL_UART_IRQHandler+0x5a6>
 800cba6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800cbaa:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d003      	beq.n	800cbba <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f001 fc9c 	bl	800e4f0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cbb8:	e016      	b.n	800cbe8 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cbba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cbbe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d010      	beq.n	800cbe8 <HAL_UART_IRQHandler+0x5d4>
 800cbc6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	da0c      	bge.n	800cbe8 <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f001 fc84 	bl	800e4dc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cbd4:	e008      	b.n	800cbe8 <HAL_UART_IRQHandler+0x5d4>
      return;
 800cbd6:	bf00      	nop
 800cbd8:	e006      	b.n	800cbe8 <HAL_UART_IRQHandler+0x5d4>
    return;
 800cbda:	bf00      	nop
 800cbdc:	e004      	b.n	800cbe8 <HAL_UART_IRQHandler+0x5d4>
      return;
 800cbde:	bf00      	nop
 800cbe0:	e002      	b.n	800cbe8 <HAL_UART_IRQHandler+0x5d4>
      return;
 800cbe2:	bf00      	nop
 800cbe4:	e000      	b.n	800cbe8 <HAL_UART_IRQHandler+0x5d4>
    return;
 800cbe6:	bf00      	nop
  }
}
 800cbe8:	37b8      	adds	r7, #184	@ 0xb8
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}
 800cbee:	bf00      	nop

0800cbf0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b083      	sub	sp, #12
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cbf8:	bf00      	nop
 800cbfa:	370c      	adds	r7, #12
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc02:	4770      	bx	lr

0800cc04 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cc04:	b480      	push	{r7}
 800cc06:	b083      	sub	sp, #12
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cc0c:	bf00      	nop
 800cc0e:	370c      	adds	r7, #12
 800cc10:	46bd      	mov	sp, r7
 800cc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc16:	4770      	bx	lr

0800cc18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b083      	sub	sp, #12
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
 800cc20:	460b      	mov	r3, r1
 800cc22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cc24:	bf00      	nop
 800cc26:	370c      	adds	r7, #12
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2e:	4770      	bx	lr

0800cc30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cc30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cc34:	b094      	sub	sp, #80	@ 0x50
 800cc36:	af00      	add	r7, sp, #0
 800cc38:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800cc40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc42:	681a      	ldr	r2, [r3, #0]
 800cc44:	4b78      	ldr	r3, [pc, #480]	@ (800ce28 <UART_SetConfig+0x1f8>)
 800cc46:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cc48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc4a:	689a      	ldr	r2, [r3, #8]
 800cc4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc4e:	691b      	ldr	r3, [r3, #16]
 800cc50:	431a      	orrs	r2, r3
 800cc52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc54:	695b      	ldr	r3, [r3, #20]
 800cc56:	431a      	orrs	r2, r3
 800cc58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc5a:	69db      	ldr	r3, [r3, #28]
 800cc5c:	4313      	orrs	r3, r2
 800cc5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cc60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	4971      	ldr	r1, [pc, #452]	@ (800ce2c <UART_SetConfig+0x1fc>)
 800cc68:	4019      	ands	r1, r3
 800cc6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc6c:	681a      	ldr	r2, [r3, #0]
 800cc6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc70:	430b      	orrs	r3, r1
 800cc72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cc74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	685b      	ldr	r3, [r3, #4]
 800cc7a:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800cc7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc80:	68d9      	ldr	r1, [r3, #12]
 800cc82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc84:	681a      	ldr	r2, [r3, #0]
 800cc86:	ea40 0301 	orr.w	r3, r0, r1
 800cc8a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cc8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc8e:	699b      	ldr	r3, [r3, #24]
 800cc90:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cc92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc94:	681a      	ldr	r2, [r3, #0]
 800cc96:	4b64      	ldr	r3, [pc, #400]	@ (800ce28 <UART_SetConfig+0x1f8>)
 800cc98:	429a      	cmp	r2, r3
 800cc9a:	d009      	beq.n	800ccb0 <UART_SetConfig+0x80>
 800cc9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc9e:	681a      	ldr	r2, [r3, #0]
 800cca0:	4b63      	ldr	r3, [pc, #396]	@ (800ce30 <UART_SetConfig+0x200>)
 800cca2:	429a      	cmp	r2, r3
 800cca4:	d004      	beq.n	800ccb0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cca8:	6a1a      	ldr	r2, [r3, #32]
 800ccaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ccac:	4313      	orrs	r3, r2
 800ccae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ccb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	689b      	ldr	r3, [r3, #8]
 800ccb6:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800ccba:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800ccbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccc0:	681a      	ldr	r2, [r3, #0]
 800ccc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ccc4:	430b      	orrs	r3, r1
 800ccc6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ccc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccce:	f023 000f 	bic.w	r0, r3, #15
 800ccd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccd4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800ccd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccd8:	681a      	ldr	r2, [r3, #0]
 800ccda:	ea40 0301 	orr.w	r3, r0, r1
 800ccde:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cce2:	681a      	ldr	r2, [r3, #0]
 800cce4:	4b53      	ldr	r3, [pc, #332]	@ (800ce34 <UART_SetConfig+0x204>)
 800cce6:	429a      	cmp	r2, r3
 800cce8:	d102      	bne.n	800ccf0 <UART_SetConfig+0xc0>
 800ccea:	2301      	movs	r3, #1
 800ccec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ccee:	e066      	b.n	800cdbe <UART_SetConfig+0x18e>
 800ccf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccf2:	681a      	ldr	r2, [r3, #0]
 800ccf4:	4b50      	ldr	r3, [pc, #320]	@ (800ce38 <UART_SetConfig+0x208>)
 800ccf6:	429a      	cmp	r2, r3
 800ccf8:	d102      	bne.n	800cd00 <UART_SetConfig+0xd0>
 800ccfa:	2302      	movs	r3, #2
 800ccfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ccfe:	e05e      	b.n	800cdbe <UART_SetConfig+0x18e>
 800cd00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd02:	681a      	ldr	r2, [r3, #0]
 800cd04:	4b4d      	ldr	r3, [pc, #308]	@ (800ce3c <UART_SetConfig+0x20c>)
 800cd06:	429a      	cmp	r2, r3
 800cd08:	d102      	bne.n	800cd10 <UART_SetConfig+0xe0>
 800cd0a:	2304      	movs	r3, #4
 800cd0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cd0e:	e056      	b.n	800cdbe <UART_SetConfig+0x18e>
 800cd10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd12:	681a      	ldr	r2, [r3, #0]
 800cd14:	4b4a      	ldr	r3, [pc, #296]	@ (800ce40 <UART_SetConfig+0x210>)
 800cd16:	429a      	cmp	r2, r3
 800cd18:	d102      	bne.n	800cd20 <UART_SetConfig+0xf0>
 800cd1a:	2308      	movs	r3, #8
 800cd1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cd1e:	e04e      	b.n	800cdbe <UART_SetConfig+0x18e>
 800cd20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd22:	681a      	ldr	r2, [r3, #0]
 800cd24:	4b47      	ldr	r3, [pc, #284]	@ (800ce44 <UART_SetConfig+0x214>)
 800cd26:	429a      	cmp	r2, r3
 800cd28:	d102      	bne.n	800cd30 <UART_SetConfig+0x100>
 800cd2a:	2310      	movs	r3, #16
 800cd2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cd2e:	e046      	b.n	800cdbe <UART_SetConfig+0x18e>
 800cd30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd32:	681a      	ldr	r2, [r3, #0]
 800cd34:	4b44      	ldr	r3, [pc, #272]	@ (800ce48 <UART_SetConfig+0x218>)
 800cd36:	429a      	cmp	r2, r3
 800cd38:	d102      	bne.n	800cd40 <UART_SetConfig+0x110>
 800cd3a:	2320      	movs	r3, #32
 800cd3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cd3e:	e03e      	b.n	800cdbe <UART_SetConfig+0x18e>
 800cd40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd42:	681a      	ldr	r2, [r3, #0]
 800cd44:	4b41      	ldr	r3, [pc, #260]	@ (800ce4c <UART_SetConfig+0x21c>)
 800cd46:	429a      	cmp	r2, r3
 800cd48:	d102      	bne.n	800cd50 <UART_SetConfig+0x120>
 800cd4a:	2340      	movs	r3, #64	@ 0x40
 800cd4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cd4e:	e036      	b.n	800cdbe <UART_SetConfig+0x18e>
 800cd50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd52:	681a      	ldr	r2, [r3, #0]
 800cd54:	4b3e      	ldr	r3, [pc, #248]	@ (800ce50 <UART_SetConfig+0x220>)
 800cd56:	429a      	cmp	r2, r3
 800cd58:	d102      	bne.n	800cd60 <UART_SetConfig+0x130>
 800cd5a:	2380      	movs	r3, #128	@ 0x80
 800cd5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cd5e:	e02e      	b.n	800cdbe <UART_SetConfig+0x18e>
 800cd60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd62:	681a      	ldr	r2, [r3, #0]
 800cd64:	4b3b      	ldr	r3, [pc, #236]	@ (800ce54 <UART_SetConfig+0x224>)
 800cd66:	429a      	cmp	r2, r3
 800cd68:	d103      	bne.n	800cd72 <UART_SetConfig+0x142>
 800cd6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cd6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cd70:	e025      	b.n	800cdbe <UART_SetConfig+0x18e>
 800cd72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd74:	681a      	ldr	r2, [r3, #0]
 800cd76:	4b38      	ldr	r3, [pc, #224]	@ (800ce58 <UART_SetConfig+0x228>)
 800cd78:	429a      	cmp	r2, r3
 800cd7a:	d103      	bne.n	800cd84 <UART_SetConfig+0x154>
 800cd7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cd80:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cd82:	e01c      	b.n	800cdbe <UART_SetConfig+0x18e>
 800cd84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd86:	681a      	ldr	r2, [r3, #0]
 800cd88:	4b34      	ldr	r3, [pc, #208]	@ (800ce5c <UART_SetConfig+0x22c>)
 800cd8a:	429a      	cmp	r2, r3
 800cd8c:	d103      	bne.n	800cd96 <UART_SetConfig+0x166>
 800cd8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd92:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cd94:	e013      	b.n	800cdbe <UART_SetConfig+0x18e>
 800cd96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd98:	681a      	ldr	r2, [r3, #0]
 800cd9a:	4b31      	ldr	r3, [pc, #196]	@ (800ce60 <UART_SetConfig+0x230>)
 800cd9c:	429a      	cmp	r2, r3
 800cd9e:	d103      	bne.n	800cda8 <UART_SetConfig+0x178>
 800cda0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800cda4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cda6:	e00a      	b.n	800cdbe <UART_SetConfig+0x18e>
 800cda8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdaa:	681a      	ldr	r2, [r3, #0]
 800cdac:	4b1e      	ldr	r3, [pc, #120]	@ (800ce28 <UART_SetConfig+0x1f8>)
 800cdae:	429a      	cmp	r2, r3
 800cdb0:	d103      	bne.n	800cdba <UART_SetConfig+0x18a>
 800cdb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cdb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cdb8:	e001      	b.n	800cdbe <UART_SetConfig+0x18e>
 800cdba:	2300      	movs	r3, #0
 800cdbc:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cdbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdc0:	681a      	ldr	r2, [r3, #0]
 800cdc2:	4b19      	ldr	r3, [pc, #100]	@ (800ce28 <UART_SetConfig+0x1f8>)
 800cdc4:	429a      	cmp	r2, r3
 800cdc6:	d005      	beq.n	800cdd4 <UART_SetConfig+0x1a4>
 800cdc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdca:	681a      	ldr	r2, [r3, #0]
 800cdcc:	4b18      	ldr	r3, [pc, #96]	@ (800ce30 <UART_SetConfig+0x200>)
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	f040 8094 	bne.w	800cefc <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800cdd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	623b      	str	r3, [r7, #32]
 800cdda:	627a      	str	r2, [r7, #36]	@ 0x24
 800cddc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800cde0:	f7fb ff40 	bl	8008c64 <HAL_RCCEx_GetPeriphCLKFreq>
 800cde4:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800cde6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	f000 80f7 	beq.w	800cfdc <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cdee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdf2:	4a1c      	ldr	r2, [pc, #112]	@ (800ce64 <UART_SetConfig+0x234>)
 800cdf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cdf8:	461a      	mov	r2, r3
 800cdfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cdfc:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce00:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ce02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce04:	685a      	ldr	r2, [r3, #4]
 800ce06:	4613      	mov	r3, r2
 800ce08:	005b      	lsls	r3, r3, #1
 800ce0a:	4413      	add	r3, r2
 800ce0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ce0e:	429a      	cmp	r2, r3
 800ce10:	d305      	bcc.n	800ce1e <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ce12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce14:	685b      	ldr	r3, [r3, #4]
 800ce16:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ce18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	d924      	bls.n	800ce68 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800ce1e:	2301      	movs	r3, #1
 800ce20:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800ce24:	e069      	b.n	800cefa <UART_SetConfig+0x2ca>
 800ce26:	bf00      	nop
 800ce28:	44002400 	.word	0x44002400
 800ce2c:	cfff69f3 	.word	0xcfff69f3
 800ce30:	54002400 	.word	0x54002400
 800ce34:	40013800 	.word	0x40013800
 800ce38:	40004400 	.word	0x40004400
 800ce3c:	40004800 	.word	0x40004800
 800ce40:	40004c00 	.word	0x40004c00
 800ce44:	40005000 	.word	0x40005000
 800ce48:	40006400 	.word	0x40006400
 800ce4c:	40007800 	.word	0x40007800
 800ce50:	40007c00 	.word	0x40007c00
 800ce54:	40008000 	.word	0x40008000
 800ce58:	40006800 	.word	0x40006800
 800ce5c:	40006c00 	.word	0x40006c00
 800ce60:	40008400 	.word	0x40008400
 800ce64:	08011990 	.word	0x08011990
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ce68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	61bb      	str	r3, [r7, #24]
 800ce6e:	61fa      	str	r2, [r7, #28]
 800ce70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce74:	4a64      	ldr	r2, [pc, #400]	@ (800d008 <UART_SetConfig+0x3d8>)
 800ce76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce7a:	b29b      	uxth	r3, r3
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	613b      	str	r3, [r7, #16]
 800ce80:	617a      	str	r2, [r7, #20]
 800ce82:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ce86:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ce8a:	f7f3 feed 	bl	8000c68 <__aeabi_uldivmod>
 800ce8e:	4602      	mov	r2, r0
 800ce90:	460b      	mov	r3, r1
 800ce92:	4610      	mov	r0, r2
 800ce94:	4619      	mov	r1, r3
 800ce96:	f04f 0200 	mov.w	r2, #0
 800ce9a:	f04f 0300 	mov.w	r3, #0
 800ce9e:	020b      	lsls	r3, r1, #8
 800cea0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cea4:	0202      	lsls	r2, r0, #8
 800cea6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cea8:	6849      	ldr	r1, [r1, #4]
 800ceaa:	0849      	lsrs	r1, r1, #1
 800ceac:	2000      	movs	r0, #0
 800ceae:	460c      	mov	r4, r1
 800ceb0:	4605      	mov	r5, r0
 800ceb2:	eb12 0804 	adds.w	r8, r2, r4
 800ceb6:	eb43 0905 	adc.w	r9, r3, r5
 800ceba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cebc:	685b      	ldr	r3, [r3, #4]
 800cebe:	2200      	movs	r2, #0
 800cec0:	60bb      	str	r3, [r7, #8]
 800cec2:	60fa      	str	r2, [r7, #12]
 800cec4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cec8:	4640      	mov	r0, r8
 800ceca:	4649      	mov	r1, r9
 800cecc:	f7f3 fecc 	bl	8000c68 <__aeabi_uldivmod>
 800ced0:	4602      	mov	r2, r0
 800ced2:	460b      	mov	r3, r1
 800ced4:	4613      	mov	r3, r2
 800ced6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ced8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ceda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cede:	d308      	bcc.n	800cef2 <UART_SetConfig+0x2c2>
 800cee0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cee2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cee6:	d204      	bcs.n	800cef2 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800cee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ceee:	60da      	str	r2, [r3, #12]
 800cef0:	e003      	b.n	800cefa <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800cef2:	2301      	movs	r3, #1
 800cef4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800cef8:	e070      	b.n	800cfdc <UART_SetConfig+0x3ac>
 800cefa:	e06f      	b.n	800cfdc <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cefc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cefe:	69db      	ldr	r3, [r3, #28]
 800cf00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cf04:	d13c      	bne.n	800cf80 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800cf06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cf08:	2200      	movs	r2, #0
 800cf0a:	603b      	str	r3, [r7, #0]
 800cf0c:	607a      	str	r2, [r7, #4]
 800cf0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cf12:	f7fb fea7 	bl	8008c64 <HAL_RCCEx_GetPeriphCLKFreq>
 800cf16:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cf18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d05e      	beq.n	800cfdc <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cf1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf22:	4a39      	ldr	r2, [pc, #228]	@ (800d008 <UART_SetConfig+0x3d8>)
 800cf24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf28:	461a      	mov	r2, r3
 800cf2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf2c:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf30:	005a      	lsls	r2, r3, #1
 800cf32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf34:	685b      	ldr	r3, [r3, #4]
 800cf36:	085b      	lsrs	r3, r3, #1
 800cf38:	441a      	add	r2, r3
 800cf3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf3c:	685b      	ldr	r3, [r3, #4]
 800cf3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf42:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cf44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf46:	2b0f      	cmp	r3, #15
 800cf48:	d916      	bls.n	800cf78 <UART_SetConfig+0x348>
 800cf4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cf50:	d212      	bcs.n	800cf78 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cf52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf54:	b29b      	uxth	r3, r3
 800cf56:	f023 030f 	bic.w	r3, r3, #15
 800cf5a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cf5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf5e:	085b      	lsrs	r3, r3, #1
 800cf60:	b29b      	uxth	r3, r3
 800cf62:	f003 0307 	and.w	r3, r3, #7
 800cf66:	b29a      	uxth	r2, r3
 800cf68:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800cf6a:	4313      	orrs	r3, r2
 800cf6c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800cf6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800cf74:	60da      	str	r2, [r3, #12]
 800cf76:	e031      	b.n	800cfdc <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800cf78:	2301      	movs	r3, #1
 800cf7a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800cf7e:	e02d      	b.n	800cfdc <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800cf80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cf82:	2200      	movs	r2, #0
 800cf84:	469a      	mov	sl, r3
 800cf86:	4693      	mov	fp, r2
 800cf88:	4650      	mov	r0, sl
 800cf8a:	4659      	mov	r1, fp
 800cf8c:	f7fb fe6a 	bl	8008c64 <HAL_RCCEx_GetPeriphCLKFreq>
 800cf90:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800cf92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d021      	beq.n	800cfdc <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cf98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf9c:	4a1a      	ldr	r2, [pc, #104]	@ (800d008 <UART_SetConfig+0x3d8>)
 800cf9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cfa2:	461a      	mov	r2, r3
 800cfa4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cfa6:	fbb3 f2f2 	udiv	r2, r3, r2
 800cfaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfac:	685b      	ldr	r3, [r3, #4]
 800cfae:	085b      	lsrs	r3, r3, #1
 800cfb0:	441a      	add	r2, r3
 800cfb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfb4:	685b      	ldr	r3, [r3, #4]
 800cfb6:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfba:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cfbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfbe:	2b0f      	cmp	r3, #15
 800cfc0:	d909      	bls.n	800cfd6 <UART_SetConfig+0x3a6>
 800cfc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cfc8:	d205      	bcs.n	800cfd6 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cfca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfcc:	b29a      	uxth	r2, r3
 800cfce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	60da      	str	r2, [r3, #12]
 800cfd4:	e002      	b.n	800cfdc <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800cfd6:	2301      	movs	r3, #1
 800cfd8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cfdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfde:	2201      	movs	r2, #1
 800cfe0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800cfe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfe6:	2201      	movs	r2, #1
 800cfe8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cfec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfee:	2200      	movs	r2, #0
 800cff0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800cff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cff4:	2200      	movs	r2, #0
 800cff6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800cff8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800cffc:	4618      	mov	r0, r3
 800cffe:	3750      	adds	r7, #80	@ 0x50
 800d000:	46bd      	mov	sp, r7
 800d002:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d006:	bf00      	nop
 800d008:	08011990 	.word	0x08011990

0800d00c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d00c:	b480      	push	{r7}
 800d00e:	b083      	sub	sp, #12
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d018:	f003 0308 	and.w	r3, r3, #8
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d00a      	beq.n	800d036 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	685b      	ldr	r3, [r3, #4]
 800d026:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	430a      	orrs	r2, r1
 800d034:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d03a:	f003 0301 	and.w	r3, r3, #1
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d00a      	beq.n	800d058 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	685b      	ldr	r3, [r3, #4]
 800d048:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	430a      	orrs	r2, r1
 800d056:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d05c:	f003 0302 	and.w	r3, r3, #2
 800d060:	2b00      	cmp	r3, #0
 800d062:	d00a      	beq.n	800d07a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	685b      	ldr	r3, [r3, #4]
 800d06a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	430a      	orrs	r2, r1
 800d078:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d07e:	f003 0304 	and.w	r3, r3, #4
 800d082:	2b00      	cmp	r3, #0
 800d084:	d00a      	beq.n	800d09c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	685b      	ldr	r3, [r3, #4]
 800d08c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	430a      	orrs	r2, r1
 800d09a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0a0:	f003 0310 	and.w	r3, r3, #16
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d00a      	beq.n	800d0be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	689b      	ldr	r3, [r3, #8]
 800d0ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	430a      	orrs	r2, r1
 800d0bc:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0c2:	f003 0320 	and.w	r3, r3, #32
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d00a      	beq.n	800d0e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	689b      	ldr	r3, [r3, #8]
 800d0d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	430a      	orrs	r2, r1
 800d0de:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d01a      	beq.n	800d122 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	685b      	ldr	r3, [r3, #4]
 800d0f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	430a      	orrs	r2, r1
 800d100:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d106:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d10a:	d10a      	bne.n	800d122 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	685b      	ldr	r3, [r3, #4]
 800d112:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	430a      	orrs	r2, r1
 800d120:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d00a      	beq.n	800d144 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	685b      	ldr	r3, [r3, #4]
 800d134:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	430a      	orrs	r2, r1
 800d142:	605a      	str	r2, [r3, #4]
  }
}
 800d144:	bf00      	nop
 800d146:	370c      	adds	r7, #12
 800d148:	46bd      	mov	sp, r7
 800d14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14e:	4770      	bx	lr

0800d150 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b098      	sub	sp, #96	@ 0x60
 800d154:	af02      	add	r7, sp, #8
 800d156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2200      	movs	r2, #0
 800d15c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d160:	f7f6 ff4e 	bl	8004000 <HAL_GetTick>
 800d164:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	f003 0308 	and.w	r3, r3, #8
 800d170:	2b08      	cmp	r3, #8
 800d172:	d12f      	bne.n	800d1d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d174:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d178:	9300      	str	r3, [sp, #0]
 800d17a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d17c:	2200      	movs	r2, #0
 800d17e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f000 f88e 	bl	800d2a4 <UART_WaitOnFlagUntilTimeout>
 800d188:	4603      	mov	r3, r0
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d022      	beq.n	800d1d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d196:	e853 3f00 	ldrex	r3, [r3]
 800d19a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d19c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d19e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d1a2:	653b      	str	r3, [r7, #80]	@ 0x50
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	461a      	mov	r2, r3
 800d1aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d1ac:	647b      	str	r3, [r7, #68]	@ 0x44
 800d1ae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d1b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d1b4:	e841 2300 	strex	r3, r2, [r1]
 800d1b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d1ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d1e6      	bne.n	800d18e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2220      	movs	r2, #32
 800d1c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d1d0:	2303      	movs	r3, #3
 800d1d2:	e063      	b.n	800d29c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	f003 0304 	and.w	r3, r3, #4
 800d1de:	2b04      	cmp	r3, #4
 800d1e0:	d149      	bne.n	800d276 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d1e2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d1e6:	9300      	str	r3, [sp, #0]
 800d1e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f000 f857 	bl	800d2a4 <UART_WaitOnFlagUntilTimeout>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d03c      	beq.n	800d276 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d204:	e853 3f00 	ldrex	r3, [r3]
 800d208:	623b      	str	r3, [r7, #32]
   return(result);
 800d20a:	6a3b      	ldr	r3, [r7, #32]
 800d20c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d210:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	461a      	mov	r2, r3
 800d218:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d21a:	633b      	str	r3, [r7, #48]	@ 0x30
 800d21c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d21e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d220:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d222:	e841 2300 	strex	r3, r2, [r1]
 800d226:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d1e6      	bne.n	800d1fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	3308      	adds	r3, #8
 800d234:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d236:	693b      	ldr	r3, [r7, #16]
 800d238:	e853 3f00 	ldrex	r3, [r3]
 800d23c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	f023 0301 	bic.w	r3, r3, #1
 800d244:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	3308      	adds	r3, #8
 800d24c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d24e:	61fa      	str	r2, [r7, #28]
 800d250:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d252:	69b9      	ldr	r1, [r7, #24]
 800d254:	69fa      	ldr	r2, [r7, #28]
 800d256:	e841 2300 	strex	r3, r2, [r1]
 800d25a:	617b      	str	r3, [r7, #20]
   return(result);
 800d25c:	697b      	ldr	r3, [r7, #20]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d1e5      	bne.n	800d22e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	2220      	movs	r2, #32
 800d266:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	2200      	movs	r2, #0
 800d26e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d272:	2303      	movs	r3, #3
 800d274:	e012      	b.n	800d29c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	2220      	movs	r2, #32
 800d27a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	2220      	movs	r2, #32
 800d282:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	2200      	movs	r2, #0
 800d28a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2200      	movs	r2, #0
 800d290:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	2200      	movs	r2, #0
 800d296:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d29a:	2300      	movs	r3, #0
}
 800d29c:	4618      	mov	r0, r3
 800d29e:	3758      	adds	r7, #88	@ 0x58
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	bd80      	pop	{r7, pc}

0800d2a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b084      	sub	sp, #16
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	60f8      	str	r0, [r7, #12]
 800d2ac:	60b9      	str	r1, [r7, #8]
 800d2ae:	603b      	str	r3, [r7, #0]
 800d2b0:	4613      	mov	r3, r2
 800d2b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d2b4:	e04f      	b.n	800d356 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d2b6:	69bb      	ldr	r3, [r7, #24]
 800d2b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2bc:	d04b      	beq.n	800d356 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d2be:	f7f6 fe9f 	bl	8004000 <HAL_GetTick>
 800d2c2:	4602      	mov	r2, r0
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	1ad3      	subs	r3, r2, r3
 800d2c8:	69ba      	ldr	r2, [r7, #24]
 800d2ca:	429a      	cmp	r2, r3
 800d2cc:	d302      	bcc.n	800d2d4 <UART_WaitOnFlagUntilTimeout+0x30>
 800d2ce:	69bb      	ldr	r3, [r7, #24]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d101      	bne.n	800d2d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d2d4:	2303      	movs	r3, #3
 800d2d6:	e04e      	b.n	800d376 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	f003 0304 	and.w	r3, r3, #4
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d037      	beq.n	800d356 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d2e6:	68bb      	ldr	r3, [r7, #8]
 800d2e8:	2b80      	cmp	r3, #128	@ 0x80
 800d2ea:	d034      	beq.n	800d356 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d2ec:	68bb      	ldr	r3, [r7, #8]
 800d2ee:	2b40      	cmp	r3, #64	@ 0x40
 800d2f0:	d031      	beq.n	800d356 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	69db      	ldr	r3, [r3, #28]
 800d2f8:	f003 0308 	and.w	r3, r3, #8
 800d2fc:	2b08      	cmp	r3, #8
 800d2fe:	d110      	bne.n	800d322 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	2208      	movs	r2, #8
 800d306:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d308:	68f8      	ldr	r0, [r7, #12]
 800d30a:	f000 f95b 	bl	800d5c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	2208      	movs	r2, #8
 800d312:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	2200      	movs	r2, #0
 800d31a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d31e:	2301      	movs	r3, #1
 800d320:	e029      	b.n	800d376 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	69db      	ldr	r3, [r3, #28]
 800d328:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d32c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d330:	d111      	bne.n	800d356 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d33a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d33c:	68f8      	ldr	r0, [r7, #12]
 800d33e:	f000 f941 	bl	800d5c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	2220      	movs	r2, #32
 800d346:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	2200      	movs	r2, #0
 800d34e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d352:	2303      	movs	r3, #3
 800d354:	e00f      	b.n	800d376 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	69da      	ldr	r2, [r3, #28]
 800d35c:	68bb      	ldr	r3, [r7, #8]
 800d35e:	4013      	ands	r3, r2
 800d360:	68ba      	ldr	r2, [r7, #8]
 800d362:	429a      	cmp	r2, r3
 800d364:	bf0c      	ite	eq
 800d366:	2301      	moveq	r3, #1
 800d368:	2300      	movne	r3, #0
 800d36a:	b2db      	uxtb	r3, r3
 800d36c:	461a      	mov	r2, r3
 800d36e:	79fb      	ldrb	r3, [r7, #7]
 800d370:	429a      	cmp	r2, r3
 800d372:	d0a0      	beq.n	800d2b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d374:	2300      	movs	r3, #0
}
 800d376:	4618      	mov	r0, r3
 800d378:	3710      	adds	r7, #16
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd80      	pop	{r7, pc}
	...

0800d380 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d380:	b480      	push	{r7}
 800d382:	b0a3      	sub	sp, #140	@ 0x8c
 800d384:	af00      	add	r7, sp, #0
 800d386:	60f8      	str	r0, [r7, #12]
 800d388:	60b9      	str	r1, [r7, #8]
 800d38a:	4613      	mov	r3, r2
 800d38c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	68ba      	ldr	r2, [r7, #8]
 800d392:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	88fa      	ldrh	r2, [r7, #6]
 800d398:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	88fa      	ldrh	r2, [r7, #6]
 800d3a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	689b      	ldr	r3, [r3, #8]
 800d3ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d3b2:	d10e      	bne.n	800d3d2 <UART_Start_Receive_IT+0x52>
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	691b      	ldr	r3, [r3, #16]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d105      	bne.n	800d3c8 <UART_Start_Receive_IT+0x48>
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800d3c2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d3c6:	e02d      	b.n	800d424 <UART_Start_Receive_IT+0xa4>
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	22ff      	movs	r2, #255	@ 0xff
 800d3cc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d3d0:	e028      	b.n	800d424 <UART_Start_Receive_IT+0xa4>
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	689b      	ldr	r3, [r3, #8]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d10d      	bne.n	800d3f6 <UART_Start_Receive_IT+0x76>
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	691b      	ldr	r3, [r3, #16]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d104      	bne.n	800d3ec <UART_Start_Receive_IT+0x6c>
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	22ff      	movs	r2, #255	@ 0xff
 800d3e6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d3ea:	e01b      	b.n	800d424 <UART_Start_Receive_IT+0xa4>
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	227f      	movs	r2, #127	@ 0x7f
 800d3f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d3f4:	e016      	b.n	800d424 <UART_Start_Receive_IT+0xa4>
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	689b      	ldr	r3, [r3, #8]
 800d3fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d3fe:	d10d      	bne.n	800d41c <UART_Start_Receive_IT+0x9c>
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	691b      	ldr	r3, [r3, #16]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d104      	bne.n	800d412 <UART_Start_Receive_IT+0x92>
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	227f      	movs	r2, #127	@ 0x7f
 800d40c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d410:	e008      	b.n	800d424 <UART_Start_Receive_IT+0xa4>
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	223f      	movs	r2, #63	@ 0x3f
 800d416:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d41a:	e003      	b.n	800d424 <UART_Start_Receive_IT+0xa4>
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	2200      	movs	r2, #0
 800d420:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	2200      	movs	r2, #0
 800d428:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	2222      	movs	r2, #34	@ 0x22
 800d430:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	3308      	adds	r3, #8
 800d43a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d43c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d43e:	e853 3f00 	ldrex	r3, [r3]
 800d442:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800d444:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d446:	f043 0301 	orr.w	r3, r3, #1
 800d44a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	3308      	adds	r3, #8
 800d454:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800d458:	673a      	str	r2, [r7, #112]	@ 0x70
 800d45a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d45c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800d45e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800d460:	e841 2300 	strex	r3, r2, [r1]
 800d464:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800d466:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d1e3      	bne.n	800d434 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d470:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d474:	d14f      	bne.n	800d516 <UART_Start_Receive_IT+0x196>
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d47c:	88fa      	ldrh	r2, [r7, #6]
 800d47e:	429a      	cmp	r2, r3
 800d480:	d349      	bcc.n	800d516 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	689b      	ldr	r3, [r3, #8]
 800d486:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d48a:	d107      	bne.n	800d49c <UART_Start_Receive_IT+0x11c>
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	691b      	ldr	r3, [r3, #16]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d103      	bne.n	800d49c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	4a47      	ldr	r2, [pc, #284]	@ (800d5b4 <UART_Start_Receive_IT+0x234>)
 800d498:	675a      	str	r2, [r3, #116]	@ 0x74
 800d49a:	e002      	b.n	800d4a2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	4a46      	ldr	r2, [pc, #280]	@ (800d5b8 <UART_Start_Receive_IT+0x238>)
 800d4a0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	691b      	ldr	r3, [r3, #16]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d01a      	beq.n	800d4e0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4b2:	e853 3f00 	ldrex	r3, [r3]
 800d4b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d4b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d4be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	461a      	mov	r2, r3
 800d4c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d4cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d4ce:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4d0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d4d2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d4d4:	e841 2300 	strex	r3, r2, [r1]
 800d4d8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800d4da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d1e4      	bne.n	800d4aa <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	3308      	adds	r3, #8
 800d4e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4ea:	e853 3f00 	ldrex	r3, [r3]
 800d4ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d4f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d4f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	3308      	adds	r3, #8
 800d4fe:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d500:	64ba      	str	r2, [r7, #72]	@ 0x48
 800d502:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d504:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d506:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d508:	e841 2300 	strex	r3, r2, [r1]
 800d50c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d50e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d510:	2b00      	cmp	r3, #0
 800d512:	d1e5      	bne.n	800d4e0 <UART_Start_Receive_IT+0x160>
 800d514:	e046      	b.n	800d5a4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	689b      	ldr	r3, [r3, #8]
 800d51a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d51e:	d107      	bne.n	800d530 <UART_Start_Receive_IT+0x1b0>
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	691b      	ldr	r3, [r3, #16]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d103      	bne.n	800d530 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	4a24      	ldr	r2, [pc, #144]	@ (800d5bc <UART_Start_Receive_IT+0x23c>)
 800d52c:	675a      	str	r2, [r3, #116]	@ 0x74
 800d52e:	e002      	b.n	800d536 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	4a23      	ldr	r2, [pc, #140]	@ (800d5c0 <UART_Start_Receive_IT+0x240>)
 800d534:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	691b      	ldr	r3, [r3, #16]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d019      	beq.n	800d572 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d546:	e853 3f00 	ldrex	r3, [r3]
 800d54a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d54c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d54e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800d552:	677b      	str	r3, [r7, #116]	@ 0x74
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	461a      	mov	r2, r3
 800d55a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d55c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d55e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d560:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d562:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d564:	e841 2300 	strex	r3, r2, [r1]
 800d568:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d56a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d1e6      	bne.n	800d53e <UART_Start_Receive_IT+0x1be>
 800d570:	e018      	b.n	800d5a4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	e853 3f00 	ldrex	r3, [r3]
 800d57e:	613b      	str	r3, [r7, #16]
   return(result);
 800d580:	693b      	ldr	r3, [r7, #16]
 800d582:	f043 0320 	orr.w	r3, r3, #32
 800d586:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	461a      	mov	r2, r3
 800d58e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d590:	623b      	str	r3, [r7, #32]
 800d592:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d594:	69f9      	ldr	r1, [r7, #28]
 800d596:	6a3a      	ldr	r2, [r7, #32]
 800d598:	e841 2300 	strex	r3, r2, [r1]
 800d59c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d59e:	69bb      	ldr	r3, [r7, #24]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d1e6      	bne.n	800d572 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800d5a4:	2300      	movs	r3, #0
}
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	378c      	adds	r7, #140	@ 0x8c
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b0:	4770      	bx	lr
 800d5b2:	bf00      	nop
 800d5b4:	0800e151 	.word	0x0800e151
 800d5b8:	0800dde1 	.word	0x0800dde1
 800d5bc:	0800dc1d 	.word	0x0800dc1d
 800d5c0:	0800da59 	.word	0x0800da59

0800d5c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d5c4:	b480      	push	{r7}
 800d5c6:	b095      	sub	sp, #84	@ 0x54
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5d4:	e853 3f00 	ldrex	r3, [r3]
 800d5d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d5da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d5e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	461a      	mov	r2, r3
 800d5e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5ea:	643b      	str	r3, [r7, #64]	@ 0x40
 800d5ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d5f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d5f2:	e841 2300 	strex	r3, r2, [r1]
 800d5f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d5f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d1e6      	bne.n	800d5cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	3308      	adds	r3, #8
 800d604:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d606:	6a3b      	ldr	r3, [r7, #32]
 800d608:	e853 3f00 	ldrex	r3, [r3]
 800d60c:	61fb      	str	r3, [r7, #28]
   return(result);
 800d60e:	69fb      	ldr	r3, [r7, #28]
 800d610:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d614:	f023 0301 	bic.w	r3, r3, #1
 800d618:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	3308      	adds	r3, #8
 800d620:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d622:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d624:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d626:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d628:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d62a:	e841 2300 	strex	r3, r2, [r1]
 800d62e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d632:	2b00      	cmp	r3, #0
 800d634:	d1e3      	bne.n	800d5fe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d63a:	2b01      	cmp	r3, #1
 800d63c:	d118      	bne.n	800d670 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	e853 3f00 	ldrex	r3, [r3]
 800d64a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d64c:	68bb      	ldr	r3, [r7, #8]
 800d64e:	f023 0310 	bic.w	r3, r3, #16
 800d652:	647b      	str	r3, [r7, #68]	@ 0x44
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	461a      	mov	r2, r3
 800d65a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d65c:	61bb      	str	r3, [r7, #24]
 800d65e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d660:	6979      	ldr	r1, [r7, #20]
 800d662:	69ba      	ldr	r2, [r7, #24]
 800d664:	e841 2300 	strex	r3, r2, [r1]
 800d668:	613b      	str	r3, [r7, #16]
   return(result);
 800d66a:	693b      	ldr	r3, [r7, #16]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d1e6      	bne.n	800d63e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2220      	movs	r2, #32
 800d674:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	2200      	movs	r2, #0
 800d67c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2200      	movs	r2, #0
 800d682:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d684:	bf00      	nop
 800d686:	3754      	adds	r7, #84	@ 0x54
 800d688:	46bd      	mov	sp, r7
 800d68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68e:	4770      	bx	lr

0800d690 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b084      	sub	sp, #16
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d69c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d6ae:	68f8      	ldr	r0, [r7, #12]
 800d6b0:	f7ff faa8 	bl	800cc04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d6b4:	bf00      	nop
 800d6b6:	3710      	adds	r7, #16
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}

0800d6bc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d6bc:	b480      	push	{r7}
 800d6be:	b08f      	sub	sp, #60	@ 0x3c
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d6ca:	2b21      	cmp	r3, #33	@ 0x21
 800d6cc:	d14c      	bne.n	800d768 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d6d4:	b29b      	uxth	r3, r3
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d132      	bne.n	800d740 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6e0:	6a3b      	ldr	r3, [r7, #32]
 800d6e2:	e853 3f00 	ldrex	r3, [r3]
 800d6e6:	61fb      	str	r3, [r7, #28]
   return(result);
 800d6e8:	69fb      	ldr	r3, [r7, #28]
 800d6ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d6ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	461a      	mov	r2, r3
 800d6f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d6fa:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d6fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d700:	e841 2300 	strex	r3, r2, [r1]
 800d704:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d1e6      	bne.n	800d6da <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	e853 3f00 	ldrex	r3, [r3]
 800d718:	60bb      	str	r3, [r7, #8]
   return(result);
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d720:	633b      	str	r3, [r7, #48]	@ 0x30
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	461a      	mov	r2, r3
 800d728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d72a:	61bb      	str	r3, [r7, #24]
 800d72c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d72e:	6979      	ldr	r1, [r7, #20]
 800d730:	69ba      	ldr	r2, [r7, #24]
 800d732:	e841 2300 	strex	r3, r2, [r1]
 800d736:	613b      	str	r3, [r7, #16]
   return(result);
 800d738:	693b      	ldr	r3, [r7, #16]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d1e6      	bne.n	800d70c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800d73e:	e013      	b.n	800d768 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d744:	781a      	ldrb	r2, [r3, #0]
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d750:	1c5a      	adds	r2, r3, #1
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d75c:	b29b      	uxth	r3, r3
 800d75e:	3b01      	subs	r3, #1
 800d760:	b29a      	uxth	r2, r3
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800d768:	bf00      	nop
 800d76a:	373c      	adds	r7, #60	@ 0x3c
 800d76c:	46bd      	mov	sp, r7
 800d76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d772:	4770      	bx	lr

0800d774 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d774:	b480      	push	{r7}
 800d776:	b091      	sub	sp, #68	@ 0x44
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d782:	2b21      	cmp	r3, #33	@ 0x21
 800d784:	d151      	bne.n	800d82a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d78c:	b29b      	uxth	r3, r3
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d132      	bne.n	800d7f8 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d79a:	e853 3f00 	ldrex	r3, [r3]
 800d79e:	623b      	str	r3, [r7, #32]
   return(result);
 800d7a0:	6a3b      	ldr	r3, [r7, #32]
 800d7a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d7a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	461a      	mov	r2, r3
 800d7ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7b0:	633b      	str	r3, [r7, #48]	@ 0x30
 800d7b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d7b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d7b8:	e841 2300 	strex	r3, r2, [r1]
 800d7bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d7be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d1e6      	bne.n	800d792 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7ca:	693b      	ldr	r3, [r7, #16]
 800d7cc:	e853 3f00 	ldrex	r3, [r3]
 800d7d0:	60fb      	str	r3, [r7, #12]
   return(result);
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	461a      	mov	r2, r3
 800d7e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7e2:	61fb      	str	r3, [r7, #28]
 800d7e4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7e6:	69b9      	ldr	r1, [r7, #24]
 800d7e8:	69fa      	ldr	r2, [r7, #28]
 800d7ea:	e841 2300 	strex	r3, r2, [r1]
 800d7ee:	617b      	str	r3, [r7, #20]
   return(result);
 800d7f0:	697b      	ldr	r3, [r7, #20]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d1e6      	bne.n	800d7c4 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800d7f6:	e018      	b.n	800d82a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d7fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800d7fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d800:	881b      	ldrh	r3, [r3, #0]
 800d802:	461a      	mov	r2, r3
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d80c:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d812:	1c9a      	adds	r2, r3, #2
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d81e:	b29b      	uxth	r3, r3
 800d820:	3b01      	subs	r3, #1
 800d822:	b29a      	uxth	r2, r3
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800d82a:	bf00      	nop
 800d82c:	3744      	adds	r7, #68	@ 0x44
 800d82e:	46bd      	mov	sp, r7
 800d830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d834:	4770      	bx	lr

0800d836 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d836:	b480      	push	{r7}
 800d838:	b091      	sub	sp, #68	@ 0x44
 800d83a:	af00      	add	r7, sp, #0
 800d83c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d844:	2b21      	cmp	r3, #33	@ 0x21
 800d846:	d160      	bne.n	800d90a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d84e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800d850:	e057      	b.n	800d902 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d858:	b29b      	uxth	r3, r3
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d133      	bne.n	800d8c6 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	3308      	adds	r3, #8
 800d864:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d868:	e853 3f00 	ldrex	r3, [r3]
 800d86c:	623b      	str	r3, [r7, #32]
   return(result);
 800d86e:	6a3b      	ldr	r3, [r7, #32]
 800d870:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800d874:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	3308      	adds	r3, #8
 800d87c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d87e:	633a      	str	r2, [r7, #48]	@ 0x30
 800d880:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d882:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d884:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d886:	e841 2300 	strex	r3, r2, [r1]
 800d88a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d88c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d1e5      	bne.n	800d85e <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d898:	693b      	ldr	r3, [r7, #16]
 800d89a:	e853 3f00 	ldrex	r3, [r3]
 800d89e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d8a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	461a      	mov	r2, r3
 800d8ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8b0:	61fb      	str	r3, [r7, #28]
 800d8b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8b4:	69b9      	ldr	r1, [r7, #24]
 800d8b6:	69fa      	ldr	r2, [r7, #28]
 800d8b8:	e841 2300 	strex	r3, r2, [r1]
 800d8bc:	617b      	str	r3, [r7, #20]
   return(result);
 800d8be:	697b      	ldr	r3, [r7, #20]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d1e6      	bne.n	800d892 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800d8c4:	e021      	b.n	800d90a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	69db      	ldr	r3, [r3, #28]
 800d8cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d013      	beq.n	800d8fc <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d8d8:	781a      	ldrb	r2, [r3, #0]
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d8e4:	1c5a      	adds	r2, r3, #1
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d8f0:	b29b      	uxth	r3, r3
 800d8f2:	3b01      	subs	r3, #1
 800d8f4:	b29a      	uxth	r2, r3
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800d8fc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d8fe:	3b01      	subs	r3, #1
 800d900:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800d902:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d904:	2b00      	cmp	r3, #0
 800d906:	d1a4      	bne.n	800d852 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800d908:	e7ff      	b.n	800d90a <UART_TxISR_8BIT_FIFOEN+0xd4>
 800d90a:	bf00      	nop
 800d90c:	3744      	adds	r7, #68	@ 0x44
 800d90e:	46bd      	mov	sp, r7
 800d910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d914:	4770      	bx	lr

0800d916 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d916:	b480      	push	{r7}
 800d918:	b091      	sub	sp, #68	@ 0x44
 800d91a:	af00      	add	r7, sp, #0
 800d91c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d924:	2b21      	cmp	r3, #33	@ 0x21
 800d926:	d165      	bne.n	800d9f4 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d92e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800d930:	e05c      	b.n	800d9ec <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d938:	b29b      	uxth	r3, r3
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d133      	bne.n	800d9a6 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	3308      	adds	r3, #8
 800d944:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d946:	6a3b      	ldr	r3, [r7, #32]
 800d948:	e853 3f00 	ldrex	r3, [r3]
 800d94c:	61fb      	str	r3, [r7, #28]
   return(result);
 800d94e:	69fb      	ldr	r3, [r7, #28]
 800d950:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800d954:	637b      	str	r3, [r7, #52]	@ 0x34
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	3308      	adds	r3, #8
 800d95c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d95e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d960:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d962:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d964:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d966:	e841 2300 	strex	r3, r2, [r1]
 800d96a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d96c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d1e5      	bne.n	800d93e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	e853 3f00 	ldrex	r3, [r3]
 800d97e:	60bb      	str	r3, [r7, #8]
   return(result);
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d986:	633b      	str	r3, [r7, #48]	@ 0x30
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	461a      	mov	r2, r3
 800d98e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d990:	61bb      	str	r3, [r7, #24]
 800d992:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d994:	6979      	ldr	r1, [r7, #20]
 800d996:	69ba      	ldr	r2, [r7, #24]
 800d998:	e841 2300 	strex	r3, r2, [r1]
 800d99c:	613b      	str	r3, [r7, #16]
   return(result);
 800d99e:	693b      	ldr	r3, [r7, #16]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d1e6      	bne.n	800d972 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800d9a4:	e026      	b.n	800d9f4 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	69db      	ldr	r3, [r3, #28]
 800d9ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d018      	beq.n	800d9e6 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d9b8:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800d9ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9bc:	881b      	ldrh	r3, [r3, #0]
 800d9be:	461a      	mov	r2, r3
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d9c8:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d9ce:	1c9a      	adds	r2, r3, #2
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d9da:	b29b      	uxth	r3, r3
 800d9dc:	3b01      	subs	r3, #1
 800d9de:	b29a      	uxth	r2, r3
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800d9e6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d9e8:	3b01      	subs	r3, #1
 800d9ea:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800d9ec:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d19f      	bne.n	800d932 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800d9f2:	e7ff      	b.n	800d9f4 <UART_TxISR_16BIT_FIFOEN+0xde>
 800d9f4:	bf00      	nop
 800d9f6:	3744      	adds	r7, #68	@ 0x44
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fe:	4770      	bx	lr

0800da00 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b088      	sub	sp, #32
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	e853 3f00 	ldrex	r3, [r3]
 800da14:	60bb      	str	r3, [r7, #8]
   return(result);
 800da16:	68bb      	ldr	r3, [r7, #8]
 800da18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800da1c:	61fb      	str	r3, [r7, #28]
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	461a      	mov	r2, r3
 800da24:	69fb      	ldr	r3, [r7, #28]
 800da26:	61bb      	str	r3, [r7, #24]
 800da28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da2a:	6979      	ldr	r1, [r7, #20]
 800da2c:	69ba      	ldr	r2, [r7, #24]
 800da2e:	e841 2300 	strex	r3, r2, [r1]
 800da32:	613b      	str	r3, [r7, #16]
   return(result);
 800da34:	693b      	ldr	r3, [r7, #16]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d1e6      	bne.n	800da08 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	2220      	movs	r2, #32
 800da3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	2200      	movs	r2, #0
 800da46:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f7ff f8d1 	bl	800cbf0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800da4e:	bf00      	nop
 800da50:	3720      	adds	r7, #32
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}
	...

0800da58 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b09c      	sub	sp, #112	@ 0x70
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800da66:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800da70:	2b22      	cmp	r3, #34	@ 0x22
 800da72:	f040 80c3 	bne.w	800dbfc <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da7c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800da80:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800da84:	b2d9      	uxtb	r1, r3
 800da86:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800da8a:	b2da      	uxtb	r2, r3
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800da90:	400a      	ands	r2, r1
 800da92:	b2d2      	uxtb	r2, r2
 800da94:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800da9a:	1c5a      	adds	r2, r3, #1
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800daa6:	b29b      	uxth	r3, r3
 800daa8:	3b01      	subs	r3, #1
 800daaa:	b29a      	uxth	r2, r3
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dab8:	b29b      	uxth	r3, r3
 800daba:	2b00      	cmp	r3, #0
 800dabc:	f040 80a6 	bne.w	800dc0c <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dac6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dac8:	e853 3f00 	ldrex	r3, [r3]
 800dacc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800dace:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dad0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dad4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	461a      	mov	r2, r3
 800dadc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dade:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dae0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dae2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800dae4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dae6:	e841 2300 	strex	r3, r2, [r1]
 800daea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800daec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d1e6      	bne.n	800dac0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	3308      	adds	r3, #8
 800daf8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dafa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dafc:	e853 3f00 	ldrex	r3, [r3]
 800db00:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800db02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db04:	f023 0301 	bic.w	r3, r3, #1
 800db08:	667b      	str	r3, [r7, #100]	@ 0x64
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	3308      	adds	r3, #8
 800db10:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800db12:	647a      	str	r2, [r7, #68]	@ 0x44
 800db14:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db16:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800db18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800db1a:	e841 2300 	strex	r3, r2, [r1]
 800db1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800db20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db22:	2b00      	cmp	r3, #0
 800db24:	d1e5      	bne.n	800daf2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2220      	movs	r2, #32
 800db2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	2200      	movs	r2, #0
 800db32:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2200      	movs	r2, #0
 800db38:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	4a35      	ldr	r2, [pc, #212]	@ (800dc14 <UART_RxISR_8BIT+0x1bc>)
 800db40:	4293      	cmp	r3, r2
 800db42:	d024      	beq.n	800db8e <UART_RxISR_8BIT+0x136>
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	4a33      	ldr	r2, [pc, #204]	@ (800dc18 <UART_RxISR_8BIT+0x1c0>)
 800db4a:	4293      	cmp	r3, r2
 800db4c:	d01f      	beq.n	800db8e <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	685b      	ldr	r3, [r3, #4]
 800db54:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d018      	beq.n	800db8e <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db64:	e853 3f00 	ldrex	r3, [r3]
 800db68:	623b      	str	r3, [r7, #32]
   return(result);
 800db6a:	6a3b      	ldr	r3, [r7, #32]
 800db6c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800db70:	663b      	str	r3, [r7, #96]	@ 0x60
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	461a      	mov	r2, r3
 800db78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800db7a:	633b      	str	r3, [r7, #48]	@ 0x30
 800db7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800db80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db82:	e841 2300 	strex	r3, r2, [r1]
 800db86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800db88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d1e6      	bne.n	800db5c <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db92:	2b01      	cmp	r3, #1
 800db94:	d12e      	bne.n	800dbf4 <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	2200      	movs	r2, #0
 800db9a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dba2:	693b      	ldr	r3, [r7, #16]
 800dba4:	e853 3f00 	ldrex	r3, [r3]
 800dba8:	60fb      	str	r3, [r7, #12]
   return(result);
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	f023 0310 	bic.w	r3, r3, #16
 800dbb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	461a      	mov	r2, r3
 800dbb8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dbba:	61fb      	str	r3, [r7, #28]
 800dbbc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbbe:	69b9      	ldr	r1, [r7, #24]
 800dbc0:	69fa      	ldr	r2, [r7, #28]
 800dbc2:	e841 2300 	strex	r3, r2, [r1]
 800dbc6:	617b      	str	r3, [r7, #20]
   return(result);
 800dbc8:	697b      	ldr	r3, [r7, #20]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d1e6      	bne.n	800db9c <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	69db      	ldr	r3, [r3, #28]
 800dbd4:	f003 0310 	and.w	r3, r3, #16
 800dbd8:	2b10      	cmp	r3, #16
 800dbda:	d103      	bne.n	800dbe4 <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	2210      	movs	r2, #16
 800dbe2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800dbea:	4619      	mov	r1, r3
 800dbec:	6878      	ldr	r0, [r7, #4]
 800dbee:	f7ff f813 	bl	800cc18 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dbf2:	e00b      	b.n	800dc0c <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800dbf4:	6878      	ldr	r0, [r7, #4]
 800dbf6:	f7f5 fa33 	bl	8003060 <HAL_UART_RxCpltCallback>
}
 800dbfa:	e007      	b.n	800dc0c <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	699a      	ldr	r2, [r3, #24]
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	f042 0208 	orr.w	r2, r2, #8
 800dc0a:	619a      	str	r2, [r3, #24]
}
 800dc0c:	bf00      	nop
 800dc0e:	3770      	adds	r7, #112	@ 0x70
 800dc10:	46bd      	mov	sp, r7
 800dc12:	bd80      	pop	{r7, pc}
 800dc14:	44002400 	.word	0x44002400
 800dc18:	54002400 	.word	0x54002400

0800dc1c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b09c      	sub	sp, #112	@ 0x70
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800dc2a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dc34:	2b22      	cmp	r3, #34	@ 0x22
 800dc36:	f040 80c3 	bne.w	800ddc0 <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc40:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dc48:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800dc4a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800dc4e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800dc52:	4013      	ands	r3, r2
 800dc54:	b29a      	uxth	r2, r3
 800dc56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dc58:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dc5e:	1c9a      	adds	r2, r3, #2
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dc6a:	b29b      	uxth	r3, r3
 800dc6c:	3b01      	subs	r3, #1
 800dc6e:	b29a      	uxth	r2, r3
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dc7c:	b29b      	uxth	r3, r3
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	f040 80a6 	bne.w	800ddd0 <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dc8c:	e853 3f00 	ldrex	r3, [r3]
 800dc90:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800dc92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dc94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dc98:	667b      	str	r3, [r7, #100]	@ 0x64
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	461a      	mov	r2, r3
 800dca0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dca2:	657b      	str	r3, [r7, #84]	@ 0x54
 800dca4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dca6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800dca8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800dcaa:	e841 2300 	strex	r3, r2, [r1]
 800dcae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800dcb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d1e6      	bne.n	800dc84 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	3308      	adds	r3, #8
 800dcbc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcc0:	e853 3f00 	ldrex	r3, [r3]
 800dcc4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dcc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcc8:	f023 0301 	bic.w	r3, r3, #1
 800dccc:	663b      	str	r3, [r7, #96]	@ 0x60
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	3308      	adds	r3, #8
 800dcd4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800dcd6:	643a      	str	r2, [r7, #64]	@ 0x40
 800dcd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcda:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dcdc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dcde:	e841 2300 	strex	r3, r2, [r1]
 800dce2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d1e5      	bne.n	800dcb6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	2220      	movs	r2, #32
 800dcee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	4a35      	ldr	r2, [pc, #212]	@ (800ddd8 <UART_RxISR_16BIT+0x1bc>)
 800dd04:	4293      	cmp	r3, r2
 800dd06:	d024      	beq.n	800dd52 <UART_RxISR_16BIT+0x136>
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	4a33      	ldr	r2, [pc, #204]	@ (800dddc <UART_RxISR_16BIT+0x1c0>)
 800dd0e:	4293      	cmp	r3, r2
 800dd10:	d01f      	beq.n	800dd52 <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	685b      	ldr	r3, [r3, #4]
 800dd18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d018      	beq.n	800dd52 <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd26:	6a3b      	ldr	r3, [r7, #32]
 800dd28:	e853 3f00 	ldrex	r3, [r3]
 800dd2c:	61fb      	str	r3, [r7, #28]
   return(result);
 800dd2e:	69fb      	ldr	r3, [r7, #28]
 800dd30:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800dd34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	461a      	mov	r2, r3
 800dd3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dd3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dd40:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dd44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dd46:	e841 2300 	strex	r3, r2, [r1]
 800dd4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dd4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d1e6      	bne.n	800dd20 <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dd56:	2b01      	cmp	r3, #1
 800dd58:	d12e      	bne.n	800ddb8 <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	e853 3f00 	ldrex	r3, [r3]
 800dd6c:	60bb      	str	r3, [r7, #8]
   return(result);
 800dd6e:	68bb      	ldr	r3, [r7, #8]
 800dd70:	f023 0310 	bic.w	r3, r3, #16
 800dd74:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	461a      	mov	r2, r3
 800dd7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dd7e:	61bb      	str	r3, [r7, #24]
 800dd80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd82:	6979      	ldr	r1, [r7, #20]
 800dd84:	69ba      	ldr	r2, [r7, #24]
 800dd86:	e841 2300 	strex	r3, r2, [r1]
 800dd8a:	613b      	str	r3, [r7, #16]
   return(result);
 800dd8c:	693b      	ldr	r3, [r7, #16]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d1e6      	bne.n	800dd60 <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	69db      	ldr	r3, [r3, #28]
 800dd98:	f003 0310 	and.w	r3, r3, #16
 800dd9c:	2b10      	cmp	r3, #16
 800dd9e:	d103      	bne.n	800dda8 <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	2210      	movs	r2, #16
 800dda6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ddae:	4619      	mov	r1, r3
 800ddb0:	6878      	ldr	r0, [r7, #4]
 800ddb2:	f7fe ff31 	bl	800cc18 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ddb6:	e00b      	b.n	800ddd0 <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800ddb8:	6878      	ldr	r0, [r7, #4]
 800ddba:	f7f5 f951 	bl	8003060 <HAL_UART_RxCpltCallback>
}
 800ddbe:	e007      	b.n	800ddd0 <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	699a      	ldr	r2, [r3, #24]
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	f042 0208 	orr.w	r2, r2, #8
 800ddce:	619a      	str	r2, [r3, #24]
}
 800ddd0:	bf00      	nop
 800ddd2:	3770      	adds	r7, #112	@ 0x70
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}
 800ddd8:	44002400 	.word	0x44002400
 800dddc:	54002400 	.word	0x54002400

0800dde0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b0ac      	sub	sp, #176	@ 0xb0
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ddee:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	69db      	ldr	r3, [r3, #28]
 800ddf8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	689b      	ldr	r3, [r3, #8]
 800de0c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800de16:	2b22      	cmp	r3, #34	@ 0x22
 800de18:	f040 8188 	bne.w	800e12c <UART_RxISR_8BIT_FIFOEN+0x34c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800de22:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800de26:	e12b      	b.n	800e080 <UART_RxISR_8BIT_FIFOEN+0x2a0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de2e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800de32:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800de36:	b2d9      	uxtb	r1, r3
 800de38:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800de3c:	b2da      	uxtb	r2, r3
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800de42:	400a      	ands	r2, r1
 800de44:	b2d2      	uxtb	r2, r2
 800de46:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800de4c:	1c5a      	adds	r2, r3, #1
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800de58:	b29b      	uxth	r3, r3
 800de5a:	3b01      	subs	r3, #1
 800de5c:	b29a      	uxth	r2, r3
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	69db      	ldr	r3, [r3, #28]
 800de6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800de6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800de72:	f003 0307 	and.w	r3, r3, #7
 800de76:	2b00      	cmp	r3, #0
 800de78:	d053      	beq.n	800df22 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800de7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800de7e:	f003 0301 	and.w	r3, r3, #1
 800de82:	2b00      	cmp	r3, #0
 800de84:	d011      	beq.n	800deaa <UART_RxISR_8BIT_FIFOEN+0xca>
 800de86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800de8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d00b      	beq.n	800deaa <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	2201      	movs	r2, #1
 800de98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dea0:	f043 0201 	orr.w	r2, r3, #1
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800deaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800deae:	f003 0302 	and.w	r3, r3, #2
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d011      	beq.n	800deda <UART_RxISR_8BIT_FIFOEN+0xfa>
 800deb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800deba:	f003 0301 	and.w	r3, r3, #1
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d00b      	beq.n	800deda <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	2202      	movs	r2, #2
 800dec8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ded0:	f043 0204 	orr.w	r2, r3, #4
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800deda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dede:	f003 0304 	and.w	r3, r3, #4
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d011      	beq.n	800df0a <UART_RxISR_8BIT_FIFOEN+0x12a>
 800dee6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800deea:	f003 0301 	and.w	r3, r3, #1
 800deee:	2b00      	cmp	r3, #0
 800def0:	d00b      	beq.n	800df0a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	2204      	movs	r2, #4
 800def8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800df00:	f043 0202 	orr.w	r2, r3, #2
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800df10:	2b00      	cmp	r3, #0
 800df12:	d006      	beq.n	800df22 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800df14:	6878      	ldr	r0, [r7, #4]
 800df16:	f7fe fe75 	bl	800cc04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	2200      	movs	r2, #0
 800df1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800df28:	b29b      	uxth	r3, r3
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	f040 80a8 	bne.w	800e080 <UART_RxISR_8BIT_FIFOEN+0x2a0>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800df38:	e853 3f00 	ldrex	r3, [r3]
 800df3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800df3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800df40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800df44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	461a      	mov	r2, r3
 800df4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800df52:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800df54:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df56:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800df58:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800df5a:	e841 2300 	strex	r3, r2, [r1]
 800df5e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800df60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800df62:	2b00      	cmp	r3, #0
 800df64:	d1e4      	bne.n	800df30 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	3308      	adds	r3, #8
 800df6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800df70:	e853 3f00 	ldrex	r3, [r3]
 800df74:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800df76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800df78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800df7c:	f023 0301 	bic.w	r3, r3, #1
 800df80:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	3308      	adds	r3, #8
 800df8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800df8e:	66ba      	str	r2, [r7, #104]	@ 0x68
 800df90:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df92:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800df94:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800df96:	e841 2300 	strex	r3, r2, [r1]
 800df9a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800df9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d1e1      	bne.n	800df66 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	2220      	movs	r2, #32
 800dfa6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	2200      	movs	r2, #0
 800dfae:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	4a62      	ldr	r2, [pc, #392]	@ (800e144 <UART_RxISR_8BIT_FIFOEN+0x364>)
 800dfbc:	4293      	cmp	r3, r2
 800dfbe:	d026      	beq.n	800e00e <UART_RxISR_8BIT_FIFOEN+0x22e>
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	4a60      	ldr	r2, [pc, #384]	@ (800e148 <UART_RxISR_8BIT_FIFOEN+0x368>)
 800dfc6:	4293      	cmp	r3, r2
 800dfc8:	d021      	beq.n	800e00e <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	685b      	ldr	r3, [r3, #4]
 800dfd0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d01a      	beq.n	800e00e <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dfe0:	e853 3f00 	ldrex	r3, [r3]
 800dfe4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800dfe6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dfe8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800dfec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	461a      	mov	r2, r3
 800dff6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800dffa:	657b      	str	r3, [r7, #84]	@ 0x54
 800dffc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dffe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e000:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e002:	e841 2300 	strex	r3, r2, [r1]
 800e006:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e008:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d1e4      	bne.n	800dfd8 <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e012:	2b01      	cmp	r3, #1
 800e014:	d130      	bne.n	800e078 <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	2200      	movs	r2, #0
 800e01a:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e024:	e853 3f00 	ldrex	r3, [r3]
 800e028:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e02a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e02c:	f023 0310 	bic.w	r3, r3, #16
 800e030:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	461a      	mov	r2, r3
 800e03a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e03e:	643b      	str	r3, [r7, #64]	@ 0x40
 800e040:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e042:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e044:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e046:	e841 2300 	strex	r3, r2, [r1]
 800e04a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e04c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d1e4      	bne.n	800e01c <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	69db      	ldr	r3, [r3, #28]
 800e058:	f003 0310 	and.w	r3, r3, #16
 800e05c:	2b10      	cmp	r3, #16
 800e05e:	d103      	bne.n	800e068 <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	2210      	movs	r2, #16
 800e066:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e06e:	4619      	mov	r1, r3
 800e070:	6878      	ldr	r0, [r7, #4]
 800e072:	f7fe fdd1 	bl	800cc18 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800e076:	e00e      	b.n	800e096 <UART_RxISR_8BIT_FIFOEN+0x2b6>
          HAL_UART_RxCpltCallback(huart);
 800e078:	6878      	ldr	r0, [r7, #4]
 800e07a:	f7f4 fff1 	bl	8003060 <HAL_UART_RxCpltCallback>
        break;
 800e07e:	e00a      	b.n	800e096 <UART_RxISR_8BIT_FIFOEN+0x2b6>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e080:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800e084:	2b00      	cmp	r3, #0
 800e086:	d006      	beq.n	800e096 <UART_RxISR_8BIT_FIFOEN+0x2b6>
 800e088:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e08c:	f003 0320 	and.w	r3, r3, #32
 800e090:	2b00      	cmp	r3, #0
 800e092:	f47f aec9 	bne.w	800de28 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e09c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e0a0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d049      	beq.n	800e13c <UART_RxISR_8BIT_FIFOEN+0x35c>
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e0ae:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800e0b2:	429a      	cmp	r2, r3
 800e0b4:	d242      	bcs.n	800e13c <UART_RxISR_8BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	3308      	adds	r3, #8
 800e0bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0be:	6a3b      	ldr	r3, [r7, #32]
 800e0c0:	e853 3f00 	ldrex	r3, [r3]
 800e0c4:	61fb      	str	r3, [r7, #28]
   return(result);
 800e0c6:	69fb      	ldr	r3, [r7, #28]
 800e0c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e0cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	3308      	adds	r3, #8
 800e0d6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800e0da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e0dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e0e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e0e2:	e841 2300 	strex	r3, r2, [r1]
 800e0e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e0e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d1e3      	bne.n	800e0b6 <UART_RxISR_8BIT_FIFOEN+0x2d6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	4a16      	ldr	r2, [pc, #88]	@ (800e14c <UART_RxISR_8BIT_FIFOEN+0x36c>)
 800e0f2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	e853 3f00 	ldrex	r3, [r3]
 800e100:	60bb      	str	r3, [r7, #8]
   return(result);
 800e102:	68bb      	ldr	r3, [r7, #8]
 800e104:	f043 0320 	orr.w	r3, r3, #32
 800e108:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	461a      	mov	r2, r3
 800e112:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e116:	61bb      	str	r3, [r7, #24]
 800e118:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e11a:	6979      	ldr	r1, [r7, #20]
 800e11c:	69ba      	ldr	r2, [r7, #24]
 800e11e:	e841 2300 	strex	r3, r2, [r1]
 800e122:	613b      	str	r3, [r7, #16]
   return(result);
 800e124:	693b      	ldr	r3, [r7, #16]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d1e4      	bne.n	800e0f4 <UART_RxISR_8BIT_FIFOEN+0x314>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e12a:	e007      	b.n	800e13c <UART_RxISR_8BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	699a      	ldr	r2, [r3, #24]
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	f042 0208 	orr.w	r2, r2, #8
 800e13a:	619a      	str	r2, [r3, #24]
}
 800e13c:	bf00      	nop
 800e13e:	37b0      	adds	r7, #176	@ 0xb0
 800e140:	46bd      	mov	sp, r7
 800e142:	bd80      	pop	{r7, pc}
 800e144:	44002400 	.word	0x44002400
 800e148:	54002400 	.word	0x54002400
 800e14c:	0800da59 	.word	0x0800da59

0800e150 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b0ae      	sub	sp, #184	@ 0xb8
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e15e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	69db      	ldr	r3, [r3, #28]
 800e168:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	689b      	ldr	r3, [r3, #8]
 800e17c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e186:	2b22      	cmp	r3, #34	@ 0x22
 800e188:	f040 818c 	bne.w	800e4a4 <UART_RxISR_16BIT_FIFOEN+0x354>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e192:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e196:	e12f      	b.n	800e3f8 <UART_RxISR_16BIT_FIFOEN+0x2a8>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e19e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e1a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800e1aa:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800e1ae:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800e1b2:	4013      	ands	r3, r2
 800e1b4:	b29a      	uxth	r2, r3
 800e1b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e1ba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e1c0:	1c9a      	adds	r2, r3, #2
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e1cc:	b29b      	uxth	r3, r3
 800e1ce:	3b01      	subs	r3, #1
 800e1d0:	b29a      	uxth	r2, r3
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	69db      	ldr	r3, [r3, #28]
 800e1de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e1e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e1e6:	f003 0307 	and.w	r3, r3, #7
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d053      	beq.n	800e296 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e1ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e1f2:	f003 0301 	and.w	r3, r3, #1
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d011      	beq.n	800e21e <UART_RxISR_16BIT_FIFOEN+0xce>
 800e1fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e1fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e202:	2b00      	cmp	r3, #0
 800e204:	d00b      	beq.n	800e21e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	2201      	movs	r2, #1
 800e20c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e214:	f043 0201 	orr.w	r2, r3, #1
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e21e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e222:	f003 0302 	and.w	r3, r3, #2
 800e226:	2b00      	cmp	r3, #0
 800e228:	d011      	beq.n	800e24e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800e22a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e22e:	f003 0301 	and.w	r3, r3, #1
 800e232:	2b00      	cmp	r3, #0
 800e234:	d00b      	beq.n	800e24e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	2202      	movs	r2, #2
 800e23c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e244:	f043 0204 	orr.w	r2, r3, #4
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e24e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e252:	f003 0304 	and.w	r3, r3, #4
 800e256:	2b00      	cmp	r3, #0
 800e258:	d011      	beq.n	800e27e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800e25a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e25e:	f003 0301 	and.w	r3, r3, #1
 800e262:	2b00      	cmp	r3, #0
 800e264:	d00b      	beq.n	800e27e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	2204      	movs	r2, #4
 800e26c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e274:	f043 0202 	orr.w	r2, r3, #2
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e284:	2b00      	cmp	r3, #0
 800e286:	d006      	beq.n	800e296 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e288:	6878      	ldr	r0, [r7, #4]
 800e28a:	f7fe fcbb 	bl	800cc04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	2200      	movs	r2, #0
 800e292:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e29c:	b29b      	uxth	r3, r3
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	f040 80aa 	bne.w	800e3f8 <UART_RxISR_16BIT_FIFOEN+0x2a8>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e2ac:	e853 3f00 	ldrex	r3, [r3]
 800e2b0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e2b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e2b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e2b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	461a      	mov	r2, r3
 800e2c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e2c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e2ca:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2cc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e2ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e2d2:	e841 2300 	strex	r3, r2, [r1]
 800e2d6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e2d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d1e2      	bne.n	800e2a4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	3308      	adds	r3, #8
 800e2e4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e2e8:	e853 3f00 	ldrex	r3, [r3]
 800e2ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e2ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e2f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e2f4:	f023 0301 	bic.w	r3, r3, #1
 800e2f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	3308      	adds	r3, #8
 800e302:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800e306:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e308:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e30a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e30c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e30e:	e841 2300 	strex	r3, r2, [r1]
 800e312:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e314:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e316:	2b00      	cmp	r3, #0
 800e318:	d1e1      	bne.n	800e2de <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	2220      	movs	r2, #32
 800e31e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	2200      	movs	r2, #0
 800e326:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2200      	movs	r2, #0
 800e32c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	4a62      	ldr	r2, [pc, #392]	@ (800e4bc <UART_RxISR_16BIT_FIFOEN+0x36c>)
 800e334:	4293      	cmp	r3, r2
 800e336:	d026      	beq.n	800e386 <UART_RxISR_16BIT_FIFOEN+0x236>
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	4a60      	ldr	r2, [pc, #384]	@ (800e4c0 <UART_RxISR_16BIT_FIFOEN+0x370>)
 800e33e:	4293      	cmp	r3, r2
 800e340:	d021      	beq.n	800e386 <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	685b      	ldr	r3, [r3, #4]
 800e348:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d01a      	beq.n	800e386 <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e356:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e358:	e853 3f00 	ldrex	r3, [r3]
 800e35c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e35e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e360:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e364:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	461a      	mov	r2, r3
 800e36e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e372:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e374:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e376:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e378:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e37a:	e841 2300 	strex	r3, r2, [r1]
 800e37e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e380:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e382:	2b00      	cmp	r3, #0
 800e384:	d1e4      	bne.n	800e350 <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e38a:	2b01      	cmp	r3, #1
 800e38c:	d130      	bne.n	800e3f0 <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	2200      	movs	r2, #0
 800e392:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e39a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e39c:	e853 3f00 	ldrex	r3, [r3]
 800e3a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e3a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3a4:	f023 0310 	bic.w	r3, r3, #16
 800e3a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	461a      	mov	r2, r3
 800e3b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e3b6:	647b      	str	r3, [r7, #68]	@ 0x44
 800e3b8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e3bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e3be:	e841 2300 	strex	r3, r2, [r1]
 800e3c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e3c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d1e4      	bne.n	800e394 <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	69db      	ldr	r3, [r3, #28]
 800e3d0:	f003 0310 	and.w	r3, r3, #16
 800e3d4:	2b10      	cmp	r3, #16
 800e3d6:	d103      	bne.n	800e3e0 <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	2210      	movs	r2, #16
 800e3de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e3e6:	4619      	mov	r1, r3
 800e3e8:	6878      	ldr	r0, [r7, #4]
 800e3ea:	f7fe fc15 	bl	800cc18 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800e3ee:	e00e      	b.n	800e40e <UART_RxISR_16BIT_FIFOEN+0x2be>
          HAL_UART_RxCpltCallback(huart);
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	f7f4 fe35 	bl	8003060 <HAL_UART_RxCpltCallback>
        break;
 800e3f6:	e00a      	b.n	800e40e <UART_RxISR_16BIT_FIFOEN+0x2be>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e3f8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d006      	beq.n	800e40e <UART_RxISR_16BIT_FIFOEN+0x2be>
 800e400:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e404:	f003 0320 	and.w	r3, r3, #32
 800e408:	2b00      	cmp	r3, #0
 800e40a:	f47f aec5 	bne.w	800e198 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e414:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e418:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d049      	beq.n	800e4b4 <UART_RxISR_16BIT_FIFOEN+0x364>
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e426:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800e42a:	429a      	cmp	r2, r3
 800e42c:	d242      	bcs.n	800e4b4 <UART_RxISR_16BIT_FIFOEN+0x364>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	3308      	adds	r3, #8
 800e434:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e438:	e853 3f00 	ldrex	r3, [r3]
 800e43c:	623b      	str	r3, [r7, #32]
   return(result);
 800e43e:	6a3b      	ldr	r3, [r7, #32]
 800e440:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e444:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	3308      	adds	r3, #8
 800e44e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800e452:	633a      	str	r2, [r7, #48]	@ 0x30
 800e454:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e456:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e458:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e45a:	e841 2300 	strex	r3, r2, [r1]
 800e45e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e462:	2b00      	cmp	r3, #0
 800e464:	d1e3      	bne.n	800e42e <UART_RxISR_16BIT_FIFOEN+0x2de>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	4a16      	ldr	r2, [pc, #88]	@ (800e4c4 <UART_RxISR_16BIT_FIFOEN+0x374>)
 800e46a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e472:	693b      	ldr	r3, [r7, #16]
 800e474:	e853 3f00 	ldrex	r3, [r3]
 800e478:	60fb      	str	r3, [r7, #12]
   return(result);
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	f043 0320 	orr.w	r3, r3, #32
 800e480:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	461a      	mov	r2, r3
 800e48a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e48e:	61fb      	str	r3, [r7, #28]
 800e490:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e492:	69b9      	ldr	r1, [r7, #24]
 800e494:	69fa      	ldr	r2, [r7, #28]
 800e496:	e841 2300 	strex	r3, r2, [r1]
 800e49a:	617b      	str	r3, [r7, #20]
   return(result);
 800e49c:	697b      	ldr	r3, [r7, #20]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d1e4      	bne.n	800e46c <UART_RxISR_16BIT_FIFOEN+0x31c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e4a2:	e007      	b.n	800e4b4 <UART_RxISR_16BIT_FIFOEN+0x364>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	699a      	ldr	r2, [r3, #24]
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	f042 0208 	orr.w	r2, r2, #8
 800e4b2:	619a      	str	r2, [r3, #24]
}
 800e4b4:	bf00      	nop
 800e4b6:	37b8      	adds	r7, #184	@ 0xb8
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bd80      	pop	{r7, pc}
 800e4bc:	44002400 	.word	0x44002400
 800e4c0:	54002400 	.word	0x54002400
 800e4c4:	0800dc1d 	.word	0x0800dc1d

0800e4c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e4c8:	b480      	push	{r7}
 800e4ca:	b083      	sub	sp, #12
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e4d0:	bf00      	nop
 800e4d2:	370c      	adds	r7, #12
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4da:	4770      	bx	lr

0800e4dc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e4dc:	b480      	push	{r7}
 800e4de:	b083      	sub	sp, #12
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e4e4:	bf00      	nop
 800e4e6:	370c      	adds	r7, #12
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ee:	4770      	bx	lr

0800e4f0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e4f0:	b480      	push	{r7}
 800e4f2:	b083      	sub	sp, #12
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e4f8:	bf00      	nop
 800e4fa:	370c      	adds	r7, #12
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e502:	4770      	bx	lr

0800e504 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e504:	b480      	push	{r7}
 800e506:	b085      	sub	sp, #20
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e512:	2b01      	cmp	r3, #1
 800e514:	d101      	bne.n	800e51a <HAL_UARTEx_DisableFifoMode+0x16>
 800e516:	2302      	movs	r3, #2
 800e518:	e027      	b.n	800e56a <HAL_UARTEx_DisableFifoMode+0x66>
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	2201      	movs	r2, #1
 800e51e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	2224      	movs	r2, #36	@ 0x24
 800e526:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	681a      	ldr	r2, [r3, #0]
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	f022 0201 	bic.w	r2, r2, #1
 800e540:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e548:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	2200      	movs	r2, #0
 800e54e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	68fa      	ldr	r2, [r7, #12]
 800e556:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	2220      	movs	r2, #32
 800e55c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	2200      	movs	r2, #0
 800e564:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e568:	2300      	movs	r3, #0
}
 800e56a:	4618      	mov	r0, r3
 800e56c:	3714      	adds	r7, #20
 800e56e:	46bd      	mov	sp, r7
 800e570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e574:	4770      	bx	lr

0800e576 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e576:	b580      	push	{r7, lr}
 800e578:	b084      	sub	sp, #16
 800e57a:	af00      	add	r7, sp, #0
 800e57c:	6078      	str	r0, [r7, #4]
 800e57e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e586:	2b01      	cmp	r3, #1
 800e588:	d101      	bne.n	800e58e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e58a:	2302      	movs	r3, #2
 800e58c:	e02d      	b.n	800e5ea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	2201      	movs	r2, #1
 800e592:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2224      	movs	r2, #36	@ 0x24
 800e59a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	681a      	ldr	r2, [r3, #0]
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	f022 0201 	bic.w	r2, r2, #1
 800e5b4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	689b      	ldr	r3, [r3, #8]
 800e5bc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	683a      	ldr	r2, [r7, #0]
 800e5c6:	430a      	orrs	r2, r1
 800e5c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e5ca:	6878      	ldr	r0, [r7, #4]
 800e5cc:	f000 f850 	bl	800e670 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	68fa      	ldr	r2, [r7, #12]
 800e5d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	2220      	movs	r2, #32
 800e5dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e5e8:	2300      	movs	r3, #0
}
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	3710      	adds	r7, #16
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}

0800e5f2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e5f2:	b580      	push	{r7, lr}
 800e5f4:	b084      	sub	sp, #16
 800e5f6:	af00      	add	r7, sp, #0
 800e5f8:	6078      	str	r0, [r7, #4]
 800e5fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e602:	2b01      	cmp	r3, #1
 800e604:	d101      	bne.n	800e60a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e606:	2302      	movs	r3, #2
 800e608:	e02d      	b.n	800e666 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	2201      	movs	r2, #1
 800e60e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	2224      	movs	r2, #36	@ 0x24
 800e616:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	681a      	ldr	r2, [r3, #0]
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	f022 0201 	bic.w	r2, r2, #1
 800e630:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	689b      	ldr	r3, [r3, #8]
 800e638:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	683a      	ldr	r2, [r7, #0]
 800e642:	430a      	orrs	r2, r1
 800e644:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e646:	6878      	ldr	r0, [r7, #4]
 800e648:	f000 f812 	bl	800e670 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	68fa      	ldr	r2, [r7, #12]
 800e652:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2220      	movs	r2, #32
 800e658:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	2200      	movs	r2, #0
 800e660:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e664:	2300      	movs	r3, #0
}
 800e666:	4618      	mov	r0, r3
 800e668:	3710      	adds	r7, #16
 800e66a:	46bd      	mov	sp, r7
 800e66c:	bd80      	pop	{r7, pc}
	...

0800e670 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e670:	b480      	push	{r7}
 800e672:	b085      	sub	sp, #20
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d108      	bne.n	800e692 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	2201      	movs	r2, #1
 800e684:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	2201      	movs	r2, #1
 800e68c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e690:	e031      	b.n	800e6f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e692:	2308      	movs	r3, #8
 800e694:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e696:	2308      	movs	r3, #8
 800e698:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	689b      	ldr	r3, [r3, #8]
 800e6a0:	0e5b      	lsrs	r3, r3, #25
 800e6a2:	b2db      	uxtb	r3, r3
 800e6a4:	f003 0307 	and.w	r3, r3, #7
 800e6a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	689b      	ldr	r3, [r3, #8]
 800e6b0:	0f5b      	lsrs	r3, r3, #29
 800e6b2:	b2db      	uxtb	r3, r3
 800e6b4:	f003 0307 	and.w	r3, r3, #7
 800e6b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e6ba:	7bbb      	ldrb	r3, [r7, #14]
 800e6bc:	7b3a      	ldrb	r2, [r7, #12]
 800e6be:	4911      	ldr	r1, [pc, #68]	@ (800e704 <UARTEx_SetNbDataToProcess+0x94>)
 800e6c0:	5c8a      	ldrb	r2, [r1, r2]
 800e6c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e6c6:	7b3a      	ldrb	r2, [r7, #12]
 800e6c8:	490f      	ldr	r1, [pc, #60]	@ (800e708 <UARTEx_SetNbDataToProcess+0x98>)
 800e6ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e6cc:	fb93 f3f2 	sdiv	r3, r3, r2
 800e6d0:	b29a      	uxth	r2, r3
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e6d8:	7bfb      	ldrb	r3, [r7, #15]
 800e6da:	7b7a      	ldrb	r2, [r7, #13]
 800e6dc:	4909      	ldr	r1, [pc, #36]	@ (800e704 <UARTEx_SetNbDataToProcess+0x94>)
 800e6de:	5c8a      	ldrb	r2, [r1, r2]
 800e6e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e6e4:	7b7a      	ldrb	r2, [r7, #13]
 800e6e6:	4908      	ldr	r1, [pc, #32]	@ (800e708 <UARTEx_SetNbDataToProcess+0x98>)
 800e6e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e6ea:	fb93 f3f2 	sdiv	r3, r3, r2
 800e6ee:	b29a      	uxth	r2, r3
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e6f6:	bf00      	nop
 800e6f8:	3714      	adds	r7, #20
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e700:	4770      	bx	lr
 800e702:	bf00      	nop
 800e704:	080119a8 	.word	0x080119a8
 800e708:	080119b0 	.word	0x080119b0

0800e70c <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    const FMC_NORSRAM_InitTypeDef *Init)
{
 800e70c:	b480      	push	{r7}
 800e70e:	b087      	sub	sp, #28
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
 800e714:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800e716:	683b      	ldr	r3, [r7, #0]
 800e718:	681a      	ldr	r2, [r3, #0]
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e720:	683a      	ldr	r2, [r7, #0]
 800e722:	6812      	ldr	r2, [r2, #0]
 800e724:	f023 0101 	bic.w	r1, r3, #1
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	689b      	ldr	r3, [r3, #8]
 800e732:	2b08      	cmp	r3, #8
 800e734:	d102      	bne.n	800e73c <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800e736:	2340      	movs	r3, #64	@ 0x40
 800e738:	617b      	str	r3, [r7, #20]
 800e73a:	e001      	b.n	800e740 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800e73c:	2300      	movs	r3, #0
 800e73e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800e744:	697b      	ldr	r3, [r7, #20]
 800e746:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800e748:	683b      	ldr	r3, [r7, #0]
 800e74a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800e74c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800e74e:	683b      	ldr	r3, [r7, #0]
 800e750:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800e752:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800e754:	683b      	ldr	r3, [r7, #0]
 800e756:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800e758:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800e75a:	683b      	ldr	r3, [r7, #0]
 800e75c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800e75e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800e764:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800e766:	683b      	ldr	r3, [r7, #0]
 800e768:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800e76a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800e770:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WaitSignal              | \
 800e776:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->ExtendedMode            | \
 800e77c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800e77e:	683b      	ldr	r3, [r7, #0]
 800e780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  btcr_reg = (flashaccess                   | \
 800e782:	4313      	orrs	r3, r2
 800e784:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800e786:	683b      	ldr	r3, [r7, #0]
 800e788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e78a:	693a      	ldr	r2, [r7, #16]
 800e78c:	4313      	orrs	r3, r2
 800e78e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800e790:	683b      	ldr	r3, [r7, #0]
 800e792:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e794:	693a      	ldr	r2, [r7, #16]
 800e796:	4313      	orrs	r3, r2
 800e798:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->NBLSetupTime;
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e79e:	693a      	ldr	r2, [r7, #16]
 800e7a0:	4313      	orrs	r3, r2
 800e7a2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7a8:	693a      	ldr	r2, [r7, #16]
 800e7aa:	4313      	orrs	r3, r2
 800e7ac:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800e7ae:	4b3d      	ldr	r3, [pc, #244]	@ (800e8a4 <FMC_NORSRAM_Init+0x198>)
 800e7b0:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e7b8:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e7c0:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_NBLSET;
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 800e7c8:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 800e7d0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	681a      	ldr	r2, [r3, #0]
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	43db      	mvns	r3, r3
 800e7e0:	ea02 0103 	and.w	r1, r2, r3
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	681a      	ldr	r2, [r3, #0]
 800e7e8:	693b      	ldr	r3, [r7, #16]
 800e7ea:	4319      	orrs	r1, r3
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e7f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e7fa:	d10c      	bne.n	800e816 <FMC_NORSRAM_Init+0x10a>
 800e7fc:	683b      	ldr	r3, [r7, #0]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d008      	beq.n	800e816 <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e810:	431a      	orrs	r2, r3
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800e816:	683b      	ldr	r3, [r7, #0]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d006      	beq.n	800e82c <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681a      	ldr	r2, [r3, #0]
 800e822:	683b      	ldr	r3, [r7, #0]
 800e824:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e826:	431a      	orrs	r2, r3
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	601a      	str	r2, [r3, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e832:	2b01      	cmp	r3, #1
 800e834:	d12f      	bne.n	800e896 <FMC_NORSRAM_Init+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	6a1b      	ldr	r3, [r3, #32]
 800e83a:	0c1b      	lsrs	r3, r3, #16
 800e83c:	041b      	lsls	r3, r3, #16
 800e83e:	683a      	ldr	r2, [r7, #0]
 800e840:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800e842:	431a      	orrs	r2, r3
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	621a      	str	r2, [r3, #32]

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	2b04      	cmp	r3, #4
 800e84e:	d014      	beq.n	800e87a <FMC_NORSRAM_Init+0x16e>
 800e850:	2b04      	cmp	r3, #4
 800e852:	d819      	bhi.n	800e888 <FMC_NORSRAM_Init+0x17c>
 800e854:	2b00      	cmp	r3, #0
 800e856:	d002      	beq.n	800e85e <FMC_NORSRAM_Init+0x152>
 800e858:	2b02      	cmp	r3, #2
 800e85a:	d007      	beq.n	800e86c <FMC_NORSRAM_Init+0x160>
 800e85c:	e014      	b.n	800e888 <FMC_NORSRAM_Init+0x17c>
    {
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	6a1b      	ldr	r3, [r3, #32]
 800e862:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	621a      	str	r2, [r3, #32]
        break;
 800e86a:	e014      	b.n	800e896 <FMC_NORSRAM_Init+0x18a>

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	6a1b      	ldr	r3, [r3, #32]
 800e870:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	621a      	str	r2, [r3, #32]
        break;
 800e878:	e00d      	b.n	800e896 <FMC_NORSRAM_Init+0x18a>

      case FMC_NORSRAM_BANK3 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	6a1b      	ldr	r3, [r3, #32]
 800e87e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	621a      	str	r2, [r3, #32]
        break;
 800e886:	e006      	b.n	800e896 <FMC_NORSRAM_Init+0x18a>

      default :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	6a1b      	ldr	r3, [r3, #32]
 800e88c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	621a      	str	r2, [r3, #32]
        break;
 800e894:	bf00      	nop
    }
  }

  return HAL_OK;
 800e896:	2300      	movs	r3, #0
}
 800e898:	4618      	mov	r0, r3
 800e89a:	371c      	adds	r7, #28
 800e89c:	46bd      	mov	sp, r7
 800e89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a2:	4770      	bx	lr
 800e8a4:	0008fb7f 	.word	0x0008fb7f

0800e8a8 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800e8a8:	b480      	push	{r7}
 800e8aa:	b087      	sub	sp, #28
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	60f8      	str	r0, [r7, #12]
 800e8b0:	60b9      	str	r1, [r7, #8]
 800e8b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 800e8b4:	68bb      	ldr	r3, [r7, #8]
 800e8b6:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 800e8b8:	68bb      	ldr	r3, [r7, #8]
 800e8ba:	685b      	ldr	r3, [r3, #4]
 800e8bc:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 800e8be:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 800e8c0:	68bb      	ldr	r3, [r7, #8]
 800e8c2:	689b      	ldr	r3, [r3, #8]
 800e8c4:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 800e8c6:	431a      	orrs	r2, r3
    (Timing->DataHoldTime << FMC_BTRx_DATAHLD_Pos) |
 800e8c8:	68bb      	ldr	r3, [r7, #8]
 800e8ca:	68db      	ldr	r3, [r3, #12]
 800e8cc:	079b      	lsls	r3, r3, #30
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 800e8ce:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 800e8d0:	68bb      	ldr	r3, [r7, #8]
 800e8d2:	691b      	ldr	r3, [r3, #16]
 800e8d4:	041b      	lsls	r3, r3, #16
    (Timing->DataHoldTime << FMC_BTRx_DATAHLD_Pos) |
 800e8d6:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 800e8d8:	68bb      	ldr	r3, [r7, #8]
 800e8da:	695b      	ldr	r3, [r3, #20]
 800e8dc:	3b01      	subs	r3, #1
 800e8de:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 800e8e0:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 800e8e2:	68bb      	ldr	r3, [r7, #8]
 800e8e4:	699b      	ldr	r3, [r3, #24]
 800e8e6:	3b02      	subs	r3, #2
 800e8e8:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 800e8ea:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 800e8ee:	68bb      	ldr	r3, [r7, #8]
 800e8f0:	69db      	ldr	r3, [r3, #28]
  Device->BTCR[Bank + 1U] =
 800e8f2:	687a      	ldr	r2, [r7, #4]
 800e8f4:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 800e8f6:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e906:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e90a:	d113      	bne.n	800e934 <FMC_NORSRAM_Timing_Init+0x8c>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	685b      	ldr	r3, [r3, #4]
 800e910:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e914:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800e916:	68bb      	ldr	r3, [r7, #8]
 800e918:	695b      	ldr	r3, [r3, #20]
 800e91a:	3b01      	subs	r3, #1
 800e91c:	051b      	lsls	r3, r3, #20
 800e91e:	697a      	ldr	r2, [r7, #20]
 800e920:	4313      	orrs	r3, r2
 800e922:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	685b      	ldr	r3, [r3, #4]
 800e928:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800e92c:	697b      	ldr	r3, [r7, #20]
 800e92e:	431a      	orrs	r2, r3
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800e934:	2300      	movs	r3, #0
}
 800e936:	4618      	mov	r0, r3
 800e938:	371c      	adds	r7, #28
 800e93a:	46bd      	mov	sp, r7
 800e93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e940:	4770      	bx	lr

0800e942 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800e942:	b480      	push	{r7}
 800e944:	b085      	sub	sp, #20
 800e946:	af00      	add	r7, sp, #0
 800e948:	60f8      	str	r0, [r7, #12]
 800e94a:	60b9      	str	r1, [r7, #8]
 800e94c:	607a      	str	r2, [r7, #4]
 800e94e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800e950:	683b      	ldr	r3, [r7, #0]
 800e952:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e956:	d121      	bne.n	800e99c <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	687a      	ldr	r2, [r7, #4]
 800e95c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e960:	f003 627f 	and.w	r2, r3, #267386880	@ 0xff00000
 800e964:	68bb      	ldr	r3, [r7, #8]
 800e966:	6819      	ldr	r1, [r3, #0]
 800e968:	68bb      	ldr	r3, [r7, #8]
 800e96a:	685b      	ldr	r3, [r3, #4]
 800e96c:	011b      	lsls	r3, r3, #4
 800e96e:	4319      	orrs	r1, r3
 800e970:	68bb      	ldr	r3, [r7, #8]
 800e972:	689b      	ldr	r3, [r3, #8]
 800e974:	021b      	lsls	r3, r3, #8
 800e976:	4319      	orrs	r1, r3
 800e978:	68bb      	ldr	r3, [r7, #8]
 800e97a:	68db      	ldr	r3, [r3, #12]
 800e97c:	079b      	lsls	r3, r3, #30
 800e97e:	4319      	orrs	r1, r3
 800e980:	68bb      	ldr	r3, [r7, #8]
 800e982:	69db      	ldr	r3, [r3, #28]
 800e984:	4319      	orrs	r1, r3
 800e986:	68bb      	ldr	r3, [r7, #8]
 800e988:	691b      	ldr	r3, [r3, #16]
 800e98a:	041b      	lsls	r3, r3, #16
 800e98c:	430b      	orrs	r3, r1
 800e98e:	ea42 0103 	orr.w	r1, r2, r3
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	687a      	ldr	r2, [r7, #4]
 800e996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800e99a:	e005      	b.n	800e9a8 <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	687a      	ldr	r2, [r7, #4]
 800e9a0:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800e9a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800e9a8:	2300      	movs	r3, #0
}
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	3714      	adds	r7, #20
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b4:	4770      	bx	lr
	...

0800e9b8 <FMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_Init(FMC_NAND_TypeDef *Device, const FMC_NAND_InitTypeDef *Init)
{
 800e9b8:	b480      	push	{r7}
 800e9ba:	b083      	sub	sp, #12
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
 800e9c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FMC_TAR_TIME(Init->TARSetupTime));

  /* NAND bank 3 registers configuration */
  MODIFY_REG(Device->PCR, PCR_CLEAR_MASK, (Init->Waitfeature                            |
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681a      	ldr	r2, [r3, #0]
 800e9c6:	4b10      	ldr	r3, [pc, #64]	@ (800ea08 <FMC_NAND_Init+0x50>)
 800e9c8:	4013      	ands	r3, r2
 800e9ca:	683a      	ldr	r2, [r7, #0]
 800e9cc:	6851      	ldr	r1, [r2, #4]
 800e9ce:	683a      	ldr	r2, [r7, #0]
 800e9d0:	6892      	ldr	r2, [r2, #8]
 800e9d2:	4311      	orrs	r1, r2
 800e9d4:	683a      	ldr	r2, [r7, #0]
 800e9d6:	68d2      	ldr	r2, [r2, #12]
 800e9d8:	4311      	orrs	r1, r2
 800e9da:	683a      	ldr	r2, [r7, #0]
 800e9dc:	6912      	ldr	r2, [r2, #16]
 800e9de:	4311      	orrs	r1, r2
 800e9e0:	683a      	ldr	r2, [r7, #0]
 800e9e2:	6952      	ldr	r2, [r2, #20]
 800e9e4:	0252      	lsls	r2, r2, #9
 800e9e6:	4311      	orrs	r1, r2
 800e9e8:	683a      	ldr	r2, [r7, #0]
 800e9ea:	6992      	ldr	r2, [r2, #24]
 800e9ec:	0352      	lsls	r2, r2, #13
 800e9ee:	430a      	orrs	r2, r1
 800e9f0:	4313      	orrs	r3, r2
 800e9f2:	f043 0208 	orr.w	r2, r3, #8
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	601a      	str	r2, [r3, #0]
                                           Init->EccComputation                         |
                                           Init->ECCPageSize                            |
                                           ((Init->TCLRSetupTime) << FMC_PCR_TCLR_Pos)  |
                                           ((Init->TARSetupTime)  << FMC_PCR_TAR_Pos)));

  return HAL_OK;
 800e9fa:	2300      	movs	r3, #0
}
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	370c      	adds	r7, #12
 800ea00:	46bd      	mov	sp, r7
 800ea02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea06:	4770      	bx	lr
 800ea08:	fff00181 	.word	0xfff00181

0800ea0c <FMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_CommonSpace_Timing_Init(FMC_NAND_TypeDef *Device,
                                                   const FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 800ea0c:	b480      	push	{r7}
 800ea0e:	b085      	sub	sp, #20
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	60f8      	str	r0, [r7, #12]
 800ea14:	60b9      	str	r1, [r7, #8]
 800ea16:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  Device->PMEM = (Timing->SetupTime |
 800ea18:	68bb      	ldr	r3, [r7, #8]
 800ea1a:	681a      	ldr	r2, [r3, #0]
                  ((Timing->WaitSetupTime) << FMC_PMEM_MEMWAIT_Pos) |
 800ea1c:	68bb      	ldr	r3, [r7, #8]
 800ea1e:	685b      	ldr	r3, [r3, #4]
 800ea20:	021b      	lsls	r3, r3, #8
  Device->PMEM = (Timing->SetupTime |
 800ea22:	431a      	orrs	r2, r3
                  ((Timing->HoldSetupTime) << FMC_PMEM_MEMHOLD_Pos) |
 800ea24:	68bb      	ldr	r3, [r7, #8]
 800ea26:	689b      	ldr	r3, [r3, #8]
 800ea28:	041b      	lsls	r3, r3, #16
                  ((Timing->WaitSetupTime) << FMC_PMEM_MEMWAIT_Pos) |
 800ea2a:	431a      	orrs	r2, r3
                  ((Timing->HiZSetupTime) << FMC_PMEM_MEMHIZ_Pos));
 800ea2c:	68bb      	ldr	r3, [r7, #8]
 800ea2e:	68db      	ldr	r3, [r3, #12]
 800ea30:	061b      	lsls	r3, r3, #24
                  ((Timing->HoldSetupTime) << FMC_PMEM_MEMHOLD_Pos) |
 800ea32:	431a      	orrs	r2, r3
  Device->PMEM = (Timing->SetupTime |
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800ea38:	2300      	movs	r3, #0
}
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	3714      	adds	r7, #20
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea44:	4770      	bx	lr

0800ea46 <FMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_AttributeSpace_Timing_Init(FMC_NAND_TypeDef *Device,
                                                      const FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 800ea46:	b480      	push	{r7}
 800ea48:	b085      	sub	sp, #20
 800ea4a:	af00      	add	r7, sp, #0
 800ea4c:	60f8      	str	r0, [r7, #12]
 800ea4e:	60b9      	str	r1, [r7, #8]
 800ea50:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  Device->PATT = (Timing->SetupTime |
 800ea52:	68bb      	ldr	r3, [r7, #8]
 800ea54:	681a      	ldr	r2, [r3, #0]
                  ((Timing->WaitSetupTime) << FMC_PATT_ATTWAIT_Pos) |
 800ea56:	68bb      	ldr	r3, [r7, #8]
 800ea58:	685b      	ldr	r3, [r3, #4]
 800ea5a:	021b      	lsls	r3, r3, #8
  Device->PATT = (Timing->SetupTime |
 800ea5c:	431a      	orrs	r2, r3
                  ((Timing->HoldSetupTime) << FMC_PATT_ATTHOLD_Pos) |
 800ea5e:	68bb      	ldr	r3, [r7, #8]
 800ea60:	689b      	ldr	r3, [r3, #8]
 800ea62:	041b      	lsls	r3, r3, #16
                  ((Timing->WaitSetupTime) << FMC_PATT_ATTWAIT_Pos) |
 800ea64:	431a      	orrs	r2, r3
                  ((Timing->HiZSetupTime)  << FMC_PATT_ATTHIZ_Pos));
 800ea66:	68bb      	ldr	r3, [r7, #8]
 800ea68:	68db      	ldr	r3, [r3, #12]
 800ea6a:	061b      	lsls	r3, r3, #24
                  ((Timing->HoldSetupTime) << FMC_PATT_ATTHOLD_Pos) |
 800ea6c:	431a      	orrs	r2, r3
  Device->PATT = (Timing->SetupTime |
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ea72:	2300      	movs	r3, #0
}
 800ea74:	4618      	mov	r0, r3
 800ea76:	3714      	adds	r7, #20
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7e:	4770      	bx	lr

0800ea80 <__cvt>:
 800ea80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ea84:	ec57 6b10 	vmov	r6, r7, d0
 800ea88:	2f00      	cmp	r7, #0
 800ea8a:	460c      	mov	r4, r1
 800ea8c:	4619      	mov	r1, r3
 800ea8e:	463b      	mov	r3, r7
 800ea90:	bfb4      	ite	lt
 800ea92:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ea96:	2300      	movge	r3, #0
 800ea98:	4691      	mov	r9, r2
 800ea9a:	bfbf      	itttt	lt
 800ea9c:	4632      	movlt	r2, r6
 800ea9e:	461f      	movlt	r7, r3
 800eaa0:	232d      	movlt	r3, #45	@ 0x2d
 800eaa2:	4616      	movlt	r6, r2
 800eaa4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800eaa8:	700b      	strb	r3, [r1, #0]
 800eaaa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eaac:	f023 0820 	bic.w	r8, r3, #32
 800eab0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800eab4:	d005      	beq.n	800eac2 <__cvt+0x42>
 800eab6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800eaba:	d100      	bne.n	800eabe <__cvt+0x3e>
 800eabc:	3401      	adds	r4, #1
 800eabe:	2102      	movs	r1, #2
 800eac0:	e000      	b.n	800eac4 <__cvt+0x44>
 800eac2:	2103      	movs	r1, #3
 800eac4:	ab03      	add	r3, sp, #12
 800eac6:	4622      	mov	r2, r4
 800eac8:	9301      	str	r3, [sp, #4]
 800eaca:	ab02      	add	r3, sp, #8
 800eacc:	ec47 6b10 	vmov	d0, r6, r7
 800ead0:	9300      	str	r3, [sp, #0]
 800ead2:	4653      	mov	r3, sl
 800ead4:	f000 fe70 	bl	800f7b8 <_dtoa_r>
 800ead8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800eadc:	4605      	mov	r5, r0
 800eade:	d119      	bne.n	800eb14 <__cvt+0x94>
 800eae0:	f019 0f01 	tst.w	r9, #1
 800eae4:	d00e      	beq.n	800eb04 <__cvt+0x84>
 800eae6:	eb00 0904 	add.w	r9, r0, r4
 800eaea:	2200      	movs	r2, #0
 800eaec:	2300      	movs	r3, #0
 800eaee:	4630      	mov	r0, r6
 800eaf0:	4639      	mov	r1, r7
 800eaf2:	f7f1 fff9 	bl	8000ae8 <__aeabi_dcmpeq>
 800eaf6:	b108      	cbz	r0, 800eafc <__cvt+0x7c>
 800eaf8:	f8cd 900c 	str.w	r9, [sp, #12]
 800eafc:	2230      	movs	r2, #48	@ 0x30
 800eafe:	9b03      	ldr	r3, [sp, #12]
 800eb00:	454b      	cmp	r3, r9
 800eb02:	d31e      	bcc.n	800eb42 <__cvt+0xc2>
 800eb04:	9b03      	ldr	r3, [sp, #12]
 800eb06:	4628      	mov	r0, r5
 800eb08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eb0a:	1b5b      	subs	r3, r3, r5
 800eb0c:	6013      	str	r3, [r2, #0]
 800eb0e:	b004      	add	sp, #16
 800eb10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb14:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800eb18:	eb00 0904 	add.w	r9, r0, r4
 800eb1c:	d1e5      	bne.n	800eaea <__cvt+0x6a>
 800eb1e:	7803      	ldrb	r3, [r0, #0]
 800eb20:	2b30      	cmp	r3, #48	@ 0x30
 800eb22:	d10a      	bne.n	800eb3a <__cvt+0xba>
 800eb24:	2200      	movs	r2, #0
 800eb26:	2300      	movs	r3, #0
 800eb28:	4630      	mov	r0, r6
 800eb2a:	4639      	mov	r1, r7
 800eb2c:	f7f1 ffdc 	bl	8000ae8 <__aeabi_dcmpeq>
 800eb30:	b918      	cbnz	r0, 800eb3a <__cvt+0xba>
 800eb32:	f1c4 0401 	rsb	r4, r4, #1
 800eb36:	f8ca 4000 	str.w	r4, [sl]
 800eb3a:	f8da 3000 	ldr.w	r3, [sl]
 800eb3e:	4499      	add	r9, r3
 800eb40:	e7d3      	b.n	800eaea <__cvt+0x6a>
 800eb42:	1c59      	adds	r1, r3, #1
 800eb44:	9103      	str	r1, [sp, #12]
 800eb46:	701a      	strb	r2, [r3, #0]
 800eb48:	e7d9      	b.n	800eafe <__cvt+0x7e>

0800eb4a <__exponent>:
 800eb4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eb4c:	2900      	cmp	r1, #0
 800eb4e:	7002      	strb	r2, [r0, #0]
 800eb50:	bfba      	itte	lt
 800eb52:	4249      	neglt	r1, r1
 800eb54:	232d      	movlt	r3, #45	@ 0x2d
 800eb56:	232b      	movge	r3, #43	@ 0x2b
 800eb58:	2909      	cmp	r1, #9
 800eb5a:	7043      	strb	r3, [r0, #1]
 800eb5c:	dd28      	ble.n	800ebb0 <__exponent+0x66>
 800eb5e:	f10d 0307 	add.w	r3, sp, #7
 800eb62:	270a      	movs	r7, #10
 800eb64:	461d      	mov	r5, r3
 800eb66:	461a      	mov	r2, r3
 800eb68:	3b01      	subs	r3, #1
 800eb6a:	fbb1 f6f7 	udiv	r6, r1, r7
 800eb6e:	fb07 1416 	mls	r4, r7, r6, r1
 800eb72:	3430      	adds	r4, #48	@ 0x30
 800eb74:	f802 4c01 	strb.w	r4, [r2, #-1]
 800eb78:	460c      	mov	r4, r1
 800eb7a:	4631      	mov	r1, r6
 800eb7c:	2c63      	cmp	r4, #99	@ 0x63
 800eb7e:	dcf2      	bgt.n	800eb66 <__exponent+0x1c>
 800eb80:	3130      	adds	r1, #48	@ 0x30
 800eb82:	1e94      	subs	r4, r2, #2
 800eb84:	f803 1c01 	strb.w	r1, [r3, #-1]
 800eb88:	1c41      	adds	r1, r0, #1
 800eb8a:	4623      	mov	r3, r4
 800eb8c:	42ab      	cmp	r3, r5
 800eb8e:	d30a      	bcc.n	800eba6 <__exponent+0x5c>
 800eb90:	f10d 0309 	add.w	r3, sp, #9
 800eb94:	1a9b      	subs	r3, r3, r2
 800eb96:	42ac      	cmp	r4, r5
 800eb98:	bf88      	it	hi
 800eb9a:	2300      	movhi	r3, #0
 800eb9c:	3302      	adds	r3, #2
 800eb9e:	4403      	add	r3, r0
 800eba0:	1a18      	subs	r0, r3, r0
 800eba2:	b003      	add	sp, #12
 800eba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eba6:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ebaa:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ebae:	e7ed      	b.n	800eb8c <__exponent+0x42>
 800ebb0:	2330      	movs	r3, #48	@ 0x30
 800ebb2:	3130      	adds	r1, #48	@ 0x30
 800ebb4:	7083      	strb	r3, [r0, #2]
 800ebb6:	1d03      	adds	r3, r0, #4
 800ebb8:	70c1      	strb	r1, [r0, #3]
 800ebba:	e7f1      	b.n	800eba0 <__exponent+0x56>

0800ebbc <_printf_float>:
 800ebbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebc0:	b08d      	sub	sp, #52	@ 0x34
 800ebc2:	460c      	mov	r4, r1
 800ebc4:	4616      	mov	r6, r2
 800ebc6:	461f      	mov	r7, r3
 800ebc8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ebcc:	4605      	mov	r5, r0
 800ebce:	f000 fcdf 	bl	800f590 <_localeconv_r>
 800ebd2:	6803      	ldr	r3, [r0, #0]
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	9304      	str	r3, [sp, #16]
 800ebd8:	f7f1 fb5a 	bl	8000290 <strlen>
 800ebdc:	2300      	movs	r3, #0
 800ebde:	9005      	str	r0, [sp, #20]
 800ebe0:	930a      	str	r3, [sp, #40]	@ 0x28
 800ebe2:	f8d8 3000 	ldr.w	r3, [r8]
 800ebe6:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ebea:	3307      	adds	r3, #7
 800ebec:	f8d4 b000 	ldr.w	fp, [r4]
 800ebf0:	f023 0307 	bic.w	r3, r3, #7
 800ebf4:	f103 0208 	add.w	r2, r3, #8
 800ebf8:	f8c8 2000 	str.w	r2, [r8]
 800ebfc:	f04f 32ff 	mov.w	r2, #4294967295
 800ec00:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ec04:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ec08:	f8cd 8018 	str.w	r8, [sp, #24]
 800ec0c:	9307      	str	r3, [sp, #28]
 800ec0e:	4b9d      	ldr	r3, [pc, #628]	@ (800ee84 <_printf_float+0x2c8>)
 800ec10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ec14:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ec18:	f7f1 ff98 	bl	8000b4c <__aeabi_dcmpun>
 800ec1c:	bb70      	cbnz	r0, 800ec7c <_printf_float+0xc0>
 800ec1e:	f04f 32ff 	mov.w	r2, #4294967295
 800ec22:	4b98      	ldr	r3, [pc, #608]	@ (800ee84 <_printf_float+0x2c8>)
 800ec24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ec28:	f7f1 ff72 	bl	8000b10 <__aeabi_dcmple>
 800ec2c:	bb30      	cbnz	r0, 800ec7c <_printf_float+0xc0>
 800ec2e:	2200      	movs	r2, #0
 800ec30:	2300      	movs	r3, #0
 800ec32:	4640      	mov	r0, r8
 800ec34:	4649      	mov	r1, r9
 800ec36:	f7f1 ff61 	bl	8000afc <__aeabi_dcmplt>
 800ec3a:	b110      	cbz	r0, 800ec42 <_printf_float+0x86>
 800ec3c:	232d      	movs	r3, #45	@ 0x2d
 800ec3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ec42:	4a91      	ldr	r2, [pc, #580]	@ (800ee88 <_printf_float+0x2cc>)
 800ec44:	4b91      	ldr	r3, [pc, #580]	@ (800ee8c <_printf_float+0x2d0>)
 800ec46:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ec4a:	bf94      	ite	ls
 800ec4c:	4690      	movls	r8, r2
 800ec4e:	4698      	movhi	r8, r3
 800ec50:	2303      	movs	r3, #3
 800ec52:	f04f 0900 	mov.w	r9, #0
 800ec56:	6123      	str	r3, [r4, #16]
 800ec58:	f02b 0304 	bic.w	r3, fp, #4
 800ec5c:	6023      	str	r3, [r4, #0]
 800ec5e:	4633      	mov	r3, r6
 800ec60:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ec62:	4621      	mov	r1, r4
 800ec64:	4628      	mov	r0, r5
 800ec66:	9700      	str	r7, [sp, #0]
 800ec68:	f000 f9d2 	bl	800f010 <_printf_common>
 800ec6c:	3001      	adds	r0, #1
 800ec6e:	f040 808d 	bne.w	800ed8c <_printf_float+0x1d0>
 800ec72:	f04f 30ff 	mov.w	r0, #4294967295
 800ec76:	b00d      	add	sp, #52	@ 0x34
 800ec78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec7c:	4642      	mov	r2, r8
 800ec7e:	464b      	mov	r3, r9
 800ec80:	4640      	mov	r0, r8
 800ec82:	4649      	mov	r1, r9
 800ec84:	f7f1 ff62 	bl	8000b4c <__aeabi_dcmpun>
 800ec88:	b140      	cbz	r0, 800ec9c <_printf_float+0xe0>
 800ec8a:	464b      	mov	r3, r9
 800ec8c:	4a80      	ldr	r2, [pc, #512]	@ (800ee90 <_printf_float+0x2d4>)
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	bfbc      	itt	lt
 800ec92:	232d      	movlt	r3, #45	@ 0x2d
 800ec94:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ec98:	4b7e      	ldr	r3, [pc, #504]	@ (800ee94 <_printf_float+0x2d8>)
 800ec9a:	e7d4      	b.n	800ec46 <_printf_float+0x8a>
 800ec9c:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800eca0:	6863      	ldr	r3, [r4, #4]
 800eca2:	9206      	str	r2, [sp, #24]
 800eca4:	1c5a      	adds	r2, r3, #1
 800eca6:	d13b      	bne.n	800ed20 <_printf_float+0x164>
 800eca8:	2306      	movs	r3, #6
 800ecaa:	6063      	str	r3, [r4, #4]
 800ecac:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	4628      	mov	r0, r5
 800ecb4:	6022      	str	r2, [r4, #0]
 800ecb6:	9303      	str	r3, [sp, #12]
 800ecb8:	ab0a      	add	r3, sp, #40	@ 0x28
 800ecba:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ecbe:	ab09      	add	r3, sp, #36	@ 0x24
 800ecc0:	ec49 8b10 	vmov	d0, r8, r9
 800ecc4:	9300      	str	r3, [sp, #0]
 800ecc6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ecca:	6861      	ldr	r1, [r4, #4]
 800eccc:	f7ff fed8 	bl	800ea80 <__cvt>
 800ecd0:	9b06      	ldr	r3, [sp, #24]
 800ecd2:	4680      	mov	r8, r0
 800ecd4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ecd6:	2b47      	cmp	r3, #71	@ 0x47
 800ecd8:	d129      	bne.n	800ed2e <_printf_float+0x172>
 800ecda:	1cc8      	adds	r0, r1, #3
 800ecdc:	db02      	blt.n	800ece4 <_printf_float+0x128>
 800ecde:	6863      	ldr	r3, [r4, #4]
 800ece0:	4299      	cmp	r1, r3
 800ece2:	dd41      	ble.n	800ed68 <_printf_float+0x1ac>
 800ece4:	f1aa 0a02 	sub.w	sl, sl, #2
 800ece8:	fa5f fa8a 	uxtb.w	sl, sl
 800ecec:	3901      	subs	r1, #1
 800ecee:	4652      	mov	r2, sl
 800ecf0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ecf4:	9109      	str	r1, [sp, #36]	@ 0x24
 800ecf6:	f7ff ff28 	bl	800eb4a <__exponent>
 800ecfa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ecfc:	4681      	mov	r9, r0
 800ecfe:	1813      	adds	r3, r2, r0
 800ed00:	2a01      	cmp	r2, #1
 800ed02:	6123      	str	r3, [r4, #16]
 800ed04:	dc02      	bgt.n	800ed0c <_printf_float+0x150>
 800ed06:	6822      	ldr	r2, [r4, #0]
 800ed08:	07d2      	lsls	r2, r2, #31
 800ed0a:	d501      	bpl.n	800ed10 <_printf_float+0x154>
 800ed0c:	3301      	adds	r3, #1
 800ed0e:	6123      	str	r3, [r4, #16]
 800ed10:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d0a2      	beq.n	800ec5e <_printf_float+0xa2>
 800ed18:	232d      	movs	r3, #45	@ 0x2d
 800ed1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ed1e:	e79e      	b.n	800ec5e <_printf_float+0xa2>
 800ed20:	9a06      	ldr	r2, [sp, #24]
 800ed22:	2a47      	cmp	r2, #71	@ 0x47
 800ed24:	d1c2      	bne.n	800ecac <_printf_float+0xf0>
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d1c0      	bne.n	800ecac <_printf_float+0xf0>
 800ed2a:	2301      	movs	r3, #1
 800ed2c:	e7bd      	b.n	800ecaa <_printf_float+0xee>
 800ed2e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ed32:	d9db      	bls.n	800ecec <_printf_float+0x130>
 800ed34:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ed38:	d118      	bne.n	800ed6c <_printf_float+0x1b0>
 800ed3a:	2900      	cmp	r1, #0
 800ed3c:	6863      	ldr	r3, [r4, #4]
 800ed3e:	dd0b      	ble.n	800ed58 <_printf_float+0x19c>
 800ed40:	6121      	str	r1, [r4, #16]
 800ed42:	b913      	cbnz	r3, 800ed4a <_printf_float+0x18e>
 800ed44:	6822      	ldr	r2, [r4, #0]
 800ed46:	07d0      	lsls	r0, r2, #31
 800ed48:	d502      	bpl.n	800ed50 <_printf_float+0x194>
 800ed4a:	3301      	adds	r3, #1
 800ed4c:	440b      	add	r3, r1
 800ed4e:	6123      	str	r3, [r4, #16]
 800ed50:	f04f 0900 	mov.w	r9, #0
 800ed54:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ed56:	e7db      	b.n	800ed10 <_printf_float+0x154>
 800ed58:	b913      	cbnz	r3, 800ed60 <_printf_float+0x1a4>
 800ed5a:	6822      	ldr	r2, [r4, #0]
 800ed5c:	07d2      	lsls	r2, r2, #31
 800ed5e:	d501      	bpl.n	800ed64 <_printf_float+0x1a8>
 800ed60:	3302      	adds	r3, #2
 800ed62:	e7f4      	b.n	800ed4e <_printf_float+0x192>
 800ed64:	2301      	movs	r3, #1
 800ed66:	e7f2      	b.n	800ed4e <_printf_float+0x192>
 800ed68:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ed6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ed6e:	4299      	cmp	r1, r3
 800ed70:	db05      	blt.n	800ed7e <_printf_float+0x1c2>
 800ed72:	6823      	ldr	r3, [r4, #0]
 800ed74:	6121      	str	r1, [r4, #16]
 800ed76:	07d8      	lsls	r0, r3, #31
 800ed78:	d5ea      	bpl.n	800ed50 <_printf_float+0x194>
 800ed7a:	1c4b      	adds	r3, r1, #1
 800ed7c:	e7e7      	b.n	800ed4e <_printf_float+0x192>
 800ed7e:	2900      	cmp	r1, #0
 800ed80:	bfd4      	ite	le
 800ed82:	f1c1 0202 	rsble	r2, r1, #2
 800ed86:	2201      	movgt	r2, #1
 800ed88:	4413      	add	r3, r2
 800ed8a:	e7e0      	b.n	800ed4e <_printf_float+0x192>
 800ed8c:	6823      	ldr	r3, [r4, #0]
 800ed8e:	055a      	lsls	r2, r3, #21
 800ed90:	d407      	bmi.n	800eda2 <_printf_float+0x1e6>
 800ed92:	6923      	ldr	r3, [r4, #16]
 800ed94:	4642      	mov	r2, r8
 800ed96:	4631      	mov	r1, r6
 800ed98:	4628      	mov	r0, r5
 800ed9a:	47b8      	blx	r7
 800ed9c:	3001      	adds	r0, #1
 800ed9e:	d12b      	bne.n	800edf8 <_printf_float+0x23c>
 800eda0:	e767      	b.n	800ec72 <_printf_float+0xb6>
 800eda2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800eda6:	f240 80dd 	bls.w	800ef64 <_printf_float+0x3a8>
 800edaa:	2200      	movs	r2, #0
 800edac:	2300      	movs	r3, #0
 800edae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800edb2:	f7f1 fe99 	bl	8000ae8 <__aeabi_dcmpeq>
 800edb6:	2800      	cmp	r0, #0
 800edb8:	d033      	beq.n	800ee22 <_printf_float+0x266>
 800edba:	2301      	movs	r3, #1
 800edbc:	4a36      	ldr	r2, [pc, #216]	@ (800ee98 <_printf_float+0x2dc>)
 800edbe:	4631      	mov	r1, r6
 800edc0:	4628      	mov	r0, r5
 800edc2:	47b8      	blx	r7
 800edc4:	3001      	adds	r0, #1
 800edc6:	f43f af54 	beq.w	800ec72 <_printf_float+0xb6>
 800edca:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800edce:	4543      	cmp	r3, r8
 800edd0:	db02      	blt.n	800edd8 <_printf_float+0x21c>
 800edd2:	6823      	ldr	r3, [r4, #0]
 800edd4:	07d8      	lsls	r0, r3, #31
 800edd6:	d50f      	bpl.n	800edf8 <_printf_float+0x23c>
 800edd8:	4631      	mov	r1, r6
 800edda:	4628      	mov	r0, r5
 800eddc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ede0:	47b8      	blx	r7
 800ede2:	3001      	adds	r0, #1
 800ede4:	f43f af45 	beq.w	800ec72 <_printf_float+0xb6>
 800ede8:	f04f 0900 	mov.w	r9, #0
 800edec:	f108 38ff 	add.w	r8, r8, #4294967295
 800edf0:	f104 0a1a 	add.w	sl, r4, #26
 800edf4:	45c8      	cmp	r8, r9
 800edf6:	dc09      	bgt.n	800ee0c <_printf_float+0x250>
 800edf8:	6823      	ldr	r3, [r4, #0]
 800edfa:	079b      	lsls	r3, r3, #30
 800edfc:	f100 8103 	bmi.w	800f006 <_printf_float+0x44a>
 800ee00:	68e0      	ldr	r0, [r4, #12]
 800ee02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ee04:	4298      	cmp	r0, r3
 800ee06:	bfb8      	it	lt
 800ee08:	4618      	movlt	r0, r3
 800ee0a:	e734      	b.n	800ec76 <_printf_float+0xba>
 800ee0c:	2301      	movs	r3, #1
 800ee0e:	4652      	mov	r2, sl
 800ee10:	4631      	mov	r1, r6
 800ee12:	4628      	mov	r0, r5
 800ee14:	47b8      	blx	r7
 800ee16:	3001      	adds	r0, #1
 800ee18:	f43f af2b 	beq.w	800ec72 <_printf_float+0xb6>
 800ee1c:	f109 0901 	add.w	r9, r9, #1
 800ee20:	e7e8      	b.n	800edf4 <_printf_float+0x238>
 800ee22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	dc39      	bgt.n	800ee9c <_printf_float+0x2e0>
 800ee28:	2301      	movs	r3, #1
 800ee2a:	4a1b      	ldr	r2, [pc, #108]	@ (800ee98 <_printf_float+0x2dc>)
 800ee2c:	4631      	mov	r1, r6
 800ee2e:	4628      	mov	r0, r5
 800ee30:	47b8      	blx	r7
 800ee32:	3001      	adds	r0, #1
 800ee34:	f43f af1d 	beq.w	800ec72 <_printf_float+0xb6>
 800ee38:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ee3c:	ea59 0303 	orrs.w	r3, r9, r3
 800ee40:	d102      	bne.n	800ee48 <_printf_float+0x28c>
 800ee42:	6823      	ldr	r3, [r4, #0]
 800ee44:	07d9      	lsls	r1, r3, #31
 800ee46:	d5d7      	bpl.n	800edf8 <_printf_float+0x23c>
 800ee48:	4631      	mov	r1, r6
 800ee4a:	4628      	mov	r0, r5
 800ee4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ee50:	47b8      	blx	r7
 800ee52:	3001      	adds	r0, #1
 800ee54:	f43f af0d 	beq.w	800ec72 <_printf_float+0xb6>
 800ee58:	f04f 0a00 	mov.w	sl, #0
 800ee5c:	f104 0b1a 	add.w	fp, r4, #26
 800ee60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee62:	425b      	negs	r3, r3
 800ee64:	4553      	cmp	r3, sl
 800ee66:	dc01      	bgt.n	800ee6c <_printf_float+0x2b0>
 800ee68:	464b      	mov	r3, r9
 800ee6a:	e793      	b.n	800ed94 <_printf_float+0x1d8>
 800ee6c:	2301      	movs	r3, #1
 800ee6e:	465a      	mov	r2, fp
 800ee70:	4631      	mov	r1, r6
 800ee72:	4628      	mov	r0, r5
 800ee74:	47b8      	blx	r7
 800ee76:	3001      	adds	r0, #1
 800ee78:	f43f aefb 	beq.w	800ec72 <_printf_float+0xb6>
 800ee7c:	f10a 0a01 	add.w	sl, sl, #1
 800ee80:	e7ee      	b.n	800ee60 <_printf_float+0x2a4>
 800ee82:	bf00      	nop
 800ee84:	7fefffff 	.word	0x7fefffff
 800ee88:	080119b8 	.word	0x080119b8
 800ee8c:	080119bc 	.word	0x080119bc
 800ee90:	080119c0 	.word	0x080119c0
 800ee94:	080119c4 	.word	0x080119c4
 800ee98:	080119c8 	.word	0x080119c8
 800ee9c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ee9e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800eea2:	4553      	cmp	r3, sl
 800eea4:	bfa8      	it	ge
 800eea6:	4653      	movge	r3, sl
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	4699      	mov	r9, r3
 800eeac:	dc36      	bgt.n	800ef1c <_printf_float+0x360>
 800eeae:	f04f 0b00 	mov.w	fp, #0
 800eeb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eeb6:	f104 021a 	add.w	r2, r4, #26
 800eeba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800eebc:	9306      	str	r3, [sp, #24]
 800eebe:	eba3 0309 	sub.w	r3, r3, r9
 800eec2:	455b      	cmp	r3, fp
 800eec4:	dc31      	bgt.n	800ef2a <_printf_float+0x36e>
 800eec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eec8:	459a      	cmp	sl, r3
 800eeca:	dc3a      	bgt.n	800ef42 <_printf_float+0x386>
 800eecc:	6823      	ldr	r3, [r4, #0]
 800eece:	07da      	lsls	r2, r3, #31
 800eed0:	d437      	bmi.n	800ef42 <_printf_float+0x386>
 800eed2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eed4:	ebaa 0903 	sub.w	r9, sl, r3
 800eed8:	9b06      	ldr	r3, [sp, #24]
 800eeda:	ebaa 0303 	sub.w	r3, sl, r3
 800eede:	4599      	cmp	r9, r3
 800eee0:	bfa8      	it	ge
 800eee2:	4699      	movge	r9, r3
 800eee4:	f1b9 0f00 	cmp.w	r9, #0
 800eee8:	dc33      	bgt.n	800ef52 <_printf_float+0x396>
 800eeea:	f04f 0800 	mov.w	r8, #0
 800eeee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eef2:	f104 0b1a 	add.w	fp, r4, #26
 800eef6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eef8:	ebaa 0303 	sub.w	r3, sl, r3
 800eefc:	eba3 0309 	sub.w	r3, r3, r9
 800ef00:	4543      	cmp	r3, r8
 800ef02:	f77f af79 	ble.w	800edf8 <_printf_float+0x23c>
 800ef06:	2301      	movs	r3, #1
 800ef08:	465a      	mov	r2, fp
 800ef0a:	4631      	mov	r1, r6
 800ef0c:	4628      	mov	r0, r5
 800ef0e:	47b8      	blx	r7
 800ef10:	3001      	adds	r0, #1
 800ef12:	f43f aeae 	beq.w	800ec72 <_printf_float+0xb6>
 800ef16:	f108 0801 	add.w	r8, r8, #1
 800ef1a:	e7ec      	b.n	800eef6 <_printf_float+0x33a>
 800ef1c:	4642      	mov	r2, r8
 800ef1e:	4631      	mov	r1, r6
 800ef20:	4628      	mov	r0, r5
 800ef22:	47b8      	blx	r7
 800ef24:	3001      	adds	r0, #1
 800ef26:	d1c2      	bne.n	800eeae <_printf_float+0x2f2>
 800ef28:	e6a3      	b.n	800ec72 <_printf_float+0xb6>
 800ef2a:	2301      	movs	r3, #1
 800ef2c:	4631      	mov	r1, r6
 800ef2e:	4628      	mov	r0, r5
 800ef30:	9206      	str	r2, [sp, #24]
 800ef32:	47b8      	blx	r7
 800ef34:	3001      	adds	r0, #1
 800ef36:	f43f ae9c 	beq.w	800ec72 <_printf_float+0xb6>
 800ef3a:	f10b 0b01 	add.w	fp, fp, #1
 800ef3e:	9a06      	ldr	r2, [sp, #24]
 800ef40:	e7bb      	b.n	800eeba <_printf_float+0x2fe>
 800ef42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ef46:	4631      	mov	r1, r6
 800ef48:	4628      	mov	r0, r5
 800ef4a:	47b8      	blx	r7
 800ef4c:	3001      	adds	r0, #1
 800ef4e:	d1c0      	bne.n	800eed2 <_printf_float+0x316>
 800ef50:	e68f      	b.n	800ec72 <_printf_float+0xb6>
 800ef52:	9a06      	ldr	r2, [sp, #24]
 800ef54:	464b      	mov	r3, r9
 800ef56:	4631      	mov	r1, r6
 800ef58:	4628      	mov	r0, r5
 800ef5a:	4442      	add	r2, r8
 800ef5c:	47b8      	blx	r7
 800ef5e:	3001      	adds	r0, #1
 800ef60:	d1c3      	bne.n	800eeea <_printf_float+0x32e>
 800ef62:	e686      	b.n	800ec72 <_printf_float+0xb6>
 800ef64:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ef68:	f1ba 0f01 	cmp.w	sl, #1
 800ef6c:	dc01      	bgt.n	800ef72 <_printf_float+0x3b6>
 800ef6e:	07db      	lsls	r3, r3, #31
 800ef70:	d536      	bpl.n	800efe0 <_printf_float+0x424>
 800ef72:	2301      	movs	r3, #1
 800ef74:	4642      	mov	r2, r8
 800ef76:	4631      	mov	r1, r6
 800ef78:	4628      	mov	r0, r5
 800ef7a:	47b8      	blx	r7
 800ef7c:	3001      	adds	r0, #1
 800ef7e:	f43f ae78 	beq.w	800ec72 <_printf_float+0xb6>
 800ef82:	4631      	mov	r1, r6
 800ef84:	4628      	mov	r0, r5
 800ef86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ef8a:	47b8      	blx	r7
 800ef8c:	3001      	adds	r0, #1
 800ef8e:	f43f ae70 	beq.w	800ec72 <_printf_float+0xb6>
 800ef92:	2200      	movs	r2, #0
 800ef94:	2300      	movs	r3, #0
 800ef96:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ef9a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ef9e:	f7f1 fda3 	bl	8000ae8 <__aeabi_dcmpeq>
 800efa2:	b9c0      	cbnz	r0, 800efd6 <_printf_float+0x41a>
 800efa4:	4653      	mov	r3, sl
 800efa6:	f108 0201 	add.w	r2, r8, #1
 800efaa:	4631      	mov	r1, r6
 800efac:	4628      	mov	r0, r5
 800efae:	47b8      	blx	r7
 800efb0:	3001      	adds	r0, #1
 800efb2:	d10c      	bne.n	800efce <_printf_float+0x412>
 800efb4:	e65d      	b.n	800ec72 <_printf_float+0xb6>
 800efb6:	2301      	movs	r3, #1
 800efb8:	465a      	mov	r2, fp
 800efba:	4631      	mov	r1, r6
 800efbc:	4628      	mov	r0, r5
 800efbe:	47b8      	blx	r7
 800efc0:	3001      	adds	r0, #1
 800efc2:	f43f ae56 	beq.w	800ec72 <_printf_float+0xb6>
 800efc6:	f108 0801 	add.w	r8, r8, #1
 800efca:	45d0      	cmp	r8, sl
 800efcc:	dbf3      	blt.n	800efb6 <_printf_float+0x3fa>
 800efce:	464b      	mov	r3, r9
 800efd0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800efd4:	e6df      	b.n	800ed96 <_printf_float+0x1da>
 800efd6:	f04f 0800 	mov.w	r8, #0
 800efda:	f104 0b1a 	add.w	fp, r4, #26
 800efde:	e7f4      	b.n	800efca <_printf_float+0x40e>
 800efe0:	2301      	movs	r3, #1
 800efe2:	4642      	mov	r2, r8
 800efe4:	e7e1      	b.n	800efaa <_printf_float+0x3ee>
 800efe6:	2301      	movs	r3, #1
 800efe8:	464a      	mov	r2, r9
 800efea:	4631      	mov	r1, r6
 800efec:	4628      	mov	r0, r5
 800efee:	47b8      	blx	r7
 800eff0:	3001      	adds	r0, #1
 800eff2:	f43f ae3e 	beq.w	800ec72 <_printf_float+0xb6>
 800eff6:	f108 0801 	add.w	r8, r8, #1
 800effa:	68e3      	ldr	r3, [r4, #12]
 800effc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800effe:	1a5b      	subs	r3, r3, r1
 800f000:	4543      	cmp	r3, r8
 800f002:	dcf0      	bgt.n	800efe6 <_printf_float+0x42a>
 800f004:	e6fc      	b.n	800ee00 <_printf_float+0x244>
 800f006:	f04f 0800 	mov.w	r8, #0
 800f00a:	f104 0919 	add.w	r9, r4, #25
 800f00e:	e7f4      	b.n	800effa <_printf_float+0x43e>

0800f010 <_printf_common>:
 800f010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f014:	4616      	mov	r6, r2
 800f016:	4698      	mov	r8, r3
 800f018:	688a      	ldr	r2, [r1, #8]
 800f01a:	4607      	mov	r7, r0
 800f01c:	690b      	ldr	r3, [r1, #16]
 800f01e:	460c      	mov	r4, r1
 800f020:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f024:	4293      	cmp	r3, r2
 800f026:	bfb8      	it	lt
 800f028:	4613      	movlt	r3, r2
 800f02a:	6033      	str	r3, [r6, #0]
 800f02c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f030:	b10a      	cbz	r2, 800f036 <_printf_common+0x26>
 800f032:	3301      	adds	r3, #1
 800f034:	6033      	str	r3, [r6, #0]
 800f036:	6823      	ldr	r3, [r4, #0]
 800f038:	0699      	lsls	r1, r3, #26
 800f03a:	bf42      	ittt	mi
 800f03c:	6833      	ldrmi	r3, [r6, #0]
 800f03e:	3302      	addmi	r3, #2
 800f040:	6033      	strmi	r3, [r6, #0]
 800f042:	6825      	ldr	r5, [r4, #0]
 800f044:	f015 0506 	ands.w	r5, r5, #6
 800f048:	d106      	bne.n	800f058 <_printf_common+0x48>
 800f04a:	f104 0a19 	add.w	sl, r4, #25
 800f04e:	68e3      	ldr	r3, [r4, #12]
 800f050:	6832      	ldr	r2, [r6, #0]
 800f052:	1a9b      	subs	r3, r3, r2
 800f054:	42ab      	cmp	r3, r5
 800f056:	dc2b      	bgt.n	800f0b0 <_printf_common+0xa0>
 800f058:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f05c:	6822      	ldr	r2, [r4, #0]
 800f05e:	3b00      	subs	r3, #0
 800f060:	bf18      	it	ne
 800f062:	2301      	movne	r3, #1
 800f064:	0692      	lsls	r2, r2, #26
 800f066:	d430      	bmi.n	800f0ca <_printf_common+0xba>
 800f068:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f06c:	4641      	mov	r1, r8
 800f06e:	4638      	mov	r0, r7
 800f070:	47c8      	blx	r9
 800f072:	3001      	adds	r0, #1
 800f074:	d023      	beq.n	800f0be <_printf_common+0xae>
 800f076:	6823      	ldr	r3, [r4, #0]
 800f078:	341a      	adds	r4, #26
 800f07a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800f07e:	f003 0306 	and.w	r3, r3, #6
 800f082:	2b04      	cmp	r3, #4
 800f084:	bf0a      	itet	eq
 800f086:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800f08a:	2500      	movne	r5, #0
 800f08c:	6833      	ldreq	r3, [r6, #0]
 800f08e:	f04f 0600 	mov.w	r6, #0
 800f092:	bf08      	it	eq
 800f094:	1aed      	subeq	r5, r5, r3
 800f096:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800f09a:	bf08      	it	eq
 800f09c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f0a0:	4293      	cmp	r3, r2
 800f0a2:	bfc4      	itt	gt
 800f0a4:	1a9b      	subgt	r3, r3, r2
 800f0a6:	18ed      	addgt	r5, r5, r3
 800f0a8:	42b5      	cmp	r5, r6
 800f0aa:	d11a      	bne.n	800f0e2 <_printf_common+0xd2>
 800f0ac:	2000      	movs	r0, #0
 800f0ae:	e008      	b.n	800f0c2 <_printf_common+0xb2>
 800f0b0:	2301      	movs	r3, #1
 800f0b2:	4652      	mov	r2, sl
 800f0b4:	4641      	mov	r1, r8
 800f0b6:	4638      	mov	r0, r7
 800f0b8:	47c8      	blx	r9
 800f0ba:	3001      	adds	r0, #1
 800f0bc:	d103      	bne.n	800f0c6 <_printf_common+0xb6>
 800f0be:	f04f 30ff 	mov.w	r0, #4294967295
 800f0c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0c6:	3501      	adds	r5, #1
 800f0c8:	e7c1      	b.n	800f04e <_printf_common+0x3e>
 800f0ca:	18e1      	adds	r1, r4, r3
 800f0cc:	1c5a      	adds	r2, r3, #1
 800f0ce:	2030      	movs	r0, #48	@ 0x30
 800f0d0:	3302      	adds	r3, #2
 800f0d2:	4422      	add	r2, r4
 800f0d4:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f0d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f0dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f0e0:	e7c2      	b.n	800f068 <_printf_common+0x58>
 800f0e2:	2301      	movs	r3, #1
 800f0e4:	4622      	mov	r2, r4
 800f0e6:	4641      	mov	r1, r8
 800f0e8:	4638      	mov	r0, r7
 800f0ea:	47c8      	blx	r9
 800f0ec:	3001      	adds	r0, #1
 800f0ee:	d0e6      	beq.n	800f0be <_printf_common+0xae>
 800f0f0:	3601      	adds	r6, #1
 800f0f2:	e7d9      	b.n	800f0a8 <_printf_common+0x98>

0800f0f4 <_printf_i>:
 800f0f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f0f8:	7e0f      	ldrb	r7, [r1, #24]
 800f0fa:	4691      	mov	r9, r2
 800f0fc:	4680      	mov	r8, r0
 800f0fe:	460c      	mov	r4, r1
 800f100:	2f78      	cmp	r7, #120	@ 0x78
 800f102:	469a      	mov	sl, r3
 800f104:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f106:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f10a:	d807      	bhi.n	800f11c <_printf_i+0x28>
 800f10c:	2f62      	cmp	r7, #98	@ 0x62
 800f10e:	d80a      	bhi.n	800f126 <_printf_i+0x32>
 800f110:	2f00      	cmp	r7, #0
 800f112:	f000 80d2 	beq.w	800f2ba <_printf_i+0x1c6>
 800f116:	2f58      	cmp	r7, #88	@ 0x58
 800f118:	f000 80b9 	beq.w	800f28e <_printf_i+0x19a>
 800f11c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f120:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f124:	e03a      	b.n	800f19c <_printf_i+0xa8>
 800f126:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f12a:	2b15      	cmp	r3, #21
 800f12c:	d8f6      	bhi.n	800f11c <_printf_i+0x28>
 800f12e:	a101      	add	r1, pc, #4	@ (adr r1, 800f134 <_printf_i+0x40>)
 800f130:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f134:	0800f18d 	.word	0x0800f18d
 800f138:	0800f1a1 	.word	0x0800f1a1
 800f13c:	0800f11d 	.word	0x0800f11d
 800f140:	0800f11d 	.word	0x0800f11d
 800f144:	0800f11d 	.word	0x0800f11d
 800f148:	0800f11d 	.word	0x0800f11d
 800f14c:	0800f1a1 	.word	0x0800f1a1
 800f150:	0800f11d 	.word	0x0800f11d
 800f154:	0800f11d 	.word	0x0800f11d
 800f158:	0800f11d 	.word	0x0800f11d
 800f15c:	0800f11d 	.word	0x0800f11d
 800f160:	0800f2a1 	.word	0x0800f2a1
 800f164:	0800f1cb 	.word	0x0800f1cb
 800f168:	0800f25b 	.word	0x0800f25b
 800f16c:	0800f11d 	.word	0x0800f11d
 800f170:	0800f11d 	.word	0x0800f11d
 800f174:	0800f2c3 	.word	0x0800f2c3
 800f178:	0800f11d 	.word	0x0800f11d
 800f17c:	0800f1cb 	.word	0x0800f1cb
 800f180:	0800f11d 	.word	0x0800f11d
 800f184:	0800f11d 	.word	0x0800f11d
 800f188:	0800f263 	.word	0x0800f263
 800f18c:	6833      	ldr	r3, [r6, #0]
 800f18e:	1d1a      	adds	r2, r3, #4
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	6032      	str	r2, [r6, #0]
 800f194:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f198:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f19c:	2301      	movs	r3, #1
 800f19e:	e09d      	b.n	800f2dc <_printf_i+0x1e8>
 800f1a0:	6833      	ldr	r3, [r6, #0]
 800f1a2:	6820      	ldr	r0, [r4, #0]
 800f1a4:	1d19      	adds	r1, r3, #4
 800f1a6:	6031      	str	r1, [r6, #0]
 800f1a8:	0606      	lsls	r6, r0, #24
 800f1aa:	d501      	bpl.n	800f1b0 <_printf_i+0xbc>
 800f1ac:	681d      	ldr	r5, [r3, #0]
 800f1ae:	e003      	b.n	800f1b8 <_printf_i+0xc4>
 800f1b0:	0645      	lsls	r5, r0, #25
 800f1b2:	d5fb      	bpl.n	800f1ac <_printf_i+0xb8>
 800f1b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f1b8:	2d00      	cmp	r5, #0
 800f1ba:	da03      	bge.n	800f1c4 <_printf_i+0xd0>
 800f1bc:	232d      	movs	r3, #45	@ 0x2d
 800f1be:	426d      	negs	r5, r5
 800f1c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f1c4:	4859      	ldr	r0, [pc, #356]	@ (800f32c <_printf_i+0x238>)
 800f1c6:	230a      	movs	r3, #10
 800f1c8:	e011      	b.n	800f1ee <_printf_i+0xfa>
 800f1ca:	6821      	ldr	r1, [r4, #0]
 800f1cc:	6833      	ldr	r3, [r6, #0]
 800f1ce:	0608      	lsls	r0, r1, #24
 800f1d0:	f853 5b04 	ldr.w	r5, [r3], #4
 800f1d4:	d402      	bmi.n	800f1dc <_printf_i+0xe8>
 800f1d6:	0649      	lsls	r1, r1, #25
 800f1d8:	bf48      	it	mi
 800f1da:	b2ad      	uxthmi	r5, r5
 800f1dc:	2f6f      	cmp	r7, #111	@ 0x6f
 800f1de:	6033      	str	r3, [r6, #0]
 800f1e0:	4852      	ldr	r0, [pc, #328]	@ (800f32c <_printf_i+0x238>)
 800f1e2:	bf14      	ite	ne
 800f1e4:	230a      	movne	r3, #10
 800f1e6:	2308      	moveq	r3, #8
 800f1e8:	2100      	movs	r1, #0
 800f1ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f1ee:	6866      	ldr	r6, [r4, #4]
 800f1f0:	2e00      	cmp	r6, #0
 800f1f2:	60a6      	str	r6, [r4, #8]
 800f1f4:	bfa2      	ittt	ge
 800f1f6:	6821      	ldrge	r1, [r4, #0]
 800f1f8:	f021 0104 	bicge.w	r1, r1, #4
 800f1fc:	6021      	strge	r1, [r4, #0]
 800f1fe:	b90d      	cbnz	r5, 800f204 <_printf_i+0x110>
 800f200:	2e00      	cmp	r6, #0
 800f202:	d04b      	beq.n	800f29c <_printf_i+0x1a8>
 800f204:	4616      	mov	r6, r2
 800f206:	fbb5 f1f3 	udiv	r1, r5, r3
 800f20a:	fb03 5711 	mls	r7, r3, r1, r5
 800f20e:	5dc7      	ldrb	r7, [r0, r7]
 800f210:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f214:	462f      	mov	r7, r5
 800f216:	460d      	mov	r5, r1
 800f218:	42bb      	cmp	r3, r7
 800f21a:	d9f4      	bls.n	800f206 <_printf_i+0x112>
 800f21c:	2b08      	cmp	r3, #8
 800f21e:	d10b      	bne.n	800f238 <_printf_i+0x144>
 800f220:	6823      	ldr	r3, [r4, #0]
 800f222:	07df      	lsls	r7, r3, #31
 800f224:	d508      	bpl.n	800f238 <_printf_i+0x144>
 800f226:	6923      	ldr	r3, [r4, #16]
 800f228:	6861      	ldr	r1, [r4, #4]
 800f22a:	4299      	cmp	r1, r3
 800f22c:	bfde      	ittt	le
 800f22e:	2330      	movle	r3, #48	@ 0x30
 800f230:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f234:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f238:	1b92      	subs	r2, r2, r6
 800f23a:	6122      	str	r2, [r4, #16]
 800f23c:	464b      	mov	r3, r9
 800f23e:	aa03      	add	r2, sp, #12
 800f240:	4621      	mov	r1, r4
 800f242:	4640      	mov	r0, r8
 800f244:	f8cd a000 	str.w	sl, [sp]
 800f248:	f7ff fee2 	bl	800f010 <_printf_common>
 800f24c:	3001      	adds	r0, #1
 800f24e:	d14a      	bne.n	800f2e6 <_printf_i+0x1f2>
 800f250:	f04f 30ff 	mov.w	r0, #4294967295
 800f254:	b004      	add	sp, #16
 800f256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f25a:	6823      	ldr	r3, [r4, #0]
 800f25c:	f043 0320 	orr.w	r3, r3, #32
 800f260:	6023      	str	r3, [r4, #0]
 800f262:	2778      	movs	r7, #120	@ 0x78
 800f264:	4832      	ldr	r0, [pc, #200]	@ (800f330 <_printf_i+0x23c>)
 800f266:	6823      	ldr	r3, [r4, #0]
 800f268:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f26c:	061f      	lsls	r7, r3, #24
 800f26e:	6831      	ldr	r1, [r6, #0]
 800f270:	f851 5b04 	ldr.w	r5, [r1], #4
 800f274:	d402      	bmi.n	800f27c <_printf_i+0x188>
 800f276:	065f      	lsls	r7, r3, #25
 800f278:	bf48      	it	mi
 800f27a:	b2ad      	uxthmi	r5, r5
 800f27c:	6031      	str	r1, [r6, #0]
 800f27e:	07d9      	lsls	r1, r3, #31
 800f280:	bf44      	itt	mi
 800f282:	f043 0320 	orrmi.w	r3, r3, #32
 800f286:	6023      	strmi	r3, [r4, #0]
 800f288:	b11d      	cbz	r5, 800f292 <_printf_i+0x19e>
 800f28a:	2310      	movs	r3, #16
 800f28c:	e7ac      	b.n	800f1e8 <_printf_i+0xf4>
 800f28e:	4827      	ldr	r0, [pc, #156]	@ (800f32c <_printf_i+0x238>)
 800f290:	e7e9      	b.n	800f266 <_printf_i+0x172>
 800f292:	6823      	ldr	r3, [r4, #0]
 800f294:	f023 0320 	bic.w	r3, r3, #32
 800f298:	6023      	str	r3, [r4, #0]
 800f29a:	e7f6      	b.n	800f28a <_printf_i+0x196>
 800f29c:	4616      	mov	r6, r2
 800f29e:	e7bd      	b.n	800f21c <_printf_i+0x128>
 800f2a0:	6833      	ldr	r3, [r6, #0]
 800f2a2:	6825      	ldr	r5, [r4, #0]
 800f2a4:	1d18      	adds	r0, r3, #4
 800f2a6:	6961      	ldr	r1, [r4, #20]
 800f2a8:	6030      	str	r0, [r6, #0]
 800f2aa:	062e      	lsls	r6, r5, #24
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	d501      	bpl.n	800f2b4 <_printf_i+0x1c0>
 800f2b0:	6019      	str	r1, [r3, #0]
 800f2b2:	e002      	b.n	800f2ba <_printf_i+0x1c6>
 800f2b4:	0668      	lsls	r0, r5, #25
 800f2b6:	d5fb      	bpl.n	800f2b0 <_printf_i+0x1bc>
 800f2b8:	8019      	strh	r1, [r3, #0]
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	4616      	mov	r6, r2
 800f2be:	6123      	str	r3, [r4, #16]
 800f2c0:	e7bc      	b.n	800f23c <_printf_i+0x148>
 800f2c2:	6833      	ldr	r3, [r6, #0]
 800f2c4:	2100      	movs	r1, #0
 800f2c6:	1d1a      	adds	r2, r3, #4
 800f2c8:	6032      	str	r2, [r6, #0]
 800f2ca:	681e      	ldr	r6, [r3, #0]
 800f2cc:	6862      	ldr	r2, [r4, #4]
 800f2ce:	4630      	mov	r0, r6
 800f2d0:	f000 f9d5 	bl	800f67e <memchr>
 800f2d4:	b108      	cbz	r0, 800f2da <_printf_i+0x1e6>
 800f2d6:	1b80      	subs	r0, r0, r6
 800f2d8:	6060      	str	r0, [r4, #4]
 800f2da:	6863      	ldr	r3, [r4, #4]
 800f2dc:	6123      	str	r3, [r4, #16]
 800f2de:	2300      	movs	r3, #0
 800f2e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f2e4:	e7aa      	b.n	800f23c <_printf_i+0x148>
 800f2e6:	6923      	ldr	r3, [r4, #16]
 800f2e8:	4632      	mov	r2, r6
 800f2ea:	4649      	mov	r1, r9
 800f2ec:	4640      	mov	r0, r8
 800f2ee:	47d0      	blx	sl
 800f2f0:	3001      	adds	r0, #1
 800f2f2:	d0ad      	beq.n	800f250 <_printf_i+0x15c>
 800f2f4:	6823      	ldr	r3, [r4, #0]
 800f2f6:	079b      	lsls	r3, r3, #30
 800f2f8:	d413      	bmi.n	800f322 <_printf_i+0x22e>
 800f2fa:	68e0      	ldr	r0, [r4, #12]
 800f2fc:	9b03      	ldr	r3, [sp, #12]
 800f2fe:	4298      	cmp	r0, r3
 800f300:	bfb8      	it	lt
 800f302:	4618      	movlt	r0, r3
 800f304:	e7a6      	b.n	800f254 <_printf_i+0x160>
 800f306:	2301      	movs	r3, #1
 800f308:	4632      	mov	r2, r6
 800f30a:	4649      	mov	r1, r9
 800f30c:	4640      	mov	r0, r8
 800f30e:	47d0      	blx	sl
 800f310:	3001      	adds	r0, #1
 800f312:	d09d      	beq.n	800f250 <_printf_i+0x15c>
 800f314:	3501      	adds	r5, #1
 800f316:	68e3      	ldr	r3, [r4, #12]
 800f318:	9903      	ldr	r1, [sp, #12]
 800f31a:	1a5b      	subs	r3, r3, r1
 800f31c:	42ab      	cmp	r3, r5
 800f31e:	dcf2      	bgt.n	800f306 <_printf_i+0x212>
 800f320:	e7eb      	b.n	800f2fa <_printf_i+0x206>
 800f322:	2500      	movs	r5, #0
 800f324:	f104 0619 	add.w	r6, r4, #25
 800f328:	e7f5      	b.n	800f316 <_printf_i+0x222>
 800f32a:	bf00      	nop
 800f32c:	080119ca 	.word	0x080119ca
 800f330:	080119db 	.word	0x080119db

0800f334 <std>:
 800f334:	2300      	movs	r3, #0
 800f336:	b510      	push	{r4, lr}
 800f338:	4604      	mov	r4, r0
 800f33a:	6083      	str	r3, [r0, #8]
 800f33c:	8181      	strh	r1, [r0, #12]
 800f33e:	4619      	mov	r1, r3
 800f340:	6643      	str	r3, [r0, #100]	@ 0x64
 800f342:	81c2      	strh	r2, [r0, #14]
 800f344:	2208      	movs	r2, #8
 800f346:	6183      	str	r3, [r0, #24]
 800f348:	e9c0 3300 	strd	r3, r3, [r0]
 800f34c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f350:	305c      	adds	r0, #92	@ 0x5c
 800f352:	f000 f914 	bl	800f57e <memset>
 800f356:	4b0d      	ldr	r3, [pc, #52]	@ (800f38c <std+0x58>)
 800f358:	6224      	str	r4, [r4, #32]
 800f35a:	6263      	str	r3, [r4, #36]	@ 0x24
 800f35c:	4b0c      	ldr	r3, [pc, #48]	@ (800f390 <std+0x5c>)
 800f35e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f360:	4b0c      	ldr	r3, [pc, #48]	@ (800f394 <std+0x60>)
 800f362:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f364:	4b0c      	ldr	r3, [pc, #48]	@ (800f398 <std+0x64>)
 800f366:	6323      	str	r3, [r4, #48]	@ 0x30
 800f368:	4b0c      	ldr	r3, [pc, #48]	@ (800f39c <std+0x68>)
 800f36a:	429c      	cmp	r4, r3
 800f36c:	d006      	beq.n	800f37c <std+0x48>
 800f36e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f372:	4294      	cmp	r4, r2
 800f374:	d002      	beq.n	800f37c <std+0x48>
 800f376:	33d0      	adds	r3, #208	@ 0xd0
 800f378:	429c      	cmp	r4, r3
 800f37a:	d105      	bne.n	800f388 <std+0x54>
 800f37c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f384:	f000 b978 	b.w	800f678 <__retarget_lock_init_recursive>
 800f388:	bd10      	pop	{r4, pc}
 800f38a:	bf00      	nop
 800f38c:	0800f4f9 	.word	0x0800f4f9
 800f390:	0800f51b 	.word	0x0800f51b
 800f394:	0800f553 	.word	0x0800f553
 800f398:	0800f577 	.word	0x0800f577
 800f39c:	20005c98 	.word	0x20005c98

0800f3a0 <stdio_exit_handler>:
 800f3a0:	4a02      	ldr	r2, [pc, #8]	@ (800f3ac <stdio_exit_handler+0xc>)
 800f3a2:	4903      	ldr	r1, [pc, #12]	@ (800f3b0 <stdio_exit_handler+0x10>)
 800f3a4:	4803      	ldr	r0, [pc, #12]	@ (800f3b4 <stdio_exit_handler+0x14>)
 800f3a6:	f000 b869 	b.w	800f47c <_fwalk_sglue>
 800f3aa:	bf00      	nop
 800f3ac:	20000028 	.word	0x20000028
 800f3b0:	08011009 	.word	0x08011009
 800f3b4:	20000038 	.word	0x20000038

0800f3b8 <cleanup_stdio>:
 800f3b8:	6841      	ldr	r1, [r0, #4]
 800f3ba:	4b0c      	ldr	r3, [pc, #48]	@ (800f3ec <cleanup_stdio+0x34>)
 800f3bc:	4299      	cmp	r1, r3
 800f3be:	b510      	push	{r4, lr}
 800f3c0:	4604      	mov	r4, r0
 800f3c2:	d001      	beq.n	800f3c8 <cleanup_stdio+0x10>
 800f3c4:	f001 fe20 	bl	8011008 <_fflush_r>
 800f3c8:	68a1      	ldr	r1, [r4, #8]
 800f3ca:	4b09      	ldr	r3, [pc, #36]	@ (800f3f0 <cleanup_stdio+0x38>)
 800f3cc:	4299      	cmp	r1, r3
 800f3ce:	d002      	beq.n	800f3d6 <cleanup_stdio+0x1e>
 800f3d0:	4620      	mov	r0, r4
 800f3d2:	f001 fe19 	bl	8011008 <_fflush_r>
 800f3d6:	68e1      	ldr	r1, [r4, #12]
 800f3d8:	4b06      	ldr	r3, [pc, #24]	@ (800f3f4 <cleanup_stdio+0x3c>)
 800f3da:	4299      	cmp	r1, r3
 800f3dc:	d004      	beq.n	800f3e8 <cleanup_stdio+0x30>
 800f3de:	4620      	mov	r0, r4
 800f3e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f3e4:	f001 be10 	b.w	8011008 <_fflush_r>
 800f3e8:	bd10      	pop	{r4, pc}
 800f3ea:	bf00      	nop
 800f3ec:	20005c98 	.word	0x20005c98
 800f3f0:	20005d00 	.word	0x20005d00
 800f3f4:	20005d68 	.word	0x20005d68

0800f3f8 <global_stdio_init.part.0>:
 800f3f8:	b510      	push	{r4, lr}
 800f3fa:	4b0b      	ldr	r3, [pc, #44]	@ (800f428 <global_stdio_init.part.0+0x30>)
 800f3fc:	2104      	movs	r1, #4
 800f3fe:	4c0b      	ldr	r4, [pc, #44]	@ (800f42c <global_stdio_init.part.0+0x34>)
 800f400:	4a0b      	ldr	r2, [pc, #44]	@ (800f430 <global_stdio_init.part.0+0x38>)
 800f402:	4620      	mov	r0, r4
 800f404:	601a      	str	r2, [r3, #0]
 800f406:	2200      	movs	r2, #0
 800f408:	f7ff ff94 	bl	800f334 <std>
 800f40c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f410:	2201      	movs	r2, #1
 800f412:	2109      	movs	r1, #9
 800f414:	f7ff ff8e 	bl	800f334 <std>
 800f418:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f41c:	2202      	movs	r2, #2
 800f41e:	2112      	movs	r1, #18
 800f420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f424:	f7ff bf86 	b.w	800f334 <std>
 800f428:	20005dd0 	.word	0x20005dd0
 800f42c:	20005c98 	.word	0x20005c98
 800f430:	0800f3a1 	.word	0x0800f3a1

0800f434 <__sfp_lock_acquire>:
 800f434:	4801      	ldr	r0, [pc, #4]	@ (800f43c <__sfp_lock_acquire+0x8>)
 800f436:	f000 b920 	b.w	800f67a <__retarget_lock_acquire_recursive>
 800f43a:	bf00      	nop
 800f43c:	20005dd9 	.word	0x20005dd9

0800f440 <__sfp_lock_release>:
 800f440:	4801      	ldr	r0, [pc, #4]	@ (800f448 <__sfp_lock_release+0x8>)
 800f442:	f000 b91b 	b.w	800f67c <__retarget_lock_release_recursive>
 800f446:	bf00      	nop
 800f448:	20005dd9 	.word	0x20005dd9

0800f44c <__sinit>:
 800f44c:	b510      	push	{r4, lr}
 800f44e:	4604      	mov	r4, r0
 800f450:	f7ff fff0 	bl	800f434 <__sfp_lock_acquire>
 800f454:	6a23      	ldr	r3, [r4, #32]
 800f456:	b11b      	cbz	r3, 800f460 <__sinit+0x14>
 800f458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f45c:	f7ff bff0 	b.w	800f440 <__sfp_lock_release>
 800f460:	4b04      	ldr	r3, [pc, #16]	@ (800f474 <__sinit+0x28>)
 800f462:	6223      	str	r3, [r4, #32]
 800f464:	4b04      	ldr	r3, [pc, #16]	@ (800f478 <__sinit+0x2c>)
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d1f5      	bne.n	800f458 <__sinit+0xc>
 800f46c:	f7ff ffc4 	bl	800f3f8 <global_stdio_init.part.0>
 800f470:	e7f2      	b.n	800f458 <__sinit+0xc>
 800f472:	bf00      	nop
 800f474:	0800f3b9 	.word	0x0800f3b9
 800f478:	20005dd0 	.word	0x20005dd0

0800f47c <_fwalk_sglue>:
 800f47c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f480:	4607      	mov	r7, r0
 800f482:	4688      	mov	r8, r1
 800f484:	4614      	mov	r4, r2
 800f486:	2600      	movs	r6, #0
 800f488:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f48c:	f1b9 0901 	subs.w	r9, r9, #1
 800f490:	d505      	bpl.n	800f49e <_fwalk_sglue+0x22>
 800f492:	6824      	ldr	r4, [r4, #0]
 800f494:	2c00      	cmp	r4, #0
 800f496:	d1f7      	bne.n	800f488 <_fwalk_sglue+0xc>
 800f498:	4630      	mov	r0, r6
 800f49a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f49e:	89ab      	ldrh	r3, [r5, #12]
 800f4a0:	2b01      	cmp	r3, #1
 800f4a2:	d907      	bls.n	800f4b4 <_fwalk_sglue+0x38>
 800f4a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f4a8:	3301      	adds	r3, #1
 800f4aa:	d003      	beq.n	800f4b4 <_fwalk_sglue+0x38>
 800f4ac:	4629      	mov	r1, r5
 800f4ae:	4638      	mov	r0, r7
 800f4b0:	47c0      	blx	r8
 800f4b2:	4306      	orrs	r6, r0
 800f4b4:	3568      	adds	r5, #104	@ 0x68
 800f4b6:	e7e9      	b.n	800f48c <_fwalk_sglue+0x10>

0800f4b8 <siprintf>:
 800f4b8:	b40e      	push	{r1, r2, r3}
 800f4ba:	b500      	push	{lr}
 800f4bc:	b09c      	sub	sp, #112	@ 0x70
 800f4be:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f4c2:	ab1d      	add	r3, sp, #116	@ 0x74
 800f4c4:	9002      	str	r0, [sp, #8]
 800f4c6:	9006      	str	r0, [sp, #24]
 800f4c8:	9107      	str	r1, [sp, #28]
 800f4ca:	9104      	str	r1, [sp, #16]
 800f4cc:	4808      	ldr	r0, [pc, #32]	@ (800f4f0 <siprintf+0x38>)
 800f4ce:	4909      	ldr	r1, [pc, #36]	@ (800f4f4 <siprintf+0x3c>)
 800f4d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4d4:	9105      	str	r1, [sp, #20]
 800f4d6:	a902      	add	r1, sp, #8
 800f4d8:	6800      	ldr	r0, [r0, #0]
 800f4da:	9301      	str	r3, [sp, #4]
 800f4dc:	f001 fc14 	bl	8010d08 <_svfiprintf_r>
 800f4e0:	9b02      	ldr	r3, [sp, #8]
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	701a      	strb	r2, [r3, #0]
 800f4e6:	b01c      	add	sp, #112	@ 0x70
 800f4e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f4ec:	b003      	add	sp, #12
 800f4ee:	4770      	bx	lr
 800f4f0:	20000034 	.word	0x20000034
 800f4f4:	ffff0208 	.word	0xffff0208

0800f4f8 <__sread>:
 800f4f8:	b510      	push	{r4, lr}
 800f4fa:	460c      	mov	r4, r1
 800f4fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f500:	f000 f86c 	bl	800f5dc <_read_r>
 800f504:	2800      	cmp	r0, #0
 800f506:	bfab      	itete	ge
 800f508:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f50a:	89a3      	ldrhlt	r3, [r4, #12]
 800f50c:	181b      	addge	r3, r3, r0
 800f50e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f512:	bfac      	ite	ge
 800f514:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f516:	81a3      	strhlt	r3, [r4, #12]
 800f518:	bd10      	pop	{r4, pc}

0800f51a <__swrite>:
 800f51a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f51e:	461f      	mov	r7, r3
 800f520:	898b      	ldrh	r3, [r1, #12]
 800f522:	4605      	mov	r5, r0
 800f524:	460c      	mov	r4, r1
 800f526:	05db      	lsls	r3, r3, #23
 800f528:	4616      	mov	r6, r2
 800f52a:	d505      	bpl.n	800f538 <__swrite+0x1e>
 800f52c:	2302      	movs	r3, #2
 800f52e:	2200      	movs	r2, #0
 800f530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f534:	f000 f840 	bl	800f5b8 <_lseek_r>
 800f538:	89a3      	ldrh	r3, [r4, #12]
 800f53a:	4632      	mov	r2, r6
 800f53c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f540:	4628      	mov	r0, r5
 800f542:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f546:	81a3      	strh	r3, [r4, #12]
 800f548:	463b      	mov	r3, r7
 800f54a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f54e:	f000 b857 	b.w	800f600 <_write_r>

0800f552 <__sseek>:
 800f552:	b510      	push	{r4, lr}
 800f554:	460c      	mov	r4, r1
 800f556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f55a:	f000 f82d 	bl	800f5b8 <_lseek_r>
 800f55e:	1c43      	adds	r3, r0, #1
 800f560:	89a3      	ldrh	r3, [r4, #12]
 800f562:	bf15      	itete	ne
 800f564:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f566:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f56a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f56e:	81a3      	strheq	r3, [r4, #12]
 800f570:	bf18      	it	ne
 800f572:	81a3      	strhne	r3, [r4, #12]
 800f574:	bd10      	pop	{r4, pc}

0800f576 <__sclose>:
 800f576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f57a:	f000 b80d 	b.w	800f598 <_close_r>

0800f57e <memset>:
 800f57e:	4402      	add	r2, r0
 800f580:	4603      	mov	r3, r0
 800f582:	4293      	cmp	r3, r2
 800f584:	d100      	bne.n	800f588 <memset+0xa>
 800f586:	4770      	bx	lr
 800f588:	f803 1b01 	strb.w	r1, [r3], #1
 800f58c:	e7f9      	b.n	800f582 <memset+0x4>
	...

0800f590 <_localeconv_r>:
 800f590:	4800      	ldr	r0, [pc, #0]	@ (800f594 <_localeconv_r+0x4>)
 800f592:	4770      	bx	lr
 800f594:	20000174 	.word	0x20000174

0800f598 <_close_r>:
 800f598:	b538      	push	{r3, r4, r5, lr}
 800f59a:	2300      	movs	r3, #0
 800f59c:	4d05      	ldr	r5, [pc, #20]	@ (800f5b4 <_close_r+0x1c>)
 800f59e:	4604      	mov	r4, r0
 800f5a0:	4608      	mov	r0, r1
 800f5a2:	602b      	str	r3, [r5, #0]
 800f5a4:	f7f4 fb6a 	bl	8003c7c <_close>
 800f5a8:	1c43      	adds	r3, r0, #1
 800f5aa:	d102      	bne.n	800f5b2 <_close_r+0x1a>
 800f5ac:	682b      	ldr	r3, [r5, #0]
 800f5ae:	b103      	cbz	r3, 800f5b2 <_close_r+0x1a>
 800f5b0:	6023      	str	r3, [r4, #0]
 800f5b2:	bd38      	pop	{r3, r4, r5, pc}
 800f5b4:	20005dd4 	.word	0x20005dd4

0800f5b8 <_lseek_r>:
 800f5b8:	b538      	push	{r3, r4, r5, lr}
 800f5ba:	4604      	mov	r4, r0
 800f5bc:	4d06      	ldr	r5, [pc, #24]	@ (800f5d8 <_lseek_r+0x20>)
 800f5be:	4608      	mov	r0, r1
 800f5c0:	4611      	mov	r1, r2
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	602a      	str	r2, [r5, #0]
 800f5c6:	461a      	mov	r2, r3
 800f5c8:	f7f4 fb7f 	bl	8003cca <_lseek>
 800f5cc:	1c43      	adds	r3, r0, #1
 800f5ce:	d102      	bne.n	800f5d6 <_lseek_r+0x1e>
 800f5d0:	682b      	ldr	r3, [r5, #0]
 800f5d2:	b103      	cbz	r3, 800f5d6 <_lseek_r+0x1e>
 800f5d4:	6023      	str	r3, [r4, #0]
 800f5d6:	bd38      	pop	{r3, r4, r5, pc}
 800f5d8:	20005dd4 	.word	0x20005dd4

0800f5dc <_read_r>:
 800f5dc:	b538      	push	{r3, r4, r5, lr}
 800f5de:	4604      	mov	r4, r0
 800f5e0:	4d06      	ldr	r5, [pc, #24]	@ (800f5fc <_read_r+0x20>)
 800f5e2:	4608      	mov	r0, r1
 800f5e4:	4611      	mov	r1, r2
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	602a      	str	r2, [r5, #0]
 800f5ea:	461a      	mov	r2, r3
 800f5ec:	f7f4 fb0d 	bl	8003c0a <_read>
 800f5f0:	1c43      	adds	r3, r0, #1
 800f5f2:	d102      	bne.n	800f5fa <_read_r+0x1e>
 800f5f4:	682b      	ldr	r3, [r5, #0]
 800f5f6:	b103      	cbz	r3, 800f5fa <_read_r+0x1e>
 800f5f8:	6023      	str	r3, [r4, #0]
 800f5fa:	bd38      	pop	{r3, r4, r5, pc}
 800f5fc:	20005dd4 	.word	0x20005dd4

0800f600 <_write_r>:
 800f600:	b538      	push	{r3, r4, r5, lr}
 800f602:	4604      	mov	r4, r0
 800f604:	4d06      	ldr	r5, [pc, #24]	@ (800f620 <_write_r+0x20>)
 800f606:	4608      	mov	r0, r1
 800f608:	4611      	mov	r1, r2
 800f60a:	2200      	movs	r2, #0
 800f60c:	602a      	str	r2, [r5, #0]
 800f60e:	461a      	mov	r2, r3
 800f610:	f7f4 fb18 	bl	8003c44 <_write>
 800f614:	1c43      	adds	r3, r0, #1
 800f616:	d102      	bne.n	800f61e <_write_r+0x1e>
 800f618:	682b      	ldr	r3, [r5, #0]
 800f61a:	b103      	cbz	r3, 800f61e <_write_r+0x1e>
 800f61c:	6023      	str	r3, [r4, #0]
 800f61e:	bd38      	pop	{r3, r4, r5, pc}
 800f620:	20005dd4 	.word	0x20005dd4

0800f624 <__errno>:
 800f624:	4b01      	ldr	r3, [pc, #4]	@ (800f62c <__errno+0x8>)
 800f626:	6818      	ldr	r0, [r3, #0]
 800f628:	4770      	bx	lr
 800f62a:	bf00      	nop
 800f62c:	20000034 	.word	0x20000034

0800f630 <__libc_init_array>:
 800f630:	b570      	push	{r4, r5, r6, lr}
 800f632:	4d0d      	ldr	r5, [pc, #52]	@ (800f668 <__libc_init_array+0x38>)
 800f634:	2600      	movs	r6, #0
 800f636:	4c0d      	ldr	r4, [pc, #52]	@ (800f66c <__libc_init_array+0x3c>)
 800f638:	1b64      	subs	r4, r4, r5
 800f63a:	10a4      	asrs	r4, r4, #2
 800f63c:	42a6      	cmp	r6, r4
 800f63e:	d109      	bne.n	800f654 <__libc_init_array+0x24>
 800f640:	4d0b      	ldr	r5, [pc, #44]	@ (800f670 <__libc_init_array+0x40>)
 800f642:	2600      	movs	r6, #0
 800f644:	4c0b      	ldr	r4, [pc, #44]	@ (800f674 <__libc_init_array+0x44>)
 800f646:	f002 f87d 	bl	8011744 <_init>
 800f64a:	1b64      	subs	r4, r4, r5
 800f64c:	10a4      	asrs	r4, r4, #2
 800f64e:	42a6      	cmp	r6, r4
 800f650:	d105      	bne.n	800f65e <__libc_init_array+0x2e>
 800f652:	bd70      	pop	{r4, r5, r6, pc}
 800f654:	f855 3b04 	ldr.w	r3, [r5], #4
 800f658:	3601      	adds	r6, #1
 800f65a:	4798      	blx	r3
 800f65c:	e7ee      	b.n	800f63c <__libc_init_array+0xc>
 800f65e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f662:	3601      	adds	r6, #1
 800f664:	4798      	blx	r3
 800f666:	e7f2      	b.n	800f64e <__libc_init_array+0x1e>
 800f668:	08011d30 	.word	0x08011d30
 800f66c:	08011d30 	.word	0x08011d30
 800f670:	08011d30 	.word	0x08011d30
 800f674:	08011d34 	.word	0x08011d34

0800f678 <__retarget_lock_init_recursive>:
 800f678:	4770      	bx	lr

0800f67a <__retarget_lock_acquire_recursive>:
 800f67a:	4770      	bx	lr

0800f67c <__retarget_lock_release_recursive>:
 800f67c:	4770      	bx	lr

0800f67e <memchr>:
 800f67e:	b2c9      	uxtb	r1, r1
 800f680:	4603      	mov	r3, r0
 800f682:	4402      	add	r2, r0
 800f684:	b510      	push	{r4, lr}
 800f686:	4293      	cmp	r3, r2
 800f688:	4618      	mov	r0, r3
 800f68a:	d101      	bne.n	800f690 <memchr+0x12>
 800f68c:	2000      	movs	r0, #0
 800f68e:	e003      	b.n	800f698 <memchr+0x1a>
 800f690:	7804      	ldrb	r4, [r0, #0]
 800f692:	3301      	adds	r3, #1
 800f694:	428c      	cmp	r4, r1
 800f696:	d1f6      	bne.n	800f686 <memchr+0x8>
 800f698:	bd10      	pop	{r4, pc}

0800f69a <quorem>:
 800f69a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f69e:	6903      	ldr	r3, [r0, #16]
 800f6a0:	4607      	mov	r7, r0
 800f6a2:	690c      	ldr	r4, [r1, #16]
 800f6a4:	42a3      	cmp	r3, r4
 800f6a6:	f2c0 8083 	blt.w	800f7b0 <quorem+0x116>
 800f6aa:	3c01      	subs	r4, #1
 800f6ac:	f100 0514 	add.w	r5, r0, #20
 800f6b0:	f101 0814 	add.w	r8, r1, #20
 800f6b4:	00a3      	lsls	r3, r4, #2
 800f6b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f6ba:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f6be:	9300      	str	r3, [sp, #0]
 800f6c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f6c4:	9301      	str	r3, [sp, #4]
 800f6c6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f6ca:	3301      	adds	r3, #1
 800f6cc:	429a      	cmp	r2, r3
 800f6ce:	fbb2 f6f3 	udiv	r6, r2, r3
 800f6d2:	d331      	bcc.n	800f738 <quorem+0x9e>
 800f6d4:	f04f 0a00 	mov.w	sl, #0
 800f6d8:	46c4      	mov	ip, r8
 800f6da:	46ae      	mov	lr, r5
 800f6dc:	46d3      	mov	fp, sl
 800f6de:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f6e2:	b298      	uxth	r0, r3
 800f6e4:	45e1      	cmp	r9, ip
 800f6e6:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800f6ea:	fb06 a000 	mla	r0, r6, r0, sl
 800f6ee:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800f6f2:	b280      	uxth	r0, r0
 800f6f4:	fb06 2303 	mla	r3, r6, r3, r2
 800f6f8:	f8de 2000 	ldr.w	r2, [lr]
 800f6fc:	b292      	uxth	r2, r2
 800f6fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f702:	eba2 0200 	sub.w	r2, r2, r0
 800f706:	b29b      	uxth	r3, r3
 800f708:	f8de 0000 	ldr.w	r0, [lr]
 800f70c:	445a      	add	r2, fp
 800f70e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f712:	b292      	uxth	r2, r2
 800f714:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f718:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f71c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f720:	f84e 2b04 	str.w	r2, [lr], #4
 800f724:	d2db      	bcs.n	800f6de <quorem+0x44>
 800f726:	9b00      	ldr	r3, [sp, #0]
 800f728:	58eb      	ldr	r3, [r5, r3]
 800f72a:	b92b      	cbnz	r3, 800f738 <quorem+0x9e>
 800f72c:	9b01      	ldr	r3, [sp, #4]
 800f72e:	3b04      	subs	r3, #4
 800f730:	429d      	cmp	r5, r3
 800f732:	461a      	mov	r2, r3
 800f734:	d330      	bcc.n	800f798 <quorem+0xfe>
 800f736:	613c      	str	r4, [r7, #16]
 800f738:	4638      	mov	r0, r7
 800f73a:	f001 f97d 	bl	8010a38 <__mcmp>
 800f73e:	2800      	cmp	r0, #0
 800f740:	db26      	blt.n	800f790 <quorem+0xf6>
 800f742:	4629      	mov	r1, r5
 800f744:	2000      	movs	r0, #0
 800f746:	f858 2b04 	ldr.w	r2, [r8], #4
 800f74a:	f8d1 c000 	ldr.w	ip, [r1]
 800f74e:	fa1f fe82 	uxth.w	lr, r2
 800f752:	45c1      	cmp	r9, r8
 800f754:	fa1f f38c 	uxth.w	r3, ip
 800f758:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800f75c:	eba3 030e 	sub.w	r3, r3, lr
 800f760:	4403      	add	r3, r0
 800f762:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f766:	b29b      	uxth	r3, r3
 800f768:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f76c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f770:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f774:	f841 3b04 	str.w	r3, [r1], #4
 800f778:	d2e5      	bcs.n	800f746 <quorem+0xac>
 800f77a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f77e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f782:	b922      	cbnz	r2, 800f78e <quorem+0xf4>
 800f784:	3b04      	subs	r3, #4
 800f786:	429d      	cmp	r5, r3
 800f788:	461a      	mov	r2, r3
 800f78a:	d30b      	bcc.n	800f7a4 <quorem+0x10a>
 800f78c:	613c      	str	r4, [r7, #16]
 800f78e:	3601      	adds	r6, #1
 800f790:	4630      	mov	r0, r6
 800f792:	b003      	add	sp, #12
 800f794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f798:	6812      	ldr	r2, [r2, #0]
 800f79a:	3b04      	subs	r3, #4
 800f79c:	2a00      	cmp	r2, #0
 800f79e:	d1ca      	bne.n	800f736 <quorem+0x9c>
 800f7a0:	3c01      	subs	r4, #1
 800f7a2:	e7c5      	b.n	800f730 <quorem+0x96>
 800f7a4:	6812      	ldr	r2, [r2, #0]
 800f7a6:	3b04      	subs	r3, #4
 800f7a8:	2a00      	cmp	r2, #0
 800f7aa:	d1ef      	bne.n	800f78c <quorem+0xf2>
 800f7ac:	3c01      	subs	r4, #1
 800f7ae:	e7ea      	b.n	800f786 <quorem+0xec>
 800f7b0:	2000      	movs	r0, #0
 800f7b2:	e7ee      	b.n	800f792 <quorem+0xf8>
 800f7b4:	0000      	movs	r0, r0
	...

0800f7b8 <_dtoa_r>:
 800f7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7bc:	69c7      	ldr	r7, [r0, #28]
 800f7be:	b099      	sub	sp, #100	@ 0x64
 800f7c0:	4683      	mov	fp, r0
 800f7c2:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800f7c4:	9109      	str	r1, [sp, #36]	@ 0x24
 800f7c6:	920e      	str	r2, [sp, #56]	@ 0x38
 800f7c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f7ca:	ec55 4b10 	vmov	r4, r5, d0
 800f7ce:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f7d2:	b97f      	cbnz	r7, 800f7f4 <_dtoa_r+0x3c>
 800f7d4:	2010      	movs	r0, #16
 800f7d6:	f000 fdfd 	bl	80103d4 <malloc>
 800f7da:	4602      	mov	r2, r0
 800f7dc:	f8cb 001c 	str.w	r0, [fp, #28]
 800f7e0:	b920      	cbnz	r0, 800f7ec <_dtoa_r+0x34>
 800f7e2:	4ba7      	ldr	r3, [pc, #668]	@ (800fa80 <_dtoa_r+0x2c8>)
 800f7e4:	21ef      	movs	r1, #239	@ 0xef
 800f7e6:	48a7      	ldr	r0, [pc, #668]	@ (800fa84 <_dtoa_r+0x2cc>)
 800f7e8:	f001 fc6e 	bl	80110c8 <__assert_func>
 800f7ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f7f0:	6007      	str	r7, [r0, #0]
 800f7f2:	60c7      	str	r7, [r0, #12]
 800f7f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f7f8:	6819      	ldr	r1, [r3, #0]
 800f7fa:	b159      	cbz	r1, 800f814 <_dtoa_r+0x5c>
 800f7fc:	685a      	ldr	r2, [r3, #4]
 800f7fe:	2301      	movs	r3, #1
 800f800:	4658      	mov	r0, fp
 800f802:	4093      	lsls	r3, r2
 800f804:	604a      	str	r2, [r1, #4]
 800f806:	608b      	str	r3, [r1, #8]
 800f808:	f000 feda 	bl	80105c0 <_Bfree>
 800f80c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f810:	2200      	movs	r2, #0
 800f812:	601a      	str	r2, [r3, #0]
 800f814:	1e2b      	subs	r3, r5, #0
 800f816:	bfb7      	itett	lt
 800f818:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f81c:	2300      	movge	r3, #0
 800f81e:	2201      	movlt	r2, #1
 800f820:	9303      	strlt	r3, [sp, #12]
 800f822:	bfa8      	it	ge
 800f824:	6033      	strge	r3, [r6, #0]
 800f826:	9f03      	ldr	r7, [sp, #12]
 800f828:	4b97      	ldr	r3, [pc, #604]	@ (800fa88 <_dtoa_r+0x2d0>)
 800f82a:	bfb8      	it	lt
 800f82c:	6032      	strlt	r2, [r6, #0]
 800f82e:	43bb      	bics	r3, r7
 800f830:	d112      	bne.n	800f858 <_dtoa_r+0xa0>
 800f832:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f836:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f838:	6013      	str	r3, [r2, #0]
 800f83a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f83e:	4323      	orrs	r3, r4
 800f840:	f000 854c 	beq.w	80102dc <_dtoa_r+0xb24>
 800f844:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f846:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800fa9c <_dtoa_r+0x2e4>
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	f000 854e 	beq.w	80102ec <_dtoa_r+0xb34>
 800f850:	f10a 0303 	add.w	r3, sl, #3
 800f854:	f000 bd48 	b.w	80102e8 <_dtoa_r+0xb30>
 800f858:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f85c:	2200      	movs	r2, #0
 800f85e:	2300      	movs	r3, #0
 800f860:	ec51 0b17 	vmov	r0, r1, d7
 800f864:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800f868:	f7f1 f93e 	bl	8000ae8 <__aeabi_dcmpeq>
 800f86c:	4680      	mov	r8, r0
 800f86e:	b158      	cbz	r0, 800f888 <_dtoa_r+0xd0>
 800f870:	2301      	movs	r3, #1
 800f872:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f874:	6013      	str	r3, [r2, #0]
 800f876:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f878:	b113      	cbz	r3, 800f880 <_dtoa_r+0xc8>
 800f87a:	4b84      	ldr	r3, [pc, #528]	@ (800fa8c <_dtoa_r+0x2d4>)
 800f87c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f87e:	6013      	str	r3, [r2, #0]
 800f880:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800faa0 <_dtoa_r+0x2e8>
 800f884:	f000 bd32 	b.w	80102ec <_dtoa_r+0xb34>
 800f888:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f88c:	aa16      	add	r2, sp, #88	@ 0x58
 800f88e:	a917      	add	r1, sp, #92	@ 0x5c
 800f890:	4658      	mov	r0, fp
 800f892:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f896:	f001 f983 	bl	8010ba0 <__d2b>
 800f89a:	4681      	mov	r9, r0
 800f89c:	2e00      	cmp	r6, #0
 800f89e:	d075      	beq.n	800f98c <_dtoa_r+0x1d4>
 800f8a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f8a2:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f8a6:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800f8aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f8ae:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f8b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f8b6:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f8ba:	4619      	mov	r1, r3
 800f8bc:	2200      	movs	r2, #0
 800f8be:	4b74      	ldr	r3, [pc, #464]	@ (800fa90 <_dtoa_r+0x2d8>)
 800f8c0:	f7f0 fcf2 	bl	80002a8 <__aeabi_dsub>
 800f8c4:	a368      	add	r3, pc, #416	@ (adr r3, 800fa68 <_dtoa_r+0x2b0>)
 800f8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8ca:	f7f0 fea5 	bl	8000618 <__aeabi_dmul>
 800f8ce:	a368      	add	r3, pc, #416	@ (adr r3, 800fa70 <_dtoa_r+0x2b8>)
 800f8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8d4:	f7f0 fcea 	bl	80002ac <__adddf3>
 800f8d8:	4604      	mov	r4, r0
 800f8da:	460d      	mov	r5, r1
 800f8dc:	4630      	mov	r0, r6
 800f8de:	f7f0 fe31 	bl	8000544 <__aeabi_i2d>
 800f8e2:	a365      	add	r3, pc, #404	@ (adr r3, 800fa78 <_dtoa_r+0x2c0>)
 800f8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8e8:	f7f0 fe96 	bl	8000618 <__aeabi_dmul>
 800f8ec:	4602      	mov	r2, r0
 800f8ee:	460b      	mov	r3, r1
 800f8f0:	4620      	mov	r0, r4
 800f8f2:	4629      	mov	r1, r5
 800f8f4:	f7f0 fcda 	bl	80002ac <__adddf3>
 800f8f8:	4604      	mov	r4, r0
 800f8fa:	460d      	mov	r5, r1
 800f8fc:	f7f1 f93c 	bl	8000b78 <__aeabi_d2iz>
 800f900:	2200      	movs	r2, #0
 800f902:	4607      	mov	r7, r0
 800f904:	2300      	movs	r3, #0
 800f906:	4620      	mov	r0, r4
 800f908:	4629      	mov	r1, r5
 800f90a:	f7f1 f8f7 	bl	8000afc <__aeabi_dcmplt>
 800f90e:	b140      	cbz	r0, 800f922 <_dtoa_r+0x16a>
 800f910:	4638      	mov	r0, r7
 800f912:	f7f0 fe17 	bl	8000544 <__aeabi_i2d>
 800f916:	4622      	mov	r2, r4
 800f918:	462b      	mov	r3, r5
 800f91a:	f7f1 f8e5 	bl	8000ae8 <__aeabi_dcmpeq>
 800f91e:	b900      	cbnz	r0, 800f922 <_dtoa_r+0x16a>
 800f920:	3f01      	subs	r7, #1
 800f922:	2f16      	cmp	r7, #22
 800f924:	d851      	bhi.n	800f9ca <_dtoa_r+0x212>
 800f926:	4b5b      	ldr	r3, [pc, #364]	@ (800fa94 <_dtoa_r+0x2dc>)
 800f928:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f92c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f934:	f7f1 f8e2 	bl	8000afc <__aeabi_dcmplt>
 800f938:	2800      	cmp	r0, #0
 800f93a:	d048      	beq.n	800f9ce <_dtoa_r+0x216>
 800f93c:	3f01      	subs	r7, #1
 800f93e:	2300      	movs	r3, #0
 800f940:	9312      	str	r3, [sp, #72]	@ 0x48
 800f942:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f944:	1b9b      	subs	r3, r3, r6
 800f946:	1e5a      	subs	r2, r3, #1
 800f948:	bf46      	itte	mi
 800f94a:	f1c3 0801 	rsbmi	r8, r3, #1
 800f94e:	2300      	movmi	r3, #0
 800f950:	f04f 0800 	movpl.w	r8, #0
 800f954:	9208      	str	r2, [sp, #32]
 800f956:	bf48      	it	mi
 800f958:	9308      	strmi	r3, [sp, #32]
 800f95a:	2f00      	cmp	r7, #0
 800f95c:	db39      	blt.n	800f9d2 <_dtoa_r+0x21a>
 800f95e:	9b08      	ldr	r3, [sp, #32]
 800f960:	970f      	str	r7, [sp, #60]	@ 0x3c
 800f962:	443b      	add	r3, r7
 800f964:	9308      	str	r3, [sp, #32]
 800f966:	2300      	movs	r3, #0
 800f968:	930a      	str	r3, [sp, #40]	@ 0x28
 800f96a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f96c:	2b09      	cmp	r3, #9
 800f96e:	d864      	bhi.n	800fa3a <_dtoa_r+0x282>
 800f970:	2b05      	cmp	r3, #5
 800f972:	bfc5      	ittet	gt
 800f974:	3b04      	subgt	r3, #4
 800f976:	2400      	movgt	r4, #0
 800f978:	2401      	movle	r4, #1
 800f97a:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800f97c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f97e:	3b02      	subs	r3, #2
 800f980:	2b03      	cmp	r3, #3
 800f982:	d865      	bhi.n	800fa50 <_dtoa_r+0x298>
 800f984:	e8df f003 	tbb	[pc, r3]
 800f988:	5737392c 	.word	0x5737392c
 800f98c:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800f990:	441e      	add	r6, r3
 800f992:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f996:	2b20      	cmp	r3, #32
 800f998:	bfc9      	itett	gt
 800f99a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f99e:	f1c3 0320 	rsble	r3, r3, #32
 800f9a2:	409f      	lslgt	r7, r3
 800f9a4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f9a8:	bfd8      	it	le
 800f9aa:	fa04 f003 	lslle.w	r0, r4, r3
 800f9ae:	f106 36ff 	add.w	r6, r6, #4294967295
 800f9b2:	bfc4      	itt	gt
 800f9b4:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f9b8:	ea47 0003 	orrgt.w	r0, r7, r3
 800f9bc:	f7f0 fdb2 	bl	8000524 <__aeabi_ui2d>
 800f9c0:	2201      	movs	r2, #1
 800f9c2:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f9c6:	9214      	str	r2, [sp, #80]	@ 0x50
 800f9c8:	e777      	b.n	800f8ba <_dtoa_r+0x102>
 800f9ca:	2301      	movs	r3, #1
 800f9cc:	e7b8      	b.n	800f940 <_dtoa_r+0x188>
 800f9ce:	9012      	str	r0, [sp, #72]	@ 0x48
 800f9d0:	e7b7      	b.n	800f942 <_dtoa_r+0x18a>
 800f9d2:	427b      	negs	r3, r7
 800f9d4:	eba8 0807 	sub.w	r8, r8, r7
 800f9d8:	930a      	str	r3, [sp, #40]	@ 0x28
 800f9da:	2300      	movs	r3, #0
 800f9dc:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f9de:	e7c4      	b.n	800f96a <_dtoa_r+0x1b2>
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f9e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	dc35      	bgt.n	800fa56 <_dtoa_r+0x29e>
 800f9ea:	2301      	movs	r3, #1
 800f9ec:	461a      	mov	r2, r3
 800f9ee:	9300      	str	r3, [sp, #0]
 800f9f0:	9307      	str	r3, [sp, #28]
 800f9f2:	920e      	str	r2, [sp, #56]	@ 0x38
 800f9f4:	e00b      	b.n	800fa0e <_dtoa_r+0x256>
 800f9f6:	2301      	movs	r3, #1
 800f9f8:	e7f3      	b.n	800f9e2 <_dtoa_r+0x22a>
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f9fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fa00:	18fb      	adds	r3, r7, r3
 800fa02:	9300      	str	r3, [sp, #0]
 800fa04:	3301      	adds	r3, #1
 800fa06:	2b01      	cmp	r3, #1
 800fa08:	9307      	str	r3, [sp, #28]
 800fa0a:	bfb8      	it	lt
 800fa0c:	2301      	movlt	r3, #1
 800fa0e:	f8db 001c 	ldr.w	r0, [fp, #28]
 800fa12:	2100      	movs	r1, #0
 800fa14:	2204      	movs	r2, #4
 800fa16:	f102 0514 	add.w	r5, r2, #20
 800fa1a:	429d      	cmp	r5, r3
 800fa1c:	d91f      	bls.n	800fa5e <_dtoa_r+0x2a6>
 800fa1e:	6041      	str	r1, [r0, #4]
 800fa20:	4658      	mov	r0, fp
 800fa22:	f000 fd8d 	bl	8010540 <_Balloc>
 800fa26:	4682      	mov	sl, r0
 800fa28:	2800      	cmp	r0, #0
 800fa2a:	d13b      	bne.n	800faa4 <_dtoa_r+0x2ec>
 800fa2c:	4b1a      	ldr	r3, [pc, #104]	@ (800fa98 <_dtoa_r+0x2e0>)
 800fa2e:	4602      	mov	r2, r0
 800fa30:	f240 11af 	movw	r1, #431	@ 0x1af
 800fa34:	e6d7      	b.n	800f7e6 <_dtoa_r+0x2e>
 800fa36:	2301      	movs	r3, #1
 800fa38:	e7e0      	b.n	800f9fc <_dtoa_r+0x244>
 800fa3a:	2401      	movs	r4, #1
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800fa40:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa42:	f04f 33ff 	mov.w	r3, #4294967295
 800fa46:	2200      	movs	r2, #0
 800fa48:	9300      	str	r3, [sp, #0]
 800fa4a:	9307      	str	r3, [sp, #28]
 800fa4c:	2312      	movs	r3, #18
 800fa4e:	e7d0      	b.n	800f9f2 <_dtoa_r+0x23a>
 800fa50:	2301      	movs	r3, #1
 800fa52:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fa54:	e7f5      	b.n	800fa42 <_dtoa_r+0x28a>
 800fa56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fa58:	9300      	str	r3, [sp, #0]
 800fa5a:	9307      	str	r3, [sp, #28]
 800fa5c:	e7d7      	b.n	800fa0e <_dtoa_r+0x256>
 800fa5e:	3101      	adds	r1, #1
 800fa60:	0052      	lsls	r2, r2, #1
 800fa62:	e7d8      	b.n	800fa16 <_dtoa_r+0x25e>
 800fa64:	f3af 8000 	nop.w
 800fa68:	636f4361 	.word	0x636f4361
 800fa6c:	3fd287a7 	.word	0x3fd287a7
 800fa70:	8b60c8b3 	.word	0x8b60c8b3
 800fa74:	3fc68a28 	.word	0x3fc68a28
 800fa78:	509f79fb 	.word	0x509f79fb
 800fa7c:	3fd34413 	.word	0x3fd34413
 800fa80:	080119f9 	.word	0x080119f9
 800fa84:	08011a10 	.word	0x08011a10
 800fa88:	7ff00000 	.word	0x7ff00000
 800fa8c:	080119c9 	.word	0x080119c9
 800fa90:	3ff80000 	.word	0x3ff80000
 800fa94:	08011b08 	.word	0x08011b08
 800fa98:	08011a68 	.word	0x08011a68
 800fa9c:	080119f5 	.word	0x080119f5
 800faa0:	080119c8 	.word	0x080119c8
 800faa4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800faa8:	6018      	str	r0, [r3, #0]
 800faaa:	9b07      	ldr	r3, [sp, #28]
 800faac:	2b0e      	cmp	r3, #14
 800faae:	f200 80a4 	bhi.w	800fbfa <_dtoa_r+0x442>
 800fab2:	2c00      	cmp	r4, #0
 800fab4:	f000 80a1 	beq.w	800fbfa <_dtoa_r+0x442>
 800fab8:	2f00      	cmp	r7, #0
 800faba:	dd33      	ble.n	800fb24 <_dtoa_r+0x36c>
 800fabc:	f007 020f 	and.w	r2, r7, #15
 800fac0:	4bac      	ldr	r3, [pc, #688]	@ (800fd74 <_dtoa_r+0x5bc>)
 800fac2:	05f8      	lsls	r0, r7, #23
 800fac4:	ea4f 1427 	mov.w	r4, r7, asr #4
 800fac8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800facc:	ed93 7b00 	vldr	d7, [r3]
 800fad0:	ed8d 7b04 	vstr	d7, [sp, #16]
 800fad4:	d516      	bpl.n	800fb04 <_dtoa_r+0x34c>
 800fad6:	4ba8      	ldr	r3, [pc, #672]	@ (800fd78 <_dtoa_r+0x5c0>)
 800fad8:	f004 040f 	and.w	r4, r4, #15
 800fadc:	2603      	movs	r6, #3
 800fade:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fae2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fae6:	f7f0 fec1 	bl	800086c <__aeabi_ddiv>
 800faea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800faee:	4da2      	ldr	r5, [pc, #648]	@ (800fd78 <_dtoa_r+0x5c0>)
 800faf0:	b954      	cbnz	r4, 800fb08 <_dtoa_r+0x350>
 800faf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800faf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fafa:	f7f0 feb7 	bl	800086c <__aeabi_ddiv>
 800fafe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fb02:	e028      	b.n	800fb56 <_dtoa_r+0x39e>
 800fb04:	2602      	movs	r6, #2
 800fb06:	e7f2      	b.n	800faee <_dtoa_r+0x336>
 800fb08:	07e1      	lsls	r1, r4, #31
 800fb0a:	d508      	bpl.n	800fb1e <_dtoa_r+0x366>
 800fb0c:	3601      	adds	r6, #1
 800fb0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fb12:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fb16:	f7f0 fd7f 	bl	8000618 <__aeabi_dmul>
 800fb1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fb1e:	1064      	asrs	r4, r4, #1
 800fb20:	3508      	adds	r5, #8
 800fb22:	e7e5      	b.n	800faf0 <_dtoa_r+0x338>
 800fb24:	f000 80d2 	beq.w	800fccc <_dtoa_r+0x514>
 800fb28:	427c      	negs	r4, r7
 800fb2a:	4b92      	ldr	r3, [pc, #584]	@ (800fd74 <_dtoa_r+0x5bc>)
 800fb2c:	4d92      	ldr	r5, [pc, #584]	@ (800fd78 <_dtoa_r+0x5c0>)
 800fb2e:	2602      	movs	r6, #2
 800fb30:	f004 020f 	and.w	r2, r4, #15
 800fb34:	1124      	asrs	r4, r4, #4
 800fb36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fb3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fb3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb42:	f7f0 fd69 	bl	8000618 <__aeabi_dmul>
 800fb46:	2300      	movs	r3, #0
 800fb48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fb4c:	2c00      	cmp	r4, #0
 800fb4e:	f040 80b2 	bne.w	800fcb6 <_dtoa_r+0x4fe>
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d1d3      	bne.n	800fafe <_dtoa_r+0x346>
 800fb56:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fb58:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	f000 80b7 	beq.w	800fcd0 <_dtoa_r+0x518>
 800fb62:	2200      	movs	r2, #0
 800fb64:	4b85      	ldr	r3, [pc, #532]	@ (800fd7c <_dtoa_r+0x5c4>)
 800fb66:	4620      	mov	r0, r4
 800fb68:	4629      	mov	r1, r5
 800fb6a:	f7f0 ffc7 	bl	8000afc <__aeabi_dcmplt>
 800fb6e:	2800      	cmp	r0, #0
 800fb70:	f000 80ae 	beq.w	800fcd0 <_dtoa_r+0x518>
 800fb74:	9b07      	ldr	r3, [sp, #28]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	f000 80aa 	beq.w	800fcd0 <_dtoa_r+0x518>
 800fb7c:	9b00      	ldr	r3, [sp, #0]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	dd37      	ble.n	800fbf2 <_dtoa_r+0x43a>
 800fb82:	1e7b      	subs	r3, r7, #1
 800fb84:	4620      	mov	r0, r4
 800fb86:	2200      	movs	r2, #0
 800fb88:	4629      	mov	r1, r5
 800fb8a:	9304      	str	r3, [sp, #16]
 800fb8c:	3601      	adds	r6, #1
 800fb8e:	4b7c      	ldr	r3, [pc, #496]	@ (800fd80 <_dtoa_r+0x5c8>)
 800fb90:	f7f0 fd42 	bl	8000618 <__aeabi_dmul>
 800fb94:	9c00      	ldr	r4, [sp, #0]
 800fb96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fb9a:	4630      	mov	r0, r6
 800fb9c:	f7f0 fcd2 	bl	8000544 <__aeabi_i2d>
 800fba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fba4:	f7f0 fd38 	bl	8000618 <__aeabi_dmul>
 800fba8:	2200      	movs	r2, #0
 800fbaa:	4b76      	ldr	r3, [pc, #472]	@ (800fd84 <_dtoa_r+0x5cc>)
 800fbac:	f7f0 fb7e 	bl	80002ac <__adddf3>
 800fbb0:	4605      	mov	r5, r0
 800fbb2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800fbb6:	2c00      	cmp	r4, #0
 800fbb8:	f040 808d 	bne.w	800fcd6 <_dtoa_r+0x51e>
 800fbbc:	2200      	movs	r2, #0
 800fbbe:	4b72      	ldr	r3, [pc, #456]	@ (800fd88 <_dtoa_r+0x5d0>)
 800fbc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fbc4:	f7f0 fb70 	bl	80002a8 <__aeabi_dsub>
 800fbc8:	4602      	mov	r2, r0
 800fbca:	460b      	mov	r3, r1
 800fbcc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fbd0:	462a      	mov	r2, r5
 800fbd2:	4633      	mov	r3, r6
 800fbd4:	f7f0 ffb0 	bl	8000b38 <__aeabi_dcmpgt>
 800fbd8:	2800      	cmp	r0, #0
 800fbda:	f040 828b 	bne.w	80100f4 <_dtoa_r+0x93c>
 800fbde:	462a      	mov	r2, r5
 800fbe0:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800fbe4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fbe8:	f7f0 ff88 	bl	8000afc <__aeabi_dcmplt>
 800fbec:	2800      	cmp	r0, #0
 800fbee:	f040 8128 	bne.w	800fe42 <_dtoa_r+0x68a>
 800fbf2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800fbf6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800fbfa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	f2c0 815a 	blt.w	800feb6 <_dtoa_r+0x6fe>
 800fc02:	2f0e      	cmp	r7, #14
 800fc04:	f300 8157 	bgt.w	800feb6 <_dtoa_r+0x6fe>
 800fc08:	4b5a      	ldr	r3, [pc, #360]	@ (800fd74 <_dtoa_r+0x5bc>)
 800fc0a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fc0e:	ed93 7b00 	vldr	d7, [r3]
 800fc12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	ed8d 7b00 	vstr	d7, [sp]
 800fc1a:	da03      	bge.n	800fc24 <_dtoa_r+0x46c>
 800fc1c:	9b07      	ldr	r3, [sp, #28]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	f340 8101 	ble.w	800fe26 <_dtoa_r+0x66e>
 800fc24:	4656      	mov	r6, sl
 800fc26:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800fc2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fc2e:	4620      	mov	r0, r4
 800fc30:	4629      	mov	r1, r5
 800fc32:	f7f0 fe1b 	bl	800086c <__aeabi_ddiv>
 800fc36:	f7f0 ff9f 	bl	8000b78 <__aeabi_d2iz>
 800fc3a:	4680      	mov	r8, r0
 800fc3c:	f7f0 fc82 	bl	8000544 <__aeabi_i2d>
 800fc40:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fc44:	f7f0 fce8 	bl	8000618 <__aeabi_dmul>
 800fc48:	4602      	mov	r2, r0
 800fc4a:	4620      	mov	r0, r4
 800fc4c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800fc50:	460b      	mov	r3, r1
 800fc52:	4629      	mov	r1, r5
 800fc54:	f7f0 fb28 	bl	80002a8 <__aeabi_dsub>
 800fc58:	9d07      	ldr	r5, [sp, #28]
 800fc5a:	f806 4b01 	strb.w	r4, [r6], #1
 800fc5e:	eba6 040a 	sub.w	r4, r6, sl
 800fc62:	4602      	mov	r2, r0
 800fc64:	460b      	mov	r3, r1
 800fc66:	42a5      	cmp	r5, r4
 800fc68:	f040 8117 	bne.w	800fe9a <_dtoa_r+0x6e2>
 800fc6c:	f7f0 fb1e 	bl	80002ac <__adddf3>
 800fc70:	4604      	mov	r4, r0
 800fc72:	460d      	mov	r5, r1
 800fc74:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fc78:	f7f0 ff5e 	bl	8000b38 <__aeabi_dcmpgt>
 800fc7c:	2800      	cmp	r0, #0
 800fc7e:	f040 80f9 	bne.w	800fe74 <_dtoa_r+0x6bc>
 800fc82:	4620      	mov	r0, r4
 800fc84:	4629      	mov	r1, r5
 800fc86:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fc8a:	f7f0 ff2d 	bl	8000ae8 <__aeabi_dcmpeq>
 800fc8e:	b118      	cbz	r0, 800fc98 <_dtoa_r+0x4e0>
 800fc90:	f018 0f01 	tst.w	r8, #1
 800fc94:	f040 80ee 	bne.w	800fe74 <_dtoa_r+0x6bc>
 800fc98:	4649      	mov	r1, r9
 800fc9a:	4658      	mov	r0, fp
 800fc9c:	f000 fc90 	bl	80105c0 <_Bfree>
 800fca0:	2300      	movs	r3, #0
 800fca2:	3701      	adds	r7, #1
 800fca4:	7033      	strb	r3, [r6, #0]
 800fca6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fca8:	601f      	str	r7, [r3, #0]
 800fcaa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	f000 831d 	beq.w	80102ec <_dtoa_r+0xb34>
 800fcb2:	601e      	str	r6, [r3, #0]
 800fcb4:	e31a      	b.n	80102ec <_dtoa_r+0xb34>
 800fcb6:	07e2      	lsls	r2, r4, #31
 800fcb8:	d505      	bpl.n	800fcc6 <_dtoa_r+0x50e>
 800fcba:	3601      	adds	r6, #1
 800fcbc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fcc0:	f7f0 fcaa 	bl	8000618 <__aeabi_dmul>
 800fcc4:	2301      	movs	r3, #1
 800fcc6:	1064      	asrs	r4, r4, #1
 800fcc8:	3508      	adds	r5, #8
 800fcca:	e73f      	b.n	800fb4c <_dtoa_r+0x394>
 800fccc:	2602      	movs	r6, #2
 800fcce:	e742      	b.n	800fb56 <_dtoa_r+0x39e>
 800fcd0:	9c07      	ldr	r4, [sp, #28]
 800fcd2:	9704      	str	r7, [sp, #16]
 800fcd4:	e761      	b.n	800fb9a <_dtoa_r+0x3e2>
 800fcd6:	4b27      	ldr	r3, [pc, #156]	@ (800fd74 <_dtoa_r+0x5bc>)
 800fcd8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fcda:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fcde:	4454      	add	r4, sl
 800fce0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fce4:	2900      	cmp	r1, #0
 800fce6:	d053      	beq.n	800fd90 <_dtoa_r+0x5d8>
 800fce8:	2000      	movs	r0, #0
 800fcea:	4928      	ldr	r1, [pc, #160]	@ (800fd8c <_dtoa_r+0x5d4>)
 800fcec:	f7f0 fdbe 	bl	800086c <__aeabi_ddiv>
 800fcf0:	4633      	mov	r3, r6
 800fcf2:	4656      	mov	r6, sl
 800fcf4:	462a      	mov	r2, r5
 800fcf6:	f7f0 fad7 	bl	80002a8 <__aeabi_dsub>
 800fcfa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800fcfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fd02:	f7f0 ff39 	bl	8000b78 <__aeabi_d2iz>
 800fd06:	4605      	mov	r5, r0
 800fd08:	f7f0 fc1c 	bl	8000544 <__aeabi_i2d>
 800fd0c:	4602      	mov	r2, r0
 800fd0e:	460b      	mov	r3, r1
 800fd10:	3530      	adds	r5, #48	@ 0x30
 800fd12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fd16:	f7f0 fac7 	bl	80002a8 <__aeabi_dsub>
 800fd1a:	4602      	mov	r2, r0
 800fd1c:	460b      	mov	r3, r1
 800fd1e:	f806 5b01 	strb.w	r5, [r6], #1
 800fd22:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fd26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800fd2a:	f7f0 fee7 	bl	8000afc <__aeabi_dcmplt>
 800fd2e:	2800      	cmp	r0, #0
 800fd30:	d171      	bne.n	800fe16 <_dtoa_r+0x65e>
 800fd32:	2000      	movs	r0, #0
 800fd34:	4911      	ldr	r1, [pc, #68]	@ (800fd7c <_dtoa_r+0x5c4>)
 800fd36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fd3a:	f7f0 fab5 	bl	80002a8 <__aeabi_dsub>
 800fd3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800fd42:	f7f0 fedb 	bl	8000afc <__aeabi_dcmplt>
 800fd46:	2800      	cmp	r0, #0
 800fd48:	f040 8095 	bne.w	800fe76 <_dtoa_r+0x6be>
 800fd4c:	42a6      	cmp	r6, r4
 800fd4e:	f43f af50 	beq.w	800fbf2 <_dtoa_r+0x43a>
 800fd52:	2200      	movs	r2, #0
 800fd54:	4b0a      	ldr	r3, [pc, #40]	@ (800fd80 <_dtoa_r+0x5c8>)
 800fd56:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800fd5a:	f7f0 fc5d 	bl	8000618 <__aeabi_dmul>
 800fd5e:	2200      	movs	r2, #0
 800fd60:	4b07      	ldr	r3, [pc, #28]	@ (800fd80 <_dtoa_r+0x5c8>)
 800fd62:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800fd66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fd6a:	f7f0 fc55 	bl	8000618 <__aeabi_dmul>
 800fd6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fd72:	e7c4      	b.n	800fcfe <_dtoa_r+0x546>
 800fd74:	08011b08 	.word	0x08011b08
 800fd78:	08011ae0 	.word	0x08011ae0
 800fd7c:	3ff00000 	.word	0x3ff00000
 800fd80:	40240000 	.word	0x40240000
 800fd84:	401c0000 	.word	0x401c0000
 800fd88:	40140000 	.word	0x40140000
 800fd8c:	3fe00000 	.word	0x3fe00000
 800fd90:	4631      	mov	r1, r6
 800fd92:	4656      	mov	r6, sl
 800fd94:	4628      	mov	r0, r5
 800fd96:	f7f0 fc3f 	bl	8000618 <__aeabi_dmul>
 800fd9a:	9415      	str	r4, [sp, #84]	@ 0x54
 800fd9c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800fda0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fda4:	f7f0 fee8 	bl	8000b78 <__aeabi_d2iz>
 800fda8:	4605      	mov	r5, r0
 800fdaa:	f7f0 fbcb 	bl	8000544 <__aeabi_i2d>
 800fdae:	4602      	mov	r2, r0
 800fdb0:	3530      	adds	r5, #48	@ 0x30
 800fdb2:	460b      	mov	r3, r1
 800fdb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fdb8:	f7f0 fa76 	bl	80002a8 <__aeabi_dsub>
 800fdbc:	f806 5b01 	strb.w	r5, [r6], #1
 800fdc0:	4602      	mov	r2, r0
 800fdc2:	460b      	mov	r3, r1
 800fdc4:	42a6      	cmp	r6, r4
 800fdc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fdca:	f04f 0200 	mov.w	r2, #0
 800fdce:	d124      	bne.n	800fe1a <_dtoa_r+0x662>
 800fdd0:	4bac      	ldr	r3, [pc, #688]	@ (8010084 <_dtoa_r+0x8cc>)
 800fdd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800fdd6:	f7f0 fa69 	bl	80002ac <__adddf3>
 800fdda:	4602      	mov	r2, r0
 800fddc:	460b      	mov	r3, r1
 800fdde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fde2:	f7f0 fea9 	bl	8000b38 <__aeabi_dcmpgt>
 800fde6:	2800      	cmp	r0, #0
 800fde8:	d145      	bne.n	800fe76 <_dtoa_r+0x6be>
 800fdea:	2000      	movs	r0, #0
 800fdec:	49a5      	ldr	r1, [pc, #660]	@ (8010084 <_dtoa_r+0x8cc>)
 800fdee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800fdf2:	f7f0 fa59 	bl	80002a8 <__aeabi_dsub>
 800fdf6:	4602      	mov	r2, r0
 800fdf8:	460b      	mov	r3, r1
 800fdfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fdfe:	f7f0 fe7d 	bl	8000afc <__aeabi_dcmplt>
 800fe02:	2800      	cmp	r0, #0
 800fe04:	f43f aef5 	beq.w	800fbf2 <_dtoa_r+0x43a>
 800fe08:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800fe0a:	1e73      	subs	r3, r6, #1
 800fe0c:	9315      	str	r3, [sp, #84]	@ 0x54
 800fe0e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fe12:	2b30      	cmp	r3, #48	@ 0x30
 800fe14:	d0f8      	beq.n	800fe08 <_dtoa_r+0x650>
 800fe16:	9f04      	ldr	r7, [sp, #16]
 800fe18:	e73e      	b.n	800fc98 <_dtoa_r+0x4e0>
 800fe1a:	4b9b      	ldr	r3, [pc, #620]	@ (8010088 <_dtoa_r+0x8d0>)
 800fe1c:	f7f0 fbfc 	bl	8000618 <__aeabi_dmul>
 800fe20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fe24:	e7bc      	b.n	800fda0 <_dtoa_r+0x5e8>
 800fe26:	d10c      	bne.n	800fe42 <_dtoa_r+0x68a>
 800fe28:	2200      	movs	r2, #0
 800fe2a:	4b98      	ldr	r3, [pc, #608]	@ (801008c <_dtoa_r+0x8d4>)
 800fe2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fe30:	f7f0 fbf2 	bl	8000618 <__aeabi_dmul>
 800fe34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fe38:	f7f0 fe74 	bl	8000b24 <__aeabi_dcmpge>
 800fe3c:	2800      	cmp	r0, #0
 800fe3e:	f000 8157 	beq.w	80100f0 <_dtoa_r+0x938>
 800fe42:	2400      	movs	r4, #0
 800fe44:	4625      	mov	r5, r4
 800fe46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fe48:	4656      	mov	r6, sl
 800fe4a:	43db      	mvns	r3, r3
 800fe4c:	9304      	str	r3, [sp, #16]
 800fe4e:	2700      	movs	r7, #0
 800fe50:	4621      	mov	r1, r4
 800fe52:	4658      	mov	r0, fp
 800fe54:	f000 fbb4 	bl	80105c0 <_Bfree>
 800fe58:	2d00      	cmp	r5, #0
 800fe5a:	d0dc      	beq.n	800fe16 <_dtoa_r+0x65e>
 800fe5c:	b12f      	cbz	r7, 800fe6a <_dtoa_r+0x6b2>
 800fe5e:	42af      	cmp	r7, r5
 800fe60:	d003      	beq.n	800fe6a <_dtoa_r+0x6b2>
 800fe62:	4639      	mov	r1, r7
 800fe64:	4658      	mov	r0, fp
 800fe66:	f000 fbab 	bl	80105c0 <_Bfree>
 800fe6a:	4629      	mov	r1, r5
 800fe6c:	4658      	mov	r0, fp
 800fe6e:	f000 fba7 	bl	80105c0 <_Bfree>
 800fe72:	e7d0      	b.n	800fe16 <_dtoa_r+0x65e>
 800fe74:	9704      	str	r7, [sp, #16]
 800fe76:	4633      	mov	r3, r6
 800fe78:	461e      	mov	r6, r3
 800fe7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fe7e:	2a39      	cmp	r2, #57	@ 0x39
 800fe80:	d107      	bne.n	800fe92 <_dtoa_r+0x6da>
 800fe82:	459a      	cmp	sl, r3
 800fe84:	d1f8      	bne.n	800fe78 <_dtoa_r+0x6c0>
 800fe86:	9a04      	ldr	r2, [sp, #16]
 800fe88:	3201      	adds	r2, #1
 800fe8a:	9204      	str	r2, [sp, #16]
 800fe8c:	2230      	movs	r2, #48	@ 0x30
 800fe8e:	f88a 2000 	strb.w	r2, [sl]
 800fe92:	781a      	ldrb	r2, [r3, #0]
 800fe94:	3201      	adds	r2, #1
 800fe96:	701a      	strb	r2, [r3, #0]
 800fe98:	e7bd      	b.n	800fe16 <_dtoa_r+0x65e>
 800fe9a:	2200      	movs	r2, #0
 800fe9c:	4b7a      	ldr	r3, [pc, #488]	@ (8010088 <_dtoa_r+0x8d0>)
 800fe9e:	f7f0 fbbb 	bl	8000618 <__aeabi_dmul>
 800fea2:	2200      	movs	r2, #0
 800fea4:	2300      	movs	r3, #0
 800fea6:	4604      	mov	r4, r0
 800fea8:	460d      	mov	r5, r1
 800feaa:	f7f0 fe1d 	bl	8000ae8 <__aeabi_dcmpeq>
 800feae:	2800      	cmp	r0, #0
 800feb0:	f43f aebb 	beq.w	800fc2a <_dtoa_r+0x472>
 800feb4:	e6f0      	b.n	800fc98 <_dtoa_r+0x4e0>
 800feb6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800feb8:	2a00      	cmp	r2, #0
 800feba:	f000 80db 	beq.w	8010074 <_dtoa_r+0x8bc>
 800febe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fec0:	2a01      	cmp	r2, #1
 800fec2:	f300 80bf 	bgt.w	8010044 <_dtoa_r+0x88c>
 800fec6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800fec8:	2a00      	cmp	r2, #0
 800feca:	f000 80b7 	beq.w	801003c <_dtoa_r+0x884>
 800fece:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800fed2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800fed4:	4646      	mov	r6, r8
 800fed6:	9a08      	ldr	r2, [sp, #32]
 800fed8:	2101      	movs	r1, #1
 800feda:	4658      	mov	r0, fp
 800fedc:	4498      	add	r8, r3
 800fede:	441a      	add	r2, r3
 800fee0:	9208      	str	r2, [sp, #32]
 800fee2:	f000 fc23 	bl	801072c <__i2b>
 800fee6:	4605      	mov	r5, r0
 800fee8:	b15e      	cbz	r6, 800ff02 <_dtoa_r+0x74a>
 800feea:	9b08      	ldr	r3, [sp, #32]
 800feec:	2b00      	cmp	r3, #0
 800feee:	dd08      	ble.n	800ff02 <_dtoa_r+0x74a>
 800fef0:	42b3      	cmp	r3, r6
 800fef2:	9a08      	ldr	r2, [sp, #32]
 800fef4:	bfa8      	it	ge
 800fef6:	4633      	movge	r3, r6
 800fef8:	eba8 0803 	sub.w	r8, r8, r3
 800fefc:	1af6      	subs	r6, r6, r3
 800fefe:	1ad3      	subs	r3, r2, r3
 800ff00:	9308      	str	r3, [sp, #32]
 800ff02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ff04:	b1f3      	cbz	r3, 800ff44 <_dtoa_r+0x78c>
 800ff06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	f000 80b7 	beq.w	801007c <_dtoa_r+0x8c4>
 800ff0e:	b18c      	cbz	r4, 800ff34 <_dtoa_r+0x77c>
 800ff10:	4629      	mov	r1, r5
 800ff12:	4622      	mov	r2, r4
 800ff14:	4658      	mov	r0, fp
 800ff16:	f000 fcc9 	bl	80108ac <__pow5mult>
 800ff1a:	464a      	mov	r2, r9
 800ff1c:	4601      	mov	r1, r0
 800ff1e:	4605      	mov	r5, r0
 800ff20:	4658      	mov	r0, fp
 800ff22:	f000 fc19 	bl	8010758 <__multiply>
 800ff26:	4649      	mov	r1, r9
 800ff28:	9004      	str	r0, [sp, #16]
 800ff2a:	4658      	mov	r0, fp
 800ff2c:	f000 fb48 	bl	80105c0 <_Bfree>
 800ff30:	9b04      	ldr	r3, [sp, #16]
 800ff32:	4699      	mov	r9, r3
 800ff34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ff36:	1b1a      	subs	r2, r3, r4
 800ff38:	d004      	beq.n	800ff44 <_dtoa_r+0x78c>
 800ff3a:	4649      	mov	r1, r9
 800ff3c:	4658      	mov	r0, fp
 800ff3e:	f000 fcb5 	bl	80108ac <__pow5mult>
 800ff42:	4681      	mov	r9, r0
 800ff44:	2101      	movs	r1, #1
 800ff46:	4658      	mov	r0, fp
 800ff48:	f000 fbf0 	bl	801072c <__i2b>
 800ff4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ff4e:	4604      	mov	r4, r0
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	f000 81cf 	beq.w	80102f4 <_dtoa_r+0xb3c>
 800ff56:	461a      	mov	r2, r3
 800ff58:	4601      	mov	r1, r0
 800ff5a:	4658      	mov	r0, fp
 800ff5c:	f000 fca6 	bl	80108ac <__pow5mult>
 800ff60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff62:	4604      	mov	r4, r0
 800ff64:	2b01      	cmp	r3, #1
 800ff66:	f300 8095 	bgt.w	8010094 <_dtoa_r+0x8dc>
 800ff6a:	9b02      	ldr	r3, [sp, #8]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	f040 8087 	bne.w	8010080 <_dtoa_r+0x8c8>
 800ff72:	9b03      	ldr	r3, [sp, #12]
 800ff74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	f040 8089 	bne.w	8010090 <_dtoa_r+0x8d8>
 800ff7e:	9b03      	ldr	r3, [sp, #12]
 800ff80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ff84:	0d1b      	lsrs	r3, r3, #20
 800ff86:	051b      	lsls	r3, r3, #20
 800ff88:	b12b      	cbz	r3, 800ff96 <_dtoa_r+0x7de>
 800ff8a:	9b08      	ldr	r3, [sp, #32]
 800ff8c:	f108 0801 	add.w	r8, r8, #1
 800ff90:	3301      	adds	r3, #1
 800ff92:	9308      	str	r3, [sp, #32]
 800ff94:	2301      	movs	r3, #1
 800ff96:	930a      	str	r3, [sp, #40]	@ 0x28
 800ff98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	f000 81b0 	beq.w	8010300 <_dtoa_r+0xb48>
 800ffa0:	6923      	ldr	r3, [r4, #16]
 800ffa2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ffa6:	6918      	ldr	r0, [r3, #16]
 800ffa8:	f000 fb74 	bl	8010694 <__hi0bits>
 800ffac:	f1c0 0020 	rsb	r0, r0, #32
 800ffb0:	9b08      	ldr	r3, [sp, #32]
 800ffb2:	4418      	add	r0, r3
 800ffb4:	f010 001f 	ands.w	r0, r0, #31
 800ffb8:	d077      	beq.n	80100aa <_dtoa_r+0x8f2>
 800ffba:	f1c0 0320 	rsb	r3, r0, #32
 800ffbe:	2b04      	cmp	r3, #4
 800ffc0:	dd6b      	ble.n	801009a <_dtoa_r+0x8e2>
 800ffc2:	f1c0 001c 	rsb	r0, r0, #28
 800ffc6:	9b08      	ldr	r3, [sp, #32]
 800ffc8:	4480      	add	r8, r0
 800ffca:	4403      	add	r3, r0
 800ffcc:	4406      	add	r6, r0
 800ffce:	9308      	str	r3, [sp, #32]
 800ffd0:	f1b8 0f00 	cmp.w	r8, #0
 800ffd4:	dd05      	ble.n	800ffe2 <_dtoa_r+0x82a>
 800ffd6:	4649      	mov	r1, r9
 800ffd8:	4642      	mov	r2, r8
 800ffda:	4658      	mov	r0, fp
 800ffdc:	f000 fcc0 	bl	8010960 <__lshift>
 800ffe0:	4681      	mov	r9, r0
 800ffe2:	9b08      	ldr	r3, [sp, #32]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	dd05      	ble.n	800fff4 <_dtoa_r+0x83c>
 800ffe8:	4621      	mov	r1, r4
 800ffea:	461a      	mov	r2, r3
 800ffec:	4658      	mov	r0, fp
 800ffee:	f000 fcb7 	bl	8010960 <__lshift>
 800fff2:	4604      	mov	r4, r0
 800fff4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d059      	beq.n	80100ae <_dtoa_r+0x8f6>
 800fffa:	4621      	mov	r1, r4
 800fffc:	4648      	mov	r0, r9
 800fffe:	f000 fd1b 	bl	8010a38 <__mcmp>
 8010002:	2800      	cmp	r0, #0
 8010004:	da53      	bge.n	80100ae <_dtoa_r+0x8f6>
 8010006:	1e7b      	subs	r3, r7, #1
 8010008:	4649      	mov	r1, r9
 801000a:	220a      	movs	r2, #10
 801000c:	4658      	mov	r0, fp
 801000e:	9304      	str	r3, [sp, #16]
 8010010:	2300      	movs	r3, #0
 8010012:	f000 faf7 	bl	8010604 <__multadd>
 8010016:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010018:	4681      	mov	r9, r0
 801001a:	2b00      	cmp	r3, #0
 801001c:	f000 8172 	beq.w	8010304 <_dtoa_r+0xb4c>
 8010020:	2300      	movs	r3, #0
 8010022:	4629      	mov	r1, r5
 8010024:	220a      	movs	r2, #10
 8010026:	4658      	mov	r0, fp
 8010028:	f000 faec 	bl	8010604 <__multadd>
 801002c:	9b00      	ldr	r3, [sp, #0]
 801002e:	4605      	mov	r5, r0
 8010030:	2b00      	cmp	r3, #0
 8010032:	dc67      	bgt.n	8010104 <_dtoa_r+0x94c>
 8010034:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010036:	2b02      	cmp	r3, #2
 8010038:	dc41      	bgt.n	80100be <_dtoa_r+0x906>
 801003a:	e063      	b.n	8010104 <_dtoa_r+0x94c>
 801003c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801003e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010042:	e746      	b.n	800fed2 <_dtoa_r+0x71a>
 8010044:	9b07      	ldr	r3, [sp, #28]
 8010046:	1e5c      	subs	r4, r3, #1
 8010048:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801004a:	42a3      	cmp	r3, r4
 801004c:	bfb7      	itett	lt
 801004e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010050:	1b1c      	subge	r4, r3, r4
 8010052:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8010054:	1ae3      	sublt	r3, r4, r3
 8010056:	bfbe      	ittt	lt
 8010058:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801005a:	2400      	movlt	r4, #0
 801005c:	18d2      	addlt	r2, r2, r3
 801005e:	9b07      	ldr	r3, [sp, #28]
 8010060:	bfb8      	it	lt
 8010062:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8010064:	2b00      	cmp	r3, #0
 8010066:	bfb5      	itete	lt
 8010068:	eba8 0603 	sublt.w	r6, r8, r3
 801006c:	4646      	movge	r6, r8
 801006e:	2300      	movlt	r3, #0
 8010070:	9b07      	ldrge	r3, [sp, #28]
 8010072:	e730      	b.n	800fed6 <_dtoa_r+0x71e>
 8010074:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010076:	4646      	mov	r6, r8
 8010078:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801007a:	e735      	b.n	800fee8 <_dtoa_r+0x730>
 801007c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801007e:	e75c      	b.n	800ff3a <_dtoa_r+0x782>
 8010080:	2300      	movs	r3, #0
 8010082:	e788      	b.n	800ff96 <_dtoa_r+0x7de>
 8010084:	3fe00000 	.word	0x3fe00000
 8010088:	40240000 	.word	0x40240000
 801008c:	40140000 	.word	0x40140000
 8010090:	9b02      	ldr	r3, [sp, #8]
 8010092:	e780      	b.n	800ff96 <_dtoa_r+0x7de>
 8010094:	2300      	movs	r3, #0
 8010096:	930a      	str	r3, [sp, #40]	@ 0x28
 8010098:	e782      	b.n	800ffa0 <_dtoa_r+0x7e8>
 801009a:	d099      	beq.n	800ffd0 <_dtoa_r+0x818>
 801009c:	331c      	adds	r3, #28
 801009e:	9a08      	ldr	r2, [sp, #32]
 80100a0:	441a      	add	r2, r3
 80100a2:	4498      	add	r8, r3
 80100a4:	441e      	add	r6, r3
 80100a6:	9208      	str	r2, [sp, #32]
 80100a8:	e792      	b.n	800ffd0 <_dtoa_r+0x818>
 80100aa:	4603      	mov	r3, r0
 80100ac:	e7f6      	b.n	801009c <_dtoa_r+0x8e4>
 80100ae:	9b07      	ldr	r3, [sp, #28]
 80100b0:	9704      	str	r7, [sp, #16]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	dc20      	bgt.n	80100f8 <_dtoa_r+0x940>
 80100b6:	9300      	str	r3, [sp, #0]
 80100b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80100ba:	2b02      	cmp	r3, #2
 80100bc:	dd1e      	ble.n	80100fc <_dtoa_r+0x944>
 80100be:	9b00      	ldr	r3, [sp, #0]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	f47f aec0 	bne.w	800fe46 <_dtoa_r+0x68e>
 80100c6:	4621      	mov	r1, r4
 80100c8:	2205      	movs	r2, #5
 80100ca:	4658      	mov	r0, fp
 80100cc:	f000 fa9a 	bl	8010604 <__multadd>
 80100d0:	4601      	mov	r1, r0
 80100d2:	4604      	mov	r4, r0
 80100d4:	4648      	mov	r0, r9
 80100d6:	f000 fcaf 	bl	8010a38 <__mcmp>
 80100da:	2800      	cmp	r0, #0
 80100dc:	f77f aeb3 	ble.w	800fe46 <_dtoa_r+0x68e>
 80100e0:	2331      	movs	r3, #49	@ 0x31
 80100e2:	4656      	mov	r6, sl
 80100e4:	f806 3b01 	strb.w	r3, [r6], #1
 80100e8:	9b04      	ldr	r3, [sp, #16]
 80100ea:	3301      	adds	r3, #1
 80100ec:	9304      	str	r3, [sp, #16]
 80100ee:	e6ae      	b.n	800fe4e <_dtoa_r+0x696>
 80100f0:	9c07      	ldr	r4, [sp, #28]
 80100f2:	9704      	str	r7, [sp, #16]
 80100f4:	4625      	mov	r5, r4
 80100f6:	e7f3      	b.n	80100e0 <_dtoa_r+0x928>
 80100f8:	9b07      	ldr	r3, [sp, #28]
 80100fa:	9300      	str	r3, [sp, #0]
 80100fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80100fe:	2b00      	cmp	r3, #0
 8010100:	f000 8104 	beq.w	801030c <_dtoa_r+0xb54>
 8010104:	2e00      	cmp	r6, #0
 8010106:	dd05      	ble.n	8010114 <_dtoa_r+0x95c>
 8010108:	4629      	mov	r1, r5
 801010a:	4632      	mov	r2, r6
 801010c:	4658      	mov	r0, fp
 801010e:	f000 fc27 	bl	8010960 <__lshift>
 8010112:	4605      	mov	r5, r0
 8010114:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010116:	2b00      	cmp	r3, #0
 8010118:	d05a      	beq.n	80101d0 <_dtoa_r+0xa18>
 801011a:	6869      	ldr	r1, [r5, #4]
 801011c:	4658      	mov	r0, fp
 801011e:	f000 fa0f 	bl	8010540 <_Balloc>
 8010122:	4606      	mov	r6, r0
 8010124:	b928      	cbnz	r0, 8010132 <_dtoa_r+0x97a>
 8010126:	4b84      	ldr	r3, [pc, #528]	@ (8010338 <_dtoa_r+0xb80>)
 8010128:	4602      	mov	r2, r0
 801012a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801012e:	f7ff bb5a 	b.w	800f7e6 <_dtoa_r+0x2e>
 8010132:	692a      	ldr	r2, [r5, #16]
 8010134:	f105 010c 	add.w	r1, r5, #12
 8010138:	300c      	adds	r0, #12
 801013a:	3202      	adds	r2, #2
 801013c:	0092      	lsls	r2, r2, #2
 801013e:	f000 ffb5 	bl	80110ac <memcpy>
 8010142:	2201      	movs	r2, #1
 8010144:	4631      	mov	r1, r6
 8010146:	4658      	mov	r0, fp
 8010148:	f000 fc0a 	bl	8010960 <__lshift>
 801014c:	f10a 0301 	add.w	r3, sl, #1
 8010150:	462f      	mov	r7, r5
 8010152:	4605      	mov	r5, r0
 8010154:	9307      	str	r3, [sp, #28]
 8010156:	9b00      	ldr	r3, [sp, #0]
 8010158:	4453      	add	r3, sl
 801015a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801015c:	9b02      	ldr	r3, [sp, #8]
 801015e:	f003 0301 	and.w	r3, r3, #1
 8010162:	930a      	str	r3, [sp, #40]	@ 0x28
 8010164:	9b07      	ldr	r3, [sp, #28]
 8010166:	4621      	mov	r1, r4
 8010168:	4648      	mov	r0, r9
 801016a:	3b01      	subs	r3, #1
 801016c:	9300      	str	r3, [sp, #0]
 801016e:	f7ff fa94 	bl	800f69a <quorem>
 8010172:	4639      	mov	r1, r7
 8010174:	9002      	str	r0, [sp, #8]
 8010176:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801017a:	4648      	mov	r0, r9
 801017c:	f000 fc5c 	bl	8010a38 <__mcmp>
 8010180:	462a      	mov	r2, r5
 8010182:	9008      	str	r0, [sp, #32]
 8010184:	4621      	mov	r1, r4
 8010186:	4658      	mov	r0, fp
 8010188:	f000 fc72 	bl	8010a70 <__mdiff>
 801018c:	68c2      	ldr	r2, [r0, #12]
 801018e:	4606      	mov	r6, r0
 8010190:	bb02      	cbnz	r2, 80101d4 <_dtoa_r+0xa1c>
 8010192:	4601      	mov	r1, r0
 8010194:	4648      	mov	r0, r9
 8010196:	f000 fc4f 	bl	8010a38 <__mcmp>
 801019a:	4602      	mov	r2, r0
 801019c:	4631      	mov	r1, r6
 801019e:	4658      	mov	r0, fp
 80101a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80101a2:	f000 fa0d 	bl	80105c0 <_Bfree>
 80101a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80101a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80101aa:	9e07      	ldr	r6, [sp, #28]
 80101ac:	ea43 0102 	orr.w	r1, r3, r2
 80101b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80101b2:	4319      	orrs	r1, r3
 80101b4:	d110      	bne.n	80101d8 <_dtoa_r+0xa20>
 80101b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80101ba:	d029      	beq.n	8010210 <_dtoa_r+0xa58>
 80101bc:	9b08      	ldr	r3, [sp, #32]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	dd02      	ble.n	80101c8 <_dtoa_r+0xa10>
 80101c2:	9b02      	ldr	r3, [sp, #8]
 80101c4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80101c8:	9b00      	ldr	r3, [sp, #0]
 80101ca:	f883 8000 	strb.w	r8, [r3]
 80101ce:	e63f      	b.n	800fe50 <_dtoa_r+0x698>
 80101d0:	4628      	mov	r0, r5
 80101d2:	e7bb      	b.n	801014c <_dtoa_r+0x994>
 80101d4:	2201      	movs	r2, #1
 80101d6:	e7e1      	b.n	801019c <_dtoa_r+0x9e4>
 80101d8:	9b08      	ldr	r3, [sp, #32]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	db04      	blt.n	80101e8 <_dtoa_r+0xa30>
 80101de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80101e0:	430b      	orrs	r3, r1
 80101e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80101e4:	430b      	orrs	r3, r1
 80101e6:	d120      	bne.n	801022a <_dtoa_r+0xa72>
 80101e8:	2a00      	cmp	r2, #0
 80101ea:	dded      	ble.n	80101c8 <_dtoa_r+0xa10>
 80101ec:	4649      	mov	r1, r9
 80101ee:	2201      	movs	r2, #1
 80101f0:	4658      	mov	r0, fp
 80101f2:	f000 fbb5 	bl	8010960 <__lshift>
 80101f6:	4621      	mov	r1, r4
 80101f8:	4681      	mov	r9, r0
 80101fa:	f000 fc1d 	bl	8010a38 <__mcmp>
 80101fe:	2800      	cmp	r0, #0
 8010200:	dc03      	bgt.n	801020a <_dtoa_r+0xa52>
 8010202:	d1e1      	bne.n	80101c8 <_dtoa_r+0xa10>
 8010204:	f018 0f01 	tst.w	r8, #1
 8010208:	d0de      	beq.n	80101c8 <_dtoa_r+0xa10>
 801020a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801020e:	d1d8      	bne.n	80101c2 <_dtoa_r+0xa0a>
 8010210:	2339      	movs	r3, #57	@ 0x39
 8010212:	9a00      	ldr	r2, [sp, #0]
 8010214:	7013      	strb	r3, [r2, #0]
 8010216:	4633      	mov	r3, r6
 8010218:	461e      	mov	r6, r3
 801021a:	3b01      	subs	r3, #1
 801021c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010220:	2a39      	cmp	r2, #57	@ 0x39
 8010222:	d052      	beq.n	80102ca <_dtoa_r+0xb12>
 8010224:	3201      	adds	r2, #1
 8010226:	701a      	strb	r2, [r3, #0]
 8010228:	e612      	b.n	800fe50 <_dtoa_r+0x698>
 801022a:	2a00      	cmp	r2, #0
 801022c:	dd07      	ble.n	801023e <_dtoa_r+0xa86>
 801022e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010232:	d0ed      	beq.n	8010210 <_dtoa_r+0xa58>
 8010234:	f108 0301 	add.w	r3, r8, #1
 8010238:	9a00      	ldr	r2, [sp, #0]
 801023a:	7013      	strb	r3, [r2, #0]
 801023c:	e608      	b.n	800fe50 <_dtoa_r+0x698>
 801023e:	9b07      	ldr	r3, [sp, #28]
 8010240:	9a07      	ldr	r2, [sp, #28]
 8010242:	f803 8c01 	strb.w	r8, [r3, #-1]
 8010246:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010248:	4293      	cmp	r3, r2
 801024a:	d028      	beq.n	801029e <_dtoa_r+0xae6>
 801024c:	4649      	mov	r1, r9
 801024e:	2300      	movs	r3, #0
 8010250:	220a      	movs	r2, #10
 8010252:	4658      	mov	r0, fp
 8010254:	f000 f9d6 	bl	8010604 <__multadd>
 8010258:	42af      	cmp	r7, r5
 801025a:	4681      	mov	r9, r0
 801025c:	f04f 0300 	mov.w	r3, #0
 8010260:	f04f 020a 	mov.w	r2, #10
 8010264:	4639      	mov	r1, r7
 8010266:	4658      	mov	r0, fp
 8010268:	d107      	bne.n	801027a <_dtoa_r+0xac2>
 801026a:	f000 f9cb 	bl	8010604 <__multadd>
 801026e:	4607      	mov	r7, r0
 8010270:	4605      	mov	r5, r0
 8010272:	9b07      	ldr	r3, [sp, #28]
 8010274:	3301      	adds	r3, #1
 8010276:	9307      	str	r3, [sp, #28]
 8010278:	e774      	b.n	8010164 <_dtoa_r+0x9ac>
 801027a:	f000 f9c3 	bl	8010604 <__multadd>
 801027e:	4629      	mov	r1, r5
 8010280:	4607      	mov	r7, r0
 8010282:	2300      	movs	r3, #0
 8010284:	220a      	movs	r2, #10
 8010286:	4658      	mov	r0, fp
 8010288:	f000 f9bc 	bl	8010604 <__multadd>
 801028c:	4605      	mov	r5, r0
 801028e:	e7f0      	b.n	8010272 <_dtoa_r+0xaba>
 8010290:	9b00      	ldr	r3, [sp, #0]
 8010292:	2700      	movs	r7, #0
 8010294:	2b00      	cmp	r3, #0
 8010296:	bfcc      	ite	gt
 8010298:	461e      	movgt	r6, r3
 801029a:	2601      	movle	r6, #1
 801029c:	4456      	add	r6, sl
 801029e:	4649      	mov	r1, r9
 80102a0:	2201      	movs	r2, #1
 80102a2:	4658      	mov	r0, fp
 80102a4:	f000 fb5c 	bl	8010960 <__lshift>
 80102a8:	4621      	mov	r1, r4
 80102aa:	4681      	mov	r9, r0
 80102ac:	f000 fbc4 	bl	8010a38 <__mcmp>
 80102b0:	2800      	cmp	r0, #0
 80102b2:	dcb0      	bgt.n	8010216 <_dtoa_r+0xa5e>
 80102b4:	d102      	bne.n	80102bc <_dtoa_r+0xb04>
 80102b6:	f018 0f01 	tst.w	r8, #1
 80102ba:	d1ac      	bne.n	8010216 <_dtoa_r+0xa5e>
 80102bc:	4633      	mov	r3, r6
 80102be:	461e      	mov	r6, r3
 80102c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80102c4:	2a30      	cmp	r2, #48	@ 0x30
 80102c6:	d0fa      	beq.n	80102be <_dtoa_r+0xb06>
 80102c8:	e5c2      	b.n	800fe50 <_dtoa_r+0x698>
 80102ca:	459a      	cmp	sl, r3
 80102cc:	d1a4      	bne.n	8010218 <_dtoa_r+0xa60>
 80102ce:	9b04      	ldr	r3, [sp, #16]
 80102d0:	3301      	adds	r3, #1
 80102d2:	9304      	str	r3, [sp, #16]
 80102d4:	2331      	movs	r3, #49	@ 0x31
 80102d6:	f88a 3000 	strb.w	r3, [sl]
 80102da:	e5b9      	b.n	800fe50 <_dtoa_r+0x698>
 80102dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80102de:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801033c <_dtoa_r+0xb84>
 80102e2:	b11b      	cbz	r3, 80102ec <_dtoa_r+0xb34>
 80102e4:	f10a 0308 	add.w	r3, sl, #8
 80102e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80102ea:	6013      	str	r3, [r2, #0]
 80102ec:	4650      	mov	r0, sl
 80102ee:	b019      	add	sp, #100	@ 0x64
 80102f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102f6:	2b01      	cmp	r3, #1
 80102f8:	f77f ae37 	ble.w	800ff6a <_dtoa_r+0x7b2>
 80102fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80102fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8010300:	2001      	movs	r0, #1
 8010302:	e655      	b.n	800ffb0 <_dtoa_r+0x7f8>
 8010304:	9b00      	ldr	r3, [sp, #0]
 8010306:	2b00      	cmp	r3, #0
 8010308:	f77f aed6 	ble.w	80100b8 <_dtoa_r+0x900>
 801030c:	4656      	mov	r6, sl
 801030e:	4621      	mov	r1, r4
 8010310:	4648      	mov	r0, r9
 8010312:	f7ff f9c2 	bl	800f69a <quorem>
 8010316:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801031a:	9b00      	ldr	r3, [sp, #0]
 801031c:	f806 8b01 	strb.w	r8, [r6], #1
 8010320:	eba6 020a 	sub.w	r2, r6, sl
 8010324:	4293      	cmp	r3, r2
 8010326:	ddb3      	ble.n	8010290 <_dtoa_r+0xad8>
 8010328:	4649      	mov	r1, r9
 801032a:	2300      	movs	r3, #0
 801032c:	220a      	movs	r2, #10
 801032e:	4658      	mov	r0, fp
 8010330:	f000 f968 	bl	8010604 <__multadd>
 8010334:	4681      	mov	r9, r0
 8010336:	e7ea      	b.n	801030e <_dtoa_r+0xb56>
 8010338:	08011a68 	.word	0x08011a68
 801033c:	080119ec 	.word	0x080119ec

08010340 <_free_r>:
 8010340:	b538      	push	{r3, r4, r5, lr}
 8010342:	4605      	mov	r5, r0
 8010344:	2900      	cmp	r1, #0
 8010346:	d041      	beq.n	80103cc <_free_r+0x8c>
 8010348:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801034c:	1f0c      	subs	r4, r1, #4
 801034e:	2b00      	cmp	r3, #0
 8010350:	bfb8      	it	lt
 8010352:	18e4      	addlt	r4, r4, r3
 8010354:	f000 f8e8 	bl	8010528 <__malloc_lock>
 8010358:	4a1d      	ldr	r2, [pc, #116]	@ (80103d0 <_free_r+0x90>)
 801035a:	6813      	ldr	r3, [r2, #0]
 801035c:	b933      	cbnz	r3, 801036c <_free_r+0x2c>
 801035e:	6063      	str	r3, [r4, #4]
 8010360:	6014      	str	r4, [r2, #0]
 8010362:	4628      	mov	r0, r5
 8010364:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010368:	f000 b8e4 	b.w	8010534 <__malloc_unlock>
 801036c:	42a3      	cmp	r3, r4
 801036e:	d908      	bls.n	8010382 <_free_r+0x42>
 8010370:	6820      	ldr	r0, [r4, #0]
 8010372:	1821      	adds	r1, r4, r0
 8010374:	428b      	cmp	r3, r1
 8010376:	bf01      	itttt	eq
 8010378:	6819      	ldreq	r1, [r3, #0]
 801037a:	685b      	ldreq	r3, [r3, #4]
 801037c:	1809      	addeq	r1, r1, r0
 801037e:	6021      	streq	r1, [r4, #0]
 8010380:	e7ed      	b.n	801035e <_free_r+0x1e>
 8010382:	461a      	mov	r2, r3
 8010384:	685b      	ldr	r3, [r3, #4]
 8010386:	b10b      	cbz	r3, 801038c <_free_r+0x4c>
 8010388:	42a3      	cmp	r3, r4
 801038a:	d9fa      	bls.n	8010382 <_free_r+0x42>
 801038c:	6811      	ldr	r1, [r2, #0]
 801038e:	1850      	adds	r0, r2, r1
 8010390:	42a0      	cmp	r0, r4
 8010392:	d10b      	bne.n	80103ac <_free_r+0x6c>
 8010394:	6820      	ldr	r0, [r4, #0]
 8010396:	4401      	add	r1, r0
 8010398:	1850      	adds	r0, r2, r1
 801039a:	6011      	str	r1, [r2, #0]
 801039c:	4283      	cmp	r3, r0
 801039e:	d1e0      	bne.n	8010362 <_free_r+0x22>
 80103a0:	6818      	ldr	r0, [r3, #0]
 80103a2:	685b      	ldr	r3, [r3, #4]
 80103a4:	4408      	add	r0, r1
 80103a6:	6053      	str	r3, [r2, #4]
 80103a8:	6010      	str	r0, [r2, #0]
 80103aa:	e7da      	b.n	8010362 <_free_r+0x22>
 80103ac:	d902      	bls.n	80103b4 <_free_r+0x74>
 80103ae:	230c      	movs	r3, #12
 80103b0:	602b      	str	r3, [r5, #0]
 80103b2:	e7d6      	b.n	8010362 <_free_r+0x22>
 80103b4:	6820      	ldr	r0, [r4, #0]
 80103b6:	1821      	adds	r1, r4, r0
 80103b8:	428b      	cmp	r3, r1
 80103ba:	bf02      	ittt	eq
 80103bc:	6819      	ldreq	r1, [r3, #0]
 80103be:	685b      	ldreq	r3, [r3, #4]
 80103c0:	1809      	addeq	r1, r1, r0
 80103c2:	6063      	str	r3, [r4, #4]
 80103c4:	bf08      	it	eq
 80103c6:	6021      	streq	r1, [r4, #0]
 80103c8:	6054      	str	r4, [r2, #4]
 80103ca:	e7ca      	b.n	8010362 <_free_r+0x22>
 80103cc:	bd38      	pop	{r3, r4, r5, pc}
 80103ce:	bf00      	nop
 80103d0:	20005de0 	.word	0x20005de0

080103d4 <malloc>:
 80103d4:	4b02      	ldr	r3, [pc, #8]	@ (80103e0 <malloc+0xc>)
 80103d6:	4601      	mov	r1, r0
 80103d8:	6818      	ldr	r0, [r3, #0]
 80103da:	f000 b825 	b.w	8010428 <_malloc_r>
 80103de:	bf00      	nop
 80103e0:	20000034 	.word	0x20000034

080103e4 <sbrk_aligned>:
 80103e4:	b570      	push	{r4, r5, r6, lr}
 80103e6:	4e0f      	ldr	r6, [pc, #60]	@ (8010424 <sbrk_aligned+0x40>)
 80103e8:	460c      	mov	r4, r1
 80103ea:	4605      	mov	r5, r0
 80103ec:	6831      	ldr	r1, [r6, #0]
 80103ee:	b911      	cbnz	r1, 80103f6 <sbrk_aligned+0x12>
 80103f0:	f000 fe4c 	bl	801108c <_sbrk_r>
 80103f4:	6030      	str	r0, [r6, #0]
 80103f6:	4621      	mov	r1, r4
 80103f8:	4628      	mov	r0, r5
 80103fa:	f000 fe47 	bl	801108c <_sbrk_r>
 80103fe:	1c43      	adds	r3, r0, #1
 8010400:	d103      	bne.n	801040a <sbrk_aligned+0x26>
 8010402:	f04f 34ff 	mov.w	r4, #4294967295
 8010406:	4620      	mov	r0, r4
 8010408:	bd70      	pop	{r4, r5, r6, pc}
 801040a:	1cc4      	adds	r4, r0, #3
 801040c:	f024 0403 	bic.w	r4, r4, #3
 8010410:	42a0      	cmp	r0, r4
 8010412:	d0f8      	beq.n	8010406 <sbrk_aligned+0x22>
 8010414:	1a21      	subs	r1, r4, r0
 8010416:	4628      	mov	r0, r5
 8010418:	f000 fe38 	bl	801108c <_sbrk_r>
 801041c:	3001      	adds	r0, #1
 801041e:	d1f2      	bne.n	8010406 <sbrk_aligned+0x22>
 8010420:	e7ef      	b.n	8010402 <sbrk_aligned+0x1e>
 8010422:	bf00      	nop
 8010424:	20005ddc 	.word	0x20005ddc

08010428 <_malloc_r>:
 8010428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801042c:	1ccd      	adds	r5, r1, #3
 801042e:	4606      	mov	r6, r0
 8010430:	f025 0503 	bic.w	r5, r5, #3
 8010434:	3508      	adds	r5, #8
 8010436:	2d0c      	cmp	r5, #12
 8010438:	bf38      	it	cc
 801043a:	250c      	movcc	r5, #12
 801043c:	2d00      	cmp	r5, #0
 801043e:	db01      	blt.n	8010444 <_malloc_r+0x1c>
 8010440:	42a9      	cmp	r1, r5
 8010442:	d904      	bls.n	801044e <_malloc_r+0x26>
 8010444:	230c      	movs	r3, #12
 8010446:	6033      	str	r3, [r6, #0]
 8010448:	2000      	movs	r0, #0
 801044a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801044e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010524 <_malloc_r+0xfc>
 8010452:	f000 f869 	bl	8010528 <__malloc_lock>
 8010456:	f8d8 3000 	ldr.w	r3, [r8]
 801045a:	461c      	mov	r4, r3
 801045c:	bb44      	cbnz	r4, 80104b0 <_malloc_r+0x88>
 801045e:	4629      	mov	r1, r5
 8010460:	4630      	mov	r0, r6
 8010462:	f7ff ffbf 	bl	80103e4 <sbrk_aligned>
 8010466:	1c43      	adds	r3, r0, #1
 8010468:	4604      	mov	r4, r0
 801046a:	d158      	bne.n	801051e <_malloc_r+0xf6>
 801046c:	f8d8 4000 	ldr.w	r4, [r8]
 8010470:	4627      	mov	r7, r4
 8010472:	2f00      	cmp	r7, #0
 8010474:	d143      	bne.n	80104fe <_malloc_r+0xd6>
 8010476:	2c00      	cmp	r4, #0
 8010478:	d04b      	beq.n	8010512 <_malloc_r+0xea>
 801047a:	6823      	ldr	r3, [r4, #0]
 801047c:	4639      	mov	r1, r7
 801047e:	4630      	mov	r0, r6
 8010480:	eb04 0903 	add.w	r9, r4, r3
 8010484:	f000 fe02 	bl	801108c <_sbrk_r>
 8010488:	4581      	cmp	r9, r0
 801048a:	d142      	bne.n	8010512 <_malloc_r+0xea>
 801048c:	6821      	ldr	r1, [r4, #0]
 801048e:	4630      	mov	r0, r6
 8010490:	1a6d      	subs	r5, r5, r1
 8010492:	4629      	mov	r1, r5
 8010494:	f7ff ffa6 	bl	80103e4 <sbrk_aligned>
 8010498:	3001      	adds	r0, #1
 801049a:	d03a      	beq.n	8010512 <_malloc_r+0xea>
 801049c:	6823      	ldr	r3, [r4, #0]
 801049e:	442b      	add	r3, r5
 80104a0:	6023      	str	r3, [r4, #0]
 80104a2:	f8d8 3000 	ldr.w	r3, [r8]
 80104a6:	685a      	ldr	r2, [r3, #4]
 80104a8:	bb62      	cbnz	r2, 8010504 <_malloc_r+0xdc>
 80104aa:	f8c8 7000 	str.w	r7, [r8]
 80104ae:	e00f      	b.n	80104d0 <_malloc_r+0xa8>
 80104b0:	6822      	ldr	r2, [r4, #0]
 80104b2:	1b52      	subs	r2, r2, r5
 80104b4:	d420      	bmi.n	80104f8 <_malloc_r+0xd0>
 80104b6:	2a0b      	cmp	r2, #11
 80104b8:	d917      	bls.n	80104ea <_malloc_r+0xc2>
 80104ba:	1961      	adds	r1, r4, r5
 80104bc:	42a3      	cmp	r3, r4
 80104be:	6025      	str	r5, [r4, #0]
 80104c0:	bf18      	it	ne
 80104c2:	6059      	strne	r1, [r3, #4]
 80104c4:	6863      	ldr	r3, [r4, #4]
 80104c6:	bf08      	it	eq
 80104c8:	f8c8 1000 	streq.w	r1, [r8]
 80104cc:	5162      	str	r2, [r4, r5]
 80104ce:	604b      	str	r3, [r1, #4]
 80104d0:	4630      	mov	r0, r6
 80104d2:	f000 f82f 	bl	8010534 <__malloc_unlock>
 80104d6:	f104 000b 	add.w	r0, r4, #11
 80104da:	1d23      	adds	r3, r4, #4
 80104dc:	f020 0007 	bic.w	r0, r0, #7
 80104e0:	1ac2      	subs	r2, r0, r3
 80104e2:	bf1c      	itt	ne
 80104e4:	1a1b      	subne	r3, r3, r0
 80104e6:	50a3      	strne	r3, [r4, r2]
 80104e8:	e7af      	b.n	801044a <_malloc_r+0x22>
 80104ea:	6862      	ldr	r2, [r4, #4]
 80104ec:	42a3      	cmp	r3, r4
 80104ee:	bf0c      	ite	eq
 80104f0:	f8c8 2000 	streq.w	r2, [r8]
 80104f4:	605a      	strne	r2, [r3, #4]
 80104f6:	e7eb      	b.n	80104d0 <_malloc_r+0xa8>
 80104f8:	4623      	mov	r3, r4
 80104fa:	6864      	ldr	r4, [r4, #4]
 80104fc:	e7ae      	b.n	801045c <_malloc_r+0x34>
 80104fe:	463c      	mov	r4, r7
 8010500:	687f      	ldr	r7, [r7, #4]
 8010502:	e7b6      	b.n	8010472 <_malloc_r+0x4a>
 8010504:	461a      	mov	r2, r3
 8010506:	685b      	ldr	r3, [r3, #4]
 8010508:	42a3      	cmp	r3, r4
 801050a:	d1fb      	bne.n	8010504 <_malloc_r+0xdc>
 801050c:	2300      	movs	r3, #0
 801050e:	6053      	str	r3, [r2, #4]
 8010510:	e7de      	b.n	80104d0 <_malloc_r+0xa8>
 8010512:	230c      	movs	r3, #12
 8010514:	4630      	mov	r0, r6
 8010516:	6033      	str	r3, [r6, #0]
 8010518:	f000 f80c 	bl	8010534 <__malloc_unlock>
 801051c:	e794      	b.n	8010448 <_malloc_r+0x20>
 801051e:	6005      	str	r5, [r0, #0]
 8010520:	e7d6      	b.n	80104d0 <_malloc_r+0xa8>
 8010522:	bf00      	nop
 8010524:	20005de0 	.word	0x20005de0

08010528 <__malloc_lock>:
 8010528:	4801      	ldr	r0, [pc, #4]	@ (8010530 <__malloc_lock+0x8>)
 801052a:	f7ff b8a6 	b.w	800f67a <__retarget_lock_acquire_recursive>
 801052e:	bf00      	nop
 8010530:	20005dd8 	.word	0x20005dd8

08010534 <__malloc_unlock>:
 8010534:	4801      	ldr	r0, [pc, #4]	@ (801053c <__malloc_unlock+0x8>)
 8010536:	f7ff b8a1 	b.w	800f67c <__retarget_lock_release_recursive>
 801053a:	bf00      	nop
 801053c:	20005dd8 	.word	0x20005dd8

08010540 <_Balloc>:
 8010540:	b570      	push	{r4, r5, r6, lr}
 8010542:	69c6      	ldr	r6, [r0, #28]
 8010544:	4604      	mov	r4, r0
 8010546:	460d      	mov	r5, r1
 8010548:	b976      	cbnz	r6, 8010568 <_Balloc+0x28>
 801054a:	2010      	movs	r0, #16
 801054c:	f7ff ff42 	bl	80103d4 <malloc>
 8010550:	4602      	mov	r2, r0
 8010552:	61e0      	str	r0, [r4, #28]
 8010554:	b920      	cbnz	r0, 8010560 <_Balloc+0x20>
 8010556:	4b18      	ldr	r3, [pc, #96]	@ (80105b8 <_Balloc+0x78>)
 8010558:	216b      	movs	r1, #107	@ 0x6b
 801055a:	4818      	ldr	r0, [pc, #96]	@ (80105bc <_Balloc+0x7c>)
 801055c:	f000 fdb4 	bl	80110c8 <__assert_func>
 8010560:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010564:	6006      	str	r6, [r0, #0]
 8010566:	60c6      	str	r6, [r0, #12]
 8010568:	69e6      	ldr	r6, [r4, #28]
 801056a:	68f3      	ldr	r3, [r6, #12]
 801056c:	b183      	cbz	r3, 8010590 <_Balloc+0x50>
 801056e:	69e3      	ldr	r3, [r4, #28]
 8010570:	68db      	ldr	r3, [r3, #12]
 8010572:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010576:	b9b8      	cbnz	r0, 80105a8 <_Balloc+0x68>
 8010578:	2101      	movs	r1, #1
 801057a:	4620      	mov	r0, r4
 801057c:	fa01 f605 	lsl.w	r6, r1, r5
 8010580:	1d72      	adds	r2, r6, #5
 8010582:	0092      	lsls	r2, r2, #2
 8010584:	f000 fdbe 	bl	8011104 <_calloc_r>
 8010588:	b160      	cbz	r0, 80105a4 <_Balloc+0x64>
 801058a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801058e:	e00e      	b.n	80105ae <_Balloc+0x6e>
 8010590:	2221      	movs	r2, #33	@ 0x21
 8010592:	2104      	movs	r1, #4
 8010594:	4620      	mov	r0, r4
 8010596:	f000 fdb5 	bl	8011104 <_calloc_r>
 801059a:	69e3      	ldr	r3, [r4, #28]
 801059c:	60f0      	str	r0, [r6, #12]
 801059e:	68db      	ldr	r3, [r3, #12]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d1e4      	bne.n	801056e <_Balloc+0x2e>
 80105a4:	2000      	movs	r0, #0
 80105a6:	bd70      	pop	{r4, r5, r6, pc}
 80105a8:	6802      	ldr	r2, [r0, #0]
 80105aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80105ae:	2300      	movs	r3, #0
 80105b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80105b4:	e7f7      	b.n	80105a6 <_Balloc+0x66>
 80105b6:	bf00      	nop
 80105b8:	080119f9 	.word	0x080119f9
 80105bc:	08011a79 	.word	0x08011a79

080105c0 <_Bfree>:
 80105c0:	b570      	push	{r4, r5, r6, lr}
 80105c2:	69c6      	ldr	r6, [r0, #28]
 80105c4:	4605      	mov	r5, r0
 80105c6:	460c      	mov	r4, r1
 80105c8:	b976      	cbnz	r6, 80105e8 <_Bfree+0x28>
 80105ca:	2010      	movs	r0, #16
 80105cc:	f7ff ff02 	bl	80103d4 <malloc>
 80105d0:	4602      	mov	r2, r0
 80105d2:	61e8      	str	r0, [r5, #28]
 80105d4:	b920      	cbnz	r0, 80105e0 <_Bfree+0x20>
 80105d6:	4b09      	ldr	r3, [pc, #36]	@ (80105fc <_Bfree+0x3c>)
 80105d8:	218f      	movs	r1, #143	@ 0x8f
 80105da:	4809      	ldr	r0, [pc, #36]	@ (8010600 <_Bfree+0x40>)
 80105dc:	f000 fd74 	bl	80110c8 <__assert_func>
 80105e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80105e4:	6006      	str	r6, [r0, #0]
 80105e6:	60c6      	str	r6, [r0, #12]
 80105e8:	b13c      	cbz	r4, 80105fa <_Bfree+0x3a>
 80105ea:	69eb      	ldr	r3, [r5, #28]
 80105ec:	6862      	ldr	r2, [r4, #4]
 80105ee:	68db      	ldr	r3, [r3, #12]
 80105f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80105f4:	6021      	str	r1, [r4, #0]
 80105f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80105fa:	bd70      	pop	{r4, r5, r6, pc}
 80105fc:	080119f9 	.word	0x080119f9
 8010600:	08011a79 	.word	0x08011a79

08010604 <__multadd>:
 8010604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010608:	f101 0c14 	add.w	ip, r1, #20
 801060c:	4607      	mov	r7, r0
 801060e:	460c      	mov	r4, r1
 8010610:	461e      	mov	r6, r3
 8010612:	690d      	ldr	r5, [r1, #16]
 8010614:	2000      	movs	r0, #0
 8010616:	f8dc 3000 	ldr.w	r3, [ip]
 801061a:	3001      	adds	r0, #1
 801061c:	b299      	uxth	r1, r3
 801061e:	4285      	cmp	r5, r0
 8010620:	fb02 6101 	mla	r1, r2, r1, r6
 8010624:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010628:	ea4f 4311 	mov.w	r3, r1, lsr #16
 801062c:	b289      	uxth	r1, r1
 801062e:	fb02 3306 	mla	r3, r2, r6, r3
 8010632:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010636:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801063a:	f84c 1b04 	str.w	r1, [ip], #4
 801063e:	dcea      	bgt.n	8010616 <__multadd+0x12>
 8010640:	b30e      	cbz	r6, 8010686 <__multadd+0x82>
 8010642:	68a3      	ldr	r3, [r4, #8]
 8010644:	42ab      	cmp	r3, r5
 8010646:	dc19      	bgt.n	801067c <__multadd+0x78>
 8010648:	6861      	ldr	r1, [r4, #4]
 801064a:	4638      	mov	r0, r7
 801064c:	3101      	adds	r1, #1
 801064e:	f7ff ff77 	bl	8010540 <_Balloc>
 8010652:	4680      	mov	r8, r0
 8010654:	b928      	cbnz	r0, 8010662 <__multadd+0x5e>
 8010656:	4602      	mov	r2, r0
 8010658:	4b0c      	ldr	r3, [pc, #48]	@ (801068c <__multadd+0x88>)
 801065a:	21ba      	movs	r1, #186	@ 0xba
 801065c:	480c      	ldr	r0, [pc, #48]	@ (8010690 <__multadd+0x8c>)
 801065e:	f000 fd33 	bl	80110c8 <__assert_func>
 8010662:	6922      	ldr	r2, [r4, #16]
 8010664:	f104 010c 	add.w	r1, r4, #12
 8010668:	300c      	adds	r0, #12
 801066a:	3202      	adds	r2, #2
 801066c:	0092      	lsls	r2, r2, #2
 801066e:	f000 fd1d 	bl	80110ac <memcpy>
 8010672:	4621      	mov	r1, r4
 8010674:	4644      	mov	r4, r8
 8010676:	4638      	mov	r0, r7
 8010678:	f7ff ffa2 	bl	80105c0 <_Bfree>
 801067c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010680:	3501      	adds	r5, #1
 8010682:	615e      	str	r6, [r3, #20]
 8010684:	6125      	str	r5, [r4, #16]
 8010686:	4620      	mov	r0, r4
 8010688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801068c:	08011a68 	.word	0x08011a68
 8010690:	08011a79 	.word	0x08011a79

08010694 <__hi0bits>:
 8010694:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010698:	4603      	mov	r3, r0
 801069a:	bf36      	itet	cc
 801069c:	0403      	lslcc	r3, r0, #16
 801069e:	2000      	movcs	r0, #0
 80106a0:	2010      	movcc	r0, #16
 80106a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80106a6:	bf3c      	itt	cc
 80106a8:	021b      	lslcc	r3, r3, #8
 80106aa:	3008      	addcc	r0, #8
 80106ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80106b0:	bf3c      	itt	cc
 80106b2:	011b      	lslcc	r3, r3, #4
 80106b4:	3004      	addcc	r0, #4
 80106b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80106ba:	bf3c      	itt	cc
 80106bc:	009b      	lslcc	r3, r3, #2
 80106be:	3002      	addcc	r0, #2
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	db05      	blt.n	80106d0 <__hi0bits+0x3c>
 80106c4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80106c8:	f100 0001 	add.w	r0, r0, #1
 80106cc:	bf08      	it	eq
 80106ce:	2020      	moveq	r0, #32
 80106d0:	4770      	bx	lr

080106d2 <__lo0bits>:
 80106d2:	6803      	ldr	r3, [r0, #0]
 80106d4:	4602      	mov	r2, r0
 80106d6:	f013 0007 	ands.w	r0, r3, #7
 80106da:	d00b      	beq.n	80106f4 <__lo0bits+0x22>
 80106dc:	07d9      	lsls	r1, r3, #31
 80106de:	d421      	bmi.n	8010724 <__lo0bits+0x52>
 80106e0:	0798      	lsls	r0, r3, #30
 80106e2:	bf47      	ittee	mi
 80106e4:	085b      	lsrmi	r3, r3, #1
 80106e6:	2001      	movmi	r0, #1
 80106e8:	089b      	lsrpl	r3, r3, #2
 80106ea:	2002      	movpl	r0, #2
 80106ec:	bf4c      	ite	mi
 80106ee:	6013      	strmi	r3, [r2, #0]
 80106f0:	6013      	strpl	r3, [r2, #0]
 80106f2:	4770      	bx	lr
 80106f4:	b299      	uxth	r1, r3
 80106f6:	b909      	cbnz	r1, 80106fc <__lo0bits+0x2a>
 80106f8:	0c1b      	lsrs	r3, r3, #16
 80106fa:	2010      	movs	r0, #16
 80106fc:	b2d9      	uxtb	r1, r3
 80106fe:	b909      	cbnz	r1, 8010704 <__lo0bits+0x32>
 8010700:	3008      	adds	r0, #8
 8010702:	0a1b      	lsrs	r3, r3, #8
 8010704:	0719      	lsls	r1, r3, #28
 8010706:	bf04      	itt	eq
 8010708:	091b      	lsreq	r3, r3, #4
 801070a:	3004      	addeq	r0, #4
 801070c:	0799      	lsls	r1, r3, #30
 801070e:	bf04      	itt	eq
 8010710:	089b      	lsreq	r3, r3, #2
 8010712:	3002      	addeq	r0, #2
 8010714:	07d9      	lsls	r1, r3, #31
 8010716:	d403      	bmi.n	8010720 <__lo0bits+0x4e>
 8010718:	085b      	lsrs	r3, r3, #1
 801071a:	f100 0001 	add.w	r0, r0, #1
 801071e:	d003      	beq.n	8010728 <__lo0bits+0x56>
 8010720:	6013      	str	r3, [r2, #0]
 8010722:	4770      	bx	lr
 8010724:	2000      	movs	r0, #0
 8010726:	4770      	bx	lr
 8010728:	2020      	movs	r0, #32
 801072a:	4770      	bx	lr

0801072c <__i2b>:
 801072c:	b510      	push	{r4, lr}
 801072e:	460c      	mov	r4, r1
 8010730:	2101      	movs	r1, #1
 8010732:	f7ff ff05 	bl	8010540 <_Balloc>
 8010736:	4602      	mov	r2, r0
 8010738:	b928      	cbnz	r0, 8010746 <__i2b+0x1a>
 801073a:	4b05      	ldr	r3, [pc, #20]	@ (8010750 <__i2b+0x24>)
 801073c:	f240 1145 	movw	r1, #325	@ 0x145
 8010740:	4804      	ldr	r0, [pc, #16]	@ (8010754 <__i2b+0x28>)
 8010742:	f000 fcc1 	bl	80110c8 <__assert_func>
 8010746:	2301      	movs	r3, #1
 8010748:	6144      	str	r4, [r0, #20]
 801074a:	6103      	str	r3, [r0, #16]
 801074c:	bd10      	pop	{r4, pc}
 801074e:	bf00      	nop
 8010750:	08011a68 	.word	0x08011a68
 8010754:	08011a79 	.word	0x08011a79

08010758 <__multiply>:
 8010758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801075c:	4614      	mov	r4, r2
 801075e:	690a      	ldr	r2, [r1, #16]
 8010760:	460f      	mov	r7, r1
 8010762:	b085      	sub	sp, #20
 8010764:	6923      	ldr	r3, [r4, #16]
 8010766:	429a      	cmp	r2, r3
 8010768:	bfa2      	ittt	ge
 801076a:	4623      	movge	r3, r4
 801076c:	460c      	movge	r4, r1
 801076e:	461f      	movge	r7, r3
 8010770:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010774:	68a3      	ldr	r3, [r4, #8]
 8010776:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801077a:	6861      	ldr	r1, [r4, #4]
 801077c:	eb0a 0609 	add.w	r6, sl, r9
 8010780:	42b3      	cmp	r3, r6
 8010782:	bfb8      	it	lt
 8010784:	3101      	addlt	r1, #1
 8010786:	f7ff fedb 	bl	8010540 <_Balloc>
 801078a:	b930      	cbnz	r0, 801079a <__multiply+0x42>
 801078c:	4602      	mov	r2, r0
 801078e:	4b45      	ldr	r3, [pc, #276]	@ (80108a4 <__multiply+0x14c>)
 8010790:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010794:	4844      	ldr	r0, [pc, #272]	@ (80108a8 <__multiply+0x150>)
 8010796:	f000 fc97 	bl	80110c8 <__assert_func>
 801079a:	f100 0514 	add.w	r5, r0, #20
 801079e:	2200      	movs	r2, #0
 80107a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80107a4:	462b      	mov	r3, r5
 80107a6:	4543      	cmp	r3, r8
 80107a8:	d321      	bcc.n	80107ee <__multiply+0x96>
 80107aa:	f107 0114 	add.w	r1, r7, #20
 80107ae:	f104 0214 	add.w	r2, r4, #20
 80107b2:	f104 0715 	add.w	r7, r4, #21
 80107b6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80107ba:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80107be:	9302      	str	r3, [sp, #8]
 80107c0:	1b13      	subs	r3, r2, r4
 80107c2:	3b15      	subs	r3, #21
 80107c4:	f023 0303 	bic.w	r3, r3, #3
 80107c8:	3304      	adds	r3, #4
 80107ca:	42ba      	cmp	r2, r7
 80107cc:	bf38      	it	cc
 80107ce:	2304      	movcc	r3, #4
 80107d0:	9301      	str	r3, [sp, #4]
 80107d2:	9b02      	ldr	r3, [sp, #8]
 80107d4:	9103      	str	r1, [sp, #12]
 80107d6:	428b      	cmp	r3, r1
 80107d8:	d80c      	bhi.n	80107f4 <__multiply+0x9c>
 80107da:	2e00      	cmp	r6, #0
 80107dc:	dd03      	ble.n	80107e6 <__multiply+0x8e>
 80107de:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d05b      	beq.n	801089e <__multiply+0x146>
 80107e6:	6106      	str	r6, [r0, #16]
 80107e8:	b005      	add	sp, #20
 80107ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107ee:	f843 2b04 	str.w	r2, [r3], #4
 80107f2:	e7d8      	b.n	80107a6 <__multiply+0x4e>
 80107f4:	f8b1 a000 	ldrh.w	sl, [r1]
 80107f8:	f1ba 0f00 	cmp.w	sl, #0
 80107fc:	d024      	beq.n	8010848 <__multiply+0xf0>
 80107fe:	f104 0e14 	add.w	lr, r4, #20
 8010802:	46a9      	mov	r9, r5
 8010804:	f04f 0c00 	mov.w	ip, #0
 8010808:	f85e 7b04 	ldr.w	r7, [lr], #4
 801080c:	f8d9 3000 	ldr.w	r3, [r9]
 8010810:	fa1f fb87 	uxth.w	fp, r7
 8010814:	4572      	cmp	r2, lr
 8010816:	b29b      	uxth	r3, r3
 8010818:	fb0a 330b 	mla	r3, sl, fp, r3
 801081c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8010820:	f8d9 7000 	ldr.w	r7, [r9]
 8010824:	4463      	add	r3, ip
 8010826:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801082a:	fb0a c70b 	mla	r7, sl, fp, ip
 801082e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8010832:	b29b      	uxth	r3, r3
 8010834:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010838:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801083c:	f849 3b04 	str.w	r3, [r9], #4
 8010840:	d8e2      	bhi.n	8010808 <__multiply+0xb0>
 8010842:	9b01      	ldr	r3, [sp, #4]
 8010844:	f845 c003 	str.w	ip, [r5, r3]
 8010848:	9b03      	ldr	r3, [sp, #12]
 801084a:	3104      	adds	r1, #4
 801084c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010850:	f1b9 0f00 	cmp.w	r9, #0
 8010854:	d021      	beq.n	801089a <__multiply+0x142>
 8010856:	682b      	ldr	r3, [r5, #0]
 8010858:	f104 0c14 	add.w	ip, r4, #20
 801085c:	46ae      	mov	lr, r5
 801085e:	f04f 0a00 	mov.w	sl, #0
 8010862:	f8bc b000 	ldrh.w	fp, [ip]
 8010866:	b29b      	uxth	r3, r3
 8010868:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801086c:	fb09 770b 	mla	r7, r9, fp, r7
 8010870:	4457      	add	r7, sl
 8010872:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010876:	f84e 3b04 	str.w	r3, [lr], #4
 801087a:	f85c 3b04 	ldr.w	r3, [ip], #4
 801087e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010882:	f8be 3000 	ldrh.w	r3, [lr]
 8010886:	4562      	cmp	r2, ip
 8010888:	fb09 330a 	mla	r3, r9, sl, r3
 801088c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010890:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010894:	d8e5      	bhi.n	8010862 <__multiply+0x10a>
 8010896:	9f01      	ldr	r7, [sp, #4]
 8010898:	51eb      	str	r3, [r5, r7]
 801089a:	3504      	adds	r5, #4
 801089c:	e799      	b.n	80107d2 <__multiply+0x7a>
 801089e:	3e01      	subs	r6, #1
 80108a0:	e79b      	b.n	80107da <__multiply+0x82>
 80108a2:	bf00      	nop
 80108a4:	08011a68 	.word	0x08011a68
 80108a8:	08011a79 	.word	0x08011a79

080108ac <__pow5mult>:
 80108ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108b0:	4615      	mov	r5, r2
 80108b2:	f012 0203 	ands.w	r2, r2, #3
 80108b6:	4607      	mov	r7, r0
 80108b8:	460e      	mov	r6, r1
 80108ba:	d007      	beq.n	80108cc <__pow5mult+0x20>
 80108bc:	3a01      	subs	r2, #1
 80108be:	4c25      	ldr	r4, [pc, #148]	@ (8010954 <__pow5mult+0xa8>)
 80108c0:	2300      	movs	r3, #0
 80108c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80108c6:	f7ff fe9d 	bl	8010604 <__multadd>
 80108ca:	4606      	mov	r6, r0
 80108cc:	10ad      	asrs	r5, r5, #2
 80108ce:	d03d      	beq.n	801094c <__pow5mult+0xa0>
 80108d0:	69fc      	ldr	r4, [r7, #28]
 80108d2:	b97c      	cbnz	r4, 80108f4 <__pow5mult+0x48>
 80108d4:	2010      	movs	r0, #16
 80108d6:	f7ff fd7d 	bl	80103d4 <malloc>
 80108da:	4602      	mov	r2, r0
 80108dc:	61f8      	str	r0, [r7, #28]
 80108de:	b928      	cbnz	r0, 80108ec <__pow5mult+0x40>
 80108e0:	4b1d      	ldr	r3, [pc, #116]	@ (8010958 <__pow5mult+0xac>)
 80108e2:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80108e6:	481d      	ldr	r0, [pc, #116]	@ (801095c <__pow5mult+0xb0>)
 80108e8:	f000 fbee 	bl	80110c8 <__assert_func>
 80108ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80108f0:	6004      	str	r4, [r0, #0]
 80108f2:	60c4      	str	r4, [r0, #12]
 80108f4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80108f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80108fc:	b94c      	cbnz	r4, 8010912 <__pow5mult+0x66>
 80108fe:	f240 2171 	movw	r1, #625	@ 0x271
 8010902:	4638      	mov	r0, r7
 8010904:	f7ff ff12 	bl	801072c <__i2b>
 8010908:	2300      	movs	r3, #0
 801090a:	4604      	mov	r4, r0
 801090c:	f8c8 0008 	str.w	r0, [r8, #8]
 8010910:	6003      	str	r3, [r0, #0]
 8010912:	f04f 0900 	mov.w	r9, #0
 8010916:	07eb      	lsls	r3, r5, #31
 8010918:	d50a      	bpl.n	8010930 <__pow5mult+0x84>
 801091a:	4631      	mov	r1, r6
 801091c:	4622      	mov	r2, r4
 801091e:	4638      	mov	r0, r7
 8010920:	f7ff ff1a 	bl	8010758 <__multiply>
 8010924:	4680      	mov	r8, r0
 8010926:	4631      	mov	r1, r6
 8010928:	4638      	mov	r0, r7
 801092a:	4646      	mov	r6, r8
 801092c:	f7ff fe48 	bl	80105c0 <_Bfree>
 8010930:	106d      	asrs	r5, r5, #1
 8010932:	d00b      	beq.n	801094c <__pow5mult+0xa0>
 8010934:	6820      	ldr	r0, [r4, #0]
 8010936:	b938      	cbnz	r0, 8010948 <__pow5mult+0x9c>
 8010938:	4622      	mov	r2, r4
 801093a:	4621      	mov	r1, r4
 801093c:	4638      	mov	r0, r7
 801093e:	f7ff ff0b 	bl	8010758 <__multiply>
 8010942:	6020      	str	r0, [r4, #0]
 8010944:	f8c0 9000 	str.w	r9, [r0]
 8010948:	4604      	mov	r4, r0
 801094a:	e7e4      	b.n	8010916 <__pow5mult+0x6a>
 801094c:	4630      	mov	r0, r6
 801094e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010952:	bf00      	nop
 8010954:	08011ad4 	.word	0x08011ad4
 8010958:	080119f9 	.word	0x080119f9
 801095c:	08011a79 	.word	0x08011a79

08010960 <__lshift>:
 8010960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010964:	460c      	mov	r4, r1
 8010966:	4607      	mov	r7, r0
 8010968:	4691      	mov	r9, r2
 801096a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801096e:	6923      	ldr	r3, [r4, #16]
 8010970:	6849      	ldr	r1, [r1, #4]
 8010972:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010976:	68a3      	ldr	r3, [r4, #8]
 8010978:	f108 0601 	add.w	r6, r8, #1
 801097c:	42b3      	cmp	r3, r6
 801097e:	db0b      	blt.n	8010998 <__lshift+0x38>
 8010980:	4638      	mov	r0, r7
 8010982:	f7ff fddd 	bl	8010540 <_Balloc>
 8010986:	4605      	mov	r5, r0
 8010988:	b948      	cbnz	r0, 801099e <__lshift+0x3e>
 801098a:	4602      	mov	r2, r0
 801098c:	4b28      	ldr	r3, [pc, #160]	@ (8010a30 <__lshift+0xd0>)
 801098e:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010992:	4828      	ldr	r0, [pc, #160]	@ (8010a34 <__lshift+0xd4>)
 8010994:	f000 fb98 	bl	80110c8 <__assert_func>
 8010998:	3101      	adds	r1, #1
 801099a:	005b      	lsls	r3, r3, #1
 801099c:	e7ee      	b.n	801097c <__lshift+0x1c>
 801099e:	2300      	movs	r3, #0
 80109a0:	f100 0114 	add.w	r1, r0, #20
 80109a4:	f100 0210 	add.w	r2, r0, #16
 80109a8:	4618      	mov	r0, r3
 80109aa:	4553      	cmp	r3, sl
 80109ac:	db33      	blt.n	8010a16 <__lshift+0xb6>
 80109ae:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80109b2:	f104 0314 	add.w	r3, r4, #20
 80109b6:	6920      	ldr	r0, [r4, #16]
 80109b8:	f019 091f 	ands.w	r9, r9, #31
 80109bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80109c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80109c4:	d02b      	beq.n	8010a1e <__lshift+0xbe>
 80109c6:	f1c9 0e20 	rsb	lr, r9, #32
 80109ca:	468a      	mov	sl, r1
 80109cc:	2200      	movs	r2, #0
 80109ce:	6818      	ldr	r0, [r3, #0]
 80109d0:	fa00 f009 	lsl.w	r0, r0, r9
 80109d4:	4310      	orrs	r0, r2
 80109d6:	f84a 0b04 	str.w	r0, [sl], #4
 80109da:	f853 2b04 	ldr.w	r2, [r3], #4
 80109de:	459c      	cmp	ip, r3
 80109e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80109e4:	d8f3      	bhi.n	80109ce <__lshift+0x6e>
 80109e6:	ebac 0304 	sub.w	r3, ip, r4
 80109ea:	f104 0015 	add.w	r0, r4, #21
 80109ee:	3b15      	subs	r3, #21
 80109f0:	f023 0303 	bic.w	r3, r3, #3
 80109f4:	3304      	adds	r3, #4
 80109f6:	4584      	cmp	ip, r0
 80109f8:	bf38      	it	cc
 80109fa:	2304      	movcc	r3, #4
 80109fc:	50ca      	str	r2, [r1, r3]
 80109fe:	b10a      	cbz	r2, 8010a04 <__lshift+0xa4>
 8010a00:	f108 0602 	add.w	r6, r8, #2
 8010a04:	3e01      	subs	r6, #1
 8010a06:	4638      	mov	r0, r7
 8010a08:	4621      	mov	r1, r4
 8010a0a:	612e      	str	r6, [r5, #16]
 8010a0c:	f7ff fdd8 	bl	80105c0 <_Bfree>
 8010a10:	4628      	mov	r0, r5
 8010a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a16:	3301      	adds	r3, #1
 8010a18:	f842 0f04 	str.w	r0, [r2, #4]!
 8010a1c:	e7c5      	b.n	80109aa <__lshift+0x4a>
 8010a1e:	3904      	subs	r1, #4
 8010a20:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a24:	459c      	cmp	ip, r3
 8010a26:	f841 2f04 	str.w	r2, [r1, #4]!
 8010a2a:	d8f9      	bhi.n	8010a20 <__lshift+0xc0>
 8010a2c:	e7ea      	b.n	8010a04 <__lshift+0xa4>
 8010a2e:	bf00      	nop
 8010a30:	08011a68 	.word	0x08011a68
 8010a34:	08011a79 	.word	0x08011a79

08010a38 <__mcmp>:
 8010a38:	4603      	mov	r3, r0
 8010a3a:	690a      	ldr	r2, [r1, #16]
 8010a3c:	6900      	ldr	r0, [r0, #16]
 8010a3e:	1a80      	subs	r0, r0, r2
 8010a40:	b530      	push	{r4, r5, lr}
 8010a42:	d10e      	bne.n	8010a62 <__mcmp+0x2a>
 8010a44:	3314      	adds	r3, #20
 8010a46:	3114      	adds	r1, #20
 8010a48:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010a4c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010a50:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010a54:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010a58:	4295      	cmp	r5, r2
 8010a5a:	d003      	beq.n	8010a64 <__mcmp+0x2c>
 8010a5c:	d205      	bcs.n	8010a6a <__mcmp+0x32>
 8010a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8010a62:	bd30      	pop	{r4, r5, pc}
 8010a64:	42a3      	cmp	r3, r4
 8010a66:	d3f3      	bcc.n	8010a50 <__mcmp+0x18>
 8010a68:	e7fb      	b.n	8010a62 <__mcmp+0x2a>
 8010a6a:	2001      	movs	r0, #1
 8010a6c:	e7f9      	b.n	8010a62 <__mcmp+0x2a>
	...

08010a70 <__mdiff>:
 8010a70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a74:	4689      	mov	r9, r1
 8010a76:	4606      	mov	r6, r0
 8010a78:	4611      	mov	r1, r2
 8010a7a:	4614      	mov	r4, r2
 8010a7c:	4648      	mov	r0, r9
 8010a7e:	f7ff ffdb 	bl	8010a38 <__mcmp>
 8010a82:	1e05      	subs	r5, r0, #0
 8010a84:	d112      	bne.n	8010aac <__mdiff+0x3c>
 8010a86:	4629      	mov	r1, r5
 8010a88:	4630      	mov	r0, r6
 8010a8a:	f7ff fd59 	bl	8010540 <_Balloc>
 8010a8e:	4602      	mov	r2, r0
 8010a90:	b928      	cbnz	r0, 8010a9e <__mdiff+0x2e>
 8010a92:	4b41      	ldr	r3, [pc, #260]	@ (8010b98 <__mdiff+0x128>)
 8010a94:	f240 2137 	movw	r1, #567	@ 0x237
 8010a98:	4840      	ldr	r0, [pc, #256]	@ (8010b9c <__mdiff+0x12c>)
 8010a9a:	f000 fb15 	bl	80110c8 <__assert_func>
 8010a9e:	2301      	movs	r3, #1
 8010aa0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010aa4:	4610      	mov	r0, r2
 8010aa6:	b003      	add	sp, #12
 8010aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010aac:	bfbc      	itt	lt
 8010aae:	464b      	movlt	r3, r9
 8010ab0:	46a1      	movlt	r9, r4
 8010ab2:	4630      	mov	r0, r6
 8010ab4:	bfb8      	it	lt
 8010ab6:	2501      	movlt	r5, #1
 8010ab8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010abc:	bfb4      	ite	lt
 8010abe:	461c      	movlt	r4, r3
 8010ac0:	2500      	movge	r5, #0
 8010ac2:	f7ff fd3d 	bl	8010540 <_Balloc>
 8010ac6:	4602      	mov	r2, r0
 8010ac8:	b918      	cbnz	r0, 8010ad2 <__mdiff+0x62>
 8010aca:	4b33      	ldr	r3, [pc, #204]	@ (8010b98 <__mdiff+0x128>)
 8010acc:	f240 2145 	movw	r1, #581	@ 0x245
 8010ad0:	e7e2      	b.n	8010a98 <__mdiff+0x28>
 8010ad2:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010ad6:	f104 0e14 	add.w	lr, r4, #20
 8010ada:	6926      	ldr	r6, [r4, #16]
 8010adc:	f100 0b14 	add.w	fp, r0, #20
 8010ae0:	60c5      	str	r5, [r0, #12]
 8010ae2:	f109 0514 	add.w	r5, r9, #20
 8010ae6:	f109 0310 	add.w	r3, r9, #16
 8010aea:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010aee:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010af2:	46d9      	mov	r9, fp
 8010af4:	f04f 0c00 	mov.w	ip, #0
 8010af8:	9301      	str	r3, [sp, #4]
 8010afa:	9b01      	ldr	r3, [sp, #4]
 8010afc:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010b00:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010b04:	4576      	cmp	r6, lr
 8010b06:	9301      	str	r3, [sp, #4]
 8010b08:	fa1f f38a 	uxth.w	r3, sl
 8010b0c:	4619      	mov	r1, r3
 8010b0e:	b283      	uxth	r3, r0
 8010b10:	ea4f 4010 	mov.w	r0, r0, lsr #16
 8010b14:	eba1 0303 	sub.w	r3, r1, r3
 8010b18:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010b1c:	4463      	add	r3, ip
 8010b1e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010b22:	b29b      	uxth	r3, r3
 8010b24:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010b28:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010b2c:	f849 3b04 	str.w	r3, [r9], #4
 8010b30:	d8e3      	bhi.n	8010afa <__mdiff+0x8a>
 8010b32:	1b33      	subs	r3, r6, r4
 8010b34:	3415      	adds	r4, #21
 8010b36:	3b15      	subs	r3, #21
 8010b38:	f023 0303 	bic.w	r3, r3, #3
 8010b3c:	3304      	adds	r3, #4
 8010b3e:	42a6      	cmp	r6, r4
 8010b40:	bf38      	it	cc
 8010b42:	2304      	movcc	r3, #4
 8010b44:	441d      	add	r5, r3
 8010b46:	445b      	add	r3, fp
 8010b48:	462c      	mov	r4, r5
 8010b4a:	461e      	mov	r6, r3
 8010b4c:	4544      	cmp	r4, r8
 8010b4e:	d30e      	bcc.n	8010b6e <__mdiff+0xfe>
 8010b50:	f108 0103 	add.w	r1, r8, #3
 8010b54:	1b49      	subs	r1, r1, r5
 8010b56:	3d03      	subs	r5, #3
 8010b58:	f021 0103 	bic.w	r1, r1, #3
 8010b5c:	45a8      	cmp	r8, r5
 8010b5e:	bf38      	it	cc
 8010b60:	2100      	movcc	r1, #0
 8010b62:	440b      	add	r3, r1
 8010b64:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010b68:	b199      	cbz	r1, 8010b92 <__mdiff+0x122>
 8010b6a:	6117      	str	r7, [r2, #16]
 8010b6c:	e79a      	b.n	8010aa4 <__mdiff+0x34>
 8010b6e:	f854 1b04 	ldr.w	r1, [r4], #4
 8010b72:	46e6      	mov	lr, ip
 8010b74:	fa1f fc81 	uxth.w	ip, r1
 8010b78:	0c08      	lsrs	r0, r1, #16
 8010b7a:	4471      	add	r1, lr
 8010b7c:	44f4      	add	ip, lr
 8010b7e:	b289      	uxth	r1, r1
 8010b80:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010b84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010b88:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010b8c:	f846 1b04 	str.w	r1, [r6], #4
 8010b90:	e7dc      	b.n	8010b4c <__mdiff+0xdc>
 8010b92:	3f01      	subs	r7, #1
 8010b94:	e7e6      	b.n	8010b64 <__mdiff+0xf4>
 8010b96:	bf00      	nop
 8010b98:	08011a68 	.word	0x08011a68
 8010b9c:	08011a79 	.word	0x08011a79

08010ba0 <__d2b>:
 8010ba0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010ba4:	460f      	mov	r7, r1
 8010ba6:	2101      	movs	r1, #1
 8010ba8:	4616      	mov	r6, r2
 8010baa:	ec59 8b10 	vmov	r8, r9, d0
 8010bae:	f7ff fcc7 	bl	8010540 <_Balloc>
 8010bb2:	4604      	mov	r4, r0
 8010bb4:	b930      	cbnz	r0, 8010bc4 <__d2b+0x24>
 8010bb6:	4602      	mov	r2, r0
 8010bb8:	4b23      	ldr	r3, [pc, #140]	@ (8010c48 <__d2b+0xa8>)
 8010bba:	f240 310f 	movw	r1, #783	@ 0x30f
 8010bbe:	4823      	ldr	r0, [pc, #140]	@ (8010c4c <__d2b+0xac>)
 8010bc0:	f000 fa82 	bl	80110c8 <__assert_func>
 8010bc4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010bc8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010bcc:	b10d      	cbz	r5, 8010bd2 <__d2b+0x32>
 8010bce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010bd2:	9301      	str	r3, [sp, #4]
 8010bd4:	f1b8 0300 	subs.w	r3, r8, #0
 8010bd8:	d023      	beq.n	8010c22 <__d2b+0x82>
 8010bda:	4668      	mov	r0, sp
 8010bdc:	9300      	str	r3, [sp, #0]
 8010bde:	f7ff fd78 	bl	80106d2 <__lo0bits>
 8010be2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010be6:	b1d0      	cbz	r0, 8010c1e <__d2b+0x7e>
 8010be8:	f1c0 0320 	rsb	r3, r0, #32
 8010bec:	fa02 f303 	lsl.w	r3, r2, r3
 8010bf0:	40c2      	lsrs	r2, r0
 8010bf2:	430b      	orrs	r3, r1
 8010bf4:	9201      	str	r2, [sp, #4]
 8010bf6:	6163      	str	r3, [r4, #20]
 8010bf8:	9b01      	ldr	r3, [sp, #4]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	61a3      	str	r3, [r4, #24]
 8010bfe:	bf0c      	ite	eq
 8010c00:	2201      	moveq	r2, #1
 8010c02:	2202      	movne	r2, #2
 8010c04:	6122      	str	r2, [r4, #16]
 8010c06:	b1a5      	cbz	r5, 8010c32 <__d2b+0x92>
 8010c08:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010c0c:	4405      	add	r5, r0
 8010c0e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010c12:	603d      	str	r5, [r7, #0]
 8010c14:	6030      	str	r0, [r6, #0]
 8010c16:	4620      	mov	r0, r4
 8010c18:	b003      	add	sp, #12
 8010c1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c1e:	6161      	str	r1, [r4, #20]
 8010c20:	e7ea      	b.n	8010bf8 <__d2b+0x58>
 8010c22:	a801      	add	r0, sp, #4
 8010c24:	f7ff fd55 	bl	80106d2 <__lo0bits>
 8010c28:	9b01      	ldr	r3, [sp, #4]
 8010c2a:	3020      	adds	r0, #32
 8010c2c:	2201      	movs	r2, #1
 8010c2e:	6163      	str	r3, [r4, #20]
 8010c30:	e7e8      	b.n	8010c04 <__d2b+0x64>
 8010c32:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010c36:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010c3a:	6038      	str	r0, [r7, #0]
 8010c3c:	6918      	ldr	r0, [r3, #16]
 8010c3e:	f7ff fd29 	bl	8010694 <__hi0bits>
 8010c42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010c46:	e7e5      	b.n	8010c14 <__d2b+0x74>
 8010c48:	08011a68 	.word	0x08011a68
 8010c4c:	08011a79 	.word	0x08011a79

08010c50 <__ssputs_r>:
 8010c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c54:	461f      	mov	r7, r3
 8010c56:	688e      	ldr	r6, [r1, #8]
 8010c58:	4682      	mov	sl, r0
 8010c5a:	460c      	mov	r4, r1
 8010c5c:	42be      	cmp	r6, r7
 8010c5e:	4690      	mov	r8, r2
 8010c60:	680b      	ldr	r3, [r1, #0]
 8010c62:	d82d      	bhi.n	8010cc0 <__ssputs_r+0x70>
 8010c64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010c68:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010c6c:	d026      	beq.n	8010cbc <__ssputs_r+0x6c>
 8010c6e:	6965      	ldr	r5, [r4, #20]
 8010c70:	6909      	ldr	r1, [r1, #16]
 8010c72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010c76:	eba3 0901 	sub.w	r9, r3, r1
 8010c7a:	1c7b      	adds	r3, r7, #1
 8010c7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010c80:	444b      	add	r3, r9
 8010c82:	106d      	asrs	r5, r5, #1
 8010c84:	429d      	cmp	r5, r3
 8010c86:	bf38      	it	cc
 8010c88:	461d      	movcc	r5, r3
 8010c8a:	0553      	lsls	r3, r2, #21
 8010c8c:	d527      	bpl.n	8010cde <__ssputs_r+0x8e>
 8010c8e:	4629      	mov	r1, r5
 8010c90:	f7ff fbca 	bl	8010428 <_malloc_r>
 8010c94:	4606      	mov	r6, r0
 8010c96:	b360      	cbz	r0, 8010cf2 <__ssputs_r+0xa2>
 8010c98:	464a      	mov	r2, r9
 8010c9a:	6921      	ldr	r1, [r4, #16]
 8010c9c:	f000 fa06 	bl	80110ac <memcpy>
 8010ca0:	89a3      	ldrh	r3, [r4, #12]
 8010ca2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010ca6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010caa:	81a3      	strh	r3, [r4, #12]
 8010cac:	6126      	str	r6, [r4, #16]
 8010cae:	444e      	add	r6, r9
 8010cb0:	6165      	str	r5, [r4, #20]
 8010cb2:	eba5 0509 	sub.w	r5, r5, r9
 8010cb6:	6026      	str	r6, [r4, #0]
 8010cb8:	463e      	mov	r6, r7
 8010cba:	60a5      	str	r5, [r4, #8]
 8010cbc:	42be      	cmp	r6, r7
 8010cbe:	d900      	bls.n	8010cc2 <__ssputs_r+0x72>
 8010cc0:	463e      	mov	r6, r7
 8010cc2:	4632      	mov	r2, r6
 8010cc4:	4641      	mov	r1, r8
 8010cc6:	6820      	ldr	r0, [r4, #0]
 8010cc8:	f000 f9c6 	bl	8011058 <memmove>
 8010ccc:	68a3      	ldr	r3, [r4, #8]
 8010cce:	2000      	movs	r0, #0
 8010cd0:	1b9b      	subs	r3, r3, r6
 8010cd2:	60a3      	str	r3, [r4, #8]
 8010cd4:	6823      	ldr	r3, [r4, #0]
 8010cd6:	4433      	add	r3, r6
 8010cd8:	6023      	str	r3, [r4, #0]
 8010cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cde:	462a      	mov	r2, r5
 8010ce0:	f000 fa36 	bl	8011150 <_realloc_r>
 8010ce4:	4606      	mov	r6, r0
 8010ce6:	2800      	cmp	r0, #0
 8010ce8:	d1e0      	bne.n	8010cac <__ssputs_r+0x5c>
 8010cea:	6921      	ldr	r1, [r4, #16]
 8010cec:	4650      	mov	r0, sl
 8010cee:	f7ff fb27 	bl	8010340 <_free_r>
 8010cf2:	230c      	movs	r3, #12
 8010cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8010cf8:	f8ca 3000 	str.w	r3, [sl]
 8010cfc:	89a3      	ldrh	r3, [r4, #12]
 8010cfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010d02:	81a3      	strh	r3, [r4, #12]
 8010d04:	e7e9      	b.n	8010cda <__ssputs_r+0x8a>
	...

08010d08 <_svfiprintf_r>:
 8010d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d0c:	4698      	mov	r8, r3
 8010d0e:	898b      	ldrh	r3, [r1, #12]
 8010d10:	b09d      	sub	sp, #116	@ 0x74
 8010d12:	4607      	mov	r7, r0
 8010d14:	061b      	lsls	r3, r3, #24
 8010d16:	460d      	mov	r5, r1
 8010d18:	4614      	mov	r4, r2
 8010d1a:	d510      	bpl.n	8010d3e <_svfiprintf_r+0x36>
 8010d1c:	690b      	ldr	r3, [r1, #16]
 8010d1e:	b973      	cbnz	r3, 8010d3e <_svfiprintf_r+0x36>
 8010d20:	2140      	movs	r1, #64	@ 0x40
 8010d22:	f7ff fb81 	bl	8010428 <_malloc_r>
 8010d26:	6028      	str	r0, [r5, #0]
 8010d28:	6128      	str	r0, [r5, #16]
 8010d2a:	b930      	cbnz	r0, 8010d3a <_svfiprintf_r+0x32>
 8010d2c:	230c      	movs	r3, #12
 8010d2e:	603b      	str	r3, [r7, #0]
 8010d30:	f04f 30ff 	mov.w	r0, #4294967295
 8010d34:	b01d      	add	sp, #116	@ 0x74
 8010d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d3a:	2340      	movs	r3, #64	@ 0x40
 8010d3c:	616b      	str	r3, [r5, #20]
 8010d3e:	2300      	movs	r3, #0
 8010d40:	f8cd 800c 	str.w	r8, [sp, #12]
 8010d44:	f04f 0901 	mov.w	r9, #1
 8010d48:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8010eec <_svfiprintf_r+0x1e4>
 8010d4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8010d4e:	2320      	movs	r3, #32
 8010d50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010d54:	2330      	movs	r3, #48	@ 0x30
 8010d56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010d5a:	4623      	mov	r3, r4
 8010d5c:	469a      	mov	sl, r3
 8010d5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d62:	b10a      	cbz	r2, 8010d68 <_svfiprintf_r+0x60>
 8010d64:	2a25      	cmp	r2, #37	@ 0x25
 8010d66:	d1f9      	bne.n	8010d5c <_svfiprintf_r+0x54>
 8010d68:	ebba 0b04 	subs.w	fp, sl, r4
 8010d6c:	d00b      	beq.n	8010d86 <_svfiprintf_r+0x7e>
 8010d6e:	465b      	mov	r3, fp
 8010d70:	4622      	mov	r2, r4
 8010d72:	4629      	mov	r1, r5
 8010d74:	4638      	mov	r0, r7
 8010d76:	f7ff ff6b 	bl	8010c50 <__ssputs_r>
 8010d7a:	3001      	adds	r0, #1
 8010d7c:	f000 80a7 	beq.w	8010ece <_svfiprintf_r+0x1c6>
 8010d80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010d82:	445a      	add	r2, fp
 8010d84:	9209      	str	r2, [sp, #36]	@ 0x24
 8010d86:	f89a 3000 	ldrb.w	r3, [sl]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	f000 809f 	beq.w	8010ece <_svfiprintf_r+0x1c6>
 8010d90:	2300      	movs	r3, #0
 8010d92:	f04f 32ff 	mov.w	r2, #4294967295
 8010d96:	f10a 0a01 	add.w	sl, sl, #1
 8010d9a:	9304      	str	r3, [sp, #16]
 8010d9c:	9307      	str	r3, [sp, #28]
 8010d9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010da2:	931a      	str	r3, [sp, #104]	@ 0x68
 8010da4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010da8:	4654      	mov	r4, sl
 8010daa:	2205      	movs	r2, #5
 8010dac:	484f      	ldr	r0, [pc, #316]	@ (8010eec <_svfiprintf_r+0x1e4>)
 8010dae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010db2:	f7fe fc64 	bl	800f67e <memchr>
 8010db6:	9a04      	ldr	r2, [sp, #16]
 8010db8:	b9d8      	cbnz	r0, 8010df2 <_svfiprintf_r+0xea>
 8010dba:	06d0      	lsls	r0, r2, #27
 8010dbc:	bf44      	itt	mi
 8010dbe:	2320      	movmi	r3, #32
 8010dc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010dc4:	0711      	lsls	r1, r2, #28
 8010dc6:	bf44      	itt	mi
 8010dc8:	232b      	movmi	r3, #43	@ 0x2b
 8010dca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010dce:	f89a 3000 	ldrb.w	r3, [sl]
 8010dd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8010dd4:	d015      	beq.n	8010e02 <_svfiprintf_r+0xfa>
 8010dd6:	9a07      	ldr	r2, [sp, #28]
 8010dd8:	4654      	mov	r4, sl
 8010dda:	2000      	movs	r0, #0
 8010ddc:	f04f 0c0a 	mov.w	ip, #10
 8010de0:	4621      	mov	r1, r4
 8010de2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010de6:	3b30      	subs	r3, #48	@ 0x30
 8010de8:	2b09      	cmp	r3, #9
 8010dea:	d94b      	bls.n	8010e84 <_svfiprintf_r+0x17c>
 8010dec:	b1b0      	cbz	r0, 8010e1c <_svfiprintf_r+0x114>
 8010dee:	9207      	str	r2, [sp, #28]
 8010df0:	e014      	b.n	8010e1c <_svfiprintf_r+0x114>
 8010df2:	eba0 0308 	sub.w	r3, r0, r8
 8010df6:	46a2      	mov	sl, r4
 8010df8:	fa09 f303 	lsl.w	r3, r9, r3
 8010dfc:	4313      	orrs	r3, r2
 8010dfe:	9304      	str	r3, [sp, #16]
 8010e00:	e7d2      	b.n	8010da8 <_svfiprintf_r+0xa0>
 8010e02:	9b03      	ldr	r3, [sp, #12]
 8010e04:	1d19      	adds	r1, r3, #4
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	9103      	str	r1, [sp, #12]
 8010e0c:	bfbb      	ittet	lt
 8010e0e:	425b      	neglt	r3, r3
 8010e10:	f042 0202 	orrlt.w	r2, r2, #2
 8010e14:	9307      	strge	r3, [sp, #28]
 8010e16:	9307      	strlt	r3, [sp, #28]
 8010e18:	bfb8      	it	lt
 8010e1a:	9204      	strlt	r2, [sp, #16]
 8010e1c:	7823      	ldrb	r3, [r4, #0]
 8010e1e:	2b2e      	cmp	r3, #46	@ 0x2e
 8010e20:	d10a      	bne.n	8010e38 <_svfiprintf_r+0x130>
 8010e22:	7863      	ldrb	r3, [r4, #1]
 8010e24:	2b2a      	cmp	r3, #42	@ 0x2a
 8010e26:	d132      	bne.n	8010e8e <_svfiprintf_r+0x186>
 8010e28:	9b03      	ldr	r3, [sp, #12]
 8010e2a:	3402      	adds	r4, #2
 8010e2c:	1d1a      	adds	r2, r3, #4
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010e34:	9203      	str	r2, [sp, #12]
 8010e36:	9305      	str	r3, [sp, #20]
 8010e38:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010efc <_svfiprintf_r+0x1f4>
 8010e3c:	2203      	movs	r2, #3
 8010e3e:	7821      	ldrb	r1, [r4, #0]
 8010e40:	4650      	mov	r0, sl
 8010e42:	f7fe fc1c 	bl	800f67e <memchr>
 8010e46:	b138      	cbz	r0, 8010e58 <_svfiprintf_r+0x150>
 8010e48:	eba0 000a 	sub.w	r0, r0, sl
 8010e4c:	2240      	movs	r2, #64	@ 0x40
 8010e4e:	9b04      	ldr	r3, [sp, #16]
 8010e50:	3401      	adds	r4, #1
 8010e52:	4082      	lsls	r2, r0
 8010e54:	4313      	orrs	r3, r2
 8010e56:	9304      	str	r3, [sp, #16]
 8010e58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e5c:	2206      	movs	r2, #6
 8010e5e:	4824      	ldr	r0, [pc, #144]	@ (8010ef0 <_svfiprintf_r+0x1e8>)
 8010e60:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010e64:	f7fe fc0b 	bl	800f67e <memchr>
 8010e68:	2800      	cmp	r0, #0
 8010e6a:	d036      	beq.n	8010eda <_svfiprintf_r+0x1d2>
 8010e6c:	4b21      	ldr	r3, [pc, #132]	@ (8010ef4 <_svfiprintf_r+0x1ec>)
 8010e6e:	bb1b      	cbnz	r3, 8010eb8 <_svfiprintf_r+0x1b0>
 8010e70:	9b03      	ldr	r3, [sp, #12]
 8010e72:	3307      	adds	r3, #7
 8010e74:	f023 0307 	bic.w	r3, r3, #7
 8010e78:	3308      	adds	r3, #8
 8010e7a:	9303      	str	r3, [sp, #12]
 8010e7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e7e:	4433      	add	r3, r6
 8010e80:	9309      	str	r3, [sp, #36]	@ 0x24
 8010e82:	e76a      	b.n	8010d5a <_svfiprintf_r+0x52>
 8010e84:	fb0c 3202 	mla	r2, ip, r2, r3
 8010e88:	460c      	mov	r4, r1
 8010e8a:	2001      	movs	r0, #1
 8010e8c:	e7a8      	b.n	8010de0 <_svfiprintf_r+0xd8>
 8010e8e:	2300      	movs	r3, #0
 8010e90:	3401      	adds	r4, #1
 8010e92:	f04f 0c0a 	mov.w	ip, #10
 8010e96:	4619      	mov	r1, r3
 8010e98:	9305      	str	r3, [sp, #20]
 8010e9a:	4620      	mov	r0, r4
 8010e9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010ea0:	3a30      	subs	r2, #48	@ 0x30
 8010ea2:	2a09      	cmp	r2, #9
 8010ea4:	d903      	bls.n	8010eae <_svfiprintf_r+0x1a6>
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d0c6      	beq.n	8010e38 <_svfiprintf_r+0x130>
 8010eaa:	9105      	str	r1, [sp, #20]
 8010eac:	e7c4      	b.n	8010e38 <_svfiprintf_r+0x130>
 8010eae:	fb0c 2101 	mla	r1, ip, r1, r2
 8010eb2:	4604      	mov	r4, r0
 8010eb4:	2301      	movs	r3, #1
 8010eb6:	e7f0      	b.n	8010e9a <_svfiprintf_r+0x192>
 8010eb8:	ab03      	add	r3, sp, #12
 8010eba:	462a      	mov	r2, r5
 8010ebc:	a904      	add	r1, sp, #16
 8010ebe:	4638      	mov	r0, r7
 8010ec0:	9300      	str	r3, [sp, #0]
 8010ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8010ef8 <_svfiprintf_r+0x1f0>)
 8010ec4:	f7fd fe7a 	bl	800ebbc <_printf_float>
 8010ec8:	1c42      	adds	r2, r0, #1
 8010eca:	4606      	mov	r6, r0
 8010ecc:	d1d6      	bne.n	8010e7c <_svfiprintf_r+0x174>
 8010ece:	89ab      	ldrh	r3, [r5, #12]
 8010ed0:	065b      	lsls	r3, r3, #25
 8010ed2:	f53f af2d 	bmi.w	8010d30 <_svfiprintf_r+0x28>
 8010ed6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010ed8:	e72c      	b.n	8010d34 <_svfiprintf_r+0x2c>
 8010eda:	ab03      	add	r3, sp, #12
 8010edc:	462a      	mov	r2, r5
 8010ede:	a904      	add	r1, sp, #16
 8010ee0:	4638      	mov	r0, r7
 8010ee2:	9300      	str	r3, [sp, #0]
 8010ee4:	4b04      	ldr	r3, [pc, #16]	@ (8010ef8 <_svfiprintf_r+0x1f0>)
 8010ee6:	f7fe f905 	bl	800f0f4 <_printf_i>
 8010eea:	e7ed      	b.n	8010ec8 <_svfiprintf_r+0x1c0>
 8010eec:	08011bd0 	.word	0x08011bd0
 8010ef0:	08011bda 	.word	0x08011bda
 8010ef4:	0800ebbd 	.word	0x0800ebbd
 8010ef8:	08010c51 	.word	0x08010c51
 8010efc:	08011bd6 	.word	0x08011bd6

08010f00 <__sflush_r>:
 8010f00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f08:	0716      	lsls	r6, r2, #28
 8010f0a:	4605      	mov	r5, r0
 8010f0c:	460c      	mov	r4, r1
 8010f0e:	d454      	bmi.n	8010fba <__sflush_r+0xba>
 8010f10:	684b      	ldr	r3, [r1, #4]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	dc02      	bgt.n	8010f1c <__sflush_r+0x1c>
 8010f16:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	dd48      	ble.n	8010fae <__sflush_r+0xae>
 8010f1c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010f1e:	2e00      	cmp	r6, #0
 8010f20:	d045      	beq.n	8010fae <__sflush_r+0xae>
 8010f22:	2300      	movs	r3, #0
 8010f24:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010f28:	682f      	ldr	r7, [r5, #0]
 8010f2a:	6a21      	ldr	r1, [r4, #32]
 8010f2c:	602b      	str	r3, [r5, #0]
 8010f2e:	d030      	beq.n	8010f92 <__sflush_r+0x92>
 8010f30:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010f32:	89a3      	ldrh	r3, [r4, #12]
 8010f34:	0759      	lsls	r1, r3, #29
 8010f36:	d505      	bpl.n	8010f44 <__sflush_r+0x44>
 8010f38:	6863      	ldr	r3, [r4, #4]
 8010f3a:	1ad2      	subs	r2, r2, r3
 8010f3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010f3e:	b10b      	cbz	r3, 8010f44 <__sflush_r+0x44>
 8010f40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010f42:	1ad2      	subs	r2, r2, r3
 8010f44:	2300      	movs	r3, #0
 8010f46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010f48:	6a21      	ldr	r1, [r4, #32]
 8010f4a:	4628      	mov	r0, r5
 8010f4c:	47b0      	blx	r6
 8010f4e:	1c43      	adds	r3, r0, #1
 8010f50:	89a3      	ldrh	r3, [r4, #12]
 8010f52:	d106      	bne.n	8010f62 <__sflush_r+0x62>
 8010f54:	6829      	ldr	r1, [r5, #0]
 8010f56:	291d      	cmp	r1, #29
 8010f58:	d82b      	bhi.n	8010fb2 <__sflush_r+0xb2>
 8010f5a:	4a2a      	ldr	r2, [pc, #168]	@ (8011004 <__sflush_r+0x104>)
 8010f5c:	410a      	asrs	r2, r1
 8010f5e:	07d6      	lsls	r6, r2, #31
 8010f60:	d427      	bmi.n	8010fb2 <__sflush_r+0xb2>
 8010f62:	2200      	movs	r2, #0
 8010f64:	04d9      	lsls	r1, r3, #19
 8010f66:	6062      	str	r2, [r4, #4]
 8010f68:	6922      	ldr	r2, [r4, #16]
 8010f6a:	6022      	str	r2, [r4, #0]
 8010f6c:	d504      	bpl.n	8010f78 <__sflush_r+0x78>
 8010f6e:	1c42      	adds	r2, r0, #1
 8010f70:	d101      	bne.n	8010f76 <__sflush_r+0x76>
 8010f72:	682b      	ldr	r3, [r5, #0]
 8010f74:	b903      	cbnz	r3, 8010f78 <__sflush_r+0x78>
 8010f76:	6560      	str	r0, [r4, #84]	@ 0x54
 8010f78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010f7a:	602f      	str	r7, [r5, #0]
 8010f7c:	b1b9      	cbz	r1, 8010fae <__sflush_r+0xae>
 8010f7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010f82:	4299      	cmp	r1, r3
 8010f84:	d002      	beq.n	8010f8c <__sflush_r+0x8c>
 8010f86:	4628      	mov	r0, r5
 8010f88:	f7ff f9da 	bl	8010340 <_free_r>
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	6363      	str	r3, [r4, #52]	@ 0x34
 8010f90:	e00d      	b.n	8010fae <__sflush_r+0xae>
 8010f92:	2301      	movs	r3, #1
 8010f94:	4628      	mov	r0, r5
 8010f96:	47b0      	blx	r6
 8010f98:	4602      	mov	r2, r0
 8010f9a:	1c50      	adds	r0, r2, #1
 8010f9c:	d1c9      	bne.n	8010f32 <__sflush_r+0x32>
 8010f9e:	682b      	ldr	r3, [r5, #0]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d0c6      	beq.n	8010f32 <__sflush_r+0x32>
 8010fa4:	2b1d      	cmp	r3, #29
 8010fa6:	d001      	beq.n	8010fac <__sflush_r+0xac>
 8010fa8:	2b16      	cmp	r3, #22
 8010faa:	d11d      	bne.n	8010fe8 <__sflush_r+0xe8>
 8010fac:	602f      	str	r7, [r5, #0]
 8010fae:	2000      	movs	r0, #0
 8010fb0:	e021      	b.n	8010ff6 <__sflush_r+0xf6>
 8010fb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010fb6:	b21b      	sxth	r3, r3
 8010fb8:	e01a      	b.n	8010ff0 <__sflush_r+0xf0>
 8010fba:	690f      	ldr	r7, [r1, #16]
 8010fbc:	2f00      	cmp	r7, #0
 8010fbe:	d0f6      	beq.n	8010fae <__sflush_r+0xae>
 8010fc0:	0793      	lsls	r3, r2, #30
 8010fc2:	680e      	ldr	r6, [r1, #0]
 8010fc4:	600f      	str	r7, [r1, #0]
 8010fc6:	bf0c      	ite	eq
 8010fc8:	694b      	ldreq	r3, [r1, #20]
 8010fca:	2300      	movne	r3, #0
 8010fcc:	eba6 0807 	sub.w	r8, r6, r7
 8010fd0:	608b      	str	r3, [r1, #8]
 8010fd2:	f1b8 0f00 	cmp.w	r8, #0
 8010fd6:	ddea      	ble.n	8010fae <__sflush_r+0xae>
 8010fd8:	4643      	mov	r3, r8
 8010fda:	463a      	mov	r2, r7
 8010fdc:	6a21      	ldr	r1, [r4, #32]
 8010fde:	4628      	mov	r0, r5
 8010fe0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010fe2:	47b0      	blx	r6
 8010fe4:	2800      	cmp	r0, #0
 8010fe6:	dc08      	bgt.n	8010ffa <__sflush_r+0xfa>
 8010fe8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010fec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8010ff4:	81a3      	strh	r3, [r4, #12]
 8010ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ffa:	4407      	add	r7, r0
 8010ffc:	eba8 0800 	sub.w	r8, r8, r0
 8011000:	e7e7      	b.n	8010fd2 <__sflush_r+0xd2>
 8011002:	bf00      	nop
 8011004:	dfbffffe 	.word	0xdfbffffe

08011008 <_fflush_r>:
 8011008:	b538      	push	{r3, r4, r5, lr}
 801100a:	690b      	ldr	r3, [r1, #16]
 801100c:	4605      	mov	r5, r0
 801100e:	460c      	mov	r4, r1
 8011010:	b913      	cbnz	r3, 8011018 <_fflush_r+0x10>
 8011012:	2500      	movs	r5, #0
 8011014:	4628      	mov	r0, r5
 8011016:	bd38      	pop	{r3, r4, r5, pc}
 8011018:	b118      	cbz	r0, 8011022 <_fflush_r+0x1a>
 801101a:	6a03      	ldr	r3, [r0, #32]
 801101c:	b90b      	cbnz	r3, 8011022 <_fflush_r+0x1a>
 801101e:	f7fe fa15 	bl	800f44c <__sinit>
 8011022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011026:	2b00      	cmp	r3, #0
 8011028:	d0f3      	beq.n	8011012 <_fflush_r+0xa>
 801102a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801102c:	07d0      	lsls	r0, r2, #31
 801102e:	d404      	bmi.n	801103a <_fflush_r+0x32>
 8011030:	0599      	lsls	r1, r3, #22
 8011032:	d402      	bmi.n	801103a <_fflush_r+0x32>
 8011034:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011036:	f7fe fb20 	bl	800f67a <__retarget_lock_acquire_recursive>
 801103a:	4628      	mov	r0, r5
 801103c:	4621      	mov	r1, r4
 801103e:	f7ff ff5f 	bl	8010f00 <__sflush_r>
 8011042:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011044:	4605      	mov	r5, r0
 8011046:	07da      	lsls	r2, r3, #31
 8011048:	d4e4      	bmi.n	8011014 <_fflush_r+0xc>
 801104a:	89a3      	ldrh	r3, [r4, #12]
 801104c:	059b      	lsls	r3, r3, #22
 801104e:	d4e1      	bmi.n	8011014 <_fflush_r+0xc>
 8011050:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011052:	f7fe fb13 	bl	800f67c <__retarget_lock_release_recursive>
 8011056:	e7dd      	b.n	8011014 <_fflush_r+0xc>

08011058 <memmove>:
 8011058:	4288      	cmp	r0, r1
 801105a:	b510      	push	{r4, lr}
 801105c:	eb01 0402 	add.w	r4, r1, r2
 8011060:	d902      	bls.n	8011068 <memmove+0x10>
 8011062:	4284      	cmp	r4, r0
 8011064:	4623      	mov	r3, r4
 8011066:	d807      	bhi.n	8011078 <memmove+0x20>
 8011068:	1e43      	subs	r3, r0, #1
 801106a:	42a1      	cmp	r1, r4
 801106c:	d008      	beq.n	8011080 <memmove+0x28>
 801106e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011072:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011076:	e7f8      	b.n	801106a <memmove+0x12>
 8011078:	4402      	add	r2, r0
 801107a:	4601      	mov	r1, r0
 801107c:	428a      	cmp	r2, r1
 801107e:	d100      	bne.n	8011082 <memmove+0x2a>
 8011080:	bd10      	pop	{r4, pc}
 8011082:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011086:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801108a:	e7f7      	b.n	801107c <memmove+0x24>

0801108c <_sbrk_r>:
 801108c:	b538      	push	{r3, r4, r5, lr}
 801108e:	2300      	movs	r3, #0
 8011090:	4d05      	ldr	r5, [pc, #20]	@ (80110a8 <_sbrk_r+0x1c>)
 8011092:	4604      	mov	r4, r0
 8011094:	4608      	mov	r0, r1
 8011096:	602b      	str	r3, [r5, #0]
 8011098:	f7f2 fe24 	bl	8003ce4 <_sbrk>
 801109c:	1c43      	adds	r3, r0, #1
 801109e:	d102      	bne.n	80110a6 <_sbrk_r+0x1a>
 80110a0:	682b      	ldr	r3, [r5, #0]
 80110a2:	b103      	cbz	r3, 80110a6 <_sbrk_r+0x1a>
 80110a4:	6023      	str	r3, [r4, #0]
 80110a6:	bd38      	pop	{r3, r4, r5, pc}
 80110a8:	20005dd4 	.word	0x20005dd4

080110ac <memcpy>:
 80110ac:	440a      	add	r2, r1
 80110ae:	1e43      	subs	r3, r0, #1
 80110b0:	4291      	cmp	r1, r2
 80110b2:	d100      	bne.n	80110b6 <memcpy+0xa>
 80110b4:	4770      	bx	lr
 80110b6:	b510      	push	{r4, lr}
 80110b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80110bc:	4291      	cmp	r1, r2
 80110be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80110c2:	d1f9      	bne.n	80110b8 <memcpy+0xc>
 80110c4:	bd10      	pop	{r4, pc}
	...

080110c8 <__assert_func>:
 80110c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80110ca:	4614      	mov	r4, r2
 80110cc:	461a      	mov	r2, r3
 80110ce:	4b09      	ldr	r3, [pc, #36]	@ (80110f4 <__assert_func+0x2c>)
 80110d0:	4605      	mov	r5, r0
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	68d8      	ldr	r0, [r3, #12]
 80110d6:	b954      	cbnz	r4, 80110ee <__assert_func+0x26>
 80110d8:	4b07      	ldr	r3, [pc, #28]	@ (80110f8 <__assert_func+0x30>)
 80110da:	461c      	mov	r4, r3
 80110dc:	9100      	str	r1, [sp, #0]
 80110de:	4907      	ldr	r1, [pc, #28]	@ (80110fc <__assert_func+0x34>)
 80110e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80110e4:	462b      	mov	r3, r5
 80110e6:	f000 f86f 	bl	80111c8 <fiprintf>
 80110ea:	f000 f87f 	bl	80111ec <abort>
 80110ee:	4b04      	ldr	r3, [pc, #16]	@ (8011100 <__assert_func+0x38>)
 80110f0:	e7f4      	b.n	80110dc <__assert_func+0x14>
 80110f2:	bf00      	nop
 80110f4:	20000034 	.word	0x20000034
 80110f8:	08011c26 	.word	0x08011c26
 80110fc:	08011bf8 	.word	0x08011bf8
 8011100:	08011beb 	.word	0x08011beb

08011104 <_calloc_r>:
 8011104:	b570      	push	{r4, r5, r6, lr}
 8011106:	fba1 5402 	umull	r5, r4, r1, r2
 801110a:	b93c      	cbnz	r4, 801111c <_calloc_r+0x18>
 801110c:	4629      	mov	r1, r5
 801110e:	f7ff f98b 	bl	8010428 <_malloc_r>
 8011112:	4606      	mov	r6, r0
 8011114:	b928      	cbnz	r0, 8011122 <_calloc_r+0x1e>
 8011116:	2600      	movs	r6, #0
 8011118:	4630      	mov	r0, r6
 801111a:	bd70      	pop	{r4, r5, r6, pc}
 801111c:	220c      	movs	r2, #12
 801111e:	6002      	str	r2, [r0, #0]
 8011120:	e7f9      	b.n	8011116 <_calloc_r+0x12>
 8011122:	462a      	mov	r2, r5
 8011124:	4621      	mov	r1, r4
 8011126:	f7fe fa2a 	bl	800f57e <memset>
 801112a:	e7f5      	b.n	8011118 <_calloc_r+0x14>

0801112c <__ascii_mbtowc>:
 801112c:	b082      	sub	sp, #8
 801112e:	b901      	cbnz	r1, 8011132 <__ascii_mbtowc+0x6>
 8011130:	a901      	add	r1, sp, #4
 8011132:	b142      	cbz	r2, 8011146 <__ascii_mbtowc+0x1a>
 8011134:	b14b      	cbz	r3, 801114a <__ascii_mbtowc+0x1e>
 8011136:	7813      	ldrb	r3, [r2, #0]
 8011138:	600b      	str	r3, [r1, #0]
 801113a:	7812      	ldrb	r2, [r2, #0]
 801113c:	1e10      	subs	r0, r2, #0
 801113e:	bf18      	it	ne
 8011140:	2001      	movne	r0, #1
 8011142:	b002      	add	sp, #8
 8011144:	4770      	bx	lr
 8011146:	4610      	mov	r0, r2
 8011148:	e7fb      	b.n	8011142 <__ascii_mbtowc+0x16>
 801114a:	f06f 0001 	mvn.w	r0, #1
 801114e:	e7f8      	b.n	8011142 <__ascii_mbtowc+0x16>

08011150 <_realloc_r>:
 8011150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011154:	4680      	mov	r8, r0
 8011156:	4615      	mov	r5, r2
 8011158:	460c      	mov	r4, r1
 801115a:	b921      	cbnz	r1, 8011166 <_realloc_r+0x16>
 801115c:	4611      	mov	r1, r2
 801115e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011162:	f7ff b961 	b.w	8010428 <_malloc_r>
 8011166:	b92a      	cbnz	r2, 8011174 <_realloc_r+0x24>
 8011168:	f7ff f8ea 	bl	8010340 <_free_r>
 801116c:	2400      	movs	r4, #0
 801116e:	4620      	mov	r0, r4
 8011170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011174:	f000 f841 	bl	80111fa <_malloc_usable_size_r>
 8011178:	4285      	cmp	r5, r0
 801117a:	4606      	mov	r6, r0
 801117c:	d802      	bhi.n	8011184 <_realloc_r+0x34>
 801117e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011182:	d8f4      	bhi.n	801116e <_realloc_r+0x1e>
 8011184:	4629      	mov	r1, r5
 8011186:	4640      	mov	r0, r8
 8011188:	f7ff f94e 	bl	8010428 <_malloc_r>
 801118c:	4607      	mov	r7, r0
 801118e:	2800      	cmp	r0, #0
 8011190:	d0ec      	beq.n	801116c <_realloc_r+0x1c>
 8011192:	42b5      	cmp	r5, r6
 8011194:	462a      	mov	r2, r5
 8011196:	4621      	mov	r1, r4
 8011198:	bf28      	it	cs
 801119a:	4632      	movcs	r2, r6
 801119c:	f7ff ff86 	bl	80110ac <memcpy>
 80111a0:	4621      	mov	r1, r4
 80111a2:	4640      	mov	r0, r8
 80111a4:	463c      	mov	r4, r7
 80111a6:	f7ff f8cb 	bl	8010340 <_free_r>
 80111aa:	e7e0      	b.n	801116e <_realloc_r+0x1e>

080111ac <__ascii_wctomb>:
 80111ac:	4603      	mov	r3, r0
 80111ae:	4608      	mov	r0, r1
 80111b0:	b141      	cbz	r1, 80111c4 <__ascii_wctomb+0x18>
 80111b2:	2aff      	cmp	r2, #255	@ 0xff
 80111b4:	d904      	bls.n	80111c0 <__ascii_wctomb+0x14>
 80111b6:	228a      	movs	r2, #138	@ 0x8a
 80111b8:	f04f 30ff 	mov.w	r0, #4294967295
 80111bc:	601a      	str	r2, [r3, #0]
 80111be:	4770      	bx	lr
 80111c0:	2001      	movs	r0, #1
 80111c2:	700a      	strb	r2, [r1, #0]
 80111c4:	4770      	bx	lr
	...

080111c8 <fiprintf>:
 80111c8:	b40e      	push	{r1, r2, r3}
 80111ca:	b503      	push	{r0, r1, lr}
 80111cc:	ab03      	add	r3, sp, #12
 80111ce:	4601      	mov	r1, r0
 80111d0:	4805      	ldr	r0, [pc, #20]	@ (80111e8 <fiprintf+0x20>)
 80111d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80111d6:	6800      	ldr	r0, [r0, #0]
 80111d8:	9301      	str	r3, [sp, #4]
 80111da:	f000 f83f 	bl	801125c <_vfiprintf_r>
 80111de:	b002      	add	sp, #8
 80111e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80111e4:	b003      	add	sp, #12
 80111e6:	4770      	bx	lr
 80111e8:	20000034 	.word	0x20000034

080111ec <abort>:
 80111ec:	2006      	movs	r0, #6
 80111ee:	b508      	push	{r3, lr}
 80111f0:	f000 fa08 	bl	8011604 <raise>
 80111f4:	2001      	movs	r0, #1
 80111f6:	f7f2 fcfd 	bl	8003bf4 <_exit>

080111fa <_malloc_usable_size_r>:
 80111fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80111fe:	1f18      	subs	r0, r3, #4
 8011200:	2b00      	cmp	r3, #0
 8011202:	bfbc      	itt	lt
 8011204:	580b      	ldrlt	r3, [r1, r0]
 8011206:	18c0      	addlt	r0, r0, r3
 8011208:	4770      	bx	lr

0801120a <__sfputc_r>:
 801120a:	6893      	ldr	r3, [r2, #8]
 801120c:	3b01      	subs	r3, #1
 801120e:	2b00      	cmp	r3, #0
 8011210:	6093      	str	r3, [r2, #8]
 8011212:	b410      	push	{r4}
 8011214:	da08      	bge.n	8011228 <__sfputc_r+0x1e>
 8011216:	6994      	ldr	r4, [r2, #24]
 8011218:	42a3      	cmp	r3, r4
 801121a:	db01      	blt.n	8011220 <__sfputc_r+0x16>
 801121c:	290a      	cmp	r1, #10
 801121e:	d103      	bne.n	8011228 <__sfputc_r+0x1e>
 8011220:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011224:	f000 b932 	b.w	801148c <__swbuf_r>
 8011228:	6813      	ldr	r3, [r2, #0]
 801122a:	1c58      	adds	r0, r3, #1
 801122c:	6010      	str	r0, [r2, #0]
 801122e:	4608      	mov	r0, r1
 8011230:	7019      	strb	r1, [r3, #0]
 8011232:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011236:	4770      	bx	lr

08011238 <__sfputs_r>:
 8011238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801123a:	4606      	mov	r6, r0
 801123c:	460f      	mov	r7, r1
 801123e:	4614      	mov	r4, r2
 8011240:	18d5      	adds	r5, r2, r3
 8011242:	42ac      	cmp	r4, r5
 8011244:	d101      	bne.n	801124a <__sfputs_r+0x12>
 8011246:	2000      	movs	r0, #0
 8011248:	e007      	b.n	801125a <__sfputs_r+0x22>
 801124a:	463a      	mov	r2, r7
 801124c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011250:	4630      	mov	r0, r6
 8011252:	f7ff ffda 	bl	801120a <__sfputc_r>
 8011256:	1c43      	adds	r3, r0, #1
 8011258:	d1f3      	bne.n	8011242 <__sfputs_r+0xa>
 801125a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801125c <_vfiprintf_r>:
 801125c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011260:	460d      	mov	r5, r1
 8011262:	b09d      	sub	sp, #116	@ 0x74
 8011264:	4614      	mov	r4, r2
 8011266:	4698      	mov	r8, r3
 8011268:	4606      	mov	r6, r0
 801126a:	b118      	cbz	r0, 8011274 <_vfiprintf_r+0x18>
 801126c:	6a03      	ldr	r3, [r0, #32]
 801126e:	b90b      	cbnz	r3, 8011274 <_vfiprintf_r+0x18>
 8011270:	f7fe f8ec 	bl	800f44c <__sinit>
 8011274:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011276:	07d9      	lsls	r1, r3, #31
 8011278:	d405      	bmi.n	8011286 <_vfiprintf_r+0x2a>
 801127a:	89ab      	ldrh	r3, [r5, #12]
 801127c:	059a      	lsls	r2, r3, #22
 801127e:	d402      	bmi.n	8011286 <_vfiprintf_r+0x2a>
 8011280:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011282:	f7fe f9fa 	bl	800f67a <__retarget_lock_acquire_recursive>
 8011286:	89ab      	ldrh	r3, [r5, #12]
 8011288:	071b      	lsls	r3, r3, #28
 801128a:	d501      	bpl.n	8011290 <_vfiprintf_r+0x34>
 801128c:	692b      	ldr	r3, [r5, #16]
 801128e:	b99b      	cbnz	r3, 80112b8 <_vfiprintf_r+0x5c>
 8011290:	4629      	mov	r1, r5
 8011292:	4630      	mov	r0, r6
 8011294:	f000 f938 	bl	8011508 <__swsetup_r>
 8011298:	b170      	cbz	r0, 80112b8 <_vfiprintf_r+0x5c>
 801129a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801129c:	07dc      	lsls	r4, r3, #31
 801129e:	d504      	bpl.n	80112aa <_vfiprintf_r+0x4e>
 80112a0:	f04f 30ff 	mov.w	r0, #4294967295
 80112a4:	b01d      	add	sp, #116	@ 0x74
 80112a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112aa:	89ab      	ldrh	r3, [r5, #12]
 80112ac:	0598      	lsls	r0, r3, #22
 80112ae:	d4f7      	bmi.n	80112a0 <_vfiprintf_r+0x44>
 80112b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80112b2:	f7fe f9e3 	bl	800f67c <__retarget_lock_release_recursive>
 80112b6:	e7f3      	b.n	80112a0 <_vfiprintf_r+0x44>
 80112b8:	2300      	movs	r3, #0
 80112ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80112be:	f04f 0901 	mov.w	r9, #1
 80112c2:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8011478 <_vfiprintf_r+0x21c>
 80112c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80112c8:	2320      	movs	r3, #32
 80112ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80112ce:	2330      	movs	r3, #48	@ 0x30
 80112d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80112d4:	4623      	mov	r3, r4
 80112d6:	469a      	mov	sl, r3
 80112d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80112dc:	b10a      	cbz	r2, 80112e2 <_vfiprintf_r+0x86>
 80112de:	2a25      	cmp	r2, #37	@ 0x25
 80112e0:	d1f9      	bne.n	80112d6 <_vfiprintf_r+0x7a>
 80112e2:	ebba 0b04 	subs.w	fp, sl, r4
 80112e6:	d00b      	beq.n	8011300 <_vfiprintf_r+0xa4>
 80112e8:	465b      	mov	r3, fp
 80112ea:	4622      	mov	r2, r4
 80112ec:	4629      	mov	r1, r5
 80112ee:	4630      	mov	r0, r6
 80112f0:	f7ff ffa2 	bl	8011238 <__sfputs_r>
 80112f4:	3001      	adds	r0, #1
 80112f6:	f000 80a7 	beq.w	8011448 <_vfiprintf_r+0x1ec>
 80112fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80112fc:	445a      	add	r2, fp
 80112fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8011300:	f89a 3000 	ldrb.w	r3, [sl]
 8011304:	2b00      	cmp	r3, #0
 8011306:	f000 809f 	beq.w	8011448 <_vfiprintf_r+0x1ec>
 801130a:	2300      	movs	r3, #0
 801130c:	f04f 32ff 	mov.w	r2, #4294967295
 8011310:	f10a 0a01 	add.w	sl, sl, #1
 8011314:	9304      	str	r3, [sp, #16]
 8011316:	9307      	str	r3, [sp, #28]
 8011318:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801131c:	931a      	str	r3, [sp, #104]	@ 0x68
 801131e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011322:	4654      	mov	r4, sl
 8011324:	2205      	movs	r2, #5
 8011326:	4854      	ldr	r0, [pc, #336]	@ (8011478 <_vfiprintf_r+0x21c>)
 8011328:	f814 1b01 	ldrb.w	r1, [r4], #1
 801132c:	f7fe f9a7 	bl	800f67e <memchr>
 8011330:	9a04      	ldr	r2, [sp, #16]
 8011332:	b9d8      	cbnz	r0, 801136c <_vfiprintf_r+0x110>
 8011334:	06d1      	lsls	r1, r2, #27
 8011336:	bf44      	itt	mi
 8011338:	2320      	movmi	r3, #32
 801133a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801133e:	0713      	lsls	r3, r2, #28
 8011340:	bf44      	itt	mi
 8011342:	232b      	movmi	r3, #43	@ 0x2b
 8011344:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011348:	f89a 3000 	ldrb.w	r3, [sl]
 801134c:	2b2a      	cmp	r3, #42	@ 0x2a
 801134e:	d015      	beq.n	801137c <_vfiprintf_r+0x120>
 8011350:	9a07      	ldr	r2, [sp, #28]
 8011352:	4654      	mov	r4, sl
 8011354:	2000      	movs	r0, #0
 8011356:	f04f 0c0a 	mov.w	ip, #10
 801135a:	4621      	mov	r1, r4
 801135c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011360:	3b30      	subs	r3, #48	@ 0x30
 8011362:	2b09      	cmp	r3, #9
 8011364:	d94b      	bls.n	80113fe <_vfiprintf_r+0x1a2>
 8011366:	b1b0      	cbz	r0, 8011396 <_vfiprintf_r+0x13a>
 8011368:	9207      	str	r2, [sp, #28]
 801136a:	e014      	b.n	8011396 <_vfiprintf_r+0x13a>
 801136c:	eba0 0308 	sub.w	r3, r0, r8
 8011370:	46a2      	mov	sl, r4
 8011372:	fa09 f303 	lsl.w	r3, r9, r3
 8011376:	4313      	orrs	r3, r2
 8011378:	9304      	str	r3, [sp, #16]
 801137a:	e7d2      	b.n	8011322 <_vfiprintf_r+0xc6>
 801137c:	9b03      	ldr	r3, [sp, #12]
 801137e:	1d19      	adds	r1, r3, #4
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	2b00      	cmp	r3, #0
 8011384:	9103      	str	r1, [sp, #12]
 8011386:	bfbb      	ittet	lt
 8011388:	425b      	neglt	r3, r3
 801138a:	f042 0202 	orrlt.w	r2, r2, #2
 801138e:	9307      	strge	r3, [sp, #28]
 8011390:	9307      	strlt	r3, [sp, #28]
 8011392:	bfb8      	it	lt
 8011394:	9204      	strlt	r2, [sp, #16]
 8011396:	7823      	ldrb	r3, [r4, #0]
 8011398:	2b2e      	cmp	r3, #46	@ 0x2e
 801139a:	d10a      	bne.n	80113b2 <_vfiprintf_r+0x156>
 801139c:	7863      	ldrb	r3, [r4, #1]
 801139e:	2b2a      	cmp	r3, #42	@ 0x2a
 80113a0:	d132      	bne.n	8011408 <_vfiprintf_r+0x1ac>
 80113a2:	9b03      	ldr	r3, [sp, #12]
 80113a4:	3402      	adds	r4, #2
 80113a6:	1d1a      	adds	r2, r3, #4
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80113ae:	9203      	str	r2, [sp, #12]
 80113b0:	9305      	str	r3, [sp, #20]
 80113b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011488 <_vfiprintf_r+0x22c>
 80113b6:	2203      	movs	r2, #3
 80113b8:	7821      	ldrb	r1, [r4, #0]
 80113ba:	4650      	mov	r0, sl
 80113bc:	f7fe f95f 	bl	800f67e <memchr>
 80113c0:	b138      	cbz	r0, 80113d2 <_vfiprintf_r+0x176>
 80113c2:	eba0 000a 	sub.w	r0, r0, sl
 80113c6:	2240      	movs	r2, #64	@ 0x40
 80113c8:	9b04      	ldr	r3, [sp, #16]
 80113ca:	3401      	adds	r4, #1
 80113cc:	4082      	lsls	r2, r0
 80113ce:	4313      	orrs	r3, r2
 80113d0:	9304      	str	r3, [sp, #16]
 80113d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113d6:	2206      	movs	r2, #6
 80113d8:	4828      	ldr	r0, [pc, #160]	@ (801147c <_vfiprintf_r+0x220>)
 80113da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80113de:	f7fe f94e 	bl	800f67e <memchr>
 80113e2:	2800      	cmp	r0, #0
 80113e4:	d03f      	beq.n	8011466 <_vfiprintf_r+0x20a>
 80113e6:	4b26      	ldr	r3, [pc, #152]	@ (8011480 <_vfiprintf_r+0x224>)
 80113e8:	bb1b      	cbnz	r3, 8011432 <_vfiprintf_r+0x1d6>
 80113ea:	9b03      	ldr	r3, [sp, #12]
 80113ec:	3307      	adds	r3, #7
 80113ee:	f023 0307 	bic.w	r3, r3, #7
 80113f2:	3308      	adds	r3, #8
 80113f4:	9303      	str	r3, [sp, #12]
 80113f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80113f8:	443b      	add	r3, r7
 80113fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80113fc:	e76a      	b.n	80112d4 <_vfiprintf_r+0x78>
 80113fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8011402:	460c      	mov	r4, r1
 8011404:	2001      	movs	r0, #1
 8011406:	e7a8      	b.n	801135a <_vfiprintf_r+0xfe>
 8011408:	2300      	movs	r3, #0
 801140a:	3401      	adds	r4, #1
 801140c:	f04f 0c0a 	mov.w	ip, #10
 8011410:	4619      	mov	r1, r3
 8011412:	9305      	str	r3, [sp, #20]
 8011414:	4620      	mov	r0, r4
 8011416:	f810 2b01 	ldrb.w	r2, [r0], #1
 801141a:	3a30      	subs	r2, #48	@ 0x30
 801141c:	2a09      	cmp	r2, #9
 801141e:	d903      	bls.n	8011428 <_vfiprintf_r+0x1cc>
 8011420:	2b00      	cmp	r3, #0
 8011422:	d0c6      	beq.n	80113b2 <_vfiprintf_r+0x156>
 8011424:	9105      	str	r1, [sp, #20]
 8011426:	e7c4      	b.n	80113b2 <_vfiprintf_r+0x156>
 8011428:	fb0c 2101 	mla	r1, ip, r1, r2
 801142c:	4604      	mov	r4, r0
 801142e:	2301      	movs	r3, #1
 8011430:	e7f0      	b.n	8011414 <_vfiprintf_r+0x1b8>
 8011432:	ab03      	add	r3, sp, #12
 8011434:	462a      	mov	r2, r5
 8011436:	a904      	add	r1, sp, #16
 8011438:	4630      	mov	r0, r6
 801143a:	9300      	str	r3, [sp, #0]
 801143c:	4b11      	ldr	r3, [pc, #68]	@ (8011484 <_vfiprintf_r+0x228>)
 801143e:	f7fd fbbd 	bl	800ebbc <_printf_float>
 8011442:	4607      	mov	r7, r0
 8011444:	1c78      	adds	r0, r7, #1
 8011446:	d1d6      	bne.n	80113f6 <_vfiprintf_r+0x19a>
 8011448:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801144a:	07d9      	lsls	r1, r3, #31
 801144c:	d405      	bmi.n	801145a <_vfiprintf_r+0x1fe>
 801144e:	89ab      	ldrh	r3, [r5, #12]
 8011450:	059a      	lsls	r2, r3, #22
 8011452:	d402      	bmi.n	801145a <_vfiprintf_r+0x1fe>
 8011454:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011456:	f7fe f911 	bl	800f67c <__retarget_lock_release_recursive>
 801145a:	89ab      	ldrh	r3, [r5, #12]
 801145c:	065b      	lsls	r3, r3, #25
 801145e:	f53f af1f 	bmi.w	80112a0 <_vfiprintf_r+0x44>
 8011462:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011464:	e71e      	b.n	80112a4 <_vfiprintf_r+0x48>
 8011466:	ab03      	add	r3, sp, #12
 8011468:	462a      	mov	r2, r5
 801146a:	a904      	add	r1, sp, #16
 801146c:	4630      	mov	r0, r6
 801146e:	9300      	str	r3, [sp, #0]
 8011470:	4b04      	ldr	r3, [pc, #16]	@ (8011484 <_vfiprintf_r+0x228>)
 8011472:	f7fd fe3f 	bl	800f0f4 <_printf_i>
 8011476:	e7e4      	b.n	8011442 <_vfiprintf_r+0x1e6>
 8011478:	08011bd0 	.word	0x08011bd0
 801147c:	08011bda 	.word	0x08011bda
 8011480:	0800ebbd 	.word	0x0800ebbd
 8011484:	08011239 	.word	0x08011239
 8011488:	08011bd6 	.word	0x08011bd6

0801148c <__swbuf_r>:
 801148c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801148e:	460e      	mov	r6, r1
 8011490:	4614      	mov	r4, r2
 8011492:	4605      	mov	r5, r0
 8011494:	b118      	cbz	r0, 801149e <__swbuf_r+0x12>
 8011496:	6a03      	ldr	r3, [r0, #32]
 8011498:	b90b      	cbnz	r3, 801149e <__swbuf_r+0x12>
 801149a:	f7fd ffd7 	bl	800f44c <__sinit>
 801149e:	69a3      	ldr	r3, [r4, #24]
 80114a0:	60a3      	str	r3, [r4, #8]
 80114a2:	89a3      	ldrh	r3, [r4, #12]
 80114a4:	071a      	lsls	r2, r3, #28
 80114a6:	d501      	bpl.n	80114ac <__swbuf_r+0x20>
 80114a8:	6923      	ldr	r3, [r4, #16]
 80114aa:	b943      	cbnz	r3, 80114be <__swbuf_r+0x32>
 80114ac:	4621      	mov	r1, r4
 80114ae:	4628      	mov	r0, r5
 80114b0:	f000 f82a 	bl	8011508 <__swsetup_r>
 80114b4:	b118      	cbz	r0, 80114be <__swbuf_r+0x32>
 80114b6:	f04f 37ff 	mov.w	r7, #4294967295
 80114ba:	4638      	mov	r0, r7
 80114bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114be:	6823      	ldr	r3, [r4, #0]
 80114c0:	b2f6      	uxtb	r6, r6
 80114c2:	6922      	ldr	r2, [r4, #16]
 80114c4:	4637      	mov	r7, r6
 80114c6:	1a98      	subs	r0, r3, r2
 80114c8:	6963      	ldr	r3, [r4, #20]
 80114ca:	4283      	cmp	r3, r0
 80114cc:	dc05      	bgt.n	80114da <__swbuf_r+0x4e>
 80114ce:	4621      	mov	r1, r4
 80114d0:	4628      	mov	r0, r5
 80114d2:	f7ff fd99 	bl	8011008 <_fflush_r>
 80114d6:	2800      	cmp	r0, #0
 80114d8:	d1ed      	bne.n	80114b6 <__swbuf_r+0x2a>
 80114da:	68a3      	ldr	r3, [r4, #8]
 80114dc:	3b01      	subs	r3, #1
 80114de:	60a3      	str	r3, [r4, #8]
 80114e0:	6823      	ldr	r3, [r4, #0]
 80114e2:	1c5a      	adds	r2, r3, #1
 80114e4:	6022      	str	r2, [r4, #0]
 80114e6:	701e      	strb	r6, [r3, #0]
 80114e8:	1c43      	adds	r3, r0, #1
 80114ea:	6962      	ldr	r2, [r4, #20]
 80114ec:	429a      	cmp	r2, r3
 80114ee:	d004      	beq.n	80114fa <__swbuf_r+0x6e>
 80114f0:	89a3      	ldrh	r3, [r4, #12]
 80114f2:	07db      	lsls	r3, r3, #31
 80114f4:	d5e1      	bpl.n	80114ba <__swbuf_r+0x2e>
 80114f6:	2e0a      	cmp	r6, #10
 80114f8:	d1df      	bne.n	80114ba <__swbuf_r+0x2e>
 80114fa:	4621      	mov	r1, r4
 80114fc:	4628      	mov	r0, r5
 80114fe:	f7ff fd83 	bl	8011008 <_fflush_r>
 8011502:	2800      	cmp	r0, #0
 8011504:	d0d9      	beq.n	80114ba <__swbuf_r+0x2e>
 8011506:	e7d6      	b.n	80114b6 <__swbuf_r+0x2a>

08011508 <__swsetup_r>:
 8011508:	b538      	push	{r3, r4, r5, lr}
 801150a:	4b29      	ldr	r3, [pc, #164]	@ (80115b0 <__swsetup_r+0xa8>)
 801150c:	4605      	mov	r5, r0
 801150e:	460c      	mov	r4, r1
 8011510:	6818      	ldr	r0, [r3, #0]
 8011512:	b118      	cbz	r0, 801151c <__swsetup_r+0x14>
 8011514:	6a03      	ldr	r3, [r0, #32]
 8011516:	b90b      	cbnz	r3, 801151c <__swsetup_r+0x14>
 8011518:	f7fd ff98 	bl	800f44c <__sinit>
 801151c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011520:	0719      	lsls	r1, r3, #28
 8011522:	d422      	bmi.n	801156a <__swsetup_r+0x62>
 8011524:	06da      	lsls	r2, r3, #27
 8011526:	d407      	bmi.n	8011538 <__swsetup_r+0x30>
 8011528:	2209      	movs	r2, #9
 801152a:	602a      	str	r2, [r5, #0]
 801152c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011530:	f04f 30ff 	mov.w	r0, #4294967295
 8011534:	81a3      	strh	r3, [r4, #12]
 8011536:	e033      	b.n	80115a0 <__swsetup_r+0x98>
 8011538:	0758      	lsls	r0, r3, #29
 801153a:	d512      	bpl.n	8011562 <__swsetup_r+0x5a>
 801153c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801153e:	b141      	cbz	r1, 8011552 <__swsetup_r+0x4a>
 8011540:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011544:	4299      	cmp	r1, r3
 8011546:	d002      	beq.n	801154e <__swsetup_r+0x46>
 8011548:	4628      	mov	r0, r5
 801154a:	f7fe fef9 	bl	8010340 <_free_r>
 801154e:	2300      	movs	r3, #0
 8011550:	6363      	str	r3, [r4, #52]	@ 0x34
 8011552:	89a3      	ldrh	r3, [r4, #12]
 8011554:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011558:	81a3      	strh	r3, [r4, #12]
 801155a:	2300      	movs	r3, #0
 801155c:	6063      	str	r3, [r4, #4]
 801155e:	6923      	ldr	r3, [r4, #16]
 8011560:	6023      	str	r3, [r4, #0]
 8011562:	89a3      	ldrh	r3, [r4, #12]
 8011564:	f043 0308 	orr.w	r3, r3, #8
 8011568:	81a3      	strh	r3, [r4, #12]
 801156a:	6923      	ldr	r3, [r4, #16]
 801156c:	b94b      	cbnz	r3, 8011582 <__swsetup_r+0x7a>
 801156e:	89a3      	ldrh	r3, [r4, #12]
 8011570:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011574:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011578:	d003      	beq.n	8011582 <__swsetup_r+0x7a>
 801157a:	4621      	mov	r1, r4
 801157c:	4628      	mov	r0, r5
 801157e:	f000 f882 	bl	8011686 <__smakebuf_r>
 8011582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011586:	f013 0201 	ands.w	r2, r3, #1
 801158a:	d00a      	beq.n	80115a2 <__swsetup_r+0x9a>
 801158c:	2200      	movs	r2, #0
 801158e:	60a2      	str	r2, [r4, #8]
 8011590:	6962      	ldr	r2, [r4, #20]
 8011592:	4252      	negs	r2, r2
 8011594:	61a2      	str	r2, [r4, #24]
 8011596:	6922      	ldr	r2, [r4, #16]
 8011598:	b942      	cbnz	r2, 80115ac <__swsetup_r+0xa4>
 801159a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801159e:	d1c5      	bne.n	801152c <__swsetup_r+0x24>
 80115a0:	bd38      	pop	{r3, r4, r5, pc}
 80115a2:	0799      	lsls	r1, r3, #30
 80115a4:	bf58      	it	pl
 80115a6:	6962      	ldrpl	r2, [r4, #20]
 80115a8:	60a2      	str	r2, [r4, #8]
 80115aa:	e7f4      	b.n	8011596 <__swsetup_r+0x8e>
 80115ac:	2000      	movs	r0, #0
 80115ae:	e7f7      	b.n	80115a0 <__swsetup_r+0x98>
 80115b0:	20000034 	.word	0x20000034

080115b4 <_raise_r>:
 80115b4:	291f      	cmp	r1, #31
 80115b6:	b538      	push	{r3, r4, r5, lr}
 80115b8:	4605      	mov	r5, r0
 80115ba:	460c      	mov	r4, r1
 80115bc:	d904      	bls.n	80115c8 <_raise_r+0x14>
 80115be:	2316      	movs	r3, #22
 80115c0:	6003      	str	r3, [r0, #0]
 80115c2:	f04f 30ff 	mov.w	r0, #4294967295
 80115c6:	bd38      	pop	{r3, r4, r5, pc}
 80115c8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80115ca:	b112      	cbz	r2, 80115d2 <_raise_r+0x1e>
 80115cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80115d0:	b94b      	cbnz	r3, 80115e6 <_raise_r+0x32>
 80115d2:	4628      	mov	r0, r5
 80115d4:	f000 f830 	bl	8011638 <_getpid_r>
 80115d8:	4622      	mov	r2, r4
 80115da:	4601      	mov	r1, r0
 80115dc:	4628      	mov	r0, r5
 80115de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80115e2:	f000 b817 	b.w	8011614 <_kill_r>
 80115e6:	2b01      	cmp	r3, #1
 80115e8:	d00a      	beq.n	8011600 <_raise_r+0x4c>
 80115ea:	1c59      	adds	r1, r3, #1
 80115ec:	d103      	bne.n	80115f6 <_raise_r+0x42>
 80115ee:	2316      	movs	r3, #22
 80115f0:	6003      	str	r3, [r0, #0]
 80115f2:	2001      	movs	r0, #1
 80115f4:	e7e7      	b.n	80115c6 <_raise_r+0x12>
 80115f6:	2100      	movs	r1, #0
 80115f8:	4620      	mov	r0, r4
 80115fa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80115fe:	4798      	blx	r3
 8011600:	2000      	movs	r0, #0
 8011602:	e7e0      	b.n	80115c6 <_raise_r+0x12>

08011604 <raise>:
 8011604:	4b02      	ldr	r3, [pc, #8]	@ (8011610 <raise+0xc>)
 8011606:	4601      	mov	r1, r0
 8011608:	6818      	ldr	r0, [r3, #0]
 801160a:	f7ff bfd3 	b.w	80115b4 <_raise_r>
 801160e:	bf00      	nop
 8011610:	20000034 	.word	0x20000034

08011614 <_kill_r>:
 8011614:	b538      	push	{r3, r4, r5, lr}
 8011616:	2300      	movs	r3, #0
 8011618:	4d06      	ldr	r5, [pc, #24]	@ (8011634 <_kill_r+0x20>)
 801161a:	4604      	mov	r4, r0
 801161c:	4608      	mov	r0, r1
 801161e:	4611      	mov	r1, r2
 8011620:	602b      	str	r3, [r5, #0]
 8011622:	f7f2 fad7 	bl	8003bd4 <_kill>
 8011626:	1c43      	adds	r3, r0, #1
 8011628:	d102      	bne.n	8011630 <_kill_r+0x1c>
 801162a:	682b      	ldr	r3, [r5, #0]
 801162c:	b103      	cbz	r3, 8011630 <_kill_r+0x1c>
 801162e:	6023      	str	r3, [r4, #0]
 8011630:	bd38      	pop	{r3, r4, r5, pc}
 8011632:	bf00      	nop
 8011634:	20005dd4 	.word	0x20005dd4

08011638 <_getpid_r>:
 8011638:	f7f2 bac4 	b.w	8003bc4 <_getpid>

0801163c <__swhatbuf_r>:
 801163c:	b570      	push	{r4, r5, r6, lr}
 801163e:	460c      	mov	r4, r1
 8011640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011644:	b096      	sub	sp, #88	@ 0x58
 8011646:	4615      	mov	r5, r2
 8011648:	2900      	cmp	r1, #0
 801164a:	461e      	mov	r6, r3
 801164c:	da0c      	bge.n	8011668 <__swhatbuf_r+0x2c>
 801164e:	89a3      	ldrh	r3, [r4, #12]
 8011650:	2100      	movs	r1, #0
 8011652:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011656:	bf14      	ite	ne
 8011658:	2340      	movne	r3, #64	@ 0x40
 801165a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801165e:	2000      	movs	r0, #0
 8011660:	6031      	str	r1, [r6, #0]
 8011662:	602b      	str	r3, [r5, #0]
 8011664:	b016      	add	sp, #88	@ 0x58
 8011666:	bd70      	pop	{r4, r5, r6, pc}
 8011668:	466a      	mov	r2, sp
 801166a:	f000 f849 	bl	8011700 <_fstat_r>
 801166e:	2800      	cmp	r0, #0
 8011670:	dbed      	blt.n	801164e <__swhatbuf_r+0x12>
 8011672:	9901      	ldr	r1, [sp, #4]
 8011674:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011678:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801167c:	4259      	negs	r1, r3
 801167e:	4159      	adcs	r1, r3
 8011680:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011684:	e7eb      	b.n	801165e <__swhatbuf_r+0x22>

08011686 <__smakebuf_r>:
 8011686:	898b      	ldrh	r3, [r1, #12]
 8011688:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801168a:	079d      	lsls	r5, r3, #30
 801168c:	4606      	mov	r6, r0
 801168e:	460c      	mov	r4, r1
 8011690:	d507      	bpl.n	80116a2 <__smakebuf_r+0x1c>
 8011692:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011696:	6023      	str	r3, [r4, #0]
 8011698:	6123      	str	r3, [r4, #16]
 801169a:	2301      	movs	r3, #1
 801169c:	6163      	str	r3, [r4, #20]
 801169e:	b003      	add	sp, #12
 80116a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116a2:	ab01      	add	r3, sp, #4
 80116a4:	466a      	mov	r2, sp
 80116a6:	f7ff ffc9 	bl	801163c <__swhatbuf_r>
 80116aa:	9f00      	ldr	r7, [sp, #0]
 80116ac:	4605      	mov	r5, r0
 80116ae:	4630      	mov	r0, r6
 80116b0:	4639      	mov	r1, r7
 80116b2:	f7fe feb9 	bl	8010428 <_malloc_r>
 80116b6:	b948      	cbnz	r0, 80116cc <__smakebuf_r+0x46>
 80116b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80116bc:	059a      	lsls	r2, r3, #22
 80116be:	d4ee      	bmi.n	801169e <__smakebuf_r+0x18>
 80116c0:	f023 0303 	bic.w	r3, r3, #3
 80116c4:	f043 0302 	orr.w	r3, r3, #2
 80116c8:	81a3      	strh	r3, [r4, #12]
 80116ca:	e7e2      	b.n	8011692 <__smakebuf_r+0xc>
 80116cc:	89a3      	ldrh	r3, [r4, #12]
 80116ce:	6020      	str	r0, [r4, #0]
 80116d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80116d4:	81a3      	strh	r3, [r4, #12]
 80116d6:	9b01      	ldr	r3, [sp, #4]
 80116d8:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80116dc:	b15b      	cbz	r3, 80116f6 <__smakebuf_r+0x70>
 80116de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80116e2:	4630      	mov	r0, r6
 80116e4:	f000 f81e 	bl	8011724 <_isatty_r>
 80116e8:	b128      	cbz	r0, 80116f6 <__smakebuf_r+0x70>
 80116ea:	89a3      	ldrh	r3, [r4, #12]
 80116ec:	f023 0303 	bic.w	r3, r3, #3
 80116f0:	f043 0301 	orr.w	r3, r3, #1
 80116f4:	81a3      	strh	r3, [r4, #12]
 80116f6:	89a3      	ldrh	r3, [r4, #12]
 80116f8:	431d      	orrs	r5, r3
 80116fa:	81a5      	strh	r5, [r4, #12]
 80116fc:	e7cf      	b.n	801169e <__smakebuf_r+0x18>
	...

08011700 <_fstat_r>:
 8011700:	b538      	push	{r3, r4, r5, lr}
 8011702:	2300      	movs	r3, #0
 8011704:	4d06      	ldr	r5, [pc, #24]	@ (8011720 <_fstat_r+0x20>)
 8011706:	4604      	mov	r4, r0
 8011708:	4608      	mov	r0, r1
 801170a:	4611      	mov	r1, r2
 801170c:	602b      	str	r3, [r5, #0]
 801170e:	f7f2 fac1 	bl	8003c94 <_fstat>
 8011712:	1c43      	adds	r3, r0, #1
 8011714:	d102      	bne.n	801171c <_fstat_r+0x1c>
 8011716:	682b      	ldr	r3, [r5, #0]
 8011718:	b103      	cbz	r3, 801171c <_fstat_r+0x1c>
 801171a:	6023      	str	r3, [r4, #0]
 801171c:	bd38      	pop	{r3, r4, r5, pc}
 801171e:	bf00      	nop
 8011720:	20005dd4 	.word	0x20005dd4

08011724 <_isatty_r>:
 8011724:	b538      	push	{r3, r4, r5, lr}
 8011726:	2300      	movs	r3, #0
 8011728:	4d05      	ldr	r5, [pc, #20]	@ (8011740 <_isatty_r+0x1c>)
 801172a:	4604      	mov	r4, r0
 801172c:	4608      	mov	r0, r1
 801172e:	602b      	str	r3, [r5, #0]
 8011730:	f7f2 fac0 	bl	8003cb4 <_isatty>
 8011734:	1c43      	adds	r3, r0, #1
 8011736:	d102      	bne.n	801173e <_isatty_r+0x1a>
 8011738:	682b      	ldr	r3, [r5, #0]
 801173a:	b103      	cbz	r3, 801173e <_isatty_r+0x1a>
 801173c:	6023      	str	r3, [r4, #0]
 801173e:	bd38      	pop	{r3, r4, r5, pc}
 8011740:	20005dd4 	.word	0x20005dd4

08011744 <_init>:
 8011744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011746:	bf00      	nop
 8011748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801174a:	bc08      	pop	{r3}
 801174c:	469e      	mov	lr, r3
 801174e:	4770      	bx	lr

08011750 <_fini>:
 8011750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011752:	bf00      	nop
 8011754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011756:	bc08      	pop	{r3}
 8011758:	469e      	mov	lr, r3
 801175a:	4770      	bx	lr
